<!-- -*- sgml -*- -->

<chapter id="svn.customization">
      <!--
  <title>Customizing Your Subversion Experience</title>
      -->
  <title>定制自己的 Subversion 体验</title>

      <!--
  <para>Version control can be a complex subject, as much art as
    science, that offers myriad ways of getting stuff done.
    Throughout this book, you've read of the various Subversion
    command-line client subcommands and the options that modify their
    behavior.  In this chapter, we'll look into still more ways to
    customize the way Subversion works for you&mdash;setting up the
    Subversion runtime configuration, using external helper
    applications, Subversion's interaction with the operating system's
    configured locale, and so on.</para>
      -->
  <para>版本控制是一个很复杂的主题, 它提供了完成任务的无数种方法. 本书已经
    介绍了 Subversion 命令行客户端的各个子命令, 以及它们各自的选项, 本章将
    介绍更多的定制 Subversion 的方法, 包括 Subversion 运行时配置, 外部程序,
    Subversion 与操作系统本地化的交互等.</para>

  <!-- TODO(cmpilato): Gut the runtime config stuff like I did the
       property stuff, making larger topical sections to which the
       runtime config stuff generally refers.  Like already exists for
       external diff/diff3, add, for example, a section on external
       editors. -->

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.advanced.confarea">
      <!--
    <title>Runtime Configuration Area</title>
      -->
    <title>运行时配置区域</title>
    
      <!--
    <para>Subversion provides many optional behaviors that the user can
      control.  Many of these options are of the kind
      that a user would wish to apply to all Subversion operations.
      So, rather than forcing users to remember command-line arguments
      for specifying these options and to use them for every
      operation they perform, Subversion uses configuration files,
      segregated into a Subversion configuration area.</para>
      -->
    <para>Subversion 为用户提供了许多可配置的行为, 有很多选项, 用户希望它们
      能被应用到所有的 Subversion 操作中. 为了方便用户, Subversion 提供了配置
      文件, 这些配置文件被单独地放在了 Subversion 配置区域, 这就避免了用户每
      次都要在命令行上指定参数.</para>

    <para>
      <indexterm>
        <primary>runtime configuration (运行时配置)</primary>
        </indexterm>
        Subversion <firstterm>运行时配置区域</firstterm> (
        <firstterm>runtime configuration area</firstterm>) 是一个由选项名和
        选项值组成的双层体系, 第一层是一个目录, 目录里包含了许多配置文件,每
        个配置文件是 INI 格式的文本文件, 文件里的 <quote>节</quote> 是双层
        体系的第二层. 用户可以使用任意一个文本编辑器 (例如 Emacs 或 vi) 编辑
        这些配置文件, 文件里的配置指令将被客户端命令行工具读取, 用来指定客户
        端命令行工具的行为.</para>
      <!--
        The Subversion <firstterm>runtime configuration
      area</firstterm> is a two-tiered hierarchy of option names and
      their values.  Usually, this boils down to a special directory
      that contains configuration files (the first tier), which are
      just text files in standard INI format
      where <quote>sections</quote> provide the second tier.  You can
      easily edit these files using your favorite text editor (such as
      Emacs or vi), and they contain directives read by the client to
      determine which of several optional behaviors the user
      prefers.</para>
      -->

    <!-- =============================================================== -->
    <sect2 id="svn.advanced.confarea.layout">
      <!--
      <title>Configuration Area Layout</title>
      -->
      <title>配置区域的布局</title>

      <para>
        <indexterm>
          <primary>runtime configuration (运行时配置)</primary>
          <secondary>per-user (每用户的)</secondary>
        </indexterm>
        客户端命令行工具 <command>svn</command> 首次运行时, 它将创建一个
        每用户配置区域. 在类 Unix 系统上, 每用户配置区域是一个在用户家目录下
        的 <filename>.subversion</filename> 目录. 在 Win32 系统上, 配置区域是
        一个名为 <filename>Subversion</filename> 的文件夹, 通常放在用户配置
        文件目录 (通常是一个隐藏目录) 的 <filename>Application Data</filename>
        区域内, 而 <filename>Application Data</filename> 的确切位置在每
        个 Win32 系统上可能都不太一样, 它的确切位置由系统注册表 (Windows
        Registry) 决定 <footnote><para>环境变量 <literal>APPDATA</literal> 的
            值指出了 <filename>Application Data</filename> 区域的路径, 所以说
            用户总是可以用 <filename>%APPDATA%\Subversion</filename> 引用
            Subversion 每用户配置区域的路径.</para></footnote>. 在后面的内容里,
        我们将用 <filename>.subversion</filename> 指代 Subversion 的每用户
        配置区域.</para>
      <!--
        The first time the <command>svn</command> command-line
        client is executed, it creates a per-user configuration area.
        On Unix-like systems, this area appears as a directory
        named <filename>.subversion</filename> in the user's home
        directory.  On Win32 systems, Subversion creates a folder
        named <filename>Subversion</filename>, typically inside
        the <filename>Application Data</filename> area of the user's
        profile directory (which, by the way, is usually a hidden
        directory).  However, on this platform, the exact location
        differs from system to system and is dictated by the Windows
        Registry.<footnote><para>The <literal>APPDATA</literal>
        environment variable points to the <filename>Application
        Data</filename> area, so you can always refer to this folder
        as <filename>%APPDATA%\Subversion</filename>.</para></footnote>
        We will refer to the per-user configuration area using its
        Unix name, <filename>.subversion</filename>.</para>
      -->

      <para>
        <indexterm>
          <primary>runtime configuration (运行时配置)</primary>
          <secondary>system-wide (全局的)</secondary>
        </indexterm>
        除了每用户配置区域, Subversion 还会考虑全局配置区域, 全局配置区域
        允许管理员为所有用户设定一个默认配置. 注意, 每用户配置区域的设置会
        覆盖全局配置区域的设置, 而 <command>svn</command> 的命令行参数则会
        覆盖每用户配置区域的设置. 对于类 Unix 系统, 全局配置区域在
        <filename>/etc/subversion</filename>; 对于 Windows 系统, 全局配置区域
        在 <filename>Application Data</filename> (同样, 它的确切位置由系统注
        册表决定) 的 <filename>Subversion</filename> 目录内. 与每用户配置区域不
        同的是 <command>svn</command> 不会在启动时尝试创建全局配置区域.</para>
      <!--
        In addition to the per-user configuration area, Subversion
        also recognizes the existence of a system-wide configuration
        area.  This gives system administrators the ability to
        establish defaults for all users on a given machine.  Note
        that the system-wide configuration area alone does not dictate
        mandatory policy&mdash;the settings in the per-user
        configuration area override those in the system-wide one, and
        command-line arguments supplied to the <command>svn</command>
        program have the final word on behavior.  On Unix-like
        platforms, the system-wide configuration area is
        expected to be the <filename>/etc/subversion</filename>
        directory; on Windows machines, it looks for a
        <filename>Subversion</filename> directory inside the common
        <filename>Application Data</filename> location (again, as
        specified by the Windows Registry).  Unlike the per-user
        case, the <command>svn</command> program does not attempt
        to create the system-wide configuration area.</para>
      -->

      <!--
      <para>The per-user configuration area currently contains three
        files&mdash;two configuration files (<filename>config</filename> and
        <filename>servers</filename>), and a <filename>README.txt</filename> 
        file, which describes the INI format.  At the time of their
        creation, the files contain default values for each of the
        supported Subversion options, mostly commented out and grouped
        with textual descriptions about how the values for the key
        affect Subversion's behavior.  To change a certain behavior,
        you need only to load the appropriate configuration file into
        a text editor, and to modify the desired option's value.  If at
        any time you wish to have the default configuration settings
        restored, you can simply remove (or rename) your configuration
        directory and then run some innocuous <command>svn</command>
        command, such as <userinput>svn - -version</userinput>.  A new
        configuration directory with the default contents will be
        created.</para>
      -->
      <para>每用户配置区域包含了三个文件&mdash;两个配置文件
        (<filename>config</filename> 和 <filename>servers</filename>) 和
        一个 <filename>README.txt</filename>, <filename>README.txt</filename>
        介绍了 INI 格式的语法. 每用户配置区域被创建时, 配置文件包含了
        Subversion 所支持的选项的默认值, 大多数内容都被分组注释, 注释描述了
        选项值将会如何影响 Subversion 的行为. 为了修改配置, 用户只需要用文本
        编辑器打开配置文件, 然后修改选项的值. 如果你想恢复每用户配置区域的
        默认配置, 只需要删除 (或移动) 每用户配置区域的目录, 然后随便执行一
        个无害的 <command>svn</command> 命令, 例如
        <userinput>svn --version</userinput>, 此时就会重新生成包含了默认配置
        的每用户配置区域.</para>

      <para>
        <indexterm>
          <primary>runtime configuration (运行时配置)</primary>
          <secondary>command-line override (命令行覆盖)</secondary>
        </indexterm>
        Subversion 还允许用户通过命令行选项 <option>--config-option</option>
        修改个别的配置选项, 如果用户想要临时修改配置, 那么这个选项就会很有用.
        关于 <option>--config-option</option> 的详细用法, 见
        <xref linkend="svn.ref.svn.sw"/>.</para>
      <!--
        Subversion also allows you to override individual
        configuration option values at the command line via
        the <option>- -config-option</option> option, which is
        especially useful if you need to make a (very) temporary
        change in behavior.  For more about this option's proper
        usage, see <xref linkend="svn.ref.svn.sw"/>.</para>
      -->

      <!--
      <para>The per-user configuration area also contains a cache of
        authentication data.  The <filename>auth</filename> directory
        holds a set of subdirectories that contain pieces of cached
        information used by Subversion's various supported
        authentication methods.  This directory is created in such a
        way that only the user herself has permission to read its
        contents.</para>
      -->
      <para>每用户配置区域还包含了认证数据的缓存. 目录
        <filename>auth</filename> 内含有多个子目录, 这些子目录包含了
        Subversion 支持的不同认证方式所需的缓存信息. 目录
        <filename>auth</filename> 的权限配置是仅允许用户进行访问.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.advanced.confarea.windows-registry">
      <!--
      <title>Configuration and the Windows Registry</title>
      -->
      <title>配置与 Windows 系统注册表</title>

      <para>
        <indexterm>
          <primary>runtime configuration (运行时配置)</primary>
          <secondary>Windows Registry (Windows 注册表)</secondary>
        </indexterm>
        除了通常的基于 INI 格式的配置文件, 在 Windows 平台上, Subversion 还
        可以使用系统注册表存放配置选项. 选项的名字和值与 INI 文件相同,
        <quote>文件/节</quote> 的层次结构仍然保留了下来, 不过是以另一种形式
        呈现&mdash;文件与节变成了注册表键树的层次.</para>
      <!--
        In addition to the usual INI-based configuration
        area, Subversion clients running on Windows platforms may also
        use the Windows Registry to hold the configuration data.  The
        option names and their values are the same as in the INI
        files.  The <quote>file/section</quote> hierarchy is preserved
        as well, though addressed in a slightly different
        fashion&mdash;in this schema, files and sections are just
        levels in the Registry key tree.</para>
      -->

      <!--
      <para>Subversion looks for system-wide configuration values
        under the
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion</literal>
        key.  For example, the <literal>global-ignores</literal> option,
        which is in the <literal>miscellany</literal> section of the
        <filename>config</filename> file, would be found at
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Config\Miscellany\global-ignores</literal>.
        Per-user configuration values should be stored under
        <literal>HKEY_CURRENT_USER\Software\Tigris.org\Subversion</literal>.</para>
      -->
      <para>Subversion 在注册表的
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion</literal>
        里搜索全局配置, 例如选项 <literal>global-ignores</literal> 在文件
        <filename>config</filename> 里的位置是在
        <literal>[miscellany]</literal> 节内, 对应的注册表位置是
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Config\Miscellany\global-ignores</literal>.
        每用户的配置在
        <literal>HKEY_CURRENT_USER\Software\Tigris.org\Subversion</literal>.</para>

      <!--
      <para>Registry-based configuration options are parsed
        <emphasis>before</emphasis> their file-based counterparts, so
        they are overridden by values found in the configuration files.  In
        other words, Subversion looks for configuration information in
        the following locations on a Windows system; lower-numbered
        locations take precedence over higher-numbered locations:</para>
      -->
      <para>基于注册表的配置在基于文件的配置 <emphasis>之前</emphasis> 被读取,
        因此配置文件将会覆盖注册表的配置. 换句话说, 在 Windows 系统中,
        Subversion 会在下面这些位置搜索配置信息, 编号小的位置的配置将会覆盖
        编号大的配置:</para>
      
      <orderedlist>
        <listitem>
      <!--
          <para>Command-line options</para>
      -->
          <para>命令行选项</para>
        </listitem>
        <listitem>
      <!--
          <para>The per-user INI files</para>
      -->
          <para>每用户的 INI 文件</para>
        </listitem>
        <listitem>
      <!--
          <para>The per-user Registry values</para>
      -->
          <para>每用户的系统注册表</para>
        </listitem>
        <listitem>
      <!--
          <para>The system-wide INI files</para>
      -->
          <para>全局的 INI 文件</para>
        </listitem>
        <listitem>
      <!--
          <para>The system-wide Registry values</para>
      -->
          <para>全局的系统注册表</para>
        </listitem>
      </orderedlist>

      <!--
      <para>Also, the Windows Registry doesn't really support the
        notion of something being <quote>commented out.</quote>
        However, Subversion will ignore any option key whose name
        begins with a hash (<literal>#</literal>) character.  This
        allows you to effectively comment out a Subversion option
        without deleting the entire key from the Registry, obviously
        simplifying the process of restoring that option.</para>
      -->
      <para>Windows 系统注册表实际上不支持用于注释的记号, 但 Subversion
        自己会忽略所有名字以井号 (<literal>#</literal>) 开始的键, 在效果上
        等价于把选项注释掉, 这就避免了用户仅仅为了删除选项而把对应的键从注册
        表中删除, 也简化了恢复选项的操作.</para>

      <!--
      <para>The <command>svn</command> command-line client never
        attempts to write to the Windows Registry and will not attempt
        to create a default configuration area there.  You can create
        the keys you need using the <command>REGEDIT</command>
        program.  Alternatively, you can create a
        <filename>.reg</filename> file (such as the one in <xref
        linkend="svn.advanced.confarea.windows-registry.ex-1" />), and
        then double-click on that file's icon in the Explorer shell,
        which will cause the data to be merged into your
        Registry.</para>
      -->
      <para>客户端命令行工具 <command>svn</command> 从来不会修改 Windows
        系统注册表, 也不会在首次运行时在注册表内创建默认配置, 用户需要自己
        使用 Windows 工具 <command>REGEDIT</command> 创建所需的键. 另外, 用户
        也可以自己编写一个 <filename>.reg</filename> 文件 (例如 <xref
          linkend="svn.advanced.confarea.windows-registry.ex-1" /> 所展示的
        那样), 然后在文件浏览器内双击该文件的图标, 这将导致文件内的数据被合并
        到系统注册表内.</para>

      <example id="svn.advanced.confarea.windows-registry.ex-1">
      <!--
        <title>Sample registration entries (.reg) file</title>
      -->
        <title>系统注册表项文件 (.reg) 的一个示例</title>

        <programlisting>
REGEDIT4

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\groups]

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\global]
"#http-auth-types"="basic;digest;negotiate"
"#http-compression"="yes"
"#http-library"=""
"#http-proxy-exceptions"=""
"#http-proxy-host"=""
"#http-proxy-password"=""
"#http-proxy-port"=""
"#http-proxy-username"=""
"#http-timeout"="0"
"#neon-debug-mask"=""
"#ssl-authority-files"=""
"#ssl-client-cert-file"=""
"#ssl-client-cert-password"=""
"#ssl-pkcs11-provider"=""
"#ssl-trust-default-ca"=""
"#store-auth-creds"="yes"
"#store-passwords"="yes"
"#store-plaintext-passwords"="ask"
"#store-ssl-client-cert-pp"="yes"
"#store-ssl-client-cert-pp-plaintext"="ask"
"#username"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auth]
"#password-stores"="windows-cryptoapi"

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\helpers]
"#diff-cmd"=""
"#diff-extensions"="-u"
"#diff3-cmd"=""
"#diff3-has-program-arg"=""
"#editor-cmd"="notepad"
"#merge-tool-cmd"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\tunnels]

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\miscellany]
"#enable-auto-props"="no"
"#global-ignores"="*.o *.lo *.la *.al .libs *.so *.so.[0-9]* *.a *.pyc *.pyo *.rej *~ #*# .#* .*.swp .DS_Store"
"#interactive-conflicts"="yes"
"#log-encoding"=""
"#mime-types-file"=""
"#no-unlock"="no"
"#preserved-conflict-file-exts"="doc ppt xls od?"
"#use-commit-times"="no"

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auto-props]
</programlisting>
      </example>

      <!--
      <para><xref linkend="svn.advanced.confarea.windows-registry.ex-1"/>
        shows the contents of a <filename>.reg</filename> file, which
        contains some of the most commonly used configuration options
        and their default values.  Note the presence of both
        system-wide (for network proxy-related options) and per-user
        settings (editor programs and password storage, among others).
        Also note that all the options are effectively commented out.
        You need only to remove the hash (<literal>#</literal>)
        character from the beginning of the option names and set the
        values as you desire.</para>
      -->
      <para><xref linkend="svn.advanced.confarea.windows-registry.ex-1"/>
        展示了一个 <filename>.reg</filename> 文件, 文件内包含了最常用到的配置
        选项以及它们的默认值. 注意, 文件同时包含了全局配置 (与网络代理相关的
        选项) 与每用户配置 (例如编辑器和密码缓存等), 而且所有的选项都被注释了,
        为了修改配置, 你只需要删除选项名前的井号 (<literal>#</literal>), 然后
        再修改选项值.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.advanced.confarea.opts">
      <!--
      <title>Runtime Configuration Options</title>
      -->
      <title>运行时配置选项</title>

      <para>
        <indexterm>
          <primary>runtime configuration (运行时配置)</primary>
          <secondary>options (选项)</secondary>
        </indexterm>
        本节我们将介绍 Subversion 目前支持的运行时配置选项.</para>
      <!--
        In this section, we will discuss the specific
        runtime configuration options that Subversion currently 
        supports.</para>
      -->

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.advanced.confarea.opts.config">
      <!--
        <title>General configuration</title>
      -->
        <title>通用配置选项</title>

      <!--
        <para>The <filename>config</filename> file contains the rest
          of the currently available Subversion runtime
          options&mdash;those not related to networking.  There are
          only a few options in use as of this writing, but they are
          again grouped into sections in expectation of future
          additions.</para>
      -->
        <para>文件 <filename>config</filename> 包含了与网络无关的运行时配置
          选项, 到目前为止用到的配置选项并不多, 为了方便今后扩展, 这些选项
          被分组到了不同的节内.</para>

      <!--
        <para>The <literal>[auth]</literal> section contains settings
          related to Subversion's authentication and authorization
          against the repository.  It contains the following:</para>
      -->
        <para><literal>[auth]</literal> 节包含了和仓库认证与授权有关的配置,
          它包含的配置选项有:</para>

        <variablelist>
          <varlistentry>
	    <term><literal>password-stores</literal></term>
            <listitem>
              <para>选项值是由逗号分隔的列表, 列表指出了当 Subversion 存放
                和检索缓存的认证证书时, 应该使用操作系统提供的哪些方法, 以及
                这些方法的优先级. 默认值是 <literal>gnome-keyring, kwallet,
                  keychain, gpg-agent, windows-crypto-api</literal>, 分别表示
                GNOME Keyring, KDE Wallet, Mac OS Keychain, GnuPG Agent
                和 Microsoft Windows 密码 API. 如果列表中出现了操作系统不支持
                的方法, 该方法将被忽略.</para>
      <!--
              <para>This comma-delimited list specifies which (if any)
                system-provided password stores Subversion should
                attempt to use when saving and retrieving cached
                authentication credentials, and in what order
                Subversion should prefer them.  The default value is
                <literal>gnome-keyring, kwallet, keychain, gpg-agent,
                windows-crypto-api</literal>, representing the GNOME
                Keyring, KDE Wallet, Mac OS X Keychain, GnuPG Agent,
                and Microsoft Windows cryptography API, respectively.
                Listed stores which are not available on the system
                are ignored.</para>
      -->
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>store-passwords</literal></term>
            <listitem>
              <para>该选项已经被 <filename>config</filename> 弃用, 它现在
                在文件 <filename>servers</filename> 内, 作为一个每服务器配置项,
                见 <xref linkend="svn.advanced.confarea.opts.servers"/>.</para>
      <!--
              <para>This option has been deprecated from
                the <filename>config</filename> file.  It now lives as
                a per-server configuration item in
                the <filename>servers</filename> configuration area.
                See <xref linkend="svn.advanced.confarea.opts.servers"/>
                for details.</para>
      -->
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>store-auth-creds</literal></term>
            <listitem>
      <!--
              <para>This option has been deprecated from
                the <filename>config</filename> file.  It now lives as
                a per-server configuration item in
                the <filename>servers</filename> configuration area.
                See <xref linkend="svn.advanced.confarea.opts.servers"/>
                for details.</para>
      -->
              <para>该选项已经被 <filename>config</filename> 弃用, 它现在
                在文件 <filename>servers</filename> 内, 作为一个每服务器配置项,
                见 <xref linkend="svn.advanced.confarea.opts.servers"/>.</para>
            </listitem>
          </varlistentry>
        </variablelist>

      <!--
        <para>The <literal>[helpers]</literal> section controls which
          external applications Subversion uses to accomplish its
          tasks.  Valid options in this section are:</para>
      -->
        <para><literal>[helpers]</literal> 节控制 Subversion 所使用的外部
          程序, 它包含的配置选项有:</para>

        <variablelist>
          <varlistentry>
            <term><literal>diff-cmd</literal></term>
            <listitem>
      <!--
              <para>This specifies the absolute path of a differencing
                program, used when Subversion generates
                <quote>diff</quote> output (such as when using the
                <command>svn diff</command> command).  By default,
                Subversion uses an internal differencing
                library&mdash;setting this option will cause it to
                perform this task using an external program.  See
                <xref linkend="svn.advanced.externaldifftools"/> for
                more details on using such programs.</para>
      -->
              <para>指定差异比较工具的绝对路径, Subversion 在生成
                <quote>差异</quote> 输出时 (例如执行命令 <command>svn
                  diff</command>) 将会用到该工具. 默认情况下, Subversion
                使用的是自己内部的差异比较库函数来生成差异输出&mdash;设置该
                选项将导致 Subversion 转而使用外部差异比较工具. 关于如何使用
                外部差异比较工具的更多信息, 见
                <xref linkend="svn.advanced.externaldifftools"/>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff-extensions</literal></term>
            <listitem>
      <!--
              <para>Like the <option>- -extensions</option>
                (<option>-x</option>) command-line option, this
                specifies additional options passed to the file
                content differencing engine.  The set of meaningful
                extension options differs depending on whether the
                client is using Subversion's internal differencing
                engine or an external mechanism.  See the output
                of <userinput>svn help diff</userinput> for details.
                The default value for this option
                is <literal>-u</literal>.</para>
      -->
              <para>就像命令行选项 <option>--extensions</option>
                (<option>-x</option>), 该选项向差异比较引擎 (内部的或外部的)
                传递额外的参数. 选项的有效值与 Subversion 所使用的差异比较
                引擎有关, 更多的细节见 <userinput>svn help diff</userinput>
                的输出. 该选项的默认值是 <literal>-u</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff3-cmd</literal></term>
            <listitem>
      <!--
              <para>This specifies the absolute path of a three-way
                differencing program.  Subversion uses this program to
                merge changes made by the user with those received
                from the repository.  By default, Subversion uses an
                internal differencing library&mdash;setting this
                option will cause it to perform this task using an
                external program.  See <xref
                linkend="svn.advanced.externaldifftools"/> for more
                details on using such programs.</para>
      -->
              <para>该选项指定三路差异比较工具的绝对路径. 当工作副本从服务器
                接收更新时, Subversion 将使用该工具把服务器上的更新合并到本地.
                默认情况下 Subversion 使用的是自己内部的差异比较库函数来合并
                更新&mdash;设置该选项将导致 Subversion 转而使用外部工具来完成
                合并. 关于如何使用三路差异比较工具的更多信息, 见
                <xref linkend="svn.advanced.externaldifftools"/>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff3-has-program-arg</literal></term>
            <listitem>
      <!--
              <para>This flag should be set to <literal>true</literal>
                if the program specified by the
                <literal>diff3-cmd</literal> option accepts a
                <option>- -diff-program</option> command-line
                parameter.</para>
      -->
              <para>如果由选项 <literal>diff3-cmd</literal> 指定的程序支持
                命令行参数 <option>--diff-program</option>, 那么就应该把
                <literal>diff3-has-program-arg</literal> 设置成
                <literal>true</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>editor-cmd</literal></term>
            <listitem>
      <!--
              <para>This specifies the program Subversion will use to
                query the user for certain types of textual metadata
                or when interactively resolving conflicts.  See
                <xref linkend="svn.advanced.externaleditors"/> for
                more details on using external text editors with
                Subversion.</para>
      -->
              <para>指定文本编辑器程序. 当 Subversion 向用户请求输入文本,
                或者交互式地解决冲突时将会用到该程序. 关于 Subversion 使用
                外部编辑器的更多信息, 见 <xref
                  linkend="svn.advanced.externaleditors"/>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>merge-tool-cmd</literal></term>
            <listitem>
      <!--
              <para>This specifies the program that Subversion will
                use to perform three-way merge operations on your
                versioned files.  See <xref
                linkend="svn.advanced.externaldifftools"/> for more
                details on using such programs.</para>
      -->
              <para>指定一个合并工具, 用于 Subversion 执行三路合并操作.
                关于这种工具的更多信息, 见 <xref
                  linkend="svn.advanced.externaldifftools"/>.</para>
            </listitem>
          </varlistentry>
        </variablelist>

      <!--
        <para>The <literal>[tunnels]</literal> section allows you to
          define new tunnel schemes for use with
          <command>svnserve</command> and <literal>svn://</literal>
          client connections.  For more details, see <xref
          linkend="svn.serverconfig.svnserve.sshauth"/>.</para>
      -->
      <para><literal>[tunnels]</literal> 节允许用户定义新的隧道方案, 用
        于 <command>svnserve</command> 和 <literal>svn://</literal> 的
        客户端连接, 更多的细节见 <xref
          linkend="svn.serverconfig.svnserve.sshauth"/>.</para>

      <!--
        <para>The <literal>[miscellany]</literal> section is where
          everything that doesn't belong elsewhere winds
          up.<footnote><para>Anyone for potluck
          dinner?</para></footnote>  In this section, you can
          find:</para>
      -->
        <para><literal>[miscellany]</literal> 节则包含了不属于其他地方的
          所有选项, 在 <literal>[miscellany]</literal> 里, 你可以找到:</para>

        <variablelist>
          <varlistentry>
            <term><literal>enable-auto-props</literal></term>
            <listitem>
      <!--
              <para>This instructs Subversion to automatically set
                properties on newly added or imported files.  The
                default value is <literal>no</literal>, so set this to
                <literal>yes</literal> to enable this feature.
                The <literal>[auto-props]</literal> section of this file
                specifies which properties are to be set on which files.</para>
      -->
              <para>指示 Subversion 为新增和导入的文件自动设置属性. 选项的默认
                值是 <literal>no</literal>, 将其设置成 <literal>yes</literal>
                将开启自动属性设置. 配置文件内的
                <literal>[auto-props]</literal> 节用于指定哪些文件应该设置什么
                样的属性.</para>
            </listitem>            
          </varlistentry>
          <varlistentry>
            <term><literal>global-ignores</literal></term>
            <listitem>
      <!--
              <para>When running the <command>svn status</command>
                command, Subversion lists unversioned files and
                directories along with the versioned ones, annotating
                them with a <literal>?</literal> character (see <xref
                linkend="svn.tour.cycle.examine.status" />).  Sometimes it can
                be annoying to see uninteresting, unversioned
                items&mdash;for example, object files that result from
                a program's compilation&mdash;in this display.  The
                <literal>global-ignores</literal> option is a list of
                whitespace-delimited globs that describe the names of
                files and directories that Subversion should not
                display unless they are versioned.  The default value
                is <literal>*.o *.lo *.la *.al .libs *.so *.so.[0-9]*
                *.a *.pyc *.pyo *.rej *~ #*# .#* .*.swp
                .DS_Store</literal>.</para>
      -->
            <para>执行命令 <command>svn status</command> 时, 除了被版本控制
              的文件外, Subversion 同时还会列出未被版本控制的文件, 但是这些
              文件的名字前会出现一个 <literal>?</literal> 字符 (见 <xref
                linkend="svn.tour.cycle.examine.status" />). 列出这些未被版本
              控制的项目有时候会让人感到讨厌&mdash;例如编译过程中生成的目标
              文件就没必要列出来. 选项 <literal>global-ignores</literal> 包含
              了由空白字符分隔的文本表达式列表, 如果某个文件的名字与这些表达式
              中的一个或多个相匹配, <command>svn status</command> 就不会显示
              这个文件名, 除非它是被版本控制的文件. 选项的默认值是
              <literal>*.o *.lo *.la *.al .libs *.so *.so.[0-9]* *.a *.pyc
                *.pyo *.rej *~ #*# .#* .*.swp .DS_Store</literal>.</para>

      <!--
              <para>As well as <command>svn status</command>, the
                <command>svn add</command> and <command>svn import</command>
                commands also ignore files that match the list
                when they are scanning a directory.  You can override this
                behavior for a single instance of any of these commands
                by explicitly specifying the filename, or by using
                the <option>- -no-ignore</option> command-line flag.</para>
      -->
              <para>和 <command>svn status</command> 一样, 命令 <command>svn
                  add</command> 和 <command>svn import</command> 也会忽略与
                <literal>global-ignores</literal> 匹配的文件. 为了显式地表示
                不想忽略某个文件, 可以在执行这三个命令时, 显式地指定文件名,
                或使用命令行参数 <option>--no-ignore</option>.</para>

      <!--
              <para>For information on finer-grained control of
                ignored items, see 
                <xref linkend="svn.advanced.props.special.ignore" />.</para>
      -->
              <para>关于如何更加精细地忽略文件, 见 <xref
                  linkend="svn.advanced.props.special.ignore" />.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>interactive-conflicts</literal></term>
            <listitem>
      <!--
              <para>This is a Boolean option that specifies whether
                Subversion should try to resolve conflicts
                interactively.  If its value is <literal>yes</literal>
                (which is the default value), Subversion will prompt
                the user for how to handle conflicts in the manner
                demonstrated in <xref linkend="svn.tour.cycle.resolve"
                />.  Otherwise, it will simply flag the conflict and
                continue its operation, postponing resolution to a later
                time.</para>
      -->
              <para>指示 Subversion 是否应该尝试交互地解决冲突. 如果它的值是
                <literal>yes</literal> (默认值), 在冲突发生时, Subversion
                将按照 <xref linkend="svn.tour.cycle.resolve"/> 介绍的方式,
                询问用户如何处理冲突; 否则的话, Subversion 只会给文件设置冲突
                标记, 然后继续往下操作, 从而推迟解决冲突.</para>
            </listitem>         
          </varlistentry>
          <varlistentry>
            <term><literal>log-encoding</literal></term>
            <listitem>         
      <!--
              <para>This variable sets the default character set
                encoding for commit log messages.  It's a permanent
                form of the <option>- -encoding</option> option (see
                <xref linkend="svn.ref.svn.sw"/>).  The Subversion
                repository stores log messages in UTF-8 and assumes
                that your log message is written using your operating
                system's native locale.  You should specify a
                different encoding if your commit messages are written
                in any other encoding.</para>
      -->
              <para>该选项用于设置日志消息的默认字符编码, 它是命令行参数
                <option>--encoding</option> (见 <xref
                  linkend="svn.ref.svn.sw"/>) 的等效选项. Subversion 仓库
                使用 UTF-8 编码存放日志消息, 并且假设用户使用的是操作系统
                的默认编码来编写日志消息, 如果你不是用的操作系统的默认编码
                来编写日志消息的话, 那你就应该把字符编码的名字写到
                <literal>log-encoding</literal> 里.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>mime-types-file</literal></term>
            <listitem>
      <!--
              <para>This option, new to Subversion 1.5, specifies the
                path of a MIME types mapping file, such as the
                <filename>mime.types</filename> file provided by the
                Apache HTTP Server.  Subversion uses this file to
                assign MIME types to newly added or imported files.
                See <xref linkend="svn.advanced.props.auto" /> and
                <xref linkend="svn.advanced.props.special.mime-type"
                /> for more about Subversion's detection and use of
                file content types.</para>
      -->
              <para>该选项在 Subversion 1.5 引入, 用于指定一个 MIME 类型映射
                文件, 例如由 Apache HTTP 服务器提供的
                <filename>mime.types</filename>. Subversion 使用 MIME 类型映射
                文件为新增或导入的文件设置 MIME 类型. 关于 Subversion 如何
                检测和使用文件内容类型的更多信息, 见 <xref
                  linkend="svn.advanced.props.auto" /> 和 <xref
                  linkend="svn.advanced.props.special.mime-type"/>.</para>
            </listitem>         
          </varlistentry>
          <varlistentry>
            <term><literal>no-unlock</literal></term>
            <listitem>
      <!--
              <para>This Boolean option corresponds to <command>svn
                commit</command>'s <option>- -no-unlock</option>
                option, which tells Subversion not to release locks on
                files you've just committed.  If this runtime option
                is set to <literal>yes</literal>, Subversion will
                never release locks automatically, leaving you to run
                <command>svn unlock</command> explicitly.  It defaults
                to <literal>no</literal>.</para>
      -->
              <para>这个选项和 <command>svn commit</command> 命令行选项
                <option>--no-unlock</option> 相对应, 命令行选项
                <option>--no-unlock</option> 告诉 Subversion 在提交修改后不
                要释放文件上的锁. 如果把 <literal>no-unlock</literal> 设置
                成 <literal>yes</literal>, Subversion 就不会自动释放锁, 为
                了解锁, 用户必须显式地执行 <command>svn unlock</command>.
                默认值是 <literal>no</literal>.</para>
            </listitem>         
          </varlistentry>
          <varlistentry>
            <term><literal>preserved-conflict-file-exts</literal></term>
            <listitem>
      <!--
              <para>The value of this option is a space-delimited list
                of file extensions that Subversion should preserve
                when generating conflict filenames.  By default, the
                list is empty.  This option is new to Subversion
                1.5.</para>
      -->
              <para>选项的值是由空格分隔的文件扩展名列表, 当 Subversion 生成
                冲突文件名时必须保留这些扩展名. 该选项在 Subversion 1.5 引入,
                默认值为空.</para>

      <!--
              <para>When Subversion detects conflicting file content
                changes, it defers resolution of those conflicts to the
                user.  To assist in the resolution, Subversion keeps
                pristine copies of the various competing versions of
                the file in the working copy.  By default, those
                conflict files have names constructed by appending to
                the original filename a custom extension such as
                <filename>.mine</filename> or
                <filename>.<replaceable>REV</replaceable></filename>
                (where <replaceable>REV</replaceable> is a revision
                number).  A mild annoyance with this naming scheme is
                that on operating systems where a file's extension
                determines the default application used to open and
                edit that file, appending a custom extension prevents
                the file from being easily opened by its native
                application.  For example, if the file
                <filename>ReleaseNotes.pdf</filename> was conflicted,
                the conflict files might be named
                <filename>ReleaseNotes.pdf.mine</filename> or
                <filename>ReleaseNotes.pdf.r4231</filename>.  While
                your system might be configured to use Adobe's Acrobat
                Reader to open files whose extensions are
                <filename>.pdf</filename>, there probably isn't an
                application configured on your system to open all
                files whose extensions are
                <filename>.r4231</filename>.</para>
      -->
              <para>当 Subversion 检测到有冲突发生时, 会把冲突的解决交由用户
                处理. 为了帮助解决冲突, Subversion 把互相冲突的两个版本的文件
                保存到工作副本里, 默认情况下, 这些文件的名字是原来的文件名
                再加上一个特定的扩展名, 例如 <filename>.mine</filename> 或
                <filename>.<replaceable>REV</replaceable></filename>
                (<replaceable>REV</replaceable> 表示一个版本号). 这种命名方式
                可能产生的一个问题是在某些操作系统上, 文件扩展名决定了用于打开
                它的默认应用程序, 为文件名添加一个特定的扩展名可能会导致无法
                使用正确的应用程序轻易地打开文件. 比如说文件
                <filename>ReleaseNotes.pdf</filename> 有冲突发生, 冲突文件可
                能被命名成 <filename>ReleaseNotes.pdf.mine</filename> 和
                <filename>ReleaseNotes.pdf.r4231</filename>, 操作系统使用
                Adobe Acrobat Reader 打开扩展名为 <filename>.pdf</filename>
                的文件, 但是很可能没有默认程序能够打开扩展名为
                <filename>.r4231</filename> 的文件.</para>

      <!--
              <para>You can fix this annoyance by using this
                configuration option, though.  For files with one of
                the specified extensions, Subversion will append to
                the conflict file names the custom extension just as
                before, but then also reappend the file's original
                extension.  Using the previous example, and assuming
                that <literal>pdf</literal> is one of the extensions
                configured in this list thereof, the conflict files
                generated for <filename>ReleaseNotes.pdf</filename>
                would instead be named
                <filename>ReleaseNotes.pdf.mine.pdf</filename> and
                <filename>ReleaseNotes.pdf.r4231.pdf</filename>.
                Because each file ends in
                <filename>.pdf</filename>, the correct default
                application will be used to view them.</para>
      -->
              <para>配置选项 <literal>preserved-conflict-file-exts</literal>
                可以帮助用户解决这一问题. 对于扩展名和选项相匹配的文件,
                Subversion 像往常一样在冲突文件的名字末尾加上特定的扩展名后,
                会再次添加文件原来的扩展名. 对于前面的例子, 假设
                <literal>preserved-conflict-file-exts</literal> 的值含有
                <literal>pdf</literal>, 那么为
                <filename>ReleaseNotes.pdf</filename> 所生成的冲突文件将
                被命名成 <filename>ReleaseNotes.pdf.mine.pdf</filename> 和
                <filename>ReleaseNotes.pdf.r4231.pdf</filename>. 因为冲突文件
                的扩展名仍然是 <filename>.pdf</filename>, 因此在打开它们时
                会用到正确的默认应用程序.</para>
            </listitem>         
          </varlistentry>
          <varlistentry>
            <term><literal>use-commit-times</literal></term>
            <listitem>         
      <!--
              <para>Normally your working copy files have timestamps
                that reflect the last time they were touched by any
                process, whether your own editor or some
                <command>svn</command> subcommand.  This is generally
                convenient for people developing software, because
                build systems often look at timestamps as a way of
                deciding which files need to be recompiled.</para>
      -->
              <para>通常情况下, 工作副本里的文件包含了能够反映文件最后一次是
                在什么时候被进程&mdash;例如文本编辑器或 <command>svn</command>
                命令&mdash;修改了的时间戳. 这个时间戳对于软件开发非常有用, 因
                为软件构建系统通过查看时间戳来决定是否需要重新编译某个文件.
              </para>

      <!--
              <para>In other situations, however, it's sometimes nice
                for the working copy files to have timestamps that
                reflect the last time they were changed in the
                repository.  The <command>svn export</command> command
                always places these <quote>last-commit
                timestamps</quote> on trees that it produces.  By
                setting this config variable to
                <literal>yes</literal>, the <command>svn
                checkout</command>, <command>svn update</command>,
                <command>svn switch</command>, and <command>svn
                revert</command> commands will also set last-commit
                timestamps on files that they touch.</para>
      -->
              <para>然而在其他场景下, 如果这个时间戳反映的是工作副本里的文件
                最后一次在仓库里被修改的时间&mdash;这在某些情况下会非常方便.
                命令
                <command>svn export</command> 总是把它所生成的目录树的时间
                戳设置成 <quote>最后一次提交的时间</quote>. 如果把
                <literal>use-commit-times</literal> 设置成
                <literal>yes</literal>, 那么命令 <command>svn
                  checkout</command>, <command>svn update</command>,
                <command>svn switch</command> 和 <command>svn revert</command>
                也会把它们所修改的文件的时间戳设置成最后一次提交的时间.</para>
            </listitem>
          </varlistentry>
        </variablelist>

      <!--
        <para>The <literal>[auto-props]</literal> section controls the
          Subversion client's ability to automatically set properties
          on files when they are added or imported.  It contains any
          number of key-value pairs in the
          format <literal><replaceable>PATTERN</replaceable>
          = <replaceable>PROPNAME</replaceable>=<replaceable>VALUE</replaceable>[;<replaceable>PROPNAME</replaceable>=<replaceable>VALUE</replaceable>
          ...]</literal>, where <replaceable>PATTERN</replaceable> is
          a file pattern that matches one or more filenames and the
          rest of the line is a semicolon-delimited set of property
          assignments.  (If you need to use a semicolon in your
          property's name or value, you can escape it by doubling
          it.)</para>
      -->
        <para><literal>[auto-props]</literal> 节控制着 Subversion 客户端如何
          为新增和导入的文件自动设置属性. 它包含了任意数量的键值对, 键值对的
          格式是 <literal><replaceable>PATTERN</replaceable>
          = <replaceable>PROPNAME</replaceable>=<replaceable>VALUE</replaceable>[;<replaceable>PROPNAME</replaceable>=<replaceable>VALUE</replaceable>
          ...]</literal>, 其中 <replaceable>PATTERN</replaceable> 是一个文件
        名模式, 用于匹配一个或多个文件名, 剩下的部分是分号分隔的属性赋值语句.
        (如果在属性名或属性值中需要用到分号, 就连着写两次分号来转义.)</para>

        <informalexample>
          <screen>
$ cat ~/.subversion/config
&hellip;
[auto-props]
*.c = svn:eol-style=native
*.html = svn:eol-style=native;svn:mime-type=text/html;; charset=UTF8
*.sh = svn:eol-style=native;svn:executable
&hellip;
$ cd projects/myproject
$ svn status
?       www/index.html
$ svn add www/index.html
A         www/index.html
$ svn diff www/index.html
&hellip;

Property changes on: www/index.html
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+text/html; charset=UTF8
Added: svn:eol-style
## -0,0 +1 ##
+native
$
</screen>

        </informalexample>

      <!--
        <para>Multiple matches on a file will result in
          multiple propsets for that file; however, there is no
          guarantee that auto-props will be applied in the order in
          which they are listed in the config file, so you can't have
          one rule <quote>override</quote> another.  You can find
          several examples of auto-props usage in the
          <filename>config</filename> file.  Lastly, don't
          forget to set <literal>enable-auto-props</literal> to
          <literal>yes</literal> in the <literal>[miscellany]</literal>
          section if you want to enable auto-props.</para>
      -->
        <para>如果一个文件匹配了多个模式, 它就会被设置上多个属性, 但 Subversion
          无法保证属性会按照出现在配置文件里的顺序设置到文件上, 所以说用户不能
          期望用一个属性设置去覆盖另一个属性设置. 用户可以在文件
          <filename>config</filename> 里看到自动属性设置的几个示例. 如果你希望
          开启自动属性设置, 别忘了把 <literal>[miscellany]</literal> 节的
          <literal>enable-auto-props</literal> 选项设置成
          <literal>yes</literal>.</para>

      <!--
        <para>New to Subversion 1.8, the <literal>[working-copy]</literal>
          section is used for configuring working copies.  Valid options in
          this section are:</para>
      -->
        <para>Subversion 1.8 增加了一个新的 <literal>[working-copy]</literal>
          节, 用于配置工作副本, 它包含的选项有:</para>
        <variablelist>
          <varlistentry>
            <term><literal>exclusive-locking-clients</literal></term>
            <listitem>
      <!--
              <para>Enables exclusive SQLite locking of working copies for the
                client, hence improving performance for working copies located
                on network disks.  By setting this config variable to
                <literal>svn</literal>, you instruct Subversion command-line
                client to use exclusive locking.  This reduces the locking
                overhead but does mean that only one Subversion client will be
                able to access the working copy at a time.  A second client
                attempting to access a locked working copy will block for 10
                seconds and then get an error.  In most cases shared locking is
                preferred but if the working copy is on a network disk rather
                than a local disk the locking overhead is more significant.
                When dealing with large working copies on network disks
                exclusive locking may give a significant performance gain,
                two or three times faster in some cases.  This option is new to
                Subversion 1.8.</para>
      -->
              <para>开启工作副本的 SQLite 互斥锁, 它可用于提升位于网络磁盘上
                的工作副本的性能. 如果把该选项设置成 <literal>svn</literal>,
                Subversion 命令行客户端将使用互斥锁, 这会降低加锁的开销, 但
                并不是说同一时刻只能允许一个客户端访问工作副本, 如果工作副本
                已经被锁定了, 那么试图访问工作副本的其他客户端会阻塞 10 秒钟,
                然后返回一个错误. 在大多数情况下, 人们更喜欢用共享锁, 但是如果
                工作副本是在网络磁盘 (而不是本地磁盘) 上, 那么锁的开销就更值得
                关注. 对于放在网络磁盘上的大型工作副本, 使用互斥锁会得到很大的
                性能提升, 在某些情况下甚至能达到两三倍的提升. 该选项在
                Subversion 1.8 引入.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>exclusive-locking</literal></term>
            <listitem>
      <!--
              <para>Setting this config variable to <literal>true</literal>
                enables exclusive SQLite locking of working copies for
                all Subversion 1.8 clients.  Enabling this may cause some
                clients to fail to work properly.  The default value for this
                option is <literal>false</literal>. This option is new to
                Subversion 1.8.</para>
      -->
              <para>如果把该选项设置成 <literal>true</literal>, 将为所有
                Subversion 1.8 客户端开启工作副本的互斥锁, 而某些客户端可能
                会无法正常工作. 选项的默认值是 <literal>false</literal>,
                在 Subversion 1.8 引入.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.advanced.confarea.opts.servers">
      <!--
        <title>Per-server configuration</title>
      -->
        <title>每服务器配置</title>

      <!--
        <para>The <filename>servers</filename> file contains
          Subversion configuration options related to the network
          layers.  There are two special sections in this
          file&mdash;<literal>[groups]</literal> and
          <literal>[global]</literal>.  The <literal>[groups]</literal>
          section is essentially a cross-reference table.  The keys in
          this section are the names of other sections in the file;
          their values are <firstterm>globs</firstterm>&mdash;textual
          tokens that possibly contain wildcard
          characters&mdash;that are compared against the hostnames of
          the machine to which Subversion requests are sent.</para>
      -->
        <para>文件 <filename>server</filename> 包含了与网络层有关的配置选项.
          文件内有两个特殊的节&mdash;<literal>[groups]</literal> 和
          <literal>[global]</literal>. <literal>[groups]</literal> 节本质上
          是一个交叉引用表. 节内选项的名字是文件内其他节的名字, 选项的值是
          <firstterm>文本表达式</firstterm> (<firstterm>globs</firstterm>)
          &mdash;可能包含通配符的文本. 向服务器发送请求时, Subversion 将会把
          服务器的主机名和这些文本表达式进行匹配.</para>

        <informalexample>
          <programlisting>
[groups]
beanie-babies = *.red-bean.com
collabnet = svn.collab.net

[beanie-babies]
&hellip;

[collabnet]
&hellip;
</programlisting>
        </informalexample>

      <!--
        <para>When Subversion is used over a network, it attempts to
          match the name of the server it is trying to reach with a
          group name under the <literal>[groups]</literal> section.  If
          a match is made, Subversion then looks for a section in the
          <filename>servers</filename> file whose name is the matched
          group's name.  From that section, it reads the actual network
          configuration settings.</para>
      -->
        <para>如果 Subversion 需要访问网络, 它将尝试把服务器的主机名和
          <literal>[groups]</literal> 节中的选项进行匹配. 如果匹配成功,
          Subversion 就会在 <filename>servers</filename> 里查找以选项名命名的
          节, 然后从该节读取与这个服务器有关的配置.</para>

      <!--
        <para>The <literal>[global]</literal> section contains the
          settings that are meant for all of the servers not matched
          by one of the globs under the <literal>[groups]</literal>
          section.  The options available in this section are
          exactly the same as those that are valid for the other server
          sections in the file (except, of course, the special
          <literal>[groups]</literal> section), and are as
          follows:</para>
      -->
        <para>如果服务器的主机名不与 <literal>[groups]</literal> 内的任意一
          个文本表达式相匹配, Subversion 就从 <literal>[global]</literal> 读取
          服务器配置. <literal>[global]</literal> 所包含的选项与其他节完全
          相同 (当然, 除了 <literal>[groups]</literal> 节), 这些选项有:</para>

        <variablelist>
          <varlistentry>
            <term><literal>http-auth-types</literal></term>
            <listitem>
      <!--
              <para>This is a semicolon-delimited list of HTTP
                authentication types which the client will deem
                acceptable.  Valid types
                are <literal>basic</literal>, <literal>digest</literal>,
                and <literal>negotiate</literal>, with the default
                behavior being acceptance of any these authentication
                types.  A client which insists on not transmitting
                authentication credentials in cleartext might, for
                example, be configured such that the value of this
                option is
                <literal>digest;negotiate</literal>&mdash;omitting
                <literal>basic</literal> from the list.  (Note that
                this setting is only honored by Subversion's
                Neon-based HTTP provider module.)</para>
      -->
              <para>选项包含了客户端支持的 HTTP 认证类型, 类型之间用分号分开.
                有效的认证类型包括 <literal>basic</literal>,
                <literal>digest</literal> 和 <literal>negotiate</literal>,
                默认行为是允许所有的认证类型. 举个例子, 如果客户端要求不能以
                明文方式传输认证证书, 可以把该选项设置成
                <literal>digest;negotiate</literal>&mdash;忽略
                <literal>basic</literal> 类型. (注意, 这种设置只对基于 Neon 的
                HTTP 模块才有效.)</para>
              <!-- ### TODO: Subversion 1.7 exposed this to Serf, too,
                   and with an additional 'ntlm' auth type. -->
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-compression</literal></term>
            <listitem>
      <!--
              <para>This specifies whether Subversion should
                attempt to compress network requests made to DAV-ready
                servers.  The default value is <literal>yes</literal>
                (though compression will occur only if that capability
                is compiled into the network layer).  Set this to
                <literal>no</literal> to disable compression, such as
                when debugging network transmissions.</para>
      -->
              <para>指定是否对发往 DAV 已就绪的服务器的网络数据进行压缩,
                默认值是 <literal>yes</literal> (但只有在网络层支持压缩的
                情况下才会真正对数据进行压缩). 把选项设置成
                <literal>no</literal> 将禁止压缩, 例如当我们需要对网络传输
                进行调试时.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-library</literal></term>
            <listitem>
      <!--
              <para>The <literal>http-library</literal> runtime
                configuration option allows users to specify
                (generally, or in a per-server-group fashion) which of
                the available WebDAV access modules they'd prefer to
                use.  Prior to version 1.8, Subversion offered a pair
                of such modules: its original implementiation
                <literal>libsvn_ra_neon</literal> (selected by
                using the value <literal>neon</literal> for this
                option) and the newer <literal>libsvn_ra_serf</literal>
                (selected using the value <literal>serf</literal>).
                As of Subversion 1.8, only <literal>libsvn_ra_serf</literal>
                is supported.  This configuration option remains,
                though, because the runtime configuration area is
                version-agnostic.  Users with multiple versions of
                Subversion installed may still wish to enable the use
                of <literal>libsvn_ra_neon</literal> for sites which
                they access with an older version of Subversion.</para>
      -->
              <para>该选项允许用户指定他们更愿意使用哪种 WebDAV 访问模块
                (通常是每服务器配置). 在 1.8 版之前, Subversion 提供了两种
                WebDAV 访问模块: 较老的 <literal>libsvn_ra_neon</literal>
                (对应的选项值是 <literal>neon</literal>) 和较新的
                <literal>libsvn_ra_serf</literal> (对应的选项值是
                <literal>serf</literal>). 从 1.8 开始, 虽然 Subversion 只支持
                <literal>libsvn_ra_serf</literal>, 但这个配置选项还是保留了
                下来, 因为运行时配置区域无法知晓 Subversion 的版本. 如果用户
                的系统中安装了多种 Subversion 版本, 在使用旧版客户端访问服务
                器时, 他们可能仍然希望为 <literal>http-library</literal>
                设置上 <literal>libsvn_ra_neon</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-exceptions</literal></term>
            <listitem>
      <!--
              <para>This specifies a comma-separated list of patterns
                for repository hostnames that should be accessed
                directly, without using the proxy machine.  The
                pattern syntax is the same as is used in the Unix
                shell for filenames.  A repository hostname matching
                any of these patterns will not be proxied.</para>
      -->
              <para>选项值是由逗号分隔的列表, 列表的元素是仓库服务器的主机
                名模式, 符合模式的服务器将不会使用代理, 而是直接访问. 模式
                的写法和 Unix Shell 的文件名模式写法相同.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-host</literal></term>
            <listitem>
      <!--
              <para>This specifies the hostname of the proxy computer
                through which your HTTP-based Subversion requests must
                pass.  It defaults to an empty value, which means that
                Subversion will not attempt to route HTTP requests
                through a proxy computer, and will instead attempt to
                contact the destination machine directly.</para>
      -->
              <para>指定基于 HTTP 的 Subversion 请求必须经过的代理服务器的
                主机名. 默认值是空, 这意味着 Subversion 不会尝试把 HTTP 请
                求路由给代理服务器, 而是直接发给目标服务器.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-password</literal></term>
            <listitem>
      <!--
              <para>This specifies the password to supply to the proxy
                machine.  It defaults to an empty value.</para>
      -->
              <para>指定提供给代理服务器的密码, 默认值是空.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-port</literal></term>
            <listitem>
      <!--
              <para>This specifies the port number on the proxy host
                to use.  It defaults to an empty value.</para>
      -->
              <para>指定代理服务器的端口号, 默认值是空.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-username</literal></term>
            <listitem>
      <!--
              <para>This specifies the username to supply to the proxy
                machine.  It defaults to an empty value.</para>
      -->
              <para>指定提供给代理服务器的用户名, 默认值是空.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-timeout</literal></term>
            <listitem>
      <!--
              <para>This specifies the amount of time, in seconds, to
                wait for a server response.  If you experience
                problems with a slow network connection causing
                Subversion operations to time out, you should increase
                the value of this option.  In Subversion 1.8 (or
                older versions employing the Serf-based HTTP
                provider), use the value <literal>0</literal> to
                disable the timeout altogether.</para>
      -->
              <para>指定服务器响应的等待时间, 以秒为单位. 如果用户发现低速
                的网络常常导致 Subversion 命令超时, 那你应该把
                <literal>http-timeout</literal> 调大. Subversion 1.8 (或更
                老的, 基于 Serf 的版本) 用 <literal>0</literal> 表示不设置
                超时.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>neon-debug-mask</literal></term>
            <listitem>
      <!--
              <para>This is an integer mask that the Neon HTTP library
                uses for choosing what type of debugging output to
                yield.  The default value is <literal>0</literal>,
                which will silence all debugging output.  Prior to
                version 1.8, most Subversion clients used Neon (via
                the <literal>libsvn_ra_neon</literal> repository
                access module) for WebDAV/HTTP communications between
                the Subversion client and server.  Support
                for <literal>libsvn_ra_neon</literal> was dropped in
                Subversion 1.8, though, making this option obsolete
                for newer Subversion installations.</para>
      -->
              <para>选项值是一个整数掩码, Neon HTTP 库函数将根据这个掩码来
                决定打印哪些调试信息, 默认值是 <literal>0</literal>, 这会
                禁止打印所有的调试信息. 在 1.8 之前的版本, 大多数 Subversion
                客户端都使用 Neon (借助 <literal>libsvn_ra_neon</literal>
                仓库访问模块) 完成客户端和服务器之间的 WebDAV/HTTP 通信.
                但从 Subversion 1.8 开始不再支持
                <literal>libsvn_ra_neon</literal>, 所以这个选项在新版
                Subversion 里被淘汰了.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-authority-files</literal></term>
            <listitem>
      <!--
              <para>This is a semicolon-delimited list of paths to files
                containing certificates of the certificate authorities
                (or CAs) that
                are accepted by the Subversion client when accessing the
                repository over HTTPS.</para>
      -->
              <para>选项值是分号分隔的路径列表, 其中每个路径都指向一个文件,
                该文件包含了认证机构的证书, 当 Subversion 客户端使用 HTTPS
                访问仓库时将信任这些证书.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-client-cert-file</literal></term>
            <listitem>
      <!--
              <para>If a host (or set of hosts) requires an SSL client
                certificate, you'll normally be prompted for a path to
                your certificate.  By setting this variable to that
                same path, Subversion will be able to find your client
                certificate automatically without prompting you.
                There's no standard place to store your certificate on
                disk; Subversion will grab it from any path you
                specify.</para>
      -->
              <para>如果一个主机 (或多个主机) 要求提供一个 SSL 客户端证书,
                用户通常会收到一个要求输入证书路径的提示信息. 把该选项设置
                成证书的路径, Subversion 就可以自动搜索到证书, 而不会再提示
                用户输入证书路径. 并不存在一个存在证书的标准位置, Subversion
                会从用户指定的任意位置读取证书.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-client-cert-password</literal></term>
            <listitem>
      <!--
              <para>If your SSL client certificate file is encrypted
                by a passphrase, Subversion will prompt you for the
                passphrase whenever the certificate is used.  If you
                find this annoying (and don't mind storing the
                password in the <filename>servers</filename> file),
                you can set this variable to the certificate's
                passphrase.  You won't be prompted anymore.</para>
      -->
              <para>如果用户的 SSL 客户端证书被一个密码加密, 每当 Subversion
                使用证书都会提示用户输入密码. 如果你觉得这有点烦人, 而且你也
                不介意把密码写到 <filename>servers</filename> 文件里, 那就
                把该选项设置成证书的密码, 这样你就不会再收到要求输入证书密码的
                提示.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-pkcs11-provider</literal></term>
            <listitem>
      <!--
              <para>The value of this option is the name of the
                PKCS#11 provider from which an SSL client certificate
                ### TODO
                will be drawn (if the server asks for one).  This
                setting is only honored by Subversion's Neon-based
                HTTP provider module, which was removed in Subversion
                1.8.</para>
      -->
              <para>选项值是 PKCS#11 提供商的名字, 它刻画了 SSL 客户端的证书
                (如果服务器要求提供证书的话). 这个设置只对 Subversion
                基于 Neon 的 HTTP 模块才有效, 而这种模块在 Subversion 1.8
                中已经被移除了.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-trust-default-ca</literal></term>
            <listitem>
      <!--
              <para>Set this variable to <literal>yes</literal> if you
                want Subversion to automatically trust the set of
                default CAs that ship with OpenSSL.</para>
      -->
              <para>如果用户希望 Subversion 自动信任 OpenSSL 附带的默认证书
                的话, 就把它设置成 <literal>yes</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>store-auth-creds</literal></term>
            <listitem>
      <!--
              <para>This setting is the same as
                <literal>store-passwords</literal>, except that it
                enables or disables on-disk caching of
                <emphasis>all</emphasis> authentication information:
                usernames, passwords, server certificates, and any
                other types of cacheable credentials.</para>
      -->
              <para>该选项基于上和 <literal>store-passwords</literal> 相同,
                唯一的不同点是它用于开启或禁止 <emphasis>所有的</emphasis>
                认证信息缓存, 包括用户名, 密码, 服务器证书, 以及其他能被缓存
                的凭证.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>store-passwords</literal></term>
            <listitem>
      <!--
              <para>This instructs Subversion to cache, or not to
                cache, passwords that are supplied by the user in
                response to server authentication challenges.  The
                default value is <literal>yes</literal>.  Set this to
                <literal>no</literal> to disable this on-disk password
                caching.  You can override this option for a single
                instance of the <command>svn</command> command using
                the <option>- -no-auth-cache</option> command-line
                parameter (for those subcommands that support it).
                For more information regarding that, see
                <xref linkend="svn.serverconfig.netmodel.credcache"/>.
                Note that regardless of how this option is configured,
                Subversion will not store passwords in plaintext
                unless the <literal>store-plaintext-passwords</literal>
                option is also set to <literal>yes</literal>.</para>
      -->
              <para>指定 Subversion 是否应该缓存用户密码, 这个密码是服务器
                要求认证时用户输入的. 默认值是 <literal>yes</literal>, 如果
                设置成 <literal>no</literal> 将禁止缓存密码. 用户可以使用
                <command>svn</command> 的命令行选项
                <option>--no-auth-cache</option> 覆盖掉
                <literal>store-passwords</literal> 的设置 (当然, 这种覆盖只
                对支持 <option>--no-auth-cache</option> 的子命令才有意义).
                关于密码缓存的更多信息, 见
                <xref linkend="svn.serverconfig.netmodel.credcache"/>. 注意,
                无论是否设置 <literal>store-passwords</literal>, Subversion
                都不会以明文方式存放密码, 除非
                <literal>store-plaintext-passwords</literal> 被设置成
                <literal>yes</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>store-plaintext-passwords</literal></term>
            <listitem>
      <!--
              <para>This variable is only important on UNIX-like systems.
                It controls what the Subversion client does in case
                the password for the current authentication realm can
                only be cached on disk in unencrypted form, in the
                <filename>~/.subversion/auth/</filename> caching area.
                You can set it to <literal>yes</literal> or
                <literal>no</literal> to enable or disable caching of
                passwords in unencrypted form, respectively.
                The default setting is <literal>ask</literal>, which causes
                the Subversion client to ask you each time a
                <emphasis>new</emphasis> password is about to be added to
                the <filename>~/.subversion/auth/</filename> caching area.</para>
      -->
              <para>该选项只在类 Unix 系统上才需要注意. 如果密码只能以明文方式
                缓存在磁盘上 (具体的位置是
                <filename>~/.subversion/auth/</filename>), 此时 Subversion 将
                根据该选项决定接下来该怎么做. 如果把它设置成
                <literal>yes</literal> 或 <literal>no</literal>, 将分别允许
                或禁止以明文方式缓存密码. 默认值是 <literal>ask</literal>,
                于是 Subversion 每当遇到一个 <emphasis>新的</emphasis> 密码时,
                都会询问用户是否以明文方式把它缓存到
                <filename>~/.subversion/auth/</filename>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>store-ssl-client-cert-pp</literal></term>
            <listitem>
      <!--
              <para>This option controls whether Subversion will cache
                SSL client certificate passphrases provided by the
                user.  Its value defaults to <literal>yes</literal>.
                Set this to <literal>no</literal> to disable this
                passphrase caching.</para>
      -->
              <para>该选项用于设置 Subversion 是否应该缓存用户输入的 SSL
                客户端证书密码, 默认值是 <literal>yes</literal>, 设置成
                <literal>no</literal> 将禁止缓存.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>store-ssl-client-cert-pp-plaintext</literal></term>
            <listitem>
      <!--
              <para>This option controls whether Subversion, when
                attempting to cache an SSL client certificate
                passphrase, will be allowed to do so using its on-disk
                plaintext storage mechanism.  The default value of
                this option is <literal>ask</literal>, which causes
                the Subversion client to ask you each time a
                <emphasis>new</emphasis> client certificate passphrase
                is about to be added to
                the <filename>~/.subversion/auth/</filename> caching
                area.  Set this option's value
                to <literal>yes</literal> or <literal>no</literal> to
                indicate your preference and avoid related
                prompts.</para>
      -->
              <para>当 Subversion 尝试缓存 SSL 客户端证书密码时, 该选项用于
                控制是否允许以明文方式存放到磁盘上. 默认值是
                <literal>ask</literal>, 使得 Subversion 每次遇到一个
                <emphasis>新的</emphasis> SSL 客户端证书密码时都会向用户询问
                是否以明文方式缓存到 <filename>~/.subversion/auth/</filename>,
                把选项设置成 <literal>yes</literal> 或 <literal>no</literal>
                将允许或禁止明文缓存, Subversion 也不会再询问用户.</para>
            </listitem>
          </varlistentry>
        </variablelist>

      </sect3>

    </sect2>
  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.advanced.l10n">
      <!--
    <title>Localization</title>
      -->
    <title>本地化</title>

    <para>
      <indexterm>
        <primary>localization (本地化)</primary>
      </indexterm>
      <firstterm>本地化</firstterm> (<firstterm>localization</firstterm>) 指
      的是让程序按照某个地区特有的方式进行运转的行为. 如果程序按照你所习惯的
      方式来格式化数字或日期, 或者使用你的母语来输入 (或输出) 消息, 那我们就
      说该程序是 <firstterm>本地化的</firstterm>
      (<firstterm>localized</firstterm>). 本节介绍 Subversion 在本地化上所
      做的工作.</para>
      <!--
      <firstterm>Localization</firstterm> is the act of making
      programs behave in a region-specific way.  When a program
      formats numbers or dates in a way specific to your part of the
      world or prints messages (or accepts input) in your native
      language, the program is said to
      be <firstterm>localized</firstterm>.  This section describes
      steps Subversion has made toward localization.</para>
      -->

    <!-- =============================================================== -->
    <sect2 id="svn.advanced.l10n.understanding">
      <!--
      <title>Understanding Locales</title>
      -->
      <title>理解地区</title>
      
      <!--
      <para>Most modern operating systems have a notion of the
        <quote>current locale</quote>&mdash;that is, the region or
        country whose localization conventions are honored.  These
        conventions&mdash;typically chosen by some runtime
        configuration mechanism on the computer&mdash;affect the way
        in which programs present data to the user, as well as the way
        in which they accept user input.</para>
      -->
      <para>大多数现代操作系统都有一个 <quote>当前地区</quote> 的概念&mdash;
        即遵守本地化惯例的地区或国家. 这些惯例&mdash;在典型情况下由系统的运行
        时配置机制来选取&mdash;会影响程序向用户呈现数据以及向用户接收数据的方
        式.</para>

      <!--
      <para>On most Unix-like systems, you can check the values of the
        locale-related runtime configuration options by running the
        <command>locale</command> command:</para>
      -->
      <para>在大多数类 Unix 系统上, 你可以用命令 <command>locale</command>
        查看和地区有关的运行时配置选项的值:</para>

      <informalexample>
        <screen>
$ locale
LANG=
LC_COLLATE="C"
LC_CTYPE="C"
LC_MESSAGES="C"
LC_MONETARY="C"
LC_NUMERIC="C"
LC_TIME="C"
LC_ALL="C"
$
</screen>
      </informalexample>

      <!--
      <para>The output is a list of locale-related environment
        variables and their current values.  In this example, the
        variables are all set to the default <literal>C</literal>
        locale, but users can set these variables to specific
        country/language code combinations.  For example, if one were
        to set the <literal>LC_TIME</literal> variable to
        <literal>fr_CA</literal>, programs would know to present
        time and date information formatted according to a
        French-speaking Canadian's expectations.  And if one were to
        set the <literal>LC_MESSAGES</literal> variable to
        <literal>zh_TW</literal>, programs would know to present
        human-readable messages in Traditional Chinese.  Setting the
        <literal>LC_ALL</literal> variable has the effect of changing
        every locale variable to the same value.  The value of
        <literal>LANG</literal> is used as a default value for any
        locale variable that is unset.  To see the list of available
        locales on a Unix system, run the command <userinput>locale
        -a</userinput>.</para>
      -->
    <para>命令的输出是与地区有关的环境变量, 以及它们的当前值. 在上面的示例中,
      变量的值都是默认的 <literal>C</literal>, 但用户可以把它们再设置成其他
      国家/语言的编码组合. 例如, 如果把 <literal>LC_TIME</literal> 设置成
      <literal>fr_CA</literal>, 程序就会知道要按照说法语的加拿大人的文化习惯
      来呈现时间和日期; 如果把 <literal>LC_MESSAGES</literal> 设置成
      <literal>zh_TW</literal>, 程序就会知道要使用繁体中文来显示消息. 设置
      <literal>LC_ALL</literal> 相当于把每一个变量都设置成同一个值. 如果某个
      变量没有设置, 它就会使用 <literal>LANG</literal> 的值作为默认值. 为了
      得到 Unix 系统上所有可用的地区, 执行 <userinput>locale -a</userinput>.
    </para>

      <!--
      <para>On Windows, locale configuration is done via the
        <quote>Regional and Language Options</quote> control panel
        item.  There you can view and select the values of individual
        settings from the available locales, and even customize (at a
        sickening level of detail) several of the display formatting
        conventions.</para>
      -->
      <para>Windows 配置地区的地方在控制面板的 <quote>地区和语言选项</quote>,
        在这里你可以查看和选择各种地区设置, 甚至可以非常细致地修改显示方式的
        既有格式.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.advanced.l10n.svnuse">
      <!--
      <title>Subversion's Use of Locales</title>
      -->
      <title>Subversion 对本地化的支持</title>

      <!--
      <para>The Subversion client, <command>svn</command>, honors the
        current locale configuration in two ways.  First, it notices
        the value of the <literal>LC_MESSAGES</literal> variable and
        attempts to print all messages in the specified language.  For
        example:</para>
      -->
      <para>Subversion 客户端命令行工具 <command>svn</command> 使用两种方式
        支持本地化配置. 第一种方式是根据环境变量 <literal>LC_MESSAGES</literal>
        的值来决定按照哪一种语言打印所有的消息, 例如:</para>

      <informalexample>
        <screen>
$ export LC_MESSAGES=de_DE
$ svn help cat
cat: Gibt den Inhalt der angegebenen Dateien oder URLs aus.
Aufruf: cat ZIEL[@REV]...
&hellip;
</screen>
      </informalexample>

      <!--
      <para>This behavior works identically on both Unix and Windows
        systems.  Note, though, that while your operating system might
        have support for a certain locale, the Subversion client still
        may not be able to speak the particular language.  In order to
        produce localized messages, human volunteers must provide
        translations for each language.  The translations are written
        using the GNU gettext package, which results in translation
        modules that end with the <filename>.mo</filename> filename
        extension.  For example, the German translation file is named
        <filename>de.mo</filename>.  These translation files are
        installed somewhere on your system.  On Unix, they typically
        live in <filename>/usr/share/locale/</filename>, while
        on Windows they're often found in the
        <filename>share\locale\</filename> folder in Subversion's
        installation area.  Once installed, a module is named after
        the program for which it provides translations.  For example, the
        <filename>de.mo</filename> file may ultimately end up
        installed as
        <filename>/usr/share/locale/de/LC_MESSAGES/subversion.mo</filename>.
        By browsing the installed <filename>.mo</filename> files, you
        can see which languages the Subversion client is able to
        speak.</para>
      -->
      <para>无论是 Unix, 还是 Windows, 这种行为的表现都是一样的. 但是, 你的
        操作系统可能只支持特定的地区, 导致 Subversion 无法使用某些语言打印
        消息. 为了输出本地化的消息, 需要有志愿者将每一条消息都翻译成本地语言.
        译文使用 GNU 的 gettext 软件包进行编写, 得到的译文文件以
        <filename>.mo</filename> 作为扩展名, 例如德文的译文文件是
        <filename>de.mo</filename>. 这些译文文件安装在系统中的某个位置, 在
        Unix 系统上, 它们的典型位置是 <filename>/usr/share/locale/</filename>,
        而 Windows 的典型位置是 Subversion 安装目录的
        <filename>share\locale\</filename> 子目录内. 译文文件一旦安装完成,
        它将按照它所服务的程序来命名, 例如 <filename>de.mo</filename> 安装后,
        最终的名字可能是
        <filename>/usr/share/locale/de/LC_MESSAGES/subversion.mo</filename>.
        通过浏览已安装的 <filename>.mo</filename> 文件, 你就可以知道你的
        Subversion 客户端可以说哪些语言.</para>

      <para>
        <indexterm>
          <primary>internationalization (国际化)</primary>
        </indexterm>
        <indexterm>
          <primary>UTF-8</primary>
        </indexterm>
        Subversion 支持本地化的第二种方式涉及到 <command>svn</command> 如何
        解释用户的输入. 仓库使用 UTF-8 编码记录所有的路径, 文件名和日志消息.
        在这种情况下, 我们可以说仓库是 <firstterm>国际化的</firstterm>
        (<firstterm>internationalized</firstterm>)&mdash;也就是说仓库已经准备
        好接受任意一种人类语言. Subversion 客户端必须负责只向仓库发送 UTF-8
        编码的文件名和日志消息, 所以它必须将本地字符编码的数据转化成 UTF-8
        编码.</para>
      <!--
        The second way in which the locale is honored involves how
        <command>svn</command> interprets your input.  The repository
        stores all paths, filenames, and log messages in Unicode,
        encoded as UTF-8.  In that sense, the repository is
        <firstterm>internationalized</firstterm>&mdash;that is, the
        repository is ready to accept input in any human language.
        This means, however, that the Subversion client is responsible
        for sending only UTF-8 filenames and log messages into the
        repository.  To do this, it must convert the data
        from the native locale into UTF-8.</para>
      -->

      <!--
      <para>For example, suppose you create a file named
        <filename>caffè.txt</filename>, and then when committing the
        file, you write the log message as <quote>Adesso il caffè è
        più forte.</quote>  Both the filename and the log message contain
        non-ASCII characters, but because your locale is set to
        <literal>it_IT</literal>, the Subversion client knows to
        interpret them as Italian.  It uses an Italian character set
        to convert the data to UTF-8 before sending it off to the
        repository.</para>
      -->
      <para>例如, 你创建了一个文件 <filename>caffè.txt</filename>, 然后在提交
        时把日志消息写成了 <quote>Adesso il caffè è più forte.</quote> 文件名和
        日志消息都包含了非 ASCII 字符, 由于你把本地语言设置成了
        <literal>it_IT</literal>, 所以 Subversion 客户端知道它们是意大利文,
        然后它使用意大利字符集把文件名和日志消息转换成 UTF-8 编码, 再发送给
        仓库.</para>

      <!--
      <para>Note that while the repository demands UTF-8 filenames and
        log messages, it <emphasis>does not</emphasis> pay attention
        to file contents.  Subversion treats file contents as opaque
        strings of bytes, and neither client nor server makes an
        attempt to understand the character set or encoding of the
        contents.</para>
      -->
      <para>注意, 虽然仓库要求文件名和日志消息必须是 UTF-8 编码, 但它并不在乎
        文件的内容是什么编码, Subversion 把文件的内容看成是不透明的字节串,
        服务器端和客户端都不会试图去理解文件内容的字符集或编码方案.</para>

      <sidebar>
      <!--
        <title>Character Set Conversion Errors</title>
      -->
        <title>字符集转换错误</title>

      <!--
        <para>While using Subversion, you might get hit with an error
          related to character set conversions:</para>
      -->
        <para>在使用 Subversion 时, 你可能会遇到下面这种错误:</para>

        <informalexample>
          <screen>
svn: E000022: Can't convert string from native encoding to 'UTF-8':
&hellip;
svn: E000022: Can't convert string from 'UTF-8' to native encoding:
&hellip;
</screen>
        </informalexample>
    
      <!--
        <para>Errors such as this typically occur when the Subversion
          client has received a UTF-8 string from the repository, but
          not all of the characters in that string can be represented
          using the encoding of the current locale.  For example, if
          your locale is <literal>en_US</literal> but a collaborator
          has committed a Japanese filename, you're likely to see this
          error when you receive the file during an <command>svn
          update</command>.</para>
      -->
      <para>发生这种错误的典型情况是 Subversion 客户端接收到了仓库发来的 UTF-8
        字符串, 但并非字符串中的所有字符都能用本地字符集进行表示. 比如说你的
        本地语言是 <literal>en_US</literal>, 但你的同事却提交了一个用日文命名
        的文件, 当你执行命令 <command>svn update</command> 时可能就会遇到这种
        错误.</para>

      <!--
        <para>The solution is either to set your locale to something
          that <emphasis>can</emphasis> represent the incoming UTF-8
          data, or to change the filename or log message in the
          repository.  (And don't forget to slap your collaborator's
          hand&mdash;projects should decide on common languages ahead of
          time so that all participants are using the same
          locale.)</para>
      -->
        <para>解决办法之一是使用一种 <emphasis>可以</emphasis> 表示所有 UTF-8
          字符的本地语言. 或者是修改仓库中的文件名和日志消息 (别忘了和你的日本
          同事打声招呼&mdash;应该提前决定好项目所使用的语言, 这样的话所有的
          参与者都能使用相同的本地语言).</para>
      </sidebar>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.advanced.externaleditors">
      <!--
    <title>Using External Editors</title>
      -->
    <title>使用外部编辑器</title>

      <!--
    <para>The most obvious way to get data into Subversion is through
      the addition of files to version control, committing changes to
      those files, and so on.  But other pieces of
      information besides merely versioned file data live in your
      Subversion repository.  Some of these bits of
      information&mdash;commit log messages, lock comments, and some
      property values&mdash;tend to be textual in nature and are
      provided explicitly by users.  Most of this information can be
      provided to the Subversion command-line client using the
      <option>- -message</option> (<option>-m</option>) and
      <option>- -file</option> (<option>-F</option>) options with the
      appropriate subcommands.</para>
      -->
    <para>为了向 Subversion 添加数据, 最明显的方式就是添加新文件, 或者向已有
      的文件提交修改, 但是除文件内容之外的其他信息则只存在于仓库中, 其中一些
      信息&mdash;例如日志消息, 与锁有关的注释, 以及某些属性值&mdash;是纯文本
      的, 而且由用户显式提供. 这些信息中的大部分都可以用选项
      <option>--message</option> (<option>-m</option>) 和
      <option>--file</option> (<option>-F</option>) 传递给 Subversion 客户端.
    </para>

      <!--
    <para>Each of these options has its pros and cons.  For example,
      when performing a commit, <option>- -file</option>
      (<option>-F</option>) works well if you've already prepared a
      text file that holds your commit log message.  If you didn't,
      though, you can use <option>- -message</option>
      (<option>-m</option>) to provide a log message on the command
      line.  Unfortunately, it can be tricky to compose anything more
      than a simple one-line message on the command line.  Users want
      more flexibility&mdash;multiline, free-form log message editing
      on demand.</para>
      -->
    <para>这两个选项各有利弊. 例如, 当你执行提交操作时, 如果你已经事先把日志
      消息写到了一个文本文件里, 那么选项 <option>--file</option>
      (<option>-F</option>) 就可以工作得很好. 如果你还没有把日志消息写到一个
      文件里, 那你可以通过选项 <option>--message</option> (<option>-m</option>)
      把日志消息写到命令行上, 不幸的是, 如果你想在命令行上输入多于一行的日志
      消息就会比较困难. 用户希望更灵活的输入形式&mdash;多行文本和不受约束的
      日志消息编辑.</para>

      <!--
    <para>Subversion supports this by allowing you to specify an
      external text editor that it will launch as necessary
      to give you a more powerful input mechanism for this textual
      metadata.  There are several ways to tell Subversion which
      editor you'd like use.  Subversion checks the following things,
      in the order specified, when it wants to launch such an
      editor:</para>
      -->
    <para>Subversion 允许用户指定一个外部文本编辑器, 必要时, Subversion 会
      启动该编辑器, 从而允许用户更加灵活地输入文本信息 (例如日志消息和属性
      值). 有多种方式用于指定外部编辑器, 当 Subversion 想要启动外部编辑器时,
      将按照如下顺序查看应该启动哪个编辑器:</para>

    <orderedlist>
      <listitem>
      <!--
        <para><option>- -editor-cmd</option> command-line option</para>
      -->
        <para>命令行选项 <option>--editor-cmd</option></para>
      </listitem>
      <listitem>
      <!--
        <para><literal>SVN_EDITOR</literal> environment variable</para>
      -->
        <para>环境变量 <literal>SVN_EDITOR</literal></para>
      </listitem>
      <listitem>
      <!--
        <para><literal>editor-cmd</literal> runtime configuration option</para>
      -->
        <para>运行时配置选项 <literal>editor-cmd</literal></para>
      </listitem>
      <listitem>
      <!--
        <para><literal>VISUAL</literal> environment variable</para>
      -->
        <para>环境变量 <literal>VISUAL</literal></para>
      </listitem>
      <listitem>
      <!--
        <para><literal>EDITOR</literal> environment variable</para>
      -->
        <para>环境变量 <literal>EDITOR</literal></para>
      </listitem>
      <listitem>
      <!--
        <para>Possibly, a fallback value built into the Subversion
          libraries (not present in the official builds)</para>
      -->
        <para>可能是被编译到 Subversion 库中的备用编辑器 (在官方构建的版本中
          不存在)</para>
      </listitem>
    </orderedlist>

      <!--
    <para>The value of any of these options or variables is the
      beginning of a command line to be executed by the shell.
      Subversion appends to that command line a space and the pathname
      of a temporary file to be edited.  So, to be used with
      Subversion, the configured or specified editor needs to support
      an invocation in which its last command-line parameter is a file
      to be edited, and it should be able to save the file in place
      and return a zero exit code to indicate success.</para>
      -->
    <para>上面任意一个选项或变量的值都是一个将被 shell 执行的命令行的开头,
      Subversion 会在命令行的后面加上一个空格, 然后再加上一个临时文件的路径.
      所以说, 为了能被 Subversion 使用, 所指定的编辑器必须支持它的最后一个命令
      行参数是待编辑的文件, 而且在保存文件时不能更改路径, 编辑器成功退出时
      必须返回 0.</para>

      <!--
    <para>As noted, external editors can be used to provide commit log
      messages to any of the committing subcommands (such as
      <command>svn commit</command> or <command>import</command>,
      <command>svn mkdir</command> or <command>delete</command> when
      provided a URL target, etc.), and Subversion will try to
      launch the editor automatically if you don't specify either of
      the <option>- -message</option> (<option>-m</option>) or
      <option>- -file</option> (<option>-F</option>) options.  The
      <command>svn propedit</command> command is built almost entirely
      around the use of an external editor.  And beginning in version
      1.5, Subversion will also use the configured external text
      editor when the user asks it to launch an editor during
      interactive conflict resolution.  Oddly, there doesn't appear to
      be a way to use external editors to interactively provide lock
      comments.</para>
      -->
    <para>外部编辑器可以为提交类的子命令 (例如 <command>svn commit</command>,
      <command>svn import</command>, <command>svn mkdir</command>
      或 <command>svn delete</command>) 提供日志消息, 如果没有指定选项
      <option>--message</option> (<option>-m</option>) 和
      <option>--file</option> (<option>-F</option>), 那么 Subversion 就会尝试
      启动外部编辑器, 命令 <command>svn propedit</command> 几乎就是在围绕着
      外部编辑器. 从 Subversion 1.5 开始, Subversion 还可以在交互式地解决冲突
      时, 按照用户的要求来启动外部编辑器. 奇怪的是, 在编写锁注释时无法使用
      外部编辑器.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.advanced.externaldifftools">
      <!--
    <title>Using External Differencing and Merge Tools</title>
      -->
    <title>使用外部差异比较与合并工具</title>

      <!--
    <para>The interface between Subversion and external two- and three-way
      differencing tools harkens back to a time when Subversion's only
      contextual differencing capabilities were built around
      invocations of the GNU diffutils toolchain, specifically the
      <command>diff</command> and <command>diff3</command> utilities.
      To get the kind of behavior Subversion needed, it called these
      utilities with more than a handful of options and parameters,
      most of which were quite specific to the utilities.  Some time
      later, Subversion grew its own internal differencing library,
      and as a failover mechanism, the <option>- -diff-cmd</option> and
      <option>- -diff3-cmd</option> options were added to the
      Subversion command-line client so that users could more easily
      indicate that they preferred to use the GNU diff and diff3
      utilities instead of the newfangled internal diff library.  If
      those options were used, Subversion would simply ignore the
      internal diff library, and fall back to running those external
      programs, lengthy argument lists and all.  And that's where
      things remain today.</para>
      -->
    <para>Subversion 与二路以及三路差异比较工具之间的接口可以一直追溯到它的
      起源时期, 那时候 Subversion 的差异比较功能直接来自 GNU 工具的调用,
      尤其是 <command>diff</command> 和 <command>diff3</command>. Subversion
      为了得到期望的效果, 在调用这些工具时会加上一些参数或选项, 其中的大部分
      选项都是工具所特有的. 随着 Subversion 的不断开发, 它渐渐地具有了自己的
      差异比较库函数, 但同时也为客户端工具增加了选项
      <option>--diff-cmd</option> 和 <option>--diff3-cmd</option>, 于是用户
      可以告诉客户端使用 GNU 差异比较工具 <command>diff</command> 和
      <command>diff3</command>, 而非内建的差异比较库函数. 如果使用了选项
      <option>--diff-cmd</option> 或 <option>--diff3-cmd</option>, Subversion
      就会忽略内建的差异比较库函数, 转而调用外部的差异比较程序, 在调用时传递
      必要的选项.</para>

      <!--
    <para>It didn't take long for folks to realize that having such
      easy configuration mechanisms for specifying that Subversion
      should use the external GNU diff and diff3 utilities located at
      a particular place on the system could be applied toward the use
      of other differencing tools, too.  After all, Subversion didn't
      actually verify that the things it was being told to run were
      members of the GNU diffutils toolchain.  But the only
      configurable aspect of using those external tools is their
      location on the system&mdash;not the option set, parameter
      order, and so on.  Subversion continues to throw all those GNU utility
      options at your external diff tool regardless of whether
      that program can understand those options.  And that's where
      things get unintuitive for most users.</para>
      -->
    <para>读者应该很容易想到, 既然 Subversion 可以使用 GNU 的
      <command>diff</command> 和 <command>diff3</command>, 那当然也可以使用
      其他的差异比较工具, 毕竟 Subversion 并不知道它所调用的工具到底是不是
      GNU 的差异比较工具. 不过, 在使用这些外部工具时, 唯一可配置的地方就是它
      们在系统中的路径&mdash;而非选项或参数的顺序等. Subversion 仍然会像往常
      一样把 GNU 工具的选项传递给你所指定的外部差异比较工具, 无论它们理不理解
      这些选项, 大多数用户的困惑即来自于此.</para>

    <note>
      <!--
      <para>The decision on when to fire off a contextual two- or
        three-way diff as part of a larger Subversion operation is
        made internally by Subversion and is affected by, among other
        things, whether the files being operated on are human-readable
        as determined by their <literal>svn:mime-type</literal>
        property.  This means, for example, that even if you had the
        niftiest Microsoft Word-aware differencing or merging tool in
        the universe, it would typically not be invoked by Subversion
        if your versioned Word documents had a configured MIME type
        that denoted that they were not human-readable (such as
        <literal>application/msword</literal>).  Fortunately, you can
        pass the <option>- -force</option> option to <command>svn
        diff</command> to short-circuit this MIME-related sanity check
        and force the difference to be calculated.  For more about
        MIME type settings, see
        <xref linkend="svn.advanced.props.special.mime-type"/></para>
      -->
      <para>什么时候决定调用差异比较工具由 Subversion 内部进行决定, 而且还
        受到文件是否是文本文件的影响, 后者由属性
        <literal>svn:mime-type</literal> 决定. 比如说, 即使说你有一个漂亮的,
        可以对 Microsoft Word 文档进行差异比较和合并的工具, 但是如果 Word
        文档的 MIME 类型是二进制文件 (例如
        <literal>application/msword</literal>), 那么 Subversion 也不会调用该
        工具. 幸运的是, 你可以为 <command>svn diff</command> 增加选项
        <option>--force</option>, 强制 Subversion 对文件进行差异比较. 关于
        MIME 类型设置的更多内容, 见 <xref
          linkend="svn.advanced.props.special.mime-type"/></para>
    </note>

      <!--
    <para>Much later, Subversion 1.5 introduced interactive resolution
      of conflicts (described in
      <xref linkend="svn.tour.cycle.resolve" />).  One of the options
      that this feature provides to users is the ability to
      interactively launch a third-party merge tool.  If this action
      is taken, Subversion will check to see if the user has specified
      such a tool for use in this way.  Subversion will first check
      the <literal>SVN_MERGE</literal> environment variable for the
      name of an external merge tool.  If that variable is not set, it
      will look for the same information in the value of
      the <literal>merge-tool-cmd</literal> runtime configuration
      option.  Upon finding a configured external merge tool, it will
      invoke that tool.</para>
      -->
    <para>Subversion 1.5 引入了交互式的冲突解决 (见 <xref
        linkend="svn.tour.cycle.resolve" />), 这项特性提供的选项之一是允许用户
      交互式地调用一个第三方合并工具. 如果 Subversion 需要调用第三方合并工具,
      它就会检查用户是否已经指定了工具, 它首先检查环境变量
      <literal>SVN_MERGE</literal>, 如果该变量没有被设置, 它就继续检查运行时
      配置选项 <literal>merge-tool-cmd</literal>. 一旦找到外部合并工具, 它就
      调用该工具.</para>

    <note>
      <!--
      <para>While the general purposes of the three-way differencing
        and merge tools are roughly the same (finding a way to make
        separate-but-overlapping file changes live in harmony),
        Subversion exercises each of these options at different times
        and for different reasons.  The internal three-way
        differencing engine and its optional external replacement are
        used when interaction with the user
        is <emphasis>not</emphasis> expected.  In fact, significant
        delay introduced by such a tool can actually result in the
        failure of some time-sensitive Subversion operations.  It's
        the external merge tool that is intended to be invoked
        interactively.</para>
      -->
      <para>由于三路差异比较工具和合并工具的目标是基本相同的 (把各自的, 但
        是互相重叠的修改和谐地合并到一起), Subversion 会根据不同的情景使用
        它们. 在与用户交互时调用 Subversion 内建的三路差异比较引擎和它的外部
        替代品其实是有风险的, 因为使用这些工具而耽搁的时间可能会导致某些对
        时间比较敏感的操作失败, 这时候 Subversion 更愿意交互式地调用外部合并
        工具.</para>
    </note>

      <!--
    <para>Now, while the interface between Subversion and an external
      merge tool is significantly less convoluted than that between
      Subversion and the diff and diff3 tools, the likelihood of
      finding such a tool whose calling conventions exactly match what
      Subversion expects is still quite low.  The key to using
      external differencing and merge tools with Subversion is to use
      wrapper scripts, which convert the input from Subversion into
      something that your specific differencing tool can understand,
      and then convert the output of your tool back into a format that
      Subversion expects.  The following sections cover the specifics
      of those expectations.</para>
      -->
    <para>虽然 Subversion 与外部合并工具之间的接口, 比 Subversion 与
      <command>diff</command>, <command>diff3</command> 之间的接口要简单得多,
      但是能够找到完全符合 Subversion 要求的外部合并工具还是没那么简单的.
      为 Subversion 指定外部差异比较和合并工具的关键是使用包装脚本, 包装脚本
      的功能是把 Subversion 传过来的参数转换成外部工具能够理解的参数, 然后再
      把外部工具的输出转换成 Subversion 支持的格式. 下面几节进行了具体的介绍.
    </para>

    <!-- =============================================================== -->
    <sect2 id="svn.advanced.externaldifftools.diff">
      <!--
      <title>External diff</title>
      -->
      <title>外部差异比较工具</title>

      <!--
      <para>Subversion calls external diff programs with parameters
        suitable for the GNU diff utility, and expects only that the
        external program will return with a successful error code per
        the GNU diff definition thereof.  For most alternative diff
        programs, only the sixth and seventh arguments&mdash;the paths
        of the files that represent the left and right sides of the
        diff, respectively&mdash;are of interest.  Note that
        Subversion runs the diff program once per modified file
        covered by the Subversion operation, so if your program runs
        in an asynchronous fashion (or is <quote>backgrounded</quote>),
        you might have several instances of it all running
        simultaneously.  Finally, Subversion expects that your program
        return an error code of 1 if your program detected
        differences, or 0 if it did not&mdash;any other error code is
        considered a fatal error.<footnote><para>The GNU diff manual
        page puts it this way: <quote>An exit status of 0 means no
        differences were found, 1 means some differences were found,
        and 2 means trouble.</quote></para></footnote></para>
      -->
      <para>Subversion 按照 GNU <command>diff</command> 命令的要求向外部差异
        比较工具传递参数, 同时期望外部差异比较工具按照 GNU
        <command>diff</command> 的要求返回正确的退出值. 对于大多数差异比较
        工具, 它们通常只对第 6 和第 7 个参数&mdash;分别表示差异的左边内容与右边
        内容的文件路径&mdash;感兴趣. 注意, Subversion 为第一个被修改的文件
        运行一次差异比较工具, 所以说如果你的差异比较工具是异步运行的 (或者说
        在后台运行), 那么多个运行实例可能会同时运行. 最后, 如果差异比较工具
        检测到了有差异, 则 Subversion 希望工具返回退出值 1, 如果没有检测到差异
        则返回退出值 0, 若返回其他退出值则认为工具遇到了错误.<footnote><para>
            GNU <command>diff</command> 的手册是这么说的: <quote>退出值 0
              表示没有检测到差异, 1 表示检测到差异, 2 表示遇到了错误.</quote>
          </para></footnote></para>

      <!--
      <para><xref linkend="svn.advanced.externaldifftools.diff.ex-1"/>
        and <xref linkend="svn.advanced.externaldifftools.diff.ex-2"/>
        are templates for external diff tool wrappers in the Python
        and Windows batch scripting languages, respectively.</para>
      -->
      <para><xref linkend="svn.advanced.externaldifftools.diff.ex-1"/>
        和 <xref linkend="svn.advanced.externaldifftools.diff.ex-2"/>
        分别展示了如何使用 Python 和 Windows 批处理脚本编写外部差异比较工具
        的包装脚本.</para>

      <example id="svn.advanced.externaldifftools.diff.ex-1">
        <title>diffwrap.py</title>
        <programlisting>
#!/usr/bin/env python
import sys
import os

# Configure your favorite diff program here.
DIFF = "/usr/local/bin/my-diff-tool"

# Subversion provides the paths we need as the last two parameters.
LEFT  = sys.argv[-2]
RIGHT = sys.argv[-1]

# Call the diff command (change the following line to make sense for
# your diff program).
cmd = [DIFF, '--left', LEFT, '--right', RIGHT]
os.execv(cmd[0], cmd)

# Return an errorcode of 0 if no differences were detected, 1 if some were.
# Any other errorcode will be treated as fatal.
</programlisting>
      </example>

      <example id="svn.advanced.externaldifftools.diff.ex-2">
        <title>diffwrap.bat</title>
        <programlisting>
@ECHO OFF

REM Configure your favorite diff program here.
SET DIFF="C:\Program Files\Funky Stuff\My Diff Tool.exe"

REM Subversion provides the paths we need as the last two parameters.
REM These are parameters 6 and 7 (unless you use svn diff -x, in
REM which case, all bets are off).
SET LEFT=%6
SET RIGHT=%7

REM Call the diff command (change the following line to make sense for
REM your diff program).
%DIFF% --left %LEFT% --right %RIGHT%

REM Return an errorcode of 0 if no differences were detected, 1 if some were.
REM Any other errorcode will be treated as fatal.
</programlisting>
      </example>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.advanced.externaldifftools.diff3">
      <!--
      <title>External diff3</title>
      -->
      <title>外部三路差异比较工具</title>

      <!--
      <para>Subversion invokes three-way differencing programs to
        perform non-interactive merges.  When configured to use an
        external three-way differencing program, it executes that
        program with parameters suitable for the GNU diff3 utility,
        expecting that the external program will return with a
        successful error code and that the full file contents that
        result from the completed merge operation are printed on the
        standard output stream (so that Subversion can redirect them
        into the appropriate version-controlled file).  For most
        alternative merge programs, only the ninth, tenth, and
        eleventh arguments, the paths of the files which represent
        the <quote>mine</quote>, <quote>older</quote>,
        and <quote>yours</quote> inputs, respectively, are of
        interest.  Note that because Subversion depends on the output
        of your merge program, your wrapper script must not exit
        before that output has been delivered to Subversion.  When it
        finally does exit, it should return an error code of 0 if the
        merge was successful, or 1 if unresolved conflicts remain in
        the output&mdash;any other error code is considered a fatal
        error.</para>
      -->
      <para>当 Subversion 要执行非交互式的合并时就会调用三路差异比较程序,
        如果被调用的是外部工具, 那么 Subversion 就会按照 GNU
        <command>diff3</command> 的要求向外部工具传递参数, 并且期望外部工具
        以表示成功的值退出, 而合并完成后的全部文件内容是打印到标准输出
        (这样的话 Subversion 就能把它们重定向到任意一个文件中). 对于大多数可
        供选择的合并工具来说, 它们只对第 9, 第 10 和第 11 个参数感兴趣, 这
        3 个参数分别表示 <quote>自己的</quote>, <quote>较老的</quote> 和
        <quote>你的</quote> 文件路径. 注意, 由于 Subversion 依赖合并工具所
        产生的输出, 因此你的脚本必须等到工具的输出全部都传递给 Subversion
        后才能退出. 当脚本最终退出时, 如果合并成功, 那它应该以 0 作为退出值,
        如果还有未解决的冲突, 那就以 1 作为退出值, 除了 0 和 1 之外的其他值
        都被视为发生了严重的错误.</para>

      <!--
      <para><xref linkend="svn.advanced.externaldifftools.diff3.ex-1"/> 
        and <xref linkend="svn.advanced.externaldifftools.diff3.ex-2"/> are
        templates for external three-way differencing tool wrappers in
        the Python and Windows batch scripting languages,
        respectively.</para>
      -->
      <para><xref linkend="svn.advanced.externaldifftools.diff3.ex-1"/>
        和 <xref linkend="svn.advanced.externaldifftools.diff3.ex-2"/> 是
        外部三路差异比较工具的包装脚本模板, 分别用 Python 和 Windows 批处
        理脚本编写.
      </para>

      <example id="svn.advanced.externaldifftools.diff3.ex-1">
        <title>diff3wrap.py</title>
        <programlisting>
#!/usr/bin/env python
import sys
import os

# Configure your favorite three-way diff program here.
DIFF3 = "/usr/local/bin/my-diff3-tool"

# Subversion provides the paths we need as the last three parameters.
MINE  = sys.argv[-3]
OLDER = sys.argv[-2]
YOURS = sys.argv[-1]

# Call the three-way diff command (change the following line to make
# sense for your three-way diff program).
cmd = [DIFF3, '--older', OLDER, '--mine', MINE, '--yours', YOURS]
os.execv(cmd[0], cmd)

# After performing the merge, this script needs to print the contents
# of the merged file to stdout.  Do that in whatever way you see fit.
# Return an errorcode of 0 on successful merge, 1 if unresolved conflicts
# remain in the result.  Any other errorcode will be treated as fatal.
</programlisting>
      </example>

      <example id="svn.advanced.externaldifftools.diff3.ex-2">
        <title>diff3wrap.bat</title>
        <programlisting>
@ECHO OFF

REM Configure your favorite three-way diff program here.
SET DIFF3="C:\Program Files\Funky Stuff\My Diff3 Tool.exe"

REM Subversion provides the paths we need as the last three parameters.
REM These are parameters 9, 10, and 11.  But we have access to only
REM nine parameters at a time, so we shift our nine-parameter window
REM twice to let us get to what we need.
SHIFT
SHIFT
SET MINE=%7
SET OLDER=%8
SET YOURS=%9

REM Call the three-way diff command (change the following line to make
REM sense for your three-way diff program).
%DIFF3% --older %OLDER% --mine %MINE% --yours %YOURS%

REM After performing the merge, this script needs to print the contents
REM of the merged file to stdout.  Do that in whatever way you see fit.
REM Return an errorcode of 0 on successful merge, 1 if unresolved conflicts
REM remain in the result.  Any other errorcode will be treated as fatal.
</programlisting>
      </example>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.advanced.externaldifftools.merge">
      <!--
      <title>External merge</title>
      -->
      <title>外部合并工具</title>

      <!--
      <para>Subversion optionally invokes an external merge tool as
        part of its support for interactive conflict resolution.  It
        provides as arguments to the merge tool the following: the
        path of the unmodified base file, the path of
        the <quote>theirs</quote> file (which contains upstream
        changes), the path of the <quote>mine</quote> file (which
        contains local modifications), the path of the file into which
        the final resolved contents should be stored by the merge
        tool, and the working copy path of the conflicted file
        (relative to the original target of the merge operation).  The
        merge tool is expected to return an error code of 0 to
        indicate success, or 1 to indicate failure.</para>
      -->
      <para>在交互式地解决冲突时, Subversion 可以选择调用一个外部合并工具.
        Subversion 提供给外部合并工具的参数有: 未修改的基础文件路径,
        <quote>他们的</quote> 文件路径 (含有上游修改), <quote>我们的</quote>
        文件路径 (含有本地修改), 用于存放合并工具合并后的文件路径, 以及发生
        冲突的文件的工作副本路径 (相对于合并操作的原始目标). 如果执行成功,
        合并工具应该返回 0, 如果发生错误则返回 1.</para>

      <!--
      <para><xref linkend="svn.advanced.externaldifftools.merge.ex-1"/> 
        and <xref linkend="svn.advanced.externaldifftools.merge.ex-2"/> are
        templates for external merge tool wrappers in the Python
        and Windows batch scripting languages, respectively.</para>
      -->
      <para><xref linkend="svn.advanced.externaldifftools.merge.ex-1"/>
        和 <xref linkend="svn.advanced.externaldifftools.merge.ex-2"/> 是
        外部合并工具的包装脚本模板, 分别用 Python 和 Windows 批处理脚本编写.
      </para>

      <example id="svn.advanced.externaldifftools.merge.ex-1">
        <title>mergewrap.py</title>
        <programlisting>
#!/usr/bin/env python
import sys
import os

# Configure your favorite merge program here.
MERGE = "/usr/local/bin/my-merge-tool"

# Get the paths provided by Subversion.
BASE   = sys.argv[1]
THEIRS = sys.argv[2]
MINE   = sys.argv[3]
MERGED = sys.argv[4]
WCPATH = sys.argv[5]

# Call the merge command (change the following line to make sense for
# your merge program).
cmd = [MERGE, '--base', BASE, '--mine', MINE, '--theirs', THEIRS,
              '--outfile', MERGED]
os.execv(cmd[0], cmd)

# Return an errorcode of 0 if the conflict was resolved; 1 otherwise.
# Any other errorcode will be treated as fatal.
</programlisting>
      </example>

      <example id="svn.advanced.externaldifftools.merge.ex-2">
        <title>mergewrap.bat</title>
        <programlisting>
@ECHO OFF

REM Configure your favorite merge program here.
SET MERGE="C:\Program Files\Funky Stuff\My Merge Tool.exe"

REM Get the paths provided by Subversion.
SET BASE=%1
SET THEIRS=%2
SET MINE=%3
SET MERGED=%4
SET WCPATH=%5

REM Call the merge command (change the following line to make sense for
REM your merge program).
%MERGE% --base %BASE% --mine %MINE% --theirs %THEIRS% --outfile %MERGED%

REM Return an errorcode of 0 if the conflict was resolved; 1 otherwise.
REM Any other errorcode will be treated as fatal.
</programlisting>
      </example>

    </sect2>
  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.customization.summary">
      <!--
    <title>Summary</title>
      -->
    <title>小结</title>

      <!--
    <para>Sometimes there's a single right way to do things; sometimes
      there are many.  Subversion's developers understand that while
      the majority of its exact behaviors are acceptable to most of
      its users, there are some corners of its functionality where
      such a universally pleasing approach doesn't exist.  In those
      places, Subversion offers users the opportunity to tell it how
      <emphasis>they</emphasis> want it to behave.</para>
      -->
    <para>有时候, 只能用一种正确的方式来完成任务, 有时候却存在许多种正确方式.
      开发人员明白虽然 Subversion 的大多数行为对于大多数用户来说都是可接受的,
      但总会存在无法令人满意的角落. 在这种情况下, Subversion 允许用户决定如何
      处理.</para>

      <!--
    <para>In this chapter, we explored Subversion's runtime
      configuration system and other mechanisms by which users can
      control those configurable behaviors.  If you are a developer,
      though, the next chapter will take you one step further.  It
      describes how you can further customize your Subversion
      experience by writing your own software against Subversion's
      libraries.</para>
      -->
    <para>本章我们介绍了 Subversion 的运行时配置系统, 以及其他可用来配置
      运行行为的机制. 如果你是一个开发人员, 下一章将从开发人员的角度介绍如何
      利用 Subversion 提供的库函数, 进一步定制 Subversion.</para>

  </sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
