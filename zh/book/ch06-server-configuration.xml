<!-- -*- sgml -*- -->

<chapter id="svn.serverconfig">
      <!--
  <title>Server Configuration</title>
      -->
  <title>服务器配置</title>

      <!--
  <para>A Subversion repository can be accessed simultaneously by
    clients running on the same machine on which the repository
    resides using URLs carrying the <literal>file://</literal> scheme.
    But the typical Subversion setup involves a single server machine
    being accessed from clients on computers all over the
    office&mdash;or, perhaps, all over the world.</para>
      -->
  <para>一个 Subversion 仓库可以被多个客户端同时访问, 这些客户端和仓库都在同
    一台主机上, 通过 <literal>file://</literal> 形式的 URL 进行访问. 不过在
    典型的情况下, Subversion 仓库是存放在一台单独的服务器上, 办公室&mdash;
    甚至全世界&mdash;的任意一台主机都能访问到这台服务器.</para>

      <!--
  <para>This chapter describes how to get your Subversion repository
    exposed outside its host machine for use by remote clients.  We
    will cover Subversion's currently available server mechanisms,
    discussing the configuration and use of each.  After reading this
    chapter, you should be able to decide which networking setup is
    right for your needs, as well as understand how to enable such a
    setup on your host computer.</para>
      -->
  <para>本章介绍如何把 Subversion 仓库暴露给远程的客户端使用. 我们将会介绍
    Subversion 目前支持的服务器机制和各个配置, 读完本章后, 读者将有能力判断
    什么样的网络配置才是正确的, 以及如何在自己的主机上进行配置.</para>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.serverconfig.overview">

      <!--
    <title>Overview</title>
      -->
    <title>概览</title>

    <para>
      <indexterm>
        <primary>API</primary>
        <secondary>layers</secondary>
        <tertiary>Repository Access (RA) Layer</tertiary>
      </indexterm>Subversion 具有一个抽象的仓库访问层, 这就意味着仓库可以
      被任意类型的服务器进程以编程方式进行访问, 并且客户端 <quote>仓库访问
        API</quote> 允许程序员编写协议相关的插件. 从理论上讲, Subversion 支持
      任意类型的网络实现, 但在实际使用中, 只有两种 Subversion 服务器用得比较
      广泛.</para>
      <!--
      Subversion was designed with an abstract repository
      access layer.  This means that a repository can be
      programmatically accessed by any sort of server process, and the
      client <quote>repository access</quote> API allows programmers
      to write plug-ins that speak relevant network protocols.  In
      theory, Subversion can use an infinite number of network
      implementations.  In practice, there are only two Subversion
      servers in widespread use today.</para>
      -->

    <para>
      <indexterm>
        <primary>httpd</primary>
      </indexterm>
      <indexterm>
        <primary>Apache HTTP Server</primary>
        <see>httpd</see>
      </indexterm>Apache HTTP 服务器 (也被称作 <command>httpd</command>) 是一
      个非常流行的网页服务器; 利用 <command>mod_dav_svn</command> 模块,
      Apache 就能访问仓库, 并通过 WebDAV/DeltaV 协议支持客户端访问,
      WebDAV/DeltaV 协议是 HTTP 的扩展. 因为 Apache 的可扩展性非常强, 它提供
      了大量可 <quote>免费</quote> 使用的特性, 例如加密的 SSL 通信, 日志记录,
      可集成第三方认证系统, 受限的仓库网页访问界面.</para>
      <!--
      Apache HTTP Server (also known
      as <command>httpd</command>) is an extremely popular web server;
      using the <command>mod_dav_svn</command> module, Apache can
      access a repository and make it available to clients via the
      WebDAV/DeltaV protocol, which is an extension of HTTP.  Because
      Apache is an extremely extensible server, it provides a number
      of features <quote>for free,</quote> such as encrypted SSL
      communication, logging, integration with a number of third-party
      authentication systems, and limited built-in web browsing of
      repositories.</para>
      -->

    <para>
      <indexterm>
        <primary>svnserve</primary>
      </indexterm>另一种就是 <command>svnserve</command>: 一种小型的轻量服务
      器程序, 使用定制的协议与客户端通信. 因为它所使用的协议是专为 Subversion
      而设计的有状态协议 (相对于无状态的 HTTP 协议), 它提供了更快速的网络操作
      &mdash;但同时也要付出一些代价. 虽然 <command>svnserve</command> 可以利用
      SASL 提供各种各样的认证和加密选项, 但它不支持日志记录和网页浏览. 然而,
      搭建 <command>svnserve</command> 非常方便, 非常适合刚开始接触 Subversion
      的小型团队.</para>
      <!--
      In the other corner is <command>svnserve</command>:
      a small, lightweight server program that speaks a custom
      protocol with clients.  Because its protocol is explicitly
      designed for Subversion and is stateful (unlike HTTP), it
      provides significantly faster network operations&mdash;but at
      the cost of some features as well.  While it can use SASL to
      provide a variety of authentication and encryption options, it
      has no logging or built-in web browsing.  It is, however,
      extremely easy to set up and is often the best option for small
      teams just starting out with Subversion.</para>
      -->

      <!--
    <para>The network protocol which <command>svnserve</command>
      speaks may also be tunneled over an SSH connection.  This
      deployment option for <command>svnserve</command> differs quite
      a bit in features from a traditional <command>svnserve</command>
      deployment.  SSH is used to encrypt all communication.  SSH is
      also used exclusively to authenticate, so real system accounts
      are required on the server host (unlike
      vanilla <command>svnserve</command>, which has its own private
      user accounts).  Finally, because this setup requires that each
      user spawn a private, temporary <command>svnserve</command>
      process, it's equivalent (from a permissions point of view) to
      allowing a group of local users to all access the repository
      via <literal>file://</literal> URLs.  Path-based access control
      has no meaning, since each user is accessing the repository
      database files directly.</para>
      -->
    <para><command>svnserve</command> 所使用的协议还能被 SSH 包裹, 这种部署
      形式和以传统方式部署的 <command>svnserve</command> 相比, 在特性上有很
      大的不同. 此时 SSH 将用于加密所有的连接, 只使用 SSH 进行认证, 这就要求
      用户在服务器主机上必须拥有真实的系统账户 (而普通的
      <command>svnserve</command> 拥有一套自己的用户账户). 最后, 这种部署
      配置要求每个用户都要派生一个私有的临时 <command>svnserve</command> 进程,
      (从系统权限的角度来看) 这就相当于允许一组本地用户使用
      <literal>file://</literal> URL 访问仓库, 基于路径的访问控制将失去意义,
      因为用户是在直接访问仓库的数据库文件.</para>

      <!--
    <para><xref linkend="svn.serverconfig.overview.tbl-1"/> provides a
      quick summary of the three typical server deployments.</para>
      -->
    <para><xref linkend="svn.serverconfig.overview.tbl-1"/> 总结了三种典型
      的服务器部署方式.</para>

    <table id="svn.serverconfig.overview.tbl-1">
      <!--
      <title>Comparison of Subversion server options</title>
      -->
      <title>各种 Subversion 服务器选项的比较</title>
      <tgroup cols="4">
        <thead>
          <row>
      <!--
            <entry>Feature</entry>
      -->
            <entry>特性</entry>
            <entry>Apache + mod_dav_svn</entry>
            <entry>svnserve</entry>
      <!--
            <entry>svnserve over SSH</entry>
      -->
            <entry>svnserve + SSH</entry>
          </row>
        </thead>
        <tbody>
          <row>
      <!--
            <entry>Authentication options</entry>
            <entry>HTTP Basic or Digest auth, X.509 certificates, LDAP,
              NTLM, or any other mechanism available to Apache httpd</entry>
            <entry>CRAM-MD5 by default;  LDAP, NTLM, or any other mechanism
              available to SASL</entry>
      -->
            <entry>认证选项</entry>
            <entry>HTTP Basic or Digest 认证, X.509 证书, LDAP,
              NTLM, 或 Apache httpd 支持的其他认证机制</entry>
            <entry>默认是 CRAM-MD5; LDAP, NTLM, 或 SASL
              支持的其他认证机制</entry>
            <entry>SSH</entry>
          </row>
          <row>
      <!--
            <entry>User account options</entry>
            <entry>Private <quote>users</quote> file, or other mechanisms
            available to Apache httpd (LDAP, SQL, etc.)</entry>
            <entry>Private <quote>users</quote> file, or other
              mechanisms available to SASL (LDAP, SQL, etc.)</entry>
            <entry>System accounts</entry>
      -->
            <entry>用户帐户选项</entry>
            <entry>私有的 <quote>用户</quote> 文件, 或 Apache httpd 支持的
              其他机制 (LDAP, SQL 等)</entry>
            <entry>私有的 <quote>用户</quote> 文件, 或 SASL 支持的其他机制
              (LDAP, SQL 等)</entry>
            <entry>系统账户</entry>
          </row>
          <row>
      <!--
            <entry>Authorization options</entry>
            <entry>Read/write access can be granted over the whole
              repository, or specified per path</entry>
            <entry>Read/write access can be granted over the whole
              repository, or specified per path</entry>
            <entry>Read/write access only grantable over the whole
              repository</entry>
      -->
            <entry>授权选项</entry>
            <entry>可以在整个仓库或特定的路径上授予读/写权限</entry>
            <entry>可以在整个仓库或特定的路径上授予读/写权限</entry>
            <entry>只能在整个仓库上授予读/写权限</entry>
          </row>
          <row>
      <!--
            <entry>Encryption</entry>
            <entry>Available via optional SSL (https)</entry>
            <entry>Available via optional SASL features</entry>
            <entry>Inherent in SSH connection</entry>
      -->
            <entry>加密</entry>
            <entry>通过可选的 SSL (https) 实现</entry>
            <entry>通过可选的 SASL 特性实现</entry>
            <entry>由 SSH 连接实现</entry>
          </row>
          <row>
            <!-- ### TODO -->
            <entry>Logging</entry>
            <entry>High-level operational logging of Subversion
              operations plus detailed logging at the
              per-HTTP-request level</entry>
            <entry>High-level operational logging only</entry>
            <entry>High-level operational logging only</entry>
          </row>
          <row>
      <!--
            <entry>Interoperability</entry>
            <entry>Accessible by other WebDAV clients</entry>
            <entry>Talks only to svn clients</entry>
            <entry>Talks only to svn clients</entry>
      -->
            <entry>互操作性</entry>
            <entry>其他 WebDAV 客户端可访问</entry>
            <entry>只能被 svn 客户端访问</entry>
            <entry>只能被 svn 客户端访问</entry>
          </row>
          <row>
      <!--
            <entry>Web viewing</entry>
            <entry>Limited built-in support, or via third-party tools
              such as ViewVC</entry>
            <entry>Only via third-party tools such as ViewVC</entry>
            <entry>Only via third-party tools such as ViewVC</entry>
      -->
            <entry>网页浏览</entry>
            <entry>有限的内建支持, 或者通过第三方工具实现, 例如 ViewVC</entry>
            <entry>只能通过第三方工具实现, 例如 ViewVC</entry>
            <entry>只能通过第三方工具实现, 例如 ViewVC</entry>
          </row>
          <row>
      <!--
            <entry>Master-slave server replication</entry>
            <entry>Transparent write-proxying available from slave to
              master</entry>
            <entry>Can only create read-only slave servers</entry>
            <entry>Can only create read-only slave servers</entry>
      -->
            <entry>主从服务器复制</entry>
            <entry>从服务器到主服务器可以使用透明的写代理</entry>
            <entry>只能创建只读的从服务器</entry>
            <entry>只能创建只读的从服务器</entry>
          </row>
          <row>
      <!--
            <entry>Speed</entry>
            <entry>Somewhat slower</entry>
            <entry>Somewhat faster</entry>
            <entry>Somewhat faster</entry>
      -->
            <entry>访问速度</entry>
            <entry>较慢</entry>
            <entry>较快</entry>
            <entry>较快</entry>
          </row>
          <row>
      <!--
            <entry>Initial setup</entry>
            <entry>Somewhat complex</entry>
            <entry>Extremely simple</entry>
            <entry>Moderately simple</entry>
      -->
            <entry>初始设置</entry>
            <entry>较复杂</entry>
            <entry>非常简单</entry>
            <entry>中等</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

  </sect1>

  <sect1 id="svn.serverconfig.choosing">

      <!--
    <title>Choosing a Server Configuration</title>
      -->
    <title>选择一种服务器配置</title>

      <!--
    <para>So, which server should you use?  Which is best?</para>
      -->
    <para>那么, 我应该使用哪种服务器配置, 哪一种是最好的?</para>

      <!--
    <para>Obviously, there's no right answer to that question.  Every
      team has different needs, and the different servers all
      represent different sets of trade-offs.  The Subversion project
      itself doesn't endorse one server or another, or consider either
      server more <quote>official</quote> than another.</para>
      -->
    <para>显然, 这个问题不存在正确的答案. 每一个开发团队都有不同的需求,
      每一种服务器配置都代表了不同的权衡. Subversion 不会偏爱任何一种,
      也不会认为某种服务器配置更加 <quote>官方</quote>.</para>

      <!--
    <para>Here are some reasons why you might choose one deployment
      over another, as well as reasons you
      might <emphasis>not</emphasis> choose one.</para>
      -->
    <para>下面列出几点在选择服务器部署配置时应该考虑的因素.</para>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.choosing.svnserve">

      <!--
      <title>The svnserve Server</title>
      -->
      <title>svnserve 服务器</title>

      <variablelist>
        <varlistentry>
      <!--
          <term>Why you might want to use it:</term>
      -->
          <term>应该用它的理由:</term>
          <listitem>
            <itemizedlist>
              <listitem>
      <!--
                <para>Quick and easy to set up.</para>
      -->
                <para>设置方便.</para>
              </listitem>
              <listitem>
      <!--
                <para>Network protocol is stateful and noticeably
                  faster than WebDAV.</para>
      -->
                <para>网络协议是有状态的, 并且比 WebDAV 快很多.</para>
              </listitem>
              <listitem>
      <!--
                <para>No need to create system accounts on
                  server.</para>
      -->
                <para>不需要在服务器上创建系统帐户.</para>
              </listitem>
              <listitem>
      <!--
                <para>Password is not passed over the network.</para>
      -->
                <para>密码不会在网络上传输.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
        <varlistentry>
      <!--
          <term>Why you might want to avoid it:</term>
      -->
          <term>不应该用它的理由:</term>
          <listitem>
            <itemizedlist>
              <listitem>
      <!--
                <para>By default, only one authentication method is
                  available, the network protocol is not encrypted,
                  and the server stores clear text passwords.  (All
                  these things can be changed by configuring SASL, but
                  it's a bit more work to do.)</para>
      -->
                <para>默认情况下, 只有一种认证方式可用, 网络协议是未加密的,
                  而且服务器以明文的形式存放密码. (这些都能通过配置 SASL 加
                  以修改, 但也带来了更多的工作量.)</para>
              </listitem>
              <listitem>
      <!--
                <para>No advanced logging facilities.</para>
      -->
                <para>缺乏高级的日志设施.</para>
              </listitem>
              <listitem>
      <!--
                <para>No built-in web browsing.  (You'd have to
                  install a separate web server and repository
                  browsing software to add this.)</para>
      -->
                <para>缺乏内建的网页浏览界面. (为了实现网页浏览, 管理员必须
                  安装额外的网页服务器和仓库浏览软件.)</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
      </variablelist>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.choosing.svn-ssh">

      <!--
      <title>svnserve over SSH</title>
      -->
      <title>svnserve + SSH</title>

      <variablelist>
        <varlistentry>
      <!--
          <term>Why you might want to use it:</term>
      -->
          <term>应该用它的理由:</term>
          <listitem>
            <itemizedlist>
              <listitem>
      <!--
                <para>The network protocol is stateful and noticeably
                  faster than WebDAV.</para>
      -->
                <para>网络协议是有状态的, 并且比 WebDAV 快很多.</para>
              </listitem>
              <listitem>
      <!--
                <para>You can take advantage of existing SSH accounts
                  and user infrastructure.</para>
      -->
                <para>管理员可以利用已有的 SSH 帐户和用户基础设施.</para>
              </listitem>
              <listitem>
      <!--
                <para>All network traffic is encrypted.</para>
      -->
                <para>所有的网络流量都是加密的.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
        <varlistentry>
      <!--
          <term>Why you might want to avoid it:</term>
      -->
          <term>不应该用它的理由:</term>
          <listitem>
            <itemizedlist>
              <listitem>
      <!--
                <para>Only one choice of authentication method is
                  available.</para>
      -->
                <para>只有一种认证方式可用.</para>
              </listitem>
              <listitem>
      <!--
                <para>No advanced logging facilities.</para>
      -->
                <para>缺乏高级的日志设施.</para>
              </listitem>
              <listitem>
      <!--
                <para>It requires users to be in the same system
                  group, or use a shared SSH key.</para>
      -->
                <para>要求用户属于相同的系统用户组, 或者使用共享的 SSH
                  密钥.</para>
              </listitem>
              <listitem>
      <!--
                <para>If used improperly, it can lead to file
                  permission problems.</para>
      -->
                <para>如果使用得不恰当, 将产生与文件权限有关的问题.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

      </variablelist>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.choosing.apache">

      <!--
      <title>The Apache HTTP Server</title>
      -->
      <title>Apache HTTP 服务器</title>

      <variablelist>
        <varlistentry>
      <!--
          <term>Why you might want to use it:</term>
      -->
          <term>应该用它的理由:</term>
          <listitem>
            <itemizedlist>
              <listitem>
      <!--
                <para>It allows Subversion to use any of the
                  numerous authentication systems already integrated
                  with Apache.</para>
      -->
                <para>允许 Subversion 去使用已经集成到 Apache 中的多种认证
                  机制.</para>
              </listitem>
              <listitem>
      <!--
                <para>There is no need to create system accounts on
                  the server.</para>
      -->
                <para>无需在服务器上创建系统帐户.</para>
              </listitem>
              <listitem>
      <!--
                <para>Full Apache logging is available.</para>
      -->
                <para>有完备的 Apache 日志可供使用.</para>
              </listitem>
              <listitem>
      <!--
                <para>Network traffic can be encrypted via SSL.</para>
      -->
                <para>网络流量经由 SSL 加密.</para>
              </listitem>
              <listitem>
      <!--
                <para>HTTP(S) can usually go through corporate
                firewalls.</para>
      -->
                <para>一般来说, HTTP(S) 可以通过企业防火墙.</para>
              </listitem>
              <listitem>
      <!--
                <para>Built-in repository browsing is available via
                  web browser.</para>
      -->
                <para>内建的仓库浏览可通过网页浏览器访问.</para>
              </listitem>
              <listitem>
      <!--
           ### TODO
                <para>The repository can be mounted as a network
                  drive for transparent version control (see <xref
                  linkend="svn.webdav.autoversioning"/>).</para>
      -->
              <para>仓库可以被当作网络驱动器, 进行挂载 (见 <xref
                  linkend="svn.webdav.autoversioning"/>).</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
        <varlistentry>
      <!--
          <term>Why you might want to avoid it:</term>
      -->
          <term>不应该用它的理由:</term>
          <listitem>
            <itemizedlist>
              <listitem>
      <!--
                <para>Noticeably slower than <command>svnserve</command>,
                  because HTTP is a stateless protocol and requires
                  more network turnarounds.</para>
      -->
                <para>比 <command>svnserve</command> 慢得多, 因为 HTTP 是一
                  种无状态的协议, 需要更多的网络转换.</para>
              </listitem>
              <listitem>
      <!--
                <para>Initial setup can be complex.</para>
      -->
                <para>初始设置比较复杂.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

      </variablelist>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.choosing.recommendations">

      <!--
      <title>Recommendations</title>
      -->
      <title>建议</title>

      <!--
      <para>In general, the authors of this book recommend a vanilla
        <command>svnserve</command> installation for small teams just
        trying to get started with a Subversion server; it's the
        simplest to set up and has the fewest maintenance issues.
        You can always switch to a more complex server
        deployment as your needs change.</para>
      -->
      <para>一般情况下, 对于想要快速搭建 Subversion 服务器的小团队而言, 本书
        作者推荐最普通的 <command>svnserve</command>, 它的设置最简单, 维护
        成本也很低. 如果有新的需求产生, 管理员总是可以切换到更复杂的部署方式.
      </para>

      <!--
      <para>Here are some general recommendations and tips, based on
        years of supporting users:</para>
      -->
      <para>根据支持了多年的用户的反馈, 下面列出几点一般性的建议和技巧:</para>

      <itemizedlist>
        <listitem>
      <!--
          <para>If you're trying to set up the simplest possible server
            for your group, a vanilla <command>svnserve</command>
            installation is the easiest, fastest route.  Note,
            however, that your repository data will be transmitted in
            the clear over the network.  If your deployment is
            entirely within your company's LAN or VPN, this isn't an
            issue.  If the repository is exposed to the wide-open
            Internet, you might want to make sure that either the
            repository's contents aren't sensitive (e.g., it contains
            only open source code), or that you go the extra mile in
            configuring SASL to encrypt network communications.</para>
      -->
          <para>如果管理员想为团队搭建尽可能简单的 Subversion 服务器, 那么
            最简单的选择就是 <command>svnserve</command>. 然而, 需要注意的是
            仓库的数据将在网络上以明文形式传输, 如果服务器完全部署在公司的
            LAN 或 VPN 内部, 那就不会带来什么问题. 相反, 如果仓库可被因特网
            访问到, 管理员要么确保仓库存放的不是敏感数据 (例如只包含了开源
            的代码), 要么使用 SASL 对网络传输进行加密.</para>
        </listitem>

        <listitem>
      <!--
          <para>If you need to integrate with existing legacy identity
            systems (LDAP, Active Directory, NTLM, X.509, etc.),
            you must use either the Apache-based server
            or <command>svnserve</command> configured with SASL.</para>
      -->
          <para>如果管理员想把已有的身份系统 (LDAP, Active Directory, NTLM,
            X.509 等) 集成到 Subversion 服务器中, 那就必须选择基于 Apache
            的服务器, 或配有 SASL 的 <command>svnserve</command>.</para>
        </listitem>

        <listitem>
      <!--
          <para>If you've decided to use either Apache or stock
            <command>svnserve</command>, create a single
            <command>svn</command> user on your system and run the
            server process as that user.  Be sure to make the
            repository directory wholly owned by the
            <command>svn</command> user as well.  From a security
            point of view, this keeps the repository data nicely
            siloed and protected by operating system filesystem
            permissions, changeable by only the Subversion server
            process itself.</para> </listitem>
      -->
          <para>如果管理员想使用 Apache 或 <command>svnserve</command>, 要在
            服务器系统中创建一个新用户 <command>svn</command>, 然后以该用户的
            身份运行服务器进程. 确保用户 <command>svn</command> 完全拥有仓库
            目录, 从安全的角度来看, 这种做法使得仓库的数据能够保持孤立, 还能
            利用操作系统的文件系统权限, 保证只有 Subversion 服务器进程才能修改
            仓库目录.</para>
        </listitem>

        <listitem>
      <!--
          <para>If you have an existing infrastructure that is heavily based
            on SSH accounts, and if your users already have system
            accounts on your server machine, it makes sense to
            deploy an <command>svnserve</command>-over-SSH solution.
            Otherwise, we don't widely recommend this option to the
            public.  It's generally considered safer to have your
            users access the repository via (imaginary) accounts
            managed by <command>svnserve</command> or Apache, rather
            than by full-blown system accounts.  If your deep desire
            for encrypted communication still draws you to this
            option, we recommend using Apache with SSL or
            <command>svnserve</command> with SASL encryption
            instead.</para>
      -->
          <para>如果已有的基础设施严重依赖 SSH 账户, 并且团队成员在服务器上
            都有自己的系统账户, 此时比较好的部署方式是
            <command>svnserve</command> + SSH. 但如果是对外公开的仓库, 则我
            们不建议这样做, 一般而言, 相比于真正的系统账户, 通过
            <command>svnserve</command> 或 Apache 管理的 (虚假) 账户来访问
            仓库是一种更安全的做法. 如果管理员对加密通信仍然具有强烈的渴望,
            我们建议选择配有 SSL 的 Apache, 或配有 SASL 的
            <command>svnserve</command>.</para>
        </listitem>

        <listitem>
      <!--
          <para>Do <emphasis>not</emphasis> be seduced by the simple
            idea of having all of your users access a repository
            directly via <literal>file://</literal> URLs.  Even if the
            repository is readily available to everyone via a network
            share, this is a bad idea.  It removes any layers of
            protection between the users and the repository: users can
            accidentally (or intentionally) corrupt the repository
            database, it becomes hard to take the repository offline
            for inspection or upgrade, and it can lead to a mess of
            file permission problems (see <xref
            linkend="svn.serverconfig.multimethod"/>).  Note that this
            is also one of the reasons we warn against accessing
            repositories via <literal>svn+ssh://</literal>
            URLs&mdash;from a security standpoint, it's effectively
            the same as local users accessing via
            <literal>file://</literal>, and it can entail all the same
            problems if the administrator isn't careful.</para>
      -->
          <para><emphasis>不要</emphasis> 被这种简单的想法引诱: 让所有的用户
            使用 <literal>file://</literal> URL 直接访问仓库. 即使仓库已经
            准备好通过网络共享被所有人访问, 但这仍然不是个好主意. 这种做法
            移除了用户与仓库之间的所有保护层: 用户可以有意 (或无意) 地破坏
            仓库数据库, 为了检查或升级而对仓库进行下线操作, 也会变得非常困难,
            而且会产生一系列与文件权限有关的问题 (见 <xref
              linkend="svn.serverconfig.multimethod"/>). 注意, 这同时也是使用
            <literal>svn+ssh://</literal> URL 访问仓库时需要注意的地方&mdash;
            从安全的角度来看, 它和本地用户使用 <literal>file://</literal> 的
            情况是等效的, 如果管理员不够认真, 将会导致同样的问题.</para>
            </listitem> </itemizedlist>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.serverconfig.svnserve">

      <!--
    <title>svnserve, a Custom Server</title>
      -->
    <title>svnserve, 一个定制化的服务器</title>

    <para>
      <indexterm>
        <primary>svnserve</primary>
      </indexterm>
      <command>svnserve</command> 是一个轻量级的服务器程序, 基于 TCP/IP, 使用
      一种定制化的, 有状态的协议与客户端通信, 客户端使用
      <literal>svn://</literal> 或 <literal>svn+ssh://</literal> 形式的 URL
      访问 <command>svnserve</command> 服务器. 本节介绍运行
      <command>svnserve</command> 的多种方式, 服务器如何认证客户端, 以及如何为
      仓库配置适当的访问权限.</para>
      <!--
      The <command>svnserve</command> program is a lightweight
      server, capable of speaking to clients over TCP/IP using a
      custom, stateful protocol.  Clients contact an
      <command>svnserve</command> server by using URLs that begin with
      the <literal>svn://</literal> or <literal>svn+ssh://</literal>
      scheme.  This section will explain the different ways of running
      <command>svnserve</command>, how clients authenticate themselves
      to the server, and how to configure appropriate access control
      to your repositories.</para>
      -->

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.svnserve.invoking">
      <!--
      <title>Invoking the Server</title>
      -->
      <title>调用服务器</title>

      <para>
        <indexterm>
          <primary>svnserve</primary>
          <secondary>running</secondary>
        </indexterm>
        运行程序 <command>svnserve</command> 有以下几种方式:</para>
      <!--
        There are a few different ways to run the
        <command>svnserve</command> program:</para>
      -->

      <itemizedlist>
        <listitem>
      <!--
          <para>Run <command>svnserve</command> as a standalone
            daemon, listening for requests.</para>
      -->
          <para>作为一个独立的守护进程运行 <command>svnserve</command>, 运行
            过程中监听请求.</para>
        </listitem>
        <listitem>
      <!--
          <para>Have the Unix <command>inetd</command> daemon
            temporarily spawn <command>svnserve</command> whenever a
            request comes in on a certain port.</para>
      -->
          <para>如果在特定的端口接收到了一个新请求, 就让 Unix 守护进程
            <command>inetd</command> 临时派生 <command>svnserve</command>.
          </para>
        </listitem>
        <listitem>
      <!--
          <para>Have SSH invoke a temporary <command>svnserve</command>
            over an encrypted tunnel.</para>
      -->
          <para>使用 SSH, 在加密的通道上调用一个临时的
            <command>svnserve</command>.</para>
        </listitem>
        <listitem>
      <!--
          <para>Run <command>svnserve</command> as a Microsoft Windows
            service.</para>
      -->
          <para>作为 Microsoft Windows 服务, 运行 <command>svnserve</command>.
          </para>
        </listitem>
        <listitem>
      <!--
          <para>Run <command>svnserve</command> as a launchd job.</para>
      -->
          <para>作为一个 launchd 作业, 运行 <command>svnserve</command>.</para>
        </listitem>
      </itemizedlist>

      <!--
      <para>The following sections will cover in detail these various
        deployment options for <command>svnserve</command>.</para>
      -->
      <para>下面的几个小节详细介绍这些不同的 <command>svnserve</command>
        部署方式.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.invoking.daemon">
      <!--
        <title>svnserve as daemon</title>
      -->
        <title>svnserve 作为守护进程</title>

        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>running</secondary>
            <tertiary>daemon mode</tertiary>
          </indexterm>
          最简单的方式, 就是把 <command>svnserve</command> 作为一个守护进程
          运行, 执行时需要添加选项 <option>-d</option>:</para>
      <!--
          The easiest option is to run <command>svnserve</command>
          as a standalone <quote>daemon</quote> process.  Use the
          <option>-d</option> option for this:</para>
      -->

        <informalexample>
          <screen>
$ svnserve -d
$               # svnserve is now running, listening on port 3690
</screen>
        </informalexample>

      <!--
        <para>When running <command>svnserve</command> in daemon mode,
          you can use the <option>- -listen-port</option> and
          <option>- -listen-host</option> options to customize the
          exact port and hostname to <quote>bind</quote> to.</para>
      -->
        <para>以守护进程模式运行 <command>svnserve</command> 时, 可以使用
          选项 <option>--listen-port</option> 和 <option>--listen-host</option>
          修改进程所 <quote>绑定</quote> 的端口号和主机名.</para>

      <!--
        <para>Once we successfully start <command>svnserve</command>
          as explained previously, it makes every repository on your
          system available to the network.  A client needs to specify
          an <emphasis>absolute</emphasis> path in the repository URL.
          For example, if a repository is located at
          <filename>/var/svn/project1</filename>, a client would reach
          it via <uri>svn://host.example.com/var/svn/project1</uri>.
          To increase security, you can pass the <option>-r</option>
          option to <command>svnserve</command>, which restricts it to
          exporting only repositories below that path.  For
          example:</para>
      -->
        <para><command>svnserve</command> 一旦成功启动, 服务器上的所有仓库
          都能通过网络进行访问. 如果客户端需要访问仓库, 必须在仓库的 URL
          参数中指定一个 <emphasis>绝对</emphasis> 路径. 比如说某个仓库在
          服务器上的位置是 <filename>/var/svn/project1</filename>, 那么客户
          端访问仓库的 URL 参数就可以写成
          <uri>svn://host.example.com/var/svn/project1</uri>. 为了增加安全
          性, 可以为 <command>svnserve</command> 添加选项 <option>-r</option>,
          使得只有指定路径下的仓库才会被导出, 例如:</para>

        <informalexample>
          <screen>
$ svnserve -d -r /var/svn
&hellip;
</screen>
        </informalexample>

      <!--
        <para>Using the <option>-r</option> option effectively
          modifies the location that the program treats as the root of
          the remote filesystem space.  Clients then use URLs that
          have that path portion removed from them, leaving much
          shorter (and much less revealing) URLs:</para>
      -->
        <para>使用选项 <option>-r</option> 等价于修改了
          <command>svnserve</command> 的根目录, 客户端访问仓库的所使用的 URL
          也能写得更加简短:</para>

        <informalexample>
          <screen>
$ svn checkout svn://host.example.com/project1
&hellip;
</screen>
        </informalexample>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.invoking.inetd">
      <!--
        <title>svnserve via inetd</title>
      -->
        <title>由 inetd 调用 svnserve</title>

        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>running</secondary>
            <tertiary>via inetd</tertiary>
          </indexterm>
          <indexterm>
            <primary>inetd</primary>
          </indexterm>
          如果管理员希望由 <command>inetd</command> 启动进程, 就给
          <command>svnserve</command> 添加选项 <option>-i</option>
          (<option>--inetd</option>). 在下面的例子里, 我们展示了在命令行上
          执行 <literal>svnserve -i</literal> 的输出, 但要注意的是命令实际
          上并没有启动进程; 例子后面的内容介绍了如何配置
          <command>inetd</command>, 使得它能够启动 <command>svnserve</command>.
        </para>
      <!--
          If you want <command>inetd</command> to launch the
          process, you need to pass the <option>-i</option>
          (<option>- -inetd</option>) option.  In the following
          example, we've shown the output from running
          <literal>svnserve -i</literal> at the command line, but note
          that this isn't how you actually start the daemon; see the
          paragraphs following the example for how to configure
          <command>inetd</command> to start
          <command>svnserve</command>.</para>
      -->

        <informalexample>
          <screen>
$ svnserve -i
( success ( 2 2 ( ) ( edit-pipeline svndiff1 absent-entries commit-revprops d\
epth log-revprops atomic-revprops partial-replay ) ) )
</screen>
        </informalexample>

      <!--
        <para>When invoked with the <option>- -inetd</option> option,
          <command>svnserve</command> attempts to speak with a
          Subversion client via <filename>stdin</filename> and
          <filename>stdout</filename> using a custom protocol.  This
          is the standard behavior for a program being run via
          <command>inetd</command>.  The IANA has reserved port 3690
          for the Subversion protocol, so on a Unix-like system you
          can add lines to <filename>/etc/services</filename> such as
          these (if they don't already exist):</para>
      -->
        <para>如果使用选项 <option>--inetd</option> 调用
          <command>svnserve</command>, 它会尝试使用定制化的协议, 通过
          <filename>stdin</filename> 和 <filename>stdout</filename> 与
          Subversion 通信, 这是由 <command>inetd</command> 所启动的程序的标准
          行为. IANA 将端口 3690 保留给 Subversion 使用, 所以说在一个类 Unix
          系统上, 管理员可以安全地在 <filename>/etc/services</filename> 中添
          加以下内容 (如果原来没有):</para>

        <informalexample>
          <programlisting>
svn           3690/tcp   # Subversion
svn           3690/udp   # Subversion
</programlisting>
        </informalexample>

      <!--
        <para>If your system is using a classic Unix-like
          <command>inetd</command> daemon, you can add this line to
          <filename>/etc/inetd.conf</filename>:</para>
      -->
        <para>如果服务器使用的是经典的类 Unix <command>inetd</command> 守护
          进程, 就在 <filename>/etc/inetd.conf</filename> 添加下面这一行:
        </para>

        <informalexample>
          <programlisting>
svn stream tcp nowait svnowner /usr/bin/svnserve svnserve -i
</programlisting>
        </informalexample>

      <!--
        <para>Make sure <quote>svnowner</quote> is a user that has
          appropriate permissions to access your repositories.  Now,
          when a client connection comes into your server on port
          3690, <command>inetd</command> will spawn an
          <command>svnserve</command> process to service it.  Of
          course, you may also want to add <option>-r</option> to the
          configuration line as well, to restrict which repositories
          are exported.</para>
      -->
        <para>确保用户 <quote>svnowner</quote> 对仓库具有适当的访问权限.
          现在, 当客户在端口 3690 上连接服务服务器时, <command>inetd</command>
          就会派生出一个 <command>svnserve</command>, 负责处理客户端发来的
          请求. 当然, 管理员也可以在配置文件里为 <command>svnserve</command>
          添加选项 <option>-r</option>, 从而限制被导出的仓库.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.invoking.xinetd">
      <!--
        <title>svnserve via xinetd</title>
      -->
        <title>由 xinetd 调用 svnserve</title>

        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>running</secondary>
            <tertiary>via xinetd</tertiary>
          </indexterm>
          <indexterm>
            <primary>xinetd</primary>
          </indexterm>
          某些系统提供了 <command>xinetd</command> 作为 <command>inetd</command>
          的替代品, 幸运的是, 管理员也可以配置 <command>svnserve</command>
          由 <command>xinetd</command> 启动. 为了实现这点, 管理员创建一个配置
          文件 <command>/etc/xinetd.d/svn</command>, 文件的内容是:</para>
      <!--
          Some operating systems provide the <command>xinetd</command>
          daemon as an alternative to <command>inetd</command>.
          Fortunately, you can configure <command>svnserve</command> for
          use with <command>xinetd</command>, too.  To do so, you'll need to
          create a configuration file <filename>/etc/xinetd.d/svn</filename>
          with the following contents:</para>
      -->

        <informalexample>
          <programlisting>
# default: on
# description: Subversion server for the svn protocol
service svn
{
  disabled        = no
  port            = 3690
  socket_type     = stream
  protocol        = tcp
  wait            = no
  user            = subversion
  server          = /usr/local/bin/svnserve
  server_args     = -i -r <replaceable>/path/to/repositories</replaceable>
}
</programlisting>
        </informalexample>

      <!--
        <para>Be sure that your <filename>/etc/services</filename>
          configuration file contains the definition of the port used
          for the <literal>svn</literal> protocol (as described in
          <xref linkend="svn.serverconfig.svnserve.invoking.inetd"
          />), otherwise the daemon will not start correctly.</para>
      -->
      <para>要确保 <filename>/etc/services</filename> 包含了
        <literal>svn</literal> 协议所使用的端口 (见 <xref
          linkend="svn.serverconfig.svnserve.invoking.inetd"/>), 否则的话,
        守护进程将无法正常启动.</para>

      <!--
        <para>In Redhat-based distributions, you then need to activate
          the new service using <command>chkconfig - -add
          svn</command>.  After doing so, you will be able to enable
          and disable the server using the graphical configuration
          tools.</para>
      -->
        <para>如果是基于 Redhat 的 Linux 发行版, 管理员需要使用
          <command>chkconfig --add svn</command> 激活新的服务, 后面就可以用图
          形化配置工具禁止或允许服务器程序.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.invoking.tunnel">
      <!--
        <title>svnserve over a tunnel</title>
      -->
        <title>基于隧道的 svnserve</title>

        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>running</secondary>
            <tertiary>tunnel mode</tertiary>
          </indexterm>
          另一种启动方式是通过添加选项 <option>-t</option>, 以隧道模式启动
          <command>svnserve</command>. 隧道模式假设有一个远程服务程序 (例如
          <command>rsh</command> 或 <command>ssh</command> 已经成功地授权了
          一个用户, 并且以该 <emphasis>用户的身份</emphasis> 启动了一个私有
          的 <command>svnserve</command> 进程. (用户几乎没有必要在命令行
          启动带有选项 <option>-t</option> 的 <command>svnserve</command>,
          相反, SSH 守护进程会替用户执行这个操作) 程序
          <command>svnserve</command> 像往常一样运行 (通过
          <filename>stdin</filename> 和 <filename>stdout</filename> 通信),
          它还假设网络数据可以通过某种隧道, 被自动重定向回客户端. 当隧道代理
          以这种方式启动 <command>svnserve</command> 时, 要确保被授权的用户
          对仓库数据库文件具有读写权限, 在本质上它和本地用户通过
          <literal>file://</literal> URL 访问仓库的情况是一样的.</para>
      <!--
          Another way to invoke <command>svnserve</command> is in
          tunnel mode, using the <option>-t</option> option.  This
          mode assumes that a remote-service program such as
          <command>rsh</command> or <command>ssh</command> has
          successfully authenticated a user and is now invoking a
          private <command>svnserve</command> process <emphasis>as
          that user</emphasis>.  (Note that you, the user, will
          rarely, if ever, have reason to invoke
          <command>svnserve</command> with the <option>-t</option> at
          the command line; instead, the SSH daemon
          does so for you.)  The <command>svnserve</command> program
          behaves normally (communicating via
          <filename>stdin</filename> and <filename>stdout</filename>)
          and assumes that the traffic is being automatically
          redirected over some sort of tunnel back to the client.
          When <command>svnserve</command> is invoked by a tunnel
          agent like this, be sure that the authenticated user has
          full read and write access to the repository database files.
          It's essentially the same as a local user accessing the
          repository via <literal>file://</literal> URLs.</para>
      -->

      <!--
        <para>This option is described in much more detail later in
          this chapter in <xref
          linkend="svn.serverconfig.svnserve.sshauth"/>.</para>
      -->
      <para>更多的细节见 <xref
          linkend="svn.serverconfig.svnserve.sshauth"/>.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.invoking.winservice">
      <!--
        <title>svnserve as a Windows service</title>
      -->
        <title>svnserve 作为 Windows 服务</title>

        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>running</secondary>
            <tertiary>as Windows service</tertiary>
          </indexterm>
          如果服务器所用的 Windows 系统是 Windows NT 的后代 (Windows 2000 或
          更新的版本), 管理员就能把 <command>svnserve</command> 作为一个标准
          的 Windows 服务启动, 和独立的守护进程启动方式 (添加选项
          <option>--daemon</option> (<option>-d</option>)) 相比, 这通常能带
          来更好的检验. 为了以守护进程的方式启动 <command>svnserve</command>,
          我们需要打开一个控制台, 输入命令, 然后任由控制台永远地运行下去. 然而,
          在后台运行的 Windows 服务可以在系统引导时自动启动, 可以使用和其他
          Windows 服务一样的管理接口, 启动或停止服务.</para>
      <!--
          If your Windows system is a descendant of Windows NT
          (Windows 2000 or newer), you can
          run <command>svnserve</command> as a standard Windows
          service.  This is typically a much nicer experience than
          running it as a standalone daemon with
          the <option>- -daemon</option> (<option>-d</option>) option.
          Using daemon mode requires launching a console, typing a
          command, and then leaving the console window running
          indefinitely.  A Windows service, however, runs in the
          background, can start at boot time automatically, and can be
          started and stopped using the same consistent administration
          interface as other Windows services.</para>
      -->

      <!--
        <para>You'll need to define the new service using the
          command-line tool <command>SC.EXE</command>.  Much like
          the <command>inetd</command> configuration line, you must
          specify an exact invocation of <command>svnserve</command>
          for Windows to run at startup time:</para>
      -->
        <para>为了定义一个新的 Windows 服务, 需要用到命令行工具
          <command>SC.EXE</command>. 类似于 <command>inetd</command> 的配置
          文件, 管理员必须准确地指定 <command>svnserve</command> 的启动方式,
          以便 Windows 在开机时启动相应的服务:</para>

        <informalexample>
          <screen>
C:\&gt; sc create svn
        binpath= "C:\svn\bin\svnserve.exe --service -r C:\repos"
        displayname= "Subversion Server"
        depend= Tcpip
        start= auto
</screen>
        </informalexample>

      <!--
        <para>This defines a new Windows service named
          <literal>svn</literal> which executes a particular
          <command>svnserve.exe</command> command when started (in
          this case, rooted at <filename>C:\repos</filename>).  There
          are a number of caveats in the prior example,
          however.</para>
      -->
        <para>上面的命令行定义了一个新的, 名为 <literal>svn</literal> 的
          Windows 服务, 当服务启动时, 它将执行程序
          <command>svnserve.exe</command>. 在这个例子, 有很多需要注意的地方.
        </para>

      <!--
        <para>First, notice that the <command>svnserve.exe</command>
          program must always be invoked with the
          <option>- -service</option> option.  Any other options to
          <command>svnserve</command> must then be specified on the
          same line, but you cannot add conflicting options such as
          <option>- -daemon</option>
          (<option>-d</option>), <option>- -tunnel</option>,
          or <option>- -inetd</option> (<option>-i</option>).  Options
          such as <option>-r</option>
          or <option>- -listen-port</option> are fine, though.  Second,
          be careful about spaces when invoking
          the <command>SC.EXE</command> command: the <literal>key=
          value</literal> patterns must have no spaces between
          <literal>key=</literal> and must have exactly one space
          before the <literal>value</literal>.  Lastly, be careful
          about spaces in your command line to be invoked.  If a
          directory name contains spaces (or other characters that
          need escaping), place the entire inner value of
          <literal>binpath</literal> in double quotes, by escaping
          them:</para>
      -->
        <para>首先, 启动 <command>svnserve.exe</command> 时必须带上参数
          <option>--service</option>, 其他选项必须出现在同一行, 不能再添加
          会引起冲突的选项, 例如 <option>--daemon</option>
          (<option>-d</option>), <option>--tunnel</option> 或
          <option>--inetd</option> (<option>-i</option>), 但可以添加选项
          <option>-r</option> 或 <option>--listen-port</option>. 第二,
          注意命令行里的空格: 模式 <literal>key= value</literal> 中,
          <literal>key</literal> 和 <literal>=</literal> 之间不能有空格, 而
          <literal>key=</literal> 和 <literal>value</literal> 之间有且仅有
          一个空格. 最后, 要注意被调用的命令行里的空格. 如果目录名含有空格
          (或其他需要转义的字符), 就把 <literal>binpath</literal> 内的路径
          包裹在一对双引号中, 但要对双引号进行转义:</para>

        <informalexample>
          <screen>
C:\&gt; sc create svn
        binpath= "\"C:\program files\svn\bin\svnserve.exe\" --service -r C:\repos"
        displayname= "Subversion Server"
        depend= Tcpip
        start= auto
</screen>
        </informalexample>

      <!--
        <para>Also note that the word <literal>binpath</literal> is
          misleading&mdash;its value is a <emphasis>command
          line</emphasis>, not the path to an executable.  That's why
          you need to surround it with quotes if it contains
          embedded spaces.</para>
      -->
        <para>还要注意 <literal>binpath</literal> 容易让人产生误解&mdash;
          它的值是一个 <emphasis>命令行</emphasis>, 而不是可执行文件的路径.
          因此, 如果它的值含有内嵌的空格, 就要用双引号包围起来.</para>

      <!--
        <para>Once the service is defined, it can be stopped, started,
          or queried using standard GUI tools (the Services
          administrative control panel), or at the command
          line:</para>
      -->
        <para>服务定义完成后, 可以使用标准的 GUI 工具 (服务管理控制面板) 来
          停止, 启动或查询服务, 也要以使用命令行工具:</para>

        <informalexample>
          <screen>
C:\&gt; net stop svn
C:\&gt; net start svn
</screen>
        </informalexample>

      <!--
        <para>The service can also be uninstalled (i.e., undefined) by
          deleting its definition:  <userinput>sc delete svn</userinput>.
          Just be sure to stop the service first!
          The <command>SC.EXE</command> program has many other
          subcommands and options; run <userinput>sc /?</userinput> to
          learn more about it.</para>
      -->
        <para>服务还能被卸载, 方法是删除它的定义: <userinput>sc delete
            svn</userinput>, 但在这之前记得先停止服务! 程序
          <command>SC.EXE</command> 还有很多子命令和选项, 执行
          <userinput>sc /?</userinput> 查看完整的命令帮助信息.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.invoking.launchd">
      <!--
        <title>svnserve as a launchd job</title>
      -->
        <title>svnserve 作为 launchd 作业</title>

        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>running</secondary>
            <tertiary>via launchd</tertiary>
          </indexterm>
          <indexterm>
            <primary>launchd</primary>
          </indexterm>
          Mac OS X (10.4 及更新的版本) 使用 <command>launchd</command>, 在
          系统范围和用户范围内管理进程 (包括守护进程). 一个
          <command>launchd</command> 由 XML 文件内的参数指定, 命令
          <command>launchctl</command> 用于管理作业的生命周期.</para>
      <!--
          Mac OS X (10.4 and higher) uses <command>launchd</command>
          to manage processes (including daemons) both system-wide and
          per-user.  A <command>launchd</command> job is specified by
          parameters in an XML property list file, and
          the <command>launchctl</command> command is used to manage
          the lifecycle of those jobs.</para>
      -->

      <!--
        <para>When configured to run as a <command>launchd</command>
          job, <command>svnserve</command> is automatically launched
          on demand whenever incoming Subversion
          <literal>svn://</literal> network traffic needs to be
          handled.  This is far more convenient than a configuration
          which requires you to manually invoke
          <command>svnserve</command> as a long-running
          background process.</para>
      -->
        <para>如果 <command>svnserve</command> 被配置成作为一个
          <command>launchd</command> 作业, 那么当有 <literal>svn://</literal>
          网络流量需要处理时, 将自动启动 <command>svnserve</command>. 这要比
          手动地启动 <command>svnserve</command> 并把它作为长时间运行的后台
          进程要方便得多.</para>

      <!--
        <para>To configure <command>svnserve</command> as
          a <command>launchd</command> job, first create a job
          definition file named
          <filename>/Library/LaunchDaemons/org.apache.subversion.svnserve.plist</filename>.
          <xref linkend="svn.serverconfig.svnserve.invoking.launchd.ex-1"/>
          provides an example of such a file.</para>
      -->
        <para>为了把 <command>svnserve</command> 配置成一个
          <command>launchd</command> 作业, 首先创建一个名为
          <filename>/Library/LaunchDaemons/org.apache.subversion.svnserve.plist</filename>
          的作业定义文件, <xref
            linkend="svn.serverconfig.svnserve.invoking.launchd.ex-1"/> 展示
          了该文件的一个例子.</para>

        <example id="svn.serverconfig.svnserve.invoking.launchd.ex-1">
      <!--
          <title>A sample svnserve launchd job definition</title>
      -->
          <title>svnserve 的 launchd 作业定义的一个示例</title>
          <programlisting>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
    "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
    &lt;dict&gt;
        &lt;key&gt;Label&lt;/key&gt;
        &lt;string&gt;org.apache.subversion.svnserve&lt;/string&gt;
        &lt;key&gt;ServiceDescription&lt;/key&gt;
        &lt;string&gt;Host Subversion repositories using svn:// scheme&lt;/string&gt;
        &lt;key&gt;ProgramArguments&lt;/key&gt;
        &lt;array&gt;
            &lt;string&gt;/usr/bin/svnserve&lt;/string&gt;
            &lt;string&gt;--inetd&lt;/string&gt;
            &lt;string&gt;--root=/var/svn&lt;/string&gt;
        &lt;/array&gt;
        &lt;key&gt;UserName&lt;/key&gt;
        &lt;string&gt;svn&lt;/string&gt;
        &lt;key&gt;GroupName&lt;/key&gt;
        &lt;string&gt;svn&lt;/string&gt;
        &lt;key&gt;inetdCompatibility&lt;/key&gt;
        &lt;dict&gt;
            &lt;key&gt;Wait&lt;/key&gt;
            &lt;false/&gt;
        &lt;/dict&gt;
        &lt;key&gt;Sockets&lt;/key&gt;
        &lt;dict&gt;
            &lt;key&gt;Listeners&lt;/key&gt;
            &lt;array&gt;
                &lt;dict&gt;
                    &lt;key&gt;SockServiceName&lt;/key&gt;
                    &lt;string&gt;svn&lt;/string&gt;
                    &lt;key&gt;Bonjour&lt;/key&gt;
                    &lt;true/&gt;
                &lt;/dict&gt;
            &lt;/array&gt;
        &lt;/dict&gt;
    &lt;/dict&gt;
&lt;/plist&gt;
</programlisting>
        </example>

        <warning>
      <!--
          <para>The <command>launchd</command> system can be somewhat
            challenging to learn.  Fortunately, documentation exists
            for the commands described in this section. For example,
            run <userinput>man launchd</userinput> from the command
            line to see the manual page for <command>launchd</command>
            itself, <userinput>man launchd.plist</userinput> to read
            about the job definition format, etc.</para>
      -->
          <para><command>launchd</command> 系统学习起来有一定的困难, 幸运的是
            本节所介绍的 <command>launchd</command> 命令都有相关的文档可供
            参考, 例如执行 <userinput>man launchd</userinput> 查看
            <command>launchd</command> 的手册页, 执行
            <userinput>man launchd.plist</userinput> 查看作业定义文件的格式.
          </para>
        </warning>

      <!--
        <para>Once your job definition file is created, you can
          activate the job using <command>launchctl load</command>:</para>
      -->
        <para>作业定义文件创建完毕后, 就可以用 <command>launchctl
            load</command> 激活作业:</para>

        <informalexample>
          <screen>
$ sudo launchctl load \
       -w /Library/LaunchDaemons/org.apache.subversion.svnserve.plist
</screen>
        </informalexample>

      <!--
        <para>To be clear, this action doesn't actually launch
          <command>svnserve</command> yet.  It simply tells
          <command>launchd</command> how to fire up
          <command>svnserve</command> when incoming networking traffic
          arrives on the <literal>svn</literal> network port; it will
          be terminated it after the traffic has been handled.</para>
      -->
        <para>需要澄清的是, 上面的命令并没有启动 <command>svnserve</command>,
          它只是告诉 <command>launchd</command> 当网络端口
          <literal>svn</literal> 有网络数据到达时, 如何启动
          <command>svnserve</command>, 当网络数据处理完毕后,
          <command>svnserve</command> 进程就会终止.</para>

        <note>
      <!--
          <para>Because we want <command>svnserve</command> to be a
            system-wide daemon process, we need to
            use <command>sudo</command> to manage this job as an
            administrator.  Note also that the
            <literal>UserName</literal>
            and <literal>GroupName</literal> keys in the definition
            file are optional&mdash;if omitted, the job will run as
            the user who loaded the job.</para>
      -->
          <para>因为我们希望 <command>svnserve</command> 成为整个系统范围内
            的守护进程, 所以要用 <command>sudo</command> 命令, 作为系统管理员
            去管理作业. 定义文件内的 <literal>UserName</literal> 和
            <literal>GroupName</literal> 是可选的&mdash;如果忽略它们, 作业的
            所有者将是加载该作业的用户.</para>
        </note>

      <!--
        <para>Deactivating the job is just as easy to do&mdash;use
          <command>launchctl unload</command>:</para>
      -->
        <para>禁用作业的方法也很简单&mdash;使用 <command>launchctl
            unload</command>:</para>

        <informalexample>
          <screen>
$ sudo launchctl unload \
       -w /Library/LaunchDaemons/org.apache.subversion.svnserve.plist
</screen>
        </informalexample>

      <!--
        <para><command>launchctl</command> also provides a way for you
          to query the status of jobs.  If the job is loaded, there
          will be line which matches the <literal>Label</literal>
          specified in the job definition file:</para>
      -->
        <para><command>launchctl</command> 也提供了查询作业状态的命令, 如果
          作业已加载, 那么作业定义文件中, <literal>Label</literal> 所指定的
          内容将会出现在命令的输出中:</para>

        <informalexample>
          <screen>
$ sudo launchctl list | grep org.apache.subversion.svnserve
-       0       org.apache.subversion.svnserve
$
</screen>
        </informalexample>

      </sect3>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.svnserve.auth">
      <!--
      <title>Built-in Authentication and Authorization</title>
      -->
      <title>内建的认证与授权</title>

      <para>
        <indexterm>
          <primary>svnserve</primary>
          <secondary>authentication</secondary>
        </indexterm>
        <indexterm>
          <primary>svnserve</primary>
          <secondary>authorization</secondary>
        </indexterm>
        当客户端连接到 <command>svnserve</command> 进程时, 将会发生以下事件:
      </para>
      <!--
        When a client connects to an <command>svnserve</command>
        process, the following things happen:</para>
      -->

      <itemizedlist>
        <listitem>
      <!--
          <para>The client selects a specific repository.</para>
      -->
          <para>客户端选择一个特定的仓库.</para>
        </listitem>
        <listitem>
      <!--
          <para>The server processes the repository's
            <filename>conf/svnserve.conf</filename> file and begins to
            enforce any authentication and authorization policies it
            describes.</para>
      -->
          <para>服务器读取仓库的 <filename>conf/svnserve.conf</filename>,
            施加文件所描述的认证与授权策略.</para>
        </listitem>
        <listitem>
      <!--
          <para>Depending on the defined policies, one of the
            following may occur:</para>
      -->
          <para>取决于具体的策略, 可能会发生下面几件事中的一件:</para>
          <itemizedlist>
            <listitem>
      <!--
              <para>The client may be allowed to make requests
                anonymously, without ever receiving an authentication
                challenge.</para>
      -->
              <para>允许客户端以匿名的方式提出请求, 不会收到任何认证要求.</para>
            </listitem>
            <listitem>
      <!--
              <para>The client may be challenged for authentication at
                any time.</para>
      -->
              <para>客户端可能在任意时刻收到认证要求.</para>
            </listitem>
            <listitem>
      <!--
              <para>If operating in tunnel mode, the client will
                declare itself to be already externally authenticated
                (typically by SSH).</para>
      -->
              <para>如果操作是在隧道模式下进行, 客户端将声明它已经在外部认证
                过了 (通常是 SSH).</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <!--
      <para>The <command>svnserve</command> server, by default, knows
        only how to send a CRAM-MD5<footnote><para>See RFC
        2195.</para></footnote> authentication challenge.  In essence,
        the server sends a small amount of data to the client.  The
        client uses the MD5 hash algorithm to create a fingerprint of
        the data and password combined, and then sends the fingerprint
        as a response.  The server performs the same computation with
        the stored password to verify that the result is identical.
        <emphasis>At no point does the actual password travel over the
        network.</emphasis></para>
      -->
    <para>默认情况下, <command>svnserve</command> 只知道如何发送一个
      CRAM-MD5<footnote><para>见 RFC 2195.</para></footnote> 授权请求,
      在本质上, 就是服务器向客户端发送了一小段数据. 客户端使用 MD5 散列算法
      为数据和密码的混合物创建指纹, 然后发送该指纹, 作为认证请求的响应. 服
      务器对存放在本地的密码进行同样的计算, 以验证它们是否相同. <emphasis>在
        任何情况下都会在网络上传输明文密码</emphasis>.</para>

      <!--
      <para>If your <command>svnserve</command> server was built with
        SASL support, it not only knows how to send CRAM-MD5 challenges,
        but also likely knows a whole host of other authentication
        mechanisms.  See <xref
        linkend="svn.serverconfig.svnserve.sasl"/> later in this
        chapter to learn how to configure SASL authentication and
        encryption.</para>
      -->
      <para>如果 <command>svnserve</command> 支持 SASL, 除了知道如何发送
        CRAM-MD5 请求外, <command>svnserve</command> 还能使用其他几种认证
        机制, 本章后面的 <xref linkend="svn.serverconfig.svnserve.sasl"/>
        将会介绍如何配置 SASL 认证和加密.</para>

      <!--
      <para>It's also possible, of course, for the client to be
        externally authenticated via a tunnel agent, such as
        <command>ssh</command>.  In that case, the server simply
        examines the user it's running as, and uses this name as the
        authenticated username.  For more on this, see the later
        section, <xref
        linkend="svn.serverconfig.svnserve.sshauth"/>.</para>
      -->
    <para>当然, 客户端也可以通过一个隧道代理 (例如 <command>ssh</command>),
      实现外部认证. 在这种情况下, 服务器只是简单地检查自己的用户身份, 然后
      使用该用户名作为已认证的用户. 更多的相关内容, 见
      <xref linkend="svn.serverconfig.svnserve.sshauth"/>.</para>

      <!--
      <para>As you've already guessed, a repository's
        <filename>svnserve.conf</filename> file is the central
        mechanism for controlling access to the repository.  When used
        in conjunction with other supplemental files described in this
        section, this configuration file offers an administrator a
        complete solution for governing user authentication and
        authorization policies.  Each of the files we'll discuss uses
        the format common to other configuration files (see
        <xref linkend="svn.advanced.confarea"/>): section names are
        marked by square brackets (<literal>[</literal>
        and <literal>]</literal>), comments begin with hashes
        (<literal>#</literal>), and each section contains specific
        variables that can be set (<literal>variable =
        value</literal>).  Let's walk through these files now and
        learn how to use them.</para>
      -->
      <para>读者可能已经猜到了, 仓库里的 <filename>svnserve.conf</filename>
        正是控制认证和授权策略的关键. 当它和本节所描述的其他附加文件配合工作
        时, <filename>svnserve.conf</filename> 向管理员提供了用于控制用户认证
        和授权策略的完整方案. 我们将要讨论的每个文件所使用的格式, 与其他配置
        文件的格式相同 (见
        <xref linkend="svn.advanced.confarea"/>): 节名用一对方括号标记
        (<literal>[</literal> 和 <literal>]</literal>), 注释由井号
        (<literal>#</literal>) 开始, 每一节都包含了可被赋值的特定变量
        (<literal>variable = value</literal>). 下面介绍各个文件并学习如何
        使用它们.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.auth.users">
      <!--
           ### TODO realm
        <title>Create a users file and realm</title>
      -->
        <title>创建一个用户文件和领域</title>

      <!--
        <para>For now, the <literal>[general]</literal> section of
          <filename>svnserve.conf</filename> has all the variables you
          need.  Begin by changing the values of those variables:
          choose a name for a file that will contain your usernames
          and passwords and choose an authentication realm:</para>
      -->
        <para>现在, 你所需要的所有变量都在 <filename>svnserve.conf</filename>
          的 <literal>[general]</literal> 部分. 先从修改这些变量的值开始:
          为存放用户名和密码的文件选择一个名字; 选择一个认证领域:</para>

        <informalexample>
          <programlisting>
[general]
password-db = userfile
realm = example realm
</programlisting>
        </informalexample>

      <!--
        <para>The <literal>realm</literal> is a name that you define.
          It tells clients which sort of <quote>authentication
          namespace</quote> they're connecting to; the Subversion
          client displays it in the authentication prompt and uses it
          as a key (along with the server's hostname and port) for
          caching credentials on disk (see <xref
          linkend="svn.serverconfig.netmodel.credcache"/>).  The
          <literal>password-db</literal> variable points to a separate
          file that contains a list of usernames and passwords, using
          the same familiar format.  For example:</para>
      -->
        <para><literal>realm</literal> 的值是你自己定义的一个名字, 它告诉
          客户端它们正在连接的是哪一个 <quote>认证空间</quote>; Subversion
          客户端在认证的提示信息里显示 <literal>realm</literal> 的值, 并
          用它 (再加上服务器的主机名和端口号) 作为缓存在磁盘上的证书的键
          (见 <xref linkend="svn.serverconfig.netmodel.credcache"/>).
          变量 <literal>password-db</literal> 指向一个单独的文件, 它包含了
          一连串的用户名和密码, 文件的格式和
          <filename>svnserve.conf</filename> 是相同的, 例如:</para>

        <informalexample>
          <programlisting>
[users]
harry = foopassword
sally = barpassword
</programlisting>
        </informalexample>

      <!--
        <para>The value of <literal>password-db</literal> can be an
          absolute or relative path to the users file.  For many
          admins, it's easy to keep the file right in the
          <filename>conf/</filename> area of the repository, alongside
          <filename>svnserve.conf</filename>.  On the other hand, it's
          possible you may want to have two or more repositories share
          the same users file; in that case, the file should probably
          live in a more public place.  The repositories sharing the
          users file should also be configured to have the same realm,
          since the list of users essentially defines an
          authentication realm.  Wherever the file lives, be sure to
          set the file's read and write permissions appropriately.  If
          you know which user(s) <command>svnserve</command> will run
          as, restrict read access to the users file as necessary.</para>
      -->
        <para>变量 <literal>password-db</literal> 的值可以是指向用户文件
          的绝对路径或相对路径, 管理员很容易就能把用户文件设置到仓库的
          <filename>conf/</filename> 目录内, 和
          <filename>svnserve.conf</filename> 放在一起. 另外, 多个仓库还能
          共享同一个用户文件, 在这种情况下, 文件应该放在更加开放的位置.
          共享同一用户文件的仓库还要配置相同的领域, 因为用户名列表在本质上
          就已经定义了一个认证领域. 无论用户文件放在何处, 都要设置好它的
          读写权限. 如果管理员知道 <command>svnserve</command> 将以哪些用户
          身份运行, 在必要时可限制用户文件的读取权限.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.auth.general">
      <!--
        <title>Set access controls</title>
      -->
        <title>设置访问控制</title>

      <!--
        <para>There are two more variables to set in the
          <filename>svnserve.conf</filename> file: they determine what
          unauthenticated (anonymous) and authenticated users are
          allowed to do.  The variables <literal>anon-access</literal>
          and <literal>auth-access</literal> can be set to the value
          <literal>none</literal>, <literal>read</literal>, or
          <literal>write</literal>.  Setting the value to
          <literal>none</literal> prohibits both reading and writing;
          <literal>read</literal> allows read-only access to the
          repository, and <literal>write</literal> allows complete
          read/write access to the repository.  For example:</para>
      -->
        <para>还有两个变量可以在 <filename>svnserve.conf</filename> 里设置:
          它们决定了未验证 (匿名) 的用户和已验证的用户可以做哪些事情. 变量
          <literal>anon-access</literal> 和 <literal>auth-access</literal>
          可被设置的值有 <literal>none</literal>, <literal>read</literal>
          和 <literal>write</literal>. 设置为 <literal>none</literal> 将
          禁止读和写; <literal>read</literal> 允许以只读方式访问仓库;
          <literal>write</literal> 允许对仓库进行完全的读写访问. 例如:</para>

        <informalexample>
          <programlisting>
[general]
password-db = userfile
realm = example realm

# anonymous users can only read the repository
anon-access = read

# authenticated users can both read and write
auth-access = write
</programlisting>
        </informalexample>

      <!--
        <para>The example settings are, in fact, the default values of
          the variables, should you forget to define them.  If you
          want to be even more conservative, you can block anonymous
          access completely:</para>
      -->
        <para>例子所展示的其实就是变量的默认值, 以免管理员忘记设置它们. 如
          果管理员需要更加保守的设置, 可以完全禁止匿名访问:</para>

        <informalexample>
          <programlisting>
[general]
password-db = userfile
realm = example realm

# anonymous users aren't allowed
anon-access = none

# authenticated users can both read and write
auth-access = write
</programlisting>
        </informalexample>

      <!--
        <para>The server process understands not only
          these <quote>blanket</quote> access controls to the
          repository, but also finer-grained access restrictions
          placed on specific files and directories within the
          repository.  To make use of this feature, you need to define
          a file containing more detailed rules, and then set
          the <literal>authz-db</literal> variable to point to
          it:</para>
      -->
        <para>服务器进程不仅可以理解施加到仓库上的全局的访问控制, 还能理解
          施加到文件或目录上的更细粒度的访问控制. 为了利用后者, 管理员创建一
          个文件, 文件包含了更细致的规则, 然后让变量
          <literal>authz-db</literal> 指向该文件:</para>

        <informalexample>
          <programlisting>
[general]
password-db = userfile
realm = example realm

# Specific access rules for specific locations
authz-db = authzfile
</programlisting>
        </informalexample>

      <!--
        <para>We discuss the syntax of the <filename>authzfile</filename> file
          in detail later in this chapter, in
          <xref linkend="svn.serverconfig.pathbasedauthz"/>.  Note
          that the <literal>authz-db</literal> variable isn't mutually
          exclusive with the <literal>anon-access</literal>
          and <literal>auth-access</literal> variables;  if all the
          variables are defined at once, <emphasis>all</emphasis>
          of the rules must be satisfied before access is allowed.</para>
      -->
        <para>我们在 <xref linkend="svn.serverconfig.pathbasedauthz"/> 详细
          介绍 <filename>authzfile</filename> 的语法. 注意, 变量
          <literal>authz-db</literal> 与 <literal>anon-access</literal>,
          <literal>auth-access</literal> 并非互不相容, 如果同时定义了这三个
          变量, 则只有在 <emphasis>所有</emphasis> 规则都被满足的情况下,
          才能允许访问.</para>

      </sect3>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.svnserve.sasl">
      <!--
      <title>Using svnserve with SASL</title>
      -->
      <title>svnserve 使用 SASL</title>

      <!--
      <para>For many teams, the built-in CRAM-MD5 authentication is
        all they need from <command>svnserve</command>.  However, if
        your server (and your Subversion clients) were built with the
        ### TODO
        Cyrus Simple Authentication and Security Layer (SASL) library,
        you have a number of authentication and encryption
        options available to you.</para>
      -->
      <para>对于许多团队而言, 使用 <command>svnserve</command> 内建的 CRAM-MD5
        认证就已足够. 然而, 如果服务器和 Subversion 客户端支持 SASL (Cyrus
        Simple Authentication and Security Layer) 函数库, 那么管理员就有了
        大量的认证和加密选项可供选择.</para>

      <sidebar>
      <!--
        <title>What Is SASL?</title>
      -->
        <title>什么是 SASL?</title>

      <!--
        <para>The Cyrus Simple Authentication and Security Layer is
          open source software written by Carnegie Mellon University.
          It adds generic authentication and encryption capabilities
          to any network protocol, and as of Subversion 1.5 and later,
          both the <command>svnserve</command> server
          and <command>svn</command> client know how to make use of
          this library.  It may or may not be available to you: if
          you're building Subversion yourself, you'll need to have at
          least version 2.1 of SASL installed on your system, and
          you'll need to make sure that it's detected during
          Subversion's build process.  The Subversion command-line
          client will report the availability of Cyrus SASL when you
          run <userinput>svn - -version</userinput>; if you're using
          some other Subversion client, you might need to check with
          the package maintainer as to whether SASL support was
          compiled in.</para>
      -->
        <para>Cyrus Simple Authenticated and Security Layer 是卡耐基梅隆
          大学开发的一款开源软件, 可以给任意一种网络协议添加通用的认证和
          授权功能, 从 subversion 1.5 开始, <command>svnserve</command>
          服务器和 <command>svn</command> 客户端开始支持 SASL. 不过 SASL
          并非总是可用, 如果 subversion 是你自己编译安装的, 为了利用 SASL,
          系统中至少要安装 SASL 2.1 版, 并且在 Subversion 构建过程能够检测
          到 SASL 的存在. 执行 <userinput>svn --version</userinput> 时,
          Subversion 客户端命令行工具将报告 Cyrus SASL 是否可用. 如果你安装
          的是已经编译好了的二进制包, 那你就要检查 SASL 是否被编译到了安装
          包里.</para>

      <!--
        <para>SASL comes with a number of pluggable modules that
          represent different authentication systems: Kerberos
          (GSSAPI), NTLM, One-Time-Passwords (OTP), DIGEST-MD5, LDAP,
          Secure-Remote-Password (SRP), and others.  Certain
          mechanisms may or may not be available to you; be sure to
          check which modules are provided.</para>
      -->
        <para>SASL 包含大量可插拔的模块, 这些模块代表了不同的认证机制:
          Kerberos (GSSAPI), NTLM, One-Time-Passwords (OTP), DIGEST-MD5,
          LDAP, Secure-Remote-Password (SRP) 等. 某些机制在你的系统中可能
          无法使用, 使用前检查系统中的 SASL 提供了哪些模块.</para>

      <!--
        <para>You can download Cyrus SASL (both code and
          documentation) from
          <ulink url="http://asg.web.cmu.edu/sasl/sasl-library.html"
          />.</para>
      -->
      <para>Cyrus SASL 源代码及其文档的下载地址是 <ulink
          url="http://asg.web.cmu.edu/sasl/sasl-library.html" />.</para>

      </sidebar>

      <!--
      <para>Normally, when a subversion client connects to
        <command>svnserve</command>, the server sends a greeting that
        advertises a list of the capabilities it supports, and the
        client responds with a similar list of capabilities.  If the
        server is configured to require authentication, it then sends
        a challenge that lists the authentication mechanisms
        available; the client responds by choosing one of the
        mechanisms, and then authentication is carried out in some
        number of round-trip messages.  Even when SASL capabilities
        aren't present, the client and server inherently know how to
        use the CRAM-MD5 and ANONYMOUS mechanisms (see
        <xref linkend="svn.serverconfig.svnserve.auth"/>).  If server
        and client were linked against SASL, a number of other
        authentication mechanisms may also be available.  However,
        you'll need to explicitly configure SASL on the server side to
        advertise them.</para>
      -->
      <para>正常情况下, 当 Subversion 客户端连接到 <command>svnserve</command>
        时, 服务器以宣告它所支持的功能作为响应. 如果服务器的配置要求认证,
        服务器将向客户端发起认证请求, 并列出它所支持认证机制, 客户端从中选择
        一种认证机制, 通过几个往返消息携带认证信息. 即使 SASL 不可用, 客户端
        和服务器也能使用内建的 CRAM-MD5 和 ANONYMOUS 认证机制 (见 <xref
          linkend="svn.serverconfig.svnserve.auth"/>). 如果服务器和客户端
        支持 SASL, 那么可供选择的认证机制就比较多, 但是管理器必须在服务器
        端显示式地配置 SASL, 服务端才能向客户端宣告这些认证机制是可用的.
      </para>

      <sect3 id="svn.serverconfig.svnserve.sasl.authn">
      <!--
        <title>Authenticating with SASL</title>
      -->
        <title>使用 SASL 进行认证</title>

      <!--
        <para>To activate specific SASL mechanisms on the server,
          you'll need to do two things.  First, create
          a <literal>[sasl]</literal> section in your
          repository's <filename>svnserve.conf</filename> file with an
          initial key-value pair:</para>
      -->
        <para>为了在服务器上激活 SASL, 管理员要做两件事. 首先, 在仓库的
          <filename>svnserve.conf</filename> 里创建 <literal>[sasl]</literal>
          节, 并为变量 <literal>use-sasl</literal> 赋值:</para>

        <informalexample>
          <programlisting>
[sasl]
use-sasl = true
</programlisting>
        </informalexample>

      <!--
        <para>Second, create a main SASL configuration file
          called <filename>svn.conf</filename> in a place where the
          SASL library can find it&mdash;typically in the directory
          where SASL plug-ins are located.  You'll have to locate the
          plug-in directory on your particular system, such
          as <filename>/usr/lib/sasl2/</filename>
          or <filename>/etc/sasl2/</filename>.  (Note that this
          is <emphasis>not</emphasis>
          the <filename>svnserve.conf</filename> file that lives
          within a repository!)</para>
      -->
        <para>然后, 在 SASL 库函数能够找到的位置创建一个名为
          <filename>svn.conf</filename> 的配置文件&mdash;最典型的位置就是
          SASL 插件所处的位置, 因此管理员需要定位 SASL 插件在系统中的位置,
          例如 <filename>/usr/lib/sasl2/</filename> 或
          <filename>/etc/sasl2/</filename>. (注意, 本段所说的配置文件是
          <filename>svn.conf</filename>, 不是仓库中的
          <filename>svnserve.conf</filename>!).</para>

      <!--
        <para>On a Windows server, you'll also have to edit the system
          registry (using a tool such as <command>regedit</command>)
          to tell SASL where to find things.  Create a registry key
          named <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\Carnegie
          Mellon\Project Cyrus\SASL Library]</literal>, and place two
          keys inside it: a key called <literal>SearchPath</literal>
          (whose value is a path to the directory containing the SASL
          <filename>sasl*.dll</filename> plug-in libraries), and a key
          called
          <literal>ConfFile</literal> (whose value is a path to the
          parent directory containing
          the <filename>svn.conf</filename> file you created).</para>
      -->
        <para>如果服务器的系统是 Windows, 你需要编辑系统注册表 (使用工具
          <command>regedit</command>), 以便告诉 SASL 去哪里搜索所需要的
          文件. 在系统注册表中添加一个新的注册表项, 表项的名字是
          <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\CarnegieMellon\Project Cyrus\SASL Library]</literal>,
          并在其中新增两项: 一项是 <literal>SearchPath</literal> (它的值是一个
          指向目录的路径, 目录包含了 SASL 动态链接库), 另一项是
          <literal>ConfFile</literal> (它的值是一个指向目录的路径, 目录内含有
          管理员创建的 <filename>svn.conf</filename> 文件).</para>

      <!--
        <para>Because SASL provides so many different kinds of
          authentication mechanisms, it would be foolish (and far
          beyond the scope of this book) to try to describe every
          possible server-side configuration.  Instead, we recommend
          that you read the documentation supplied in the
          <filename>doc/</filename> subdirectory of the SASL source
          code.  It goes into great detail about every mechanism and
          how to configure the server appropriately for each.  For the
          purposes of this discussion, we'll just demonstrate a simple
          example of configuring the DIGEST-MD5 mechanism.  For
          example, if your <filename>svn.conf</filename> file contains the
          following:</para>
      -->
        <para>因为 SASL 提供了多种不同的认证机制, 描述每一种可能的服务器端
          配置是不切实际的 (而且也超出了本书的范围), 所以我们建议读者自己去
          阅读 SASL 源代码目录内, <filename>doc</filename> 子目录内的文档,
          文档详细介绍了每一种认证机制, 以及如何正确地配置服务器, 以便使用
          这些认证机制. 为了方便讨论, 我们将介绍一个配置 DIGEST-MD5 的简单
          示例. 如果你的 <filename>svn.conf</filename> 含有以下内容:</para>

        <informalexample>
          <programlisting>
pwcheck_method: auxprop
auxprop_plugin: sasldb
sasldb_path: /etc/my_sasldb
mech_list: DIGEST-MD5
</programlisting>
        </informalexample>

      <!--
        <para>you've told SASL to advertise the DIGEST-MD5
          mechanism to clients and to check user passwords against a
          private password database located
          at <filename>/etc/my_sasldb</filename>.  A system
          administrator can then use
          the <command>saslpasswd2</command> program to add or modify
          usernames and passwords in the database:</para>
      -->
        <para>上面的配置向客户端宣告了 DIGEST-MD5 认证机制, 使用存放在
          <filename>/etc/my_sasldb</filename> 里的私有密码数据库检查用户
          输入的密码的正确性. 管理员可以使用 <command>saslpasswd2</command>
          向密码数据库添加或修改用户名和密码:</para>

        <informalexample>
          <screen>
$ saslpasswd2 -c -f /etc/my_sasldb -u realm username
</screen>
        </informalexample>

      <!--
        <para>A few words of warning: first, make sure the
          <quote>realm</quote> argument
          to <command>saslpasswd2</command> matches the same realm
          you've defined in your
          repository's <filename>svnserve.conf</filename> file; if
          they don't match, authentication will fail.  Also, due to a
          shortcoming in SASL, the common realm must be a string with
          no space characters.  Finally, if you decide to go with the
          standard SASL password database, make sure
          the <command>svnserve</command> program has read access to
          the file (and possibly write access as well, if you're using
          a mechanism such as OTP).</para>
      -->
        <para>有些地方需要注意: 首先要确保 <command>saslpasswd2</command> 的
          <quote>领域</quote> 参数和定义在 <filename>svnserve.conf</filename>
          里的领域是一致的, 如果它们不一致, 认证将会失败. 另外, 受限于 SASL,
          领域必须不带空格的字符串. 最后, 如果你决定使用标准的 SASL 密码数据
          库, 需要确保进程 <command>svnserve</command> 对数据库文件具有读
          权限 (某些认证机制&mdash;例如 OTP&mdash;还会要求写权限).</para>

      <!--
        <para>This is just one simple way of configuring SASL.  Many
          other authentication mechanisms are available, and passwords
          can be stored in other places such as in LDAP or a SQL
          database.  Consult the full SASL documentation for
          details.</para>
      -->
        <para>这只是一种配置 SASL 的简单方式. 还有其他多种认证机制可供选择,
          密码也能以其他格式存在, 例如 LDAP 或 SQL 数据库, 具体的细节请参考
          SASL 文档.</para>

      <!--
        <para>Remember that if you configure your server to only allow
          certain SASL authentication mechanisms, this forces all
          connecting clients to have SASL support as well.  Any
          Subversion client built without SASL support (which includes
          all pre-1.5 clients) will be unable to authenticate.  On the
          one hand, this sort of restriction may be exactly what you
          want (<quote>My clients must all use Kerberos!</quote>).
          However, if you still want non-SASL clients to be able to
          authenticate, be sure to advertise the CRAM-MD5 mechanism as
          an option.  All clients are able to use CRAM-MD5, whether
          they have SASL capabilities or not.</para>
      -->
        <para>注意, 如果管理员将服务器配置成仅允许使用 SASL 认证机制, 这同时
          也在要求所有连接到服务器的客户端必须支持 SASL, 不支持 SASL 的客户
          端 (包括 1.5 版之前的所有客户端) 将无法完成认证, 但是另一个方面,
          这种配置也放正是你所想要的效果 (<quote>所有的客户端都必须使用
            Kerberos!</quote>). 然而, 如果仍然存在不支持 SASL 的客户端需要
          连接服务器, 就要确保 CRAM-MD5 认证机制是可用的, 因为所有的客户端
          都支持 CRAM-MD5.</para>

      </sect3>

      <sect3 id="svn.serverconfig.svnserve.sasl.encryption">
      <!--
        <title>SASL encryption</title>
      -->
        <title>SASL 加密</title>

      <!--
        <para>SASL is also able to perform data encryption if a
          particular mechanism supports it.  The built-in CRAM-MD5
          mechanism doesn't support encryption, but DIGEST-MD5 does,
          and mechanisms such as SRP actually require use of the
          OpenSSL library.  To enable or disable different levels of
          encryption, you can set two values in your repository's
          <filename>svnserve.conf</filename> file:</para>
      -->
        <para>如果特定的认证机制支持, 那么 SASL 也能实现数据加密. 内建的
          CRAM-MD5 不支持加密, 但 DIGEST-MD5 支持, SRP 实际上会用到 OpenSSL
          函数库. 为了开启或禁止加密的不同级别, 你需要在仓库的
          <filename>svnserve.conf</filename> 里定义两个值:</para>

        <informalexample>
          <programlisting>
[sasl]
use-sasl = true
min-encryption = 128
max-encryption = 256
</programlisting>
        </informalexample>

      <!--
        <para>The <literal>min-encryption</literal> and
          <literal>max-encryption</literal> variables control the
          level of encryption demanded by the server.  To disable
          encryption completely, set both values to 0.  To enable
          simple checksumming of data (i.e., prevent tampering and
          guarantee data integrity without encryption), set both
          values to 1.  If you wish to allow&mdash;but not
          require&mdash;encryption, set the minimum value to 0, and
          the maximum value to some bit length.  To require encryption
          unconditionally, set both values to numbers greater than 1.
          In our previous example, we require clients to do at least
          128-bit encryption, but no more than 256-bit
          encryption.</para>
      -->
        <para>变量 <literal>min-encryption</literal> 和
          <literal>max-encryption</literal> 决定加密的级别. 为了完全禁止加密,
          就把两个变量都设为 0. 为了开启简单的数据检验 (即防止数据被篡改,
          保证数据的完整性, 但没有对数据进行加密), 把两个变量都设为 1. 如果
          管理员希望允许&mdash;但并非强制&mdash;加密, 就把
          <literal>min-encryption</literal> 设为 0, 把
          <literal>max-encryption</literal> 设为稍微大点的值. 为了强制要求
          对数据进行加密, 把两个变量都设为大于 1 的数. 在上面的例子里, 我们
          要求客户端的加密至少为 128 位, 但不多于 256 位.</para>

      </sect3>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.svnserve.sshauth">
      <!--
      <title>Tunneling over SSH</title>
      -->
      <title>SSH 隧道</title>

      <!--
      <para><command>svnserve</command>'s built-in authentication (and
        SASL support) can be very handy, because it avoids the need to
        create real system accounts.  On the other hand, some
        administrators already have well-established SSH
        authentication frameworks in place.  In these situations, all
        of the project's users already have system accounts and the
        ability to <quote>SSH into</quote> the server machine.</para>
      -->
      <para><command>svnserve</command> 内建的认证机制 (和 SASL) 使用起来
        非常方便, 因为它避免了创建真正的系统账户. 但另一方面, 管理员可能
        已经建立了一套完善的 SSH 认证框架, 项目所有的开发人员都拥有自己的
        系统账户, 而且能够通过 SSH 登录到服务器.</para>

      <!--
      <para>It's easy to use SSH in conjunction with
        <command>svnserve</command>.  The client simply uses the
        <literal>svn+ssh://</literal> URL scheme to connect:</para>
      -->
      <para>结合使用 SSH 和 <command>svnserve</command> 比较简单, 客户端只要
        用 <literal>svn+ssh://</literal> 形式的 URL 连接服务器即可:</para>

      <informalexample>
        <screen>
$ whoami
harry

$ svn list svn+ssh://host.example.com/repos/project
harryssh@host.example.com's password:  *****

foo
bar
baz
&hellip;
</screen>
      </informalexample>

      <!--
      <para>In this example, the Subversion client is invoking a local
        <command>ssh</command> process, connecting to
        <literal>host.example.com</literal>, authenticating as the
        user <literal>harryssh</literal> (according to SSH user
        configuration), then spawning a private
        <command>svnserve</command> process on the remote machine
        running as the user <literal>harryssh</literal>.  The
        <command>svnserve</command> command is being invoked in tunnel
        mode (<option>-t</option>), and its network protocol is being
        <quote>tunneled</quote> over the encrypted connection by
        <command>ssh</command>, the tunnel agent.
        If the client performs a commit, the authenticated username
        <literal>harryssh</literal> will be used as the author
        of the new revision.</para>
      -->
      <para>在上面的例子里, Subversion 客户端唤起一个本地的
        <command>ssh</command> 进程, 连接到 <literal>host.example.com</literal>,
        作为用户 <literal>harryssh</literal> (根据 SSH 用户配置) 进行认证,
        然后在远程的服务器中, 以用户 <literal>harryssh</literal> 的身份派生
        一个私有的 <command>svnserve</command> 进程. 命令
        <command>svnserve</command> 在隧道模式 (<option>-t</option>) 下执行,
        它的网络协议行走在由 <command>ssh</command>&mdash;隧道代理&mdash;提供
        的加密通道中. 如果客户端执行一个提交操作, 认证过的用户名
        <literal>harryssh</literal> 将作为新版本号的作者.</para>

      <!--
      <para>The important thing to understand here is that the
        Subversion client is <emphasis>not</emphasis> connecting to a
        running <command>svnserve</command> daemon.  This method of
        access doesn't require a daemon, nor does it notice one if
        present.  It relies wholly on the ability of
        <command>ssh</command> to spawn a temporary
        <command>svnserve</command> process, which then terminates
        when the network connection is closed.</para>
      -->
      <para>这里需要强调的一点是 Subversion 客户端 <emphasis>并没有</emphasis>
        连接到运行着的 <command>svnserve</command> 守护进程, 这种访问方式不
        要求 <command>svnserve</command> 守护进程存在, 即使存在也不会被注意
        到. 它完全依赖 <command>ssh</command> 临时派生的
        <command>svnserve</command> 进程, 当网络连接关闭时,
        <command>svnserve</command> 进程就会终止.</para>

      <!--
      <para>When using <literal>svn+ssh://</literal> URLs to access a
        repository, remember that it's the <command>ssh</command>
        program prompting for authentication, and
        <emphasis>not</emphasis> the <command>svn</command> client
        program.  That means there's no automatic password-caching
        going on (see <xref linkend="svn.serverconfig.netmodel.credcache"/>).
        The Subversion client often makes multiple connections to the
        repository, though users don't normally notice this due to the
        password caching feature.  When using
        <literal>svn+ssh://</literal> URLs, however, users may be
        annoyed by <command>ssh</command> repeatedly asking for a
        password for every outbound connection.  The solution is to
        use a separate SSH password-caching tool such as
        <command>ssh-agent</command> on a Unix-like system, or
        <command>pageant</command> on Windows.</para>
      -->
      <para>当使用 <literal>svn+ssh://</literal> URL 访问仓库时, 要记录提出
        认证要求的程序是 <command>ssh</command>, 而 <emphasis>不是</emphasis>
        客户端程序 <command>svn</command>, 这就意味着不会出现密码缓存 (见
        <xref linkend="svn.serverconfig.netmodel.credcache"/>). Subversion
        客户端经常向仓库发起多个连接, 由于密码缓存, 用户通常不会注意到这点,
        然而, 当用户使用 <literal>svn+ssh://</literal> 连接仓库时, 客户端每发起
        一次连接, <command>ssh</command> 都会要求用户输入密码, 用户可能会对
        些感到恼怒. 解决问题的办法是使用一个单独的 SSH 密码缓存工具, 例如
        类 Unix 系统中的 <command>ssh-agent</command>, 或 Windows 系统中的
        <command>pageant</command>.</para>

      <!--
      <para>When running over a tunnel, authorization is primarily
        controlled by operating system permissions to the repository's
        database files; it's very much the same as if Harry were
        accessing the repository directly via a
        <literal>file://</literal> URL.  If multiple system users are
        going to be accessing the repository directly, you may want to
        place them into a common group, and you'll need to be careful
        about umasks (be sure to read <xref
        linkend="svn.serverconfig.multimethod"/> later in this
        chapter).  But even in the case of tunneling, you can still use the
        <filename>svnserve.conf</filename> file to block access, by
        simply setting <literal>auth-access = read</literal>
        or <literal>auth-access = none</literal>.<footnote><para>Note
        that using any sort of <command>svnserve</command>-enforced
        access control at all only makes sense if the users cannot 
        bypass it and access the repository directory directly using
        other tools (such as <command>cd</command> and
        <command>vi</command>); implementing
        such restrictions is described in
        <xref linkend="svn.serverconfig.svnserve.sshtricks.fixedcmd"
        />.</para></footnote></para>
      -->
      <para>在隧道模式下操作时, 授权主要由仓库数据文件的操作系统权限控制,
        这和 Harry 使用 <literal>file://</literal> 直接访问仓库的情形基本
        一致. 如果有多个系统用户会直接访问仓库, 管理员可能想把他们都放到
        一个用户组里, 同时还要注意文件权限掩码 (记得阅读本章后面的
        <xref linkend="svn.serverconfig.multimethod"/>). 即使在隧道模式下,
        你也可以使用 <command>svnserve.conf</command> 屏蔽特定的访问方式,
        只需要设置 <literal>auth-access = read</literal> 或
        <literal>auth-access = none</literal>.<footnote><para>注意,
            <command>svnserve</command> 施加的访问限制只有在以下情况中才是
            有效的: 用户无法旁路掉 <command>svnserve</command> 限制的条件,
            并且没有使用其他工具 (例如 <command>cd</command> 和
            <command>vi</command>) 直接访问仓库. 关于如何实现这些访问限制,
            见 <xref
              linkend="svn.serverconfig.svnserve.sshtricks.fixedcmd"/>.
      </para></footnote></para>

      <!--
      <para>You'd think that the story of SSH tunneling would end
        here, but it doesn't.  Subversion allows you to create custom
        tunnel behaviors in your runtime <filename>config</filename>
        file (see <xref linkend="svn.advanced.confarea"/>).  For
        example, suppose you want to use RSH instead of
        SSH.<footnote><para>We don't actually recommend this, since
        RSH is notably less secure than SSH.</para></footnote>  In
        the <literal>[tunnels]</literal> section of your
        <filename>config</filename> file, simply define it like
        this:</para>
      -->
      <para>读者可能以为关于 SSH 隧道的内容就此结束, 然而并没有. Subversion
        允许用户在运行时配置文件 <filename>config</filename> (见 <xref
          linkend="svn.advanced.confarea"/>) 里创建定制化的隧道行为. 例如使用
        RSH, 而不是 SSH, <footnote><para>实际上我们不推荐使用 RSH, 因为它的安
            全性远不如 SSH.</para></footnote> 具体的配置方式是在
        <filename>config</filename> 的 <literal>[tunnels]</literal> 节添加如
        下内容:</para>

      <informalexample>
        <programlisting>
[tunnels]
rsh = rsh --
</programlisting>
      </informalexample>

      <!--
      <para>And now, you can use this new tunnel definition by using a
        URL scheme that matches the name of your new variable:
        <literal>svn+rsh://host/path</literal>.  When using the new
        URL scheme, the Subversion client will actually be running the
        command <userinput>rsh - - host svnserve -t</userinput> behind the
        scenes.  If you include a username in the URL (e.g.,
        <literal>svn+rsh://username@host/path</literal>), the client
        will also include that in its command (<userinput>rsh - -
        username@host svnserve -t</userinput>).</para>
      -->
    <para>现在, 为了使用新的隧道配置, 把访问仓库的 URL 模式更改为
      <literal>svn+rsh://</literal>, 例如
      <literal>svn+rsh://host/path</literal>, 此时 Subversion 客户端相当于
      在执行 <userinput>rsh -- host svnserve -t</userinput>. 如果用户在
      URL 中包含了用户名 (例如 <literal>svn+rsh://username@host/path</literal>,
      则客户端也会在待执行的命令中包含用户名 (<userinput>rsh --
        username@host svnserve -t</userinput>).</para>

      <warning>
      <!--
        <para>Notice that when defining an RSH-based tunnel, we've
          added the <literal>- -</literal> end-of-options argument to
          the tunnel command line.  This is to prevent a malformed
          hostname from being treated as another option to the tunnel
          command.  You should do the same for other tunnel programs
          (for example, SSH).</para>
      -->
        <para>注意, 在定义基于 RSH 的隧道时, 我们在隧道命令行添加了选项结束
          参数 <literal>--</literal>, 这是为了避免把一个错误的主机名当成隧道
          命令的另一个选项, 使用其他隧道程序时也要考虑这个问题 (例如 SSH).
        </para>
      </warning>

      <!--
      <para>But you can define new tunneling schemes to be much more
        clever than that:</para>
      -->
      <para>不过, 你也可以定义更加灵活的隧道方案:</para>

      <informalexample>
        <programlisting>
[tunnels]
joessh = $JOESSH /opt/alternate/ssh -p 29934 --
</programlisting>
      </informalexample>

      <!--
      <para>This example demonstrates a couple of things.  First, it
        shows how to make the Subversion client launch a very specific
        tunneling binary (the one located at
        <filename>/opt/alternate/ssh</filename>) with specific
        options.  In this case, accessing an
        <literal>svn+joessh://</literal> URL would invoke the
        particular SSH binary with <option>-p 29934</option> as
        arguments&mdash;useful if you want the tunnel program to
        connect to a nonstandard port.</para>
      -->
      <para>这个例子有两点需要说明, 首先它展示了 Subversion 客户端如何启动
        一个特定的隧道程序 (例子里是 <filename>/opt/alternate/ssh</filename>),
        并带有特定的选项. 此时, 访问 URL <literal>svn+joessh</literal> 将启动
        一个特定的 SSH 程序, 并带有参数 <option>-p 29934</option>&mdash;如果
        你希望隧道程序连接到一个非标准的端口, 那么这种方法就比较方便.</para>

      <!--
      <para>Second, it shows how to define a custom environment
        variable that can override the name of the tunneling program.
        Setting the <literal>SVN_SSH</literal> environment variable is
        a convenient way to override the default SSH tunnel agent.
        But if you need to have several different overrides for
        different servers, each perhaps contacting a different port or
        passing a different set of options to SSH, you can use the
        mechanism demonstrated in this example.  Now if we were to set
        the <literal>JOESSH</literal> environment variable, its value
        would override the entire value of the tunnel
        variable&mdash;<command>$JOESSH</command> would be executed
        instead of <userinput>/opt/alternate/ssh -p
        29934</userinput>.</para>
      -->
    <para>第二, 例子展示了如何使用环境变量去覆盖隧道程序的名字. 通过设置
      环境变量 <literal>SVN_SSH</literal> 来覆盖默认的 SSH 隧道代理是一种
      方便的做法, 但是如果你希望不同的服务器使用不同的变量覆盖, 甚至在连接
      每个服务器时, 其端口和选项也不尽相同, 这时候就要用到本例所介绍的方法.
      如果用户设置了环境变量 <literal>JOESSH</literal>, 它的值将会覆盖掉
      变量 <literal>joessh</literal> 原来的值&mdash;Subversion 客户端将会
      执行 <command>$JOESSH</command>, 而不是 <userinput>/opt/alternate/ssh
        -p 29934</userinput>.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.svnserve.sshtricks">
      <!--
      <title>SSH Configuration Tricks</title>
      -->
      <title>SSH 配置技巧</title>

      <!--
      <para>It's possible to control not only the way in which the
        client invokes <command>ssh</command>, but also to control
        the behavior of <command>sshd</command> on your server
        machine.  In this section, we'll show how to control the
        exact <command>svnserve</command> command executed
        by <command>sshd</command>, as well as how to have multiple
        users share a single system account.</para>
      -->
      <para>除了可以控制客户端执行 <command>ssh</command> 的方式外, 还能
        控制服务器上的 <command>sshd</command> 的行为. 本节我们将介绍如何
        控制由 <command>sshd</command> 启动的 <command>svnserve</command>,
        以及多个用户如何共享一个系统账号.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.sshtricks.setup">
      <!--
        <title>Initial setup</title>
      -->
        <title>初始化设置</title>

      <!--
        <para>To begin, locate the home directory of the account
          you'll be using to launch <command>svnserve</command>.  Make
          sure the account has an SSH public/private keypair
          installed, and that the user can log in via public-key
          authentication.  Password authentication will not work,
          since all of the following SSH tricks revolve around using
          the SSH <filename>authorized_keys</filename> file.</para>
      -->
        <para>首先, 先确定你将用来启动 <command>svnserve</command> 的账户
          的家目录. 确保账户已经安装了 SSH 公钥与私钥, 并且用户可通过公钥
          认证进行登录. 密码认证将无法工作, 因此下面将要介绍的 SSH 技巧
          全都是在围绕 SSH <filename>authorized_keys</filename> 文件.</para>

      <!--
        <para>If it doesn't already exist, create the
          <filename>authorized_keys</filename> file (on Unix,
          typically <filename>~/.ssh/authorized_keys</filename>).
          Each line in this file describes a public key that is
          allowed to connect.  The lines are typically of the
          form:</para>
      -->
        <para>如果 <filename>authorized_keys</filename> 事先不存在, 直接创建
          即可 (在 Unix 系统中, 它的典型位置是 <filename>~/.ssh/authorized_keys
          </filename>). 文件的每一行都描述了一个允许连接的公钥, 行的典型样式为:
        </para>

        <informalexample>
          <programlisting>
  ssh-dsa AAAABtce9euch&hellip; user@example.com
</programlisting>
        </informalexample>

      <!--
        <para>The first field describes the type of key, the second
          field is the base64-encoded key itself, and the third field
          is a comment.  However, it's a lesser known fact that the
          entire line can be preceded by a <literal>command</literal>
          field:</para>
      -->
        <para>第一列描述密钥的类型, 第二列是 base64 编码的密钥, 第三列是注释.
          除了这三列, 其实还可以添加一个 <literal>command</literal>
          字段:</para>

        <informalexample>
          <programlisting>
  command="program" ssh-dsa AAAABtce9euch&hellip; user@example.com
</programlisting>
        </informalexample>

      <!--
        <para>When the <literal>command</literal> field is set, the
          SSH daemon will run the named program instead of the
          typical tunnel-mode <command>svnserve</command> invocation that the
          Subversion client asks for.  This opens the door to a number
          of server-side tricks.  In the following examples, we
          abbreviate the lines of the file as:</para>
      -->
        <para>如果含有 <literal>command</literal> 字段, SSH 守护进程将会执行
          该字段所指定的程序, 而不是 Subversion 客户端所请求的以隧道模式
          启动的 <command>svnserve</command>. 这种行为允许我们实现多种服务器
          端技巧, 在下面的例子里, 我们把 <filename>authorized_keys</filename>
          的每一行简写为:</para>

        <informalexample>
          <programlisting>
  command="program" TYPE KEY COMMENT
</programlisting>
        </informalexample>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.sshtricks.fixedcmd">
      <!--
        <title>Controlling the invoked command</title>
      -->
        <title>控制被调用的命令</title>

      <!--
        <para>Because we can specify the executed server-side command,
          it's easy to name a specific <command>svnserve</command>
          binary to run and to pass it extra arguments:</para>
      -->
        <para>因为我们可以指定在服务器端被执行的命令, 所以很容易就能指定
          一个特殊的 <command>svnserve</command> 程序, 并给它传递额外的参数:
        </para>

        <informalexample>
          <programlisting>
  command="/path/to/svnserve -t -r /virtual/root" TYPE KEY COMMENT
</programlisting>
        </informalexample>

      <!--
        <para>In this example, <filename>/path/to/svnserve</filename>
          might be a custom wrapper script
          around <command>svnserve</command> which sets the umask (see
          <xref linkend="svn.serverconfig.multimethod"/>).  It also
          shows how to anchor <command>svnserve</command> in a virtual
          root directory, just as one often does when
          running <command>svnserve</command> as a daemon process.
          This might be done either to restrict access to parts of the
          system, or simply to relieve the user of having to type an
          absolute path in the <literal>svn+ssh://</literal>
          URL.</para>
      -->
        <para>在上面的例子里, <filename>/path/to/svnserve</filename> 可能是
          一个定制化的 <command>svnserve</command> 包裹脚本, 脚本将会重新
          设置文件权限掩码 (见 <xref linkend="svn.serverconfig.multimethod"/>).
          例子还展示了如何修改 <command>svnserve</command> 的文件系统根目录,
          当以守护进程方式运行 <command>svnserve</command> 时, 修改进程的根
          目录是很常见的操作, 这么做可以是为了限制用户对系统目录空间的访问,
          也可以是为了在输入 <literal>svn+ssh://</literal> URL 的路径参数时,
          减少用户打字的工作量.</para>

      <!--
        <para>It's also possible to have multiple users share a single
          account.  Instead of creating a separate system account for
          each user, generate a public/private key pair for each
          person.  Then place each public key into
          the <filename>authorized_keys</filename> file, one per
          line, and use the <option>- -tunnel-user</option>
          option:</para>
      -->
        <para>多个用户共享同一个账户也是有可能的, 方法是为每一个用户生成一对
          公钥与私钥, 然后把每个公钥的内容都写入文件
          <filename>authorized_keys</filename> 内, 每行一个, 并使用选项
          <option>--tunnel-user</option>:</para>

        <informalexample>
          <programlisting>
  command="svnserve -t --tunnel-user=harry" TYPE1 KEY1 harry@example.com
  command="svnserve -t --tunnel-user=sally" TYPE2 KEY2 sally@example.com
</programlisting>
        </informalexample>

      <!--
        <para>This example allows both Harry and Sally to connect to
          the same account via public key authentication.  Each of
          them has a custom command that will be executed;
          the <option>- -tunnel-user</option> option
          tells <command>svnserve</command> to assume that the named
          argument is the authenticated user.  Without
          <option>- -tunnel-user</option>, it would appear as though
          all commits were coming from the one shared system
          account.</para>
      -->
        <para>上面的例子允许 Harry 和 Sally 使用相同的账户, 通过各自的公钥
          认证来连接服务器. 每一行都指定了一条待执行的命令, 选项
          <option>--tunnel-user</option> 告诉 <command>svnserve</command>
          它的参数是已认证的用户, 如果没有加上 <option>--tunnel-user</option>,
          那么 <command>svnserve</command> 会认为所有的提交都来自被共享的
          账户.</para>

      <!--
        <para>A final word of caution: giving a user access to the
          server via public-key in a shared account might still allow
          other forms of SSH access, even if you've set
          the <literal>command</literal> value
          in <filename>authorized_keys</filename>.  For example, the
          user may still get shell access through SSH or be able to
          perform X11 or general port forwarding through your server.
          To give the user as little permission as possible, you may
          want to specify a number of restrictive options immediately
          after the <literal>command</literal>:</para>
      -->
        <para>最后一点需要提醒的是: 如果一个用户可通过共享账户的公钥访问
          服务器, 即使在 <filename>authorized_keys</filename> 里设置了
          <literal>command</literal>, 也可能仍然允许其他形式的 SSH 访问. 例如
          用户仍然能够通过 SSH 获取 shell 访问权限, 或者 X11 窗口, 或者一般
          性的端口转发. 为了使用户的权限尽可能得小, 在
          <literal>command</literal> 后面添加一些限制选项:</para>

        <informalexample>
          <programlisting>
  command="svnserve -t --tunnel-user=harry",no-port-forwarding,no-agent-forw
arding,no-X11-forwarding,no-pty TYPE1 KEY1 harry@example.com
</programlisting>
        </informalexample>

      <!--
        <para>Note that this all must be on one line&mdash;truly on
          one line&mdash;since SSH <filename>authorized_keys</filename>
          files do not even allow the conventional backslash character
          (<literal>\</literal>) for line continuation.  The only
          reason we've shown it with a line break is to fit it on
          the physical page of a book.</para>
      -->
        <para>注意上面的内容必须写在同一行内, 因为
          <filename>authorized_keys</filename> 不支持通过反斜杠来实现行的
          延续, 例子里的换行只是为了方便排版.</para>

      </sect3>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.svnserve.ref">
      <!--
      <title>svnserve Configuration Reference</title>
      -->
      <title>svnserve 配置参考</title>

      <!--
      <para>In the previous sections, we've mentioned numerous
        configuration options that administrators can use in their
        <filename>svnserve.conf</filename> files to configure the
        behavior of Subversion as accessed via Subversion's
        <command>svnserve</command> server option.  In this section,
        we'll quickly summarize <emphasis>all</emphasis> the
        configuration options supported by this server.</para>
      -->
      <para>上一节提到了 <filename>svnserve.conf</filename> 支持的众多选项,
        利用这些选项, 当用户通过 <command>svnserve</command> 服务器访问
        Subversion 时, 管理员就能够实现对 Subversion 行为的控制. 本节将对
        <command>svnserve</command> 支持的 <emphasis>所有</emphasis> 选项
        进行一个总结.</para>

      <!--
      <para>The <filename>svnserve.conf</filename> configuration file
        uses a typical INI-style format, with name/value pairs of
        options grouped into named sections.  (This is conveniently
        the same format used by Subversion's runtime configuration
        area on the client side of the network.)  We'll describe
        herein each of those named sections and the options available
        for use within them.</para>
      -->
      <para>配置文件 <filename>svnserve.conf</filename> 的格式是典型的
        INI 风格, 选项是一对 名字/值, 通过带名字的节进行分组. (这种格式和
        Subversion 客户端的运行时配置所使用的格式相同.) 这里将会介绍配置
        文件里的每一节, 及其支持的各个选项.</para>

      <!--
      <para>By default, <command>svnserve</command> will consult
        per-repository configuration files located
        at <filename>conf/svnserve.conf</filename> within the physical
        directory structure of the repository.  To instead use a
        single configuration file whose values apply to all
        repositories served via an instance
        of <command>svnserve</command>, use
        the <option>- -config-file</option> option when starting your
        server.</para>
      -->
      <para>默认情况下, <command>svnserve</command> 会查阅每个仓库的
        <filename>conf/svnserve.conf</filename>, 为了让一个
        <command>svnserve</command> 的运行实例访问到的所有仓库都使用同一个
        配置文件, 就给它添加选项 <option>--config-file</option>.</para>

      <note>
      <!--
        <para>In the following sections, we will refer to
          the <command>svnserve</command> configuration file by its
          canonical name, <filename>svnserve.conf</filename>.  The
          filename of actual configuration file used by
          your <command>svnserve</command> instance might be something
          else, though.  We trust this won't be too confusing.</para>
      -->
        <para>在下面的几节里, 我们将使用正式名称
          <filename>svnserve.conf</filename> 指代 <command>svnserve</command>
          配置文件, 实际上配置文件还可以取其他名字, 但我们想念读者不会感到
          迷惑.</para>
      </note>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.ref.general">
      <!--
        <title>General configuration</title>
      -->
        <title>通用配置</title>

      <!--
        <para>The <literal>[general]</literal> section contains the
          most commonly used and broadly
          focused <command>svnserve</command> configuration
          options.</para>
      -->
        <para><literal>[general]</literal> 节包含了最常用到的
          <command>svnserve</command> 配置选项.</para>

        <variablelist>
    
          <varlistentry>
            <term><literal>anon-access</literal></term>
            <listitem>

      <!--
              <para>Controls the access level granted to
                unauthenticated (anonymous) users.  Valid values
                are <literal>write</literal>, <literal>read</literal>,
                and <literal>none</literal>, with <literal>read</literal>
                being the default value.</para>
      -->
              <para>控制未认证的 (匿名的) 用户的访问权限, 有效值包括
                <literal>write</literal>, <literal>read</literal>, 和
                <literal>none</literal>, 其中 <literal>read</literal> 是
                默认值.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>auth-access</literal></term>
            <listitem>

      <!--
              <para>Controls the access level granted to authenticaed
                users.  Valid values are <literal>write</literal>,
                <literal>read</literal>, and <literal>none</literal>,
                with <literal>write</literal> being the default
                value.</para>
      -->
              <para>控制已认证的用户的访问权限, 有效值包括
                <literal>write</literal>, <literal>read</literal> 和
                <literal>none</literal>, 其中 <literal>write</literal> 是
                默认值.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>authz-db</literal></term>
            <listitem>

      <!--
              <para>Specifies the location of the repository access
                file as described in
                <xref linkend="svn.serverconfig.pathbasedauthz.getting-started"
                />.  If a regular local path is used, then unless that
                path begins with a forward-slash character
                (<literal>/</literal>), it is interpreted as a path
                relative to the directory containing
                the <filename>svnserve.conf</filename> configuration
                file.  If no path is specified, path-based access
                control will be disabled.</para>
      -->
              <para>指定仓库访问权限配置文件的路径 (见 <xref
                  linkend="svn.serverconfig.pathbasedauthz.getting-started"/>).
                如果是一个普通的本地路径, 除非路径以正斜杠
                (<literal>/</literal>) 开始, 否则的话路径就看成是相对于包含
                了 <filename>svnserve.conf</filename> 的目录的相对路径. 如果没
                有指定路径, 将禁止基于路径的访问权限控制.</para>

      <!--
              <para>As a special consideration, you may also specify
                the location of an access file which is versioned
                inside a Subversion repository.  Use a local URL (one
                which begins with <literal>file://</literal>) to refer
                to an absolute Subversion-versioned access file.
                Alternatively, use a repository relative URL (one
                which begins with <literal>^/</literal>) to cause
                <command>svnserve</command> to consult for each
                repository the access file stored at the specified
                relative URL within that repository.</para>
      -->
              <para>作为一种特殊的情况, 可以把 Subversion 仓库内的文件指定为
                访问权限配置文件, 使用本地 URL (以 <literal>file://</literal>
                开始) 指定文件的位置. 另外, 还可以用相对的仓库 URL (以
                <literal>^/</literal> 开始), 使得 <command>svnserve</command>
                根据相对 URL 访问仓库内的访问权限配置文件.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>force-username-case</literal></term>
            <listitem>

      <!--
              <para>Specifies the case normalization applied to
                usernames before comparing them against the rules
                found in the access file (specified by
                the <literal>authz-db</literal> option).  Valid values
                are <literal>upper</literal> (to uppercase the
                usernames), <literal>lower</literal> (to lowercase the
                usernames), and <literal>none</literal> (to perform no
                normalization at all).  By
                default, <command>svnserve</command> will not perform
                any case normalization on usernames.</para>
      -->
              <para>在和访问权限文件 (由选项 <option>authz-db</option> 指定)
                里的规则比较之前, 指定用户名的大小写形式, 有效值包括
                <literal>upper</literal> (用户名的大小写形式),
                <option>lower</option> (用户名的小写形式) 和
                <option>none</option> (不改变用户名的大小写形式). 默认情况下,
                <command>svnserve</command> 不改变用户名的大小写形式.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>groups-db</literal></term>
            <listitem>

      <!--
              <para>Specifies the path of the groups file.  If a
                regular local path is used, then unless that path
                begins with a forward-slash character
                (<literal>/</literal>), it is interpreted as a path
                relative to the directory containing
                the <filename>svnserve.conf</filename> configuration
                file.</para>
      -->
              <para>指定组文件的路径. 如果是一个普通的本地路径, 除非路径以正
                斜杠 (<literal>/</literal>) 开始, 否则的话路径就看成是相对于
                包含了 <filename>svnserve.conf</filename> 的目录的相对路径.
              </para>

      <!--
              <para>You may also specify the location of a groups file
                which is versioned inside a Subversion repository.
                Use a local URL (one which begins
                with <literal>file://</literal>) to refer to an
                absolute Subversion-versioned file.  Alternatively,
                use a repository relative URL (one which begins
                with <literal>^/</literal>) to cause
                <command>svnserve</command> to consult for each
                repository the group file stored at the specified
                relative URL within that repository.</para>
      -->
              <para>还可以把 Subversion 仓库内的文件指定为组文件. 使用本地
                URL (以 <literal>file://</literal> 开始) 指定文件的位置.
                另外, 还可以用相对的仓库 URL (以
                <literal>^/</literal> 开始), 使得 <command>svnserve</command>
                根据相对 URL 访问仓库内的组文件.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>hooks-env</literal></term>
            <listitem>

      <!--
              <para>Specifies the path to the hook script environment
                configuration file.  This option overrides the
                per-repository default location for this file, and can
                be used to configure the hook script environment for
                multiple repositories in a single file if an absolute
                path is specified.  Unless you specify an absolute
                path, the file's location is interpreted as relative
                to the directory containing
                the <filename>svnserve.conf</filename> configuration
                file.</para>
      -->
              <para>指定钩子脚本环境配置文件的路径. 该选项覆盖了文件在每个
                仓库内的默认位置, 如果写成绝对路径, 就可以用同一个文件为多个
                仓库的钩子脚本环境进行配置. 除非写成绝对路径, 否则的话就看成
                是相对于包含了 <filename>svnserve.conf</filename> 的目录的
                相对路径.</para>

      <!--
              <para>See
                <xref linkend="svn.reposadmin.hooks.configuration" />
                for detailed information regarding the hook script
                environment configuration file.</para>
      -->
              <para>关于钩子环境配置文件的更多信息, 见
                <xref linkend="svn.reposadmin.hooks.configuration" />.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>password-db</literal></term>
            <listitem>

      <!--
              <para>Specifies the path of the password database file.
                Unless the path specified begins with a forward-slash
                character (<literal>/</literal>), it is interpreted as
                a path relative to the directory containing the
                <filename>svnserve.conf</filename> configuration file.
                Note that if the SASL feature is used, this option
                will be ignored.</para>
      -->
              <para>指定密码文件的路径. 除非路径以正 斜杠
                (<literal>/</literal>) 开始, 否则的话路径就看成是相对于
                包含了 <filename>svnserve.conf</filename> 的目录的相对路径.
                注意, 如果使用了 SASL 特性, 则该选项将被忽略.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>realm</literal></term>
            <listitem>

      <!--
              <para>Specifies the authentication realm of the
                repository.  This is primarily used by the client to
                associate cached authentication credentials with a
                specific repository or set of repositories.  As such,
                it is best that the specified realm be unique across
                your repositories unless those repositories share the
                same password database.  By default, the repository's
                UUID is used as its authentication realm.</para>
      -->
              <para>指定仓库的认证域. 该选项主要被客户端使用, 用来关联缓存的
                认证证书和特定的某个或某些仓库, 正因为如此, 除非多个仓库使用
                了相同的密码数据库, 否则的话, 最好把每个仓库的认证域都设置
                成独一无二的值. 仓库认证域的默认值是它的 UUID.</para>

            </listitem>
          </varlistentry>
        </variablelist>
      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.ref.sasl">
      <!--
        <title>Cyrus SASL configuration</title>
      -->
        <title>Cyrus SASL 配置</title>

      <!--
        <para>The <literal>[sasl]</literal> section contains
          configuration which is specific to the optional Cyrus Simple
          Authentication and Security Layer (SASL) integration feature
          of <command>svnserve</command>.  See
          <xref linkend="svn.serverconfig.svnserve.sasl"/> for a more
          thorough description of this feature and the benefits it
          provides.</para>
      -->
        <para><literal>[sasl]</literal> 节包含了专门针对
          <command>svnserve</command> 可选特性 SASL (Cyrus Simple
          Authentication and Security Layer) 的配置, 关于 SASL 更详细的信息
          以及它的益处, 见 <xref linkend="svn.serverconfig.svnserve.sasl"/>.
        </para>

        <variablelist>
    
          <varlistentry>
            <term><literal>max-encryption</literal></term>
            <listitem>

      <!--
              <para>Specifies&mdash;as an integer bit-width&mdash;the
                maximum desired strength of the security layer's
                encryption algorithm.  The special
                value <literal>0</literal> means "no encryption", and
                the special value <literal>1</literal> means
                "integrity checking only".  The default value for this
                option is <literal>256</literal> (256-bit
                encryption).</para>
      -->
              <para>指定安全层加密算法最大的期望长度&mdash;整数的二进制位数.
                特殊值 <literal>0</literal> 表示 <quote>不加密</quote>,
                <literal>1</literal> 表示 <quote>只检查完整性</quote>,
                默认值是 <literal>256</literal> (256 位加密).</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>min-encryption</literal></term>
            <listitem>

      <!--
              <para>Specifies&mdash;as an integer bit-width&mdash;the
                minimum desired strength of the security layer's
                encryption algorithm.  The special
                value <literal>0</literal> means "no encryption", and
                the special value <literal>1</literal> means
                "integrity checking only".  The default value for this
                option is <literal>0</literal> (no encryption).</para>
      -->
              <para>指定安全层加密算法最小的期望长度&mdash;整数的二进制位数.
                特殊值 <literal>0</literal> 表示 <quote>不加密</quote>,
                <literal>1</literal> 表示 <quote>只检查完整性</quote>,
                默认值是 <literal>0</literal> (不加密).</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>use-sasl</literal></term>
            <listitem>

      <!--
              <para>Specifies (as a <literal>true</literal>
                or <literal>false</literal> value) whether to enable
                the Cyrus SASL feature.  Note that this feature is
                only available if <command>svnserve</command> was
                built with support for the feature.  This feature is
                disabled by default.</para>
      -->
              <para>指定是否开启 Cyrus SASL 特性 (<literal>true</literal> 或
                <literal>false</literal>). 注意, 只有在编译
                <command>svnserve</command> 时添加了对 SASL 的支持, 才能开启
                该特性. 默认值是 <literal>false</literal>.</para>

            </listitem>
          </varlistentry>

        </variablelist>
      </sect3>
    </sect2>
  </sect1>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.serverconfig.httpd">

      <!--
    <title>httpd, the Apache HTTP Server</title>
      -->
    <title>httpd, Apache HTTP 服务器</title>

      <!--
    <para>The Apache HTTP Server is a <quote>heavy-duty</quote>
      network server that Subversion can leverage.  Via a custom
      module, <command>httpd</command> makes Subversion repositories
      available to clients via the WebDAV/DeltaV<footnote><para>See
      <ulink url="http://www.webdav.org/"/>.</para></footnote>
      protocol, which is an extension to HTTP 1.1.  This protocol
      takes the ubiquitous HTTP protocol that is the core of the World
      Wide Web, and adds writing&mdash;specifically, versioned
      writing&mdash;capabilities.  The result is a standardized,
      robust system that is conveniently packaged as part of the
      Apache 2.0 software, supported by numerous operating systems and
      third-party products, and doesn't require network administrators
      to open up yet another custom port.<footnote><para>They really
      hate doing that.</para></footnote> While an Apache-Subversion
      server has more features than <command>svnserve</command>, it's
      also a bit more difficult to set up.  With flexibility often
      comes more complexity.</para>
      -->
    <para>Apache HTTP 服务器是 Subversion 可使用的 <quote>重型</quote> 网络
      服务器. 借助一个定制的模块, <command>httpd</command> 允许客户端通过
      WebDAV/Delta 协议 <footnote><para>见 <ulink
            url="http://www.webdav.org/"/>.</para></footnote> 访问 Subversion
      仓库, WebDAV/Delta 协议是 HTTP 1.1 的扩展. WebDAV/Delta 在万维网核心
      协议 HTTP 的基础上, 增加了写功能&mdash;确切地说, 是版本化的写. 这样做的
      结果是得到了一个标准化的, 健壮的软件系统, 可以方便地作为 Apache 2.0
      软件的一部分进行打包, 受到多种操作系统和第三方软件的支持, 也不要求网络
      管理员开通额外的端口.<footnote><para>他们真得很讨厌这样做.</para>
      </footnote> 因为 Apache-Subversion 服务器比 <command>svnserve</command>
      拥有更多的特性, 因此设置起来会更加困难&mdash;灵活性往往伴随着复杂性.
    </para>

      <!--
    <para>Much of the following discussion includes references to
      Apache configuration directives.  While some examples are given
      of the use of these directives, describing them in full is
      outside the scope of this chapter.  The Apache team maintains
      excellent documentation, publicly available on their web site at
      <ulink url="http://httpd.apache.org"/>.  For example, a general
      reference for the configuration directives is located at
      <ulink url="http://httpd.apache.org/docs/current/mod/directives.html"
      />.</para>
      -->
  <para>下面将要介绍的很多内容都包含了关于 Apache 配置命令的引用, 虽然某些
    例子用到了 Apache 的配置命令, 但完整地介绍它们已经超出了本章的范畴.
    Apache 团队维护了非常优秀的文档供用户参考, 可以到它的官网 <ulink
      url="http://httpd.apache.org"/> 获取, 例如, 关于 Apache 配置命令的
    文档在 <ulink
      url="http://httpd.apache.org/docs/current/mod/directives.html"/>.</para>

      <!--
    <para>Also, as you make changes to your Apache setup, it is likely
      that somewhere along the way a mistake will be made.  If you are
      not already familiar with Apache's logging subsystem, you should
      become aware of it.  In your <filename>httpd.conf</filename>
      file are directives that specify the on-disk locations of the
      access and error logs generated by Apache (the
      <literal>CustomLog</literal> and <literal>ErrorLog</literal>
      directives, respectively).
      Subversion's <command>mod_dav_svn</command> uses Apache's error
      logging interface as well.  You can always browse the contents
      of those files for information that might reveal the source of a
      problem that is not clearly noticeable otherwise.</para>
      -->
    <para>另外, 在管理员修改 Apache 设置的过程中, 有可能会有错误发生, 如果你
      还不太熟悉 Apache 的日志子系统, 现在应该着手熟悉它. 文件
      <filename>httpd.conf</filename> 可以指定 Apache 所生成的访问与错误
      日志的存放位置 (配置命令分别是 <literal>CustomLog</literal> 和
      <literal>ErrorLog</literal>). Subversion 的
      <command>mod_dav_svn</command> 也用到了 Apache 的错误日志接口. 管理员
      可以通过查看这些日志文件定位问题发生的原因.</para>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.httpd.prereqs">
      <!--
      <title>Prerequisites</title>
      -->
      <title>先决条件</title>

      <!--
      <para>To network your repository over HTTP, you basically need
        four components, available in two packages.  You'll need
        Apache <command>httpd</command> 2.0 or newer, the
        <command>mod_dav</command> DAV module that comes with it,
        Subversion, and the <command>mod_dav_svn</command>
        filesystem provider module distributed with Subversion.
        Once you have all of those components, the process of
        networking your repository is as simple as:</para>
      -->
      <para>为了能让用户使用 HTTP 协议访问仓库, 你需要 4 项组件, 包含了 2 个
        软件包里. 你需要 Apache <command>httpd</command> 2.0 或更新的版本,
        (它包含了 <command>mod_dav</command> DAV 模块), Subversion, 以
        及随 Subversion 软件包一起发布的 <command>mod_dav_svn</command>
        模块. 这些组件一旦准备完毕, 为仓库添加 HTTP 网络访问能力的步骤就简单
        了:</para>

      <itemizedlist>
        <listitem>
      <!--
          <para>Getting httpd up and running with
            the <command>mod_dav</command> module</para>
      -->
          <para>为 httpd 加载 <command>mod_dav</command>, 并启动 httpd</para>
        </listitem>
        <listitem>
      <!--
          <para>Installing the <command>mod_dav_svn</command> backend
            to <command>mod_dav</command>, which uses Subversion's
            libraries to access the repository</para>
      -->
          <para>安装 <command>mod_dav_svn</command>, 它将使用 Subversion 的
            库函数来访问仓库</para>
        </listitem>
        <listitem>
      <!--
          <para>Configuring your <filename>httpd.conf</filename>
            file to export (or expose) the repository</para>
      -->
          <para>修改 <filename>httpd.conf</filename>, 以便导出 Subversion
            仓库</para>
        </listitem>
      </itemizedlist>

      <!--
      <para>You can accomplish the first two items either by
        compiling <command>httpd</command> and Subversion from
        source code or by installing prebuilt binary packages of
        them on your system.  For the most up-to-date information on
        how to compile Subversion for use with the Apache HTTP Server,
        as well as how to compile and configure Apache itself for
        this purpose, see the <filename>INSTALL</filename> file in
        the top level of the Subversion source code tree.</para>
      -->
      <para>前面两步你可以从源代码编译安装 <command>httpd</command> 和
        Subversion, 或者安装它们的二进制包来完成. 关于如何编译 Subversion,
        以便支持 Apache HTTP Server, 以及如何配置 Apache, 见 Subversion
        源代码顶层目录下的 <filename>INSTALL</filename> 文件.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.httpd.basic">
      <!--
      <title>Basic Apache Configuration</title>
      -->
      <title>Apache 基本配置</title>

      <para>Once you have all the necessary components installed on
        your system, all that remains is the configuration of Apache
        via its <filename>httpd.conf</filename> file.  Instruct Apache
        to load the <command>mod_dav_svn</command> module using the
        <literal>LoadModule</literal> directive.  This directive must
        precede any other Subversion-related configuration items.  If
        your Apache was installed using the default layout, your
        <command>mod_dav_svn</command> module should have been
        installed in the <filename>modules</filename> subdirectory of
        the Apache install location (often
        <filename>/usr/local/apache2</filename>).  The
        <literal>LoadModule</literal> directive has a simple syntax,
        mapping a named module to the location of a shared library on
        disk:</para>

      <informalexample>
        <programlisting>
LoadModule dav_svn_module     modules/mod_dav_svn.so
</programlisting>
      </informalexample>

      <para>Apache interprets the <literal>LoadModule</literal>
        configuration item's library path as relative to its own
        server root.  If configured as previously shown, Apache will
        look for the Subversion DAV module shared library in its
        own <filename>modules/</filename> subdirectory.  Depending on
        how Subversion was installed on your system, you might need to
        specify a different path for this library altogether, perhaps
        even an absolute path such as in the following example:</para>

      <informalexample>
        <programlisting>
LoadModule dav_svn_module     C:/Subversion/lib/mod_dav_svn.so
</programlisting>
      </informalexample>

      <para>Note that if <command>mod_dav</command> was compiled as a
        shared object (instead of statically linked directly to the
        <command>httpd</command> binary), you'll need a similar
        <literal>LoadModule</literal> statement for it, too.  Be sure
        that it comes before the <command>mod_dav_svn</command> line:</para>

      <informalexample>
        <programlisting>
LoadModule dav_module         modules/mod_dav.so
LoadModule dav_svn_module     modules/mod_dav_svn.so
</programlisting>
      </informalexample>

      <para>At a later location in your configuration file, you now
        need to tell Apache where you keep your Subversion repository
        (or repositories).  The <literal>Location</literal> directive
        has an XML-like notation, starting with an opening tag and
        ending with a closing tag, with various other configuration
        directives in the middle.  The purpose of the
        <literal>Location</literal> directive is to instruct Apache to
        do something special when handling requests that are directed
        at a given URL or one of its children.  In the case of
        Subversion, you want Apache to simply hand off support for
        URLs that point at versioned resources to the DAV layer.  You
        can instruct Apache to delegate the handling of all URLs whose
        path portions (the part of the URL that follows the server's
        name and the optional port number) begin with
        <filename>/repos/</filename> to a DAV provider whose
        repository is located at
        <filename>/var/svn/repository</filename> using the
        following <filename>httpd.conf</filename> syntax:</para>

      <informalexample>
        <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNPath /var/svn/repository
&lt;/Location&gt;
</programlisting>
      </informalexample>

      <para>If you plan to support multiple Subversion repositories
        that will reside in the same parent directory on your local
        disk, you can use an alternative
        directive&mdash;<literal>SVNParentPath</literal>&mdash;to
        indicate that common parent directory.  For example, if you
        know you will be creating multiple Subversion repositories in
        a directory <filename>/var/svn</filename> that would be
        accessed via URLs such as
        <uri>http://my.server.com/svn/repos1</uri>,
        <uri>http://my.server.com/svn/repos2</uri>, and so on, you
        could use the <filename>httpd.conf</filename> configuration
        syntax in the following example:</para>

      <informalexample>
        <programlisting>
&lt;Location /svn&gt;
  DAV svn

  # Automatically map any "/svn/foo" URL to repository /var/svn/foo
  SVNParentPath /var/svn
&lt;/Location&gt;
</programlisting>
      </informalexample>

      <para>Using this syntax, Apache will delegate the
        handling of all URLs whose path portions begin with
        <filename>/svn/</filename> to the Subversion DAV provider,
        which will then assume that any items in the directory
        specified by the <literal>SVNParentPath</literal> directive
        are actually Subversion repositories.  This is a particularly
        convenient syntax in that, unlike the use of the
        <literal>SVNPath</literal> directive, you don't have to
        restart Apache to add or remove hosted repositories.</para>

      <para>Be sure that when you define your new
        <literal>Location</literal>, it doesn't overlap with other
        exported locations.  For example, if your main
        <literal>DocumentRoot</literal> is exported to
        <filename>/www</filename>, do not export a Subversion
        repository in <literal>&lt;Location /www/repos&gt;</literal>.
        If a request comes in for the URI
        <filename>/www/repos/foo.c</filename>, Apache won't know
        whether to look for a file <filename>repos/foo.c</filename> in
        the <literal>DocumentRoot</literal>, or whether to delegate
        <command>mod_dav_svn</command> to return
        <filename>foo.c</filename> from the Subversion repository.
        The result is often an error from the server of the form
        <literal>301 Moved Permanently</literal>.</para>

      <sidebar>
        <title>Server Names and the COPY Request</title>

        <para>Subversion makes use of the <literal>COPY</literal>
          request type to perform server-side copies of files and
          directories.  As part of the sanity checking done by the
          Apache modules, the source of the copy is expected to be
          located on the same machine as the destination of the copy.
          To satisfy this requirement, you might need to
          tell <command>mod_dav</command> the name you use as the
          hostname of your server.  Generally, you can use
          the <literal>ServerName</literal> directive in
          <filename>httpd.conf</filename> to accomplish this.</para>

        <informalexample>
          <programlisting>
ServerName svn.example.com
</programlisting>
        </informalexample>

        <para>If you are using Apache's virtual hosting support via
          the <literal>NameVirtualHost</literal> directive, you may
          need to use the <literal>ServerAlias</literal> directive to
          specify additional names by which your server is known.
          Again, refer to the Apache documentation for full
          details.</para>
      </sidebar>

      <para>At this stage, you should strongly consider the question
        of permissions.  If you've been running Apache for some time
        now as your regular web server, you probably already have a
        collection of content&mdash;web pages, scripts, and such.
        These items have already been configured with a set of
        permissions that allows them to work with Apache, or more
        appropriately, that allows Apache to work with those files.
        Apache, when used as a Subversion server, will also need the
        correct permissions to read and write to your Subversion
        repository.</para>

      <para>You will need to determine a permission system setup that
        satisfies Subversion's requirements without messing up any
        previously existing web page or script installations.  This
        might mean changing the permissions on your Subversion
        repository to match those in use by other things that Apache
        serves for you, or it could mean using the
        <literal>User</literal> and <literal>Group</literal>
        directives in <filename>httpd.conf</filename> to specify that
        Apache should run as the user and group that owns your
        Subversion repository.  There is no single correct way to set
        up your permissions, and each administrator will have
        different reasons for doing things a certain way.  Just be
        aware that permission-related problems are perhaps the most
        common oversight when configuring a Subversion repository for
        use with Apache.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.httpd.authn">
      <title>Authentication Options</title>

      <para>At this point, if you configured
        <filename>httpd.conf</filename> to contain something such as the
        following:</para>

      <informalexample>
        <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
&lt;/Location&gt;
</programlisting>
      </informalexample>

      <para>your repository is <quote>anonymously</quote>
        accessible to the world.  Until you configure some
        authentication and authorization policies, the Subversion
        repositories that you make available via the
        <literal>Location</literal> directive will be generally
        accessible to everyone.  In other words:</para>

      <itemizedlist>
        <listitem>
          <para>Anyone can use a Subversion client to check out a
            working copy of a repository URL (or any of its
            subdirectories).</para>
        </listitem>
        <listitem>
          <para>Anyone can interactively browse the repository's
            latest revision simply by pointing a web browser to
            the repository URL.</para>
        </listitem>
        <listitem>
          <para>Anyone can commit to the repository.</para>
        </listitem>
      </itemizedlist>

      <para>Of course, you might have already set up
        a pre-commit hook script to prevent
        commits (see <xref linkend="svn.reposadmin.hooks" />).
        But as you read on, you'll see that it's also possible to use
        Apache's built-in methods to restrict access in specific
        ways.</para>

      <tip>
        <para>Requiring authentication defends against invalid users
          directly accessing the repository, but does not guard the
          privacy of valid users' network activity.  See
          <xref linkend="svn.serverconfig.httpd.ssl"/> for how to
          configure your server to support SSL encryption, which can
          provide that extra layer of protection.</para>
      </tip>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.authn.basic">
        <title>Basic authentication</title>

        <para>The easiest way to authenticate a client is via the HTTP
          Basic authentication mechanism, which simply uses a username
          and password to verify a user's identity.  Apache provides
          the <command>htpasswd</command> utility<footnote><para>See
          <ulink url="http://httpd.apache.org/docs/current/programs/htpasswd.html"
          />.</para></footnote> for managing files containing
          usernames and passwords.</para>

        <warning>
          <para>Basic authentication is <emphasis>extremely</emphasis>
            insecure, because it sends passwords over the network
            in very nearly plain text.  See
            <xref linkend="svn.serverconfig.httpd.authn.digest"/> for
            details on using the much safer Digest mechanism.</para>
        </warning>

        <para>First, create a password file and grant access to
          users Harry and Sally:</para>

        <informalexample>
          <screen>
$ ### First time: use -c to create the file
$ ### Use -m to use MD5 encryption of the password, which is more secure
$ htpasswd -c -m /etc/svn-auth.htpasswd harry
New password: *****
Re-type new password: *****
Adding password for user harry
$ htpasswd -m /etc/svn-auth.htpasswd sally
New password: *******
Re-type new password: *******
Adding password for user sally
$
</screen>
        </informalexample>
        
        <para>Next, ensure that Apache has access to the modules which
          provide the Basic authentication and related
          functionality:  <literal>mod_auth_basic</literal>,
          <literal>mod_authn_file</literal>, and
          <literal>mod_authz_user</literal>.  In many cases, these
          modules are compiled into <command>httpd</command> itself,
          but if not, you might need to explicitly load one or more of
          them using the <literal>LoadModule</literal> directive:</para>

        <informalexample>
          <programlisting>
LoadModule auth_basic_module   modules/mod_auth_basic.so
LoadModule authn_file_module   modules/mod_authn_file.so
LoadModule authz_user_module   moduels/mod_authz_user.so
</programlisting>
        </informalexample>

        <para>After ensuring the Apache has access to the required
          functionality, you'll need to add some more directives
          inside the <literal>&lt;Location&gt;</literal> block to tell
          Apache what type of authentication you wish to use, and just
          how to do so:</para>

        <informalexample>
          <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Basic
  AuthName "Subversion repository"
  AuthType Basic
  AuthBasicProvider file
  AuthUserFile /etc/svn-auth.htpasswd
&lt;/Location&gt;
</programlisting>
        </informalexample>

        <para>These directives work as follows:</para>

        <itemizedlist>
          <listitem>
            <para><literal>AuthName</literal> is an arbitrary name
              that you choose for the authentication domain.  Most
              browsers display this name in the dialog box when
              prompting for username and password.</para>
          </listitem>
          <listitem>
            <para><literal>AuthType</literal> specifies the type of
              authentication to use.</para>
          </listitem>
          <listitem>
            <para><literal>AuthBasicProvider</literal> specifies the
              Basic authentication provider to use for the location.
              In our example, we wish to consult a local password
              file.</para>
          </listitem>
          <listitem>
            <para><literal>AuthUserFile</literal> specifies the
              location of the password file to use.</para>
          </listitem>
        </itemizedlist>

        <para>However, this <literal>&lt;Location&gt;</literal> block
          doesn't yet do anything useful.  It merely tells Apache that
          <emphasis>if</emphasis> authorization were required, it
          should challenge the Subversion client for a username and
          password.  (When authorization is required, Apache requires
          authentication as well.)  What's missing here, however, are
          directives that tell Apache <emphasis>which sorts</emphasis>
          of client requests require authorization; currently, none do.
          The simplest thing is to specify that <emphasis>all</emphasis>
          requests require authorization by adding
          <literal>Require valid-user</literal> to the block:</para>

        <informalexample>
          <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Basic
  AuthName "Subversion repository"
  AuthType Basic
  AuthBasicProvider file
  AuthUserFile /etc/svn-auth.htpasswd

  # Authorization: Authenticated users only
  Require valid-user
&lt;/Location&gt;
</programlisting>
        </informalexample>

        <para>Refer to <xref linkend="svn.serverconfig.httpd.authz"/>
          for more detail on the <literal>Require</literal> directive
          and other ways to set authorization policies.</para>

        <note>
          <para>The default value of the
            <literal>AuthBasicProvider</literal> option is
            <literal>file</literal>, so we won't bother including
            it in future examples.  Just know that if in a broader
            context you've set this value to something else, you'll
            need to explicitly reset it to <literal>file</literal>
            within your Subversion <literal>&lt;Location&gt;</literal>
            block in order to get that behavior.</para>
        </note>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.authn.digest">
        <title>Digest authentication</title>

        <para>Digest authentication is an improvement on Basic
          authentication which allows the server to verify a client's
          identity without sending the password over the network
          unprotected.  Both client and server create a non-reversible
          MD5 hash of the username, password, requested URI, and a
          <firstterm>nonce</firstterm> (number used once) provided by
          the server and changed each time authentication is required.
          The client sends its hash to the server, and the server then
          verifies that the hashes match.</para>

        <para>Configuring Apache to use Digest authentication is
          straightforward.  You'll need to ensure that
          the <literal>mod_auth_digest</literal> module is available
          (instead of <literal>mod_auth_basic</literal>), and then
          make a few small variations on our prior example:</para>

        <informalexample>
          <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Digest
  AuthName "Subversion repository"
  AuthType Digest
  AuthDigestProvider file
  AuthUserFile /etc/svn-auth.htdigest

  # Authorization: Authenticated users only
  Require valid-user
&lt;/Location&gt;
</programlisting>
        </informalexample>

        <para>Notice that <literal>AuthType</literal> is now set to
          <literal>Digest</literal>, and we specify a different path
          for <literal>AuthUserFile</literal>.  Digest authentication
          uses a different file format than Basic authentication, 
          created and managed using Apache's <command>htdigest</command>
          utility<footnote><para>See
          <ulink url="http://httpd.apache.org/docs/current/programs/htdigest.html"
          />.</para></footnote> rather than <command>htpasswd</command>.
          Digest authentication also has the additional concept of a
          <quote>realm</quote>, which must match the value of the
          <literal>AuthName</literal> directive.</para>

        <note>
          <para>For digest authentication, the authentication provider
            is selected using the <literal>AuthDigestProvider</literal>
            as shown in the previous example.  As was the case with
            the <literal>AuthBasicProvider</literal> directive,
            <literal>file</literal> is the default value of the
            <literal>AuthDigestProvider</literal> option, so this
            line is not strictly required unless you need to override
            a different value thereof inherited from a broader
            configuration context.</para>
        </note>

        <para>The password file can be created as follows:</para>

        <informalexample>
          <screen>
$ ### First time: use -c to create the file
$ htdigest -c /etc/svn-auth.htdigest "Subversion repository" harry
Adding password for harry in realm Subversion repository.
New password: *****
Re-type new password: *****
$ htdigest /etc/svn-auth.htdigest "Subversion repository" sally
Adding user sally in realm Subversion repository
New password: *******
Re-type new password: *******
$
</screen>
        </informalexample>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.httpd.authz">
      <title>Authorization Options</title>

      <para>At this point, you've configured authentication, but not
        authorization.  Apache is able to challenge clients and
        confirm identities, but it has not been told how to allow or
        restrict access to the clients bearing those identities.  This
        section describes two strategies for controlling access to
        your repositories.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.authz.blanket">
        <title>Blanket access control</title>

        <para>The simplest form of access control is to authorize
          certain users for either read-only access to a repository or
          read/write access to a repository.</para>

        <para>You can restrict access on all repository operations by
          adding <literal>Require valid-user</literal> directly inside
          the <literal>&lt;Location&gt;</literal> block.  The example
          from <xref linkend="svn.serverconfig.httpd.authn.digest"/>
          allows only clients that successfully authenticate to do
          anything with the Subversion repository:</para>

        <informalexample>
          <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Digest
  AuthName "Subversion repository"
  AuthType Digest
  AuthUserFile /etc/svn-auth.htdigest

  # Authorization: Authenticated users only
  Require valid-user
&lt;/Location&gt;
</programlisting>
        </informalexample>

        <para>Sometimes you don't need to run such a tight ship.  For
          example, the server hosting Subversion's own source code at
          <ulink url="https://svn.apache.org/repos/asf/subversion/"/> allows
          anyone in the world to perform read-only repository tasks (such as
          checking out working copies and browsing the repository),
          but restricts write operations to authenticated users.  The
          <literal>Limit</literal> and <literal>LimitExcept</literal>
          directives allow for this type of selective restriction.
          Like the <literal>Location</literal> directive, these blocks
          have starting and ending tags, and you would nest them
          inside your <literal>&lt;Location&gt;</literal>
          block.</para>

        <para>The parameters present on the <literal>Limit</literal>
          and <literal>LimitExcept</literal> directives are HTTP
          request types that are affected by that block.  For example,
          to allow anonymous read-only operations, you would use the
          <literal>LimitExcept</literal> directive (passing the
          <literal>GET</literal>, <literal>PROPFIND</literal>,
          <literal>OPTIONS</literal>, and <literal>REPORT</literal>
          request type parameters) and place the previously mentioned
          <literal>Require valid-user</literal> directive inside the
          <literal>&lt;LimitExcept&gt;</literal> block instead of just
          inside the <literal>&lt;Location&gt;</literal> block.</para>

        <informalexample>
          <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Digest
  AuthName "Subversion repository"
  AuthType Digest
  AuthUserFile /etc/svn-auth.htdigest

  # Authorization: Authenticated users only for non-read-only
  #                (write) operations; allow anonymous reads
  &lt;LimitExcept GET PROPFIND OPTIONS REPORT&gt;
    Require valid-user
  &lt;/LimitExcept&gt;
&lt;/Location&gt;
</programlisting>
        </informalexample>

        <para>These are only a few simple examples.  For more in-depth
          information about Apache access control and the
          <literal>Require</literal> directive, take a look at the
          <literal>Security</literal> section of the Apache
          documentation's tutorials collection at <ulink
          url="http://httpd.apache.org/docs-2.0/misc/tutorials.html"/>.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.authz.perdir">
        <title>Per-directory access control</title>

        <para>It's possible to set up finer-grained permissions using
          <command>mod_authz_svn</command>.  This Apache module grabs
          the various opaque URLs passing from client to server, asks
          <command>mod_dav_svn</command> to decode them, and then
          possibly vetoes requests based on access policies defined in
          a configuration file.</para>

        <para>If you've built Subversion from source code,
          <command>mod_authz_svn</command> is automatically built
          and installed alongside <command>mod_dav_svn</command>.
          Many binary distributions install it automatically as well.
          To verify that it's installed correctly, make sure it comes
          right after <command>mod_dav_svn</command>'s
          <literal>LoadModule</literal> directive in
          <filename>httpd.conf</filename>:</para>

        <informalexample>
          <programlisting>
LoadModule dav_module         modules/mod_dav.so
LoadModule dav_svn_module     modules/mod_dav_svn.so
LoadModule authz_svn_module   modules/mod_authz_svn.so
</programlisting>
        </informalexample>

        <para>To activate this module, you need to configure your
          <literal>&lt;Location&gt;</literal> block to use the
          <literal>AuthzSVNAccessFile</literal> directive which specifies
          a single file containing the permissions policy for paths within
          your repositories.  Beginning with Subversion 1.7, you can
          also use <literal>AuthzSVNReposRelativeAccessFile</literal>
          directive to specify a per repository access file.
          (In a moment, we'll discuss the format of that file.)</para>

        <para>Apache is flexible, so you have the option to configure
          your block in one of three general patterns.  To begin,
          choose one of these basic configuration patterns.  (The
          following examples are very simple; look at Apache's own
          documentation for much more detail on Apache authentication
          and authorization options.)</para>

        <para>The most open approach is to allow access to everyone.
          This means Apache never sends authentication challenges, and
          all users are treated as <quote>anonymous</quote>.  (See
          <xref linkend="svn.serverconfig.httpd.authz.perdir.ex-1"
          />.)</para>

        <example id="svn.serverconfig.httpd.authz.perdir.ex-1">
          <title>A sample configuration for anonymous access</title>
          <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: None

  # Authorization: Path-based access control
  AuthzSVNAccessFile /path/to/access/file
&lt;/Location&gt;
</programlisting>
        </example>

        <para>On the opposite end of the paranoia scale, you can
          configure Apache to authenticate all clients.
          This block unconditionally requires authentication via the
          <literal>Require valid-user</literal> directive, and defines
          a means to authenticate valid users.  (See
          <xref linkend="svn.serverconfig.httpd.authz.perdir.ex-2"/>.)</para>

        <example id="svn.serverconfig.httpd.authz.perdir.ex-2">
          <title>A sample configuration for authenticated access</title>
          <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Digest
  AuthName "Subversion repository"
  AuthType Digest
  AuthUserFile /etc/svn-auth.htdigest

  # Authorization: Path-based access control; authenticated users only
  AuthzSVNAccessFile /path/to/access/file
  Require valid-user
&lt;/Location&gt;
</programlisting>
        </example>

        <para>A third very popular pattern is to allow a combination
          of authenticated and anonymous access.  For example, many
          administrators want to allow anonymous users to read certain
          repository directories, but restrict access to more
          sensitive areas to authenticated users.  In this setup, all
          users start out accessing the repository anonymously.  If
          your access control policy demands a real username at any
          point, Apache will demand authentication from the client.
          To do this, use both the <literal>Satisfy Any</literal>
          and <literal>Require valid-user</literal> directives.  (See
          <xref linkend="svn.serverconfig.httpd.authz.perdir.ex-3"
          />.)</para>

        <example id="svn.serverconfig.httpd.authz.perdir.ex-3">
          <title>A sample configuration for mixed
            authenticated/anonymous access</title>
          <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Digest
  AuthName "Subversion repository"
  AuthType Digest
  AuthUserFile /etc/svn-auth.htdigest

  # Authorization: Path-based access control; try anonymous access
  #                first, but authenticate if necessary
  AuthzSVNAccessFile /path/to/access/file
  Satisfy Any
  Require valid-user
&lt;/Location&gt;
</programlisting>
        </example>

        <para>The next step is to create the authorization file
          containing access rules for particular paths within the
          repository.  We describe how later in this chapter, in
          <xref linkend="svn.serverconfig.pathbasedauthz"/>.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.authz.pathauthzoff">
        <title>Disabling path-based checks</title>

        <para>The <command>mod_dav_svn</command> module goes through a
          lot of work to make sure that data you've marked
          <quote>unreadable</quote> doesn't get accidentally leaked.
          This means it needs to closely monitor all of the paths
          and file-contents returned by commands such as <command>svn
          checkout</command> and <command>svn update</command>.
          If these commands encounter a path that isn't
          readable according to some authorization policy, the
          path is typically omitted altogether.  In the case of
          history or rename tracing&mdash;for example, running a command such
          as <userinput>svn cat -r OLD foo.c</userinput> on a file that
          was renamed long ago&mdash;the rename tracking will simply
          halt if one of the object's former names is determined to be
          read-restricted.</para>

        <para>All of this path checking can sometimes be quite
          expensive, especially in the case of <command>svn
          log</command>.  When retrieving a list of revisions, the
          server looks at every changed path in each revision and
          checks it for readability.  If an unreadable path is
          discovered, it's omitted from the list of the revision's
          changed paths (normally seen with
          the <option>--verbose</option> (<option>-v</option>) option),
          and the whole log message is suppressed.  Needless to say,
          this can be time-consuming on revisions that affect a large
          number of files.  This is the cost of security: even if you
          haven't configured a module such as
          <command>mod_authz_svn</command> at all, the
          <command>mod_dav_svn</command> module is still asking Apache
          <command>httpd</command> to run authorization checks on
          every path.  The <command>mod_dav_svn</command> module has
          no idea what authorization modules have been installed, so
          all it can do is ask Apache to invoke whatever might be
          present.</para>

        <para>On the other hand, there's also an escape hatch of
          sorts, which allows you to trade security features for
          speed.  If you're not enforcing any sort of per-directory
          authorization (i.e., not using
          <command>mod_authz_svn</command> or similar module),
          you can disable all of this path checking.  In your
          <filename>httpd.conf</filename> file, use the
          <literal>SVNPathAuthz</literal> directive as shown in
          <xref linkend="svn.serverconfig.httpd.authz.pathauthzoff.ex-1"/>.</para>

        <example id="svn.serverconfig.httpd.authz.pathauthzoff.ex-1">
          <title>Disabling path checks altogether</title>
          <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  SVNPathAuthz off
&lt;/Location&gt;
</programlisting>
        </example>

        <para>The <literal>SVNPathAuthz</literal> directive
          is <quote>on</quote> by default.  When
          set to <quote>off,</quote> all path-based authorization
          checking is disabled;
          <command>mod_dav_svn</command> stops invoking authorization
          checks on every path it discovers.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.authz.inrepo-authz">
        <title>Versioned in repository access files</title>

        <para>Beginning with Subversion 1.8, access files can be stored
          inside a Subversion repository.  It is possible to store the
          access file in the same repository to which the
          access rules are being applied or another repository.  This
          approach enables versioning features of Subversion for
          the path-based authorization configuration.</para>

        <para>Both <literal>AuthzSVNAccessFile</literal> and
          <literal>AuthzSVNReposRelativeAccessFile</literal> configuration
          directives allow to specify in-repository access file's location.
          The directives accept absolute <literal>file://</literal> URLs
          and repository relative URLs (one which begins with ^/).</para>

        <para>For example, it is possible to specify an absolute URL to
          in-repository access file as shown in
          <xref linkend="svn.serverconfig.httpd.authz.inrepo-authz.ex-1"/>.</para>

        <example id="svn.serverconfig.httpd.authz.inrepo-authz.ex-1">
          <title>Using single versioned in repo access file</title>
          <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn
  AuthzSVNAccessFile file:///var/svn/authzrepo/authz
&lt;/Location&gt;
</programlisting>
        </example>

        <para>You can also specify a relative URL to an in repository access
          file as demonstrated in
          <xref linkend="svn.serverconfig.httpd.authz.inrepo-authz.ex-2"/>.</para>

        <example id="svn.serverconfig.httpd.authz.inrepo-authz.ex-2">
          <title>Using per repository in repo access files</title>
          <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn
  AuthzSVNReposRelativeAccessFile ^/authz
&lt;/Location&gt;
</programlisting>
        </example>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.httpd.ssl">
      <title>Protecting network traffic with SSL</title>

      <para>Connecting to a repository via <literal>http://</literal>
        means that all Subversion activity is sent across the network
        in the clear.  This means that actions such as checkouts,
        commits, and updates could potentially be intercepted by an
        unauthorized party <quote>sniffing</quote> network traffic.
        Encrypting traffic using SSL is a good way to protect
        potentially sensitive information over the network.</para>

      <para>If a Subversion client is compiled to use OpenSSL,
        it gains the ability to speak to an Apache server via
        <literal>https://</literal> URLs, so all traffic is encrypted
        with a per-connection session key.  The WebDAV library used by
        the Subversion client is not only able to verify server
        certificates, but can also supply client certificates when
        challenged by the server.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.ssl.server">
        <title>Subversion server SSL certificate configuration</title>

        <para>It's beyond the scope of this book to describe how to
          generate client and server SSL certificates and how to
          configure Apache to use them.  Many other references,
          including Apache's own documentation (<ulink 
          url="http://httpd.apache.org/docs/current/ssl/"/>),
          describe the process.</para>

        <tip>
          <para>SSL certificates from well-known entities generally
            cost money, but at a bare minimum, you can configure
            Apache to use a self-signed certificate generated with a
            tool such as OpenSSL (<ulink url="http://openssl.org"
            />).<footnote><para>While self-signed certificates are
            still vulnerable to a <quote>man-in-the-middle</quote>
            attack (before a client sees the certificate for the first
            time), such an attack is much more difficult for a casual
            observer to pull off, compared to sniffing unprotected
            passwords.</para></footnote></para>
        </tip>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.ssl.client">
        <title>Subversion client SSL certificate management</title>

        <para>When connecting to Apache via <literal>https://</literal>,
          a Subversion client can receive two different types of
          responses:</para>

        <itemizedlist>
          <listitem>
            <para>A server certificate</para>
          </listitem>
          <listitem>
            <para>A challenge for a client certificate</para>
          </listitem>
        </itemizedlist>

        <sect4 id="svn.serverconfig.httpd.ssl.client.servercert">
          <title>Server certificate</title>

          <para>When the client receives a server certificate, it needs
            to verify that the server is who it claims to be. OpenSSL
            does this by examining the signer of the server certificate,
            or <firstterm>certificate authority</firstterm> (CA).  If
            OpenSSL is unable to automatically trust the CA, or if some
            other problem occurs (such as an expired certificate or
            hostname mismatch), the Subversion command-line client will
            ask you whether you want to trust the server certificate
            anyway:</para>

          <informalexample>
            <screen>
$ svn list https://host.example.com/repos/project

Error validating server certificate for 'https://host.example.com:443':
 - The certificate is not issued by a trusted authority.  Use the
   fingerprint to validate the certificate manually!
Certificate information:
 - Hostname: host.example.com
 - Valid: from Jan 30 19:23:56 2004 GMT until Jan 30 19:23:56 2006 GMT
 - Issuer: CA, example.com, Sometown, California, US
 - Fingerprint: 7d:e1:a9:34:33:39:ba:6a:e9:a5:c4:22:98:7b:76:5c:92:a0:9c:7b

(R)eject, accept (t)emporarily or accept (p)ermanently?
</screen>
          </informalexample>

          <para>This dialogue is essentially the same question you may
            have seen coming from your web browser (which is just
            another HTTP client like Subversion).  If you choose the
            <literal>(p)</literal>ermanent option, Subversion will
            cache the server certificate in your private runtime
            <filename>auth/</filename> area, just as your username and
            password are cached (see <xref
            linkend="svn.serverconfig.netmodel.credcache"/>), and will
            automatically trust the certificate in the future.</para>

          <para>Your runtime <filename>servers</filename> file also gives
            you the ability to make your Subversion client automatically
            trust specific CAs, either globally or on a per-host basis.
            Simply set the <literal>ssl-authority-files</literal>
            variable to a semicolon-separated list of PEM-encoded CA
            certificates:</para>

          <informalexample>
            <programlisting>
[global]
ssl-authority-files = /path/to/CAcert1.pem;/path/to/CAcert2.pem
</programlisting>
          </informalexample>

          <para>Many OpenSSL installations also have a predefined set
            of <quote>default</quote> CAs that are nearly universally
            trusted.  To make the Subversion client automatically trust
            these standard authorities, set the
            <literal>ssl-trust-default-ca</literal> variable to
            <literal>true</literal>.</para>

        </sect4>

        <sect4 id="svn.serverconfig.httpd.ssl.client.clientcert">
          <title>Client certificate challenge</title>

          <para>If the client receives a challenge for a certificate,
            the server is asking the client to prove its identity.
            The client must send back a certificate signed by a CA
            that the server trusts, along with a <firstterm>challenge
            response</firstterm> which proves that the client owns the
            private key associated with the certificate.  The private
            key and certificate are usually stored in an encrypted
            format on disk, protected by a passphrase.  When Subversion
            receives this challenge, it will ask you for the path to the
            encrypted file and the passphrase that protects it:</para>

          <informalexample>
            <screen>
$ svn list https://host.example.com/repos/project

Authentication realm: https://host.example.com:443
Client certificate filename: /path/to/my/cert.p12
Passphrase for '/path/to/my/cert.p12':  ********
</screen>
          </informalexample>

          <para>Notice that the client credentials are stored in a
            <literal>.p12</literal> file.  To use a client certificate
            with Subversion, it must be in PKCS#12 format, which is a
            portable standard.  Most web browsers are able to import
            and export certificates in that format.  Another option
            is to use the OpenSSL command-line tools to convert
            existing certificates into PKCS#12.</para>

          <para>The runtime <filename>servers</filename> file also
            allows you to automate this challenge on a per-host basis.
            If you set the <literal>ssl-client-cert-file</literal>
            and <literal>ssl-client-cert-password</literal> variables,
            Subversion can automatically respond to a client
            certificate challenge without prompting you:</para>

          <informalexample>
            <programlisting>
[groups]
examplehost = host.example.com

[examplehost]
ssl-client-cert-file = /path/to/my/cert.p12
ssl-client-cert-password = somepassword
</programlisting>
          </informalexample>

          <para>More security-conscious folk might want to exclude
            <literal>ssl-client-cert-password</literal> to avoid
            storing the passphrase in the clear on disk.</para>

        </sect4>
      </sect3>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.httpd.perf">
      <title>Tuning for Performance</title>

      <para>The Apache HTTP Server is built for performance, but you
        can improve upon its default configuration to get even better
        results out of your Subversion service offering.  In this
        section, we'll recommend some specific configuration changes
        to consider.  Understand, however, that some of
        the <filename>httpd.conf</filename> configuration options
        we'll be discussing herein affect the general behavior of your
        server, not merely the Subversion service.  As such, you need
        to consider the full breadth of your HTTP service offering to
        discern how modifications to these settings for Subversion's
        sake may affect your other services.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.perf.keepalive">
        <title>KeepAlive</title>

        <para>By default, the Apache HTTP Server is configured to
          enable the re-use of a single server connection for multiple
          requests.  That's very beneficial for Subversion, because
          unlike many HTTP-based applications, Subversion can very
          quickly generate hundreds or thousands of requests against
          the server for a single operation, and the cost of opening a
          new connection to the server is non-trivial.  Subversion
          wants to squeeze as many requests as possible out of a
          single connection before that connection is terminated by
          the server.  The <literal>KeepAlive</literal> directive is the
          boolean flag which enables or disables this connection
          re-use facility, and as we indicated previously, by default
          its value is <literal>On</literal>.</para>

        <para>But there's another directive which limits the number of
          requests a client is allowed to submit on a single
          connection:  the <literal>MaxKeepAliveRequests</literal>
          directive.  The default value for that option
          is <literal>100</literal>.  This was probably sufficient for
          older versions of Subversion, but Subversion 1.8 employs a
          different HTTP communications library (called Serf) which
          prefers to pipeline several smaller requests for specific bits
          of information rather than asking the server to transmit
          huge chunks of data in a single response.  We recommend that
          you increase the value of the
          <literal>MaxKeepAliveRequests</literal> option
          to at least <literal>1000</literal>.</para>

        <informalexample>
          <programlisting>
#
# KeepAlive: Whether or not to allow persistent connections (more than
# one request per connection). Set to "Off" to deactivate.
#
KeepAlive On

#
# MaxKeepAliveRequests: The maximum number of requests to allow
# during a persistent connection. Set to 0 to allow an unlimited amount.
# We recommend you leave this number high, for maximum performance.
#
MaxKeepAliveRequests 1000
</programlisting>
        </informalexample>
      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.perf.bulk-updates">
        <title>Bulk updates</title>

        <para>The biggest difference between the way that Subversion
          1.8 clients and pre-1.8 clients behave is in how update-style
          operations (<command>svn checkout</command>, <command>svn
          update</command>, <command>svn switch</command>, etc.) are
          handled.  Older clients which used the Neon HTTP library for
          communications preferred to ask the server for the entire
          payload of information required from the server in a single
          request.  Admins will have noticed that in their server
          logs, there would be some initial handshaking operations,
          and then a <literal>REPORT</literal> request with a massive
          response.  That response was the entire checkout/update
          dataset!</para>

        <para>Subversion clients which use the Serf HTTP
          library&mdash;which includes all clients built atop the
          Subversion 1.8&mdash;still send the <literal>REPORT</literal>
          request, but with slightly different flags set inside that
          request.  These flags ask the server not to send all the
          data for the operation, but to instead send only a checklist
          of other more specific things that the client needs to
          subsequently fetch from the server in order to complete that
          operation.  In the server's <filename>access_log</filename>,
          that <literal>REPORT</literal> is followed by many smaller
          requests (<literal>GET</literal>s and, in older versions of
          Subversion, <literal>PROPFIND</literal>s).</para>

        <para>There are pros and cons to each approach.  As we've
          mentioned, the so-called bulk updates generate considerably
          less information in the server logs, but a given Apache HTTP
          Server child process is completely consumed for the duration
          of what could be a lengthy operation.  Non-bulk updates
          offer opportunities for setting up content caches (which
          themselves can improve performance), but generate server log
          traffic which is whole orders of magnitude larger than the
          bulk update approach.  So, for one reason or another,
          administrators may desire to exert a little more control
          over which approach the clients use.  Subversion 1.6
          introduced the <literal>SVNAllowBulkUpdates</literal>
          <command>mod_dav_svn</command> directive&mdash;a simple
          boolean flag&mdash;to allow admins to specify whether the
          server was allowed to honor bulk update requests.  In
          Subversion 1.8, this directive has expanded to include
          a <literal>Prefer</literal> value in addition to the
          <literal>On</literal> and <literal>Off</literal> values it
          already supported. When <literal>SVNAllowBulkUpdates</literal>
          is set to <literal>Prefer</literal>, supporting clients (1.8
          or newer) will try to use the bulk update approach unless
          otherwise configured.</para>

      </sect3>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.httpd.extra">
      <title>Extra Goodies</title>

      <para>We've covered most of the authentication and authorization
        options for Apache and <command>mod_dav_svn</command>.  But
        there are a few other nice features that Apache
        provides.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.extra.browsing">
        <title>Repository browsing</title>

        <para>One of the most useful benefits of an Apache/WebDAV
          configuration for your Subversion repository is that your
          versioned files and directories are immediately available
          for viewing via a regular web browser.  Since Subversion
          uses URLs to identify versioned resources, those URLs used
          for HTTP-based repository access can be typed directly into
          a web browser.  Your browser will issue an
          HTTP <literal>GET</literal> request for that URL; based on
          whether that URL represents a versioned directory or
          file, <command>mod_dav_svn</command> will respond with a
          directory listing or with file contents.</para>

        <sect4 id="svn.serverconfig.httpd.extra.browsing.syntax">
          <title>URL syntax</title>

          <para>If the URLs do not contain any information about which
            version of the resource you wish to
            see, <command>mod_dav_svn</command> will answer with the
            youngest version.  This functionality has the wonderful
            side effect that you can pass around Subversion URLs to
            your peers as references to documents, and those URLs will
            always point at the latest manifestation of that document.
            Of course, you can even use the URLs as hyperlinks from
            other web sites, too.</para>

          <para>As of Subversion 1.6, <command>mod_dav_svn</command>
            supports a public URI syntax for examining older revisions
            of both files and directories.  The syntax uses the query
            string portion of the URL to specify either or both of a
            peg revision and operative revision, which Subversion will
            then use to determine which version of the file or
            directory to display to your web browser.  Add the query
            string name/value pair
            <literal>p=<replaceable>PEGREV</replaceable></literal>,
            where <replaceable>PEGREV</replaceable> is a revision
            number, to specify the peg revision you wish to apply to the
            request.  Use
            <literal>r=<replaceable>REV</replaceable></literal>,
            where <replaceable>REV</replaceable> is a revision number, to
            specify an operative revision.</para>

          <para>For example, if you wish to see the latest version of a
            <filename>README.txt</filename> file located in your
            project's <filename>/trunk</filename>, point your web
            browser to that file's repository URL, which might look
            something like the following:</para>

          <informalexample>
            <programlisting>
http://host.example.com/repos/project/trunk/README.txt
</programlisting>
          </informalexample>

          <para>If you now wish to see some older version of that
            file, add an operative revision to the URL's query
            string:</para>

          <informalexample>
            <programlisting>
http://host.example.com/repos/project/trunk/README.txt?r=1234
</programlisting>
          </informalexample>

          <para>What if the thing you're trying to view no longer exists
            in the youngest revision of the repository?  That's where a
            peg revision is handy:</para>

          <informalexample>
            <programlisting>
http://host.example.com/repos/project/trunk/deleted-thing.txt?p=321
</programlisting>
          </informalexample>

          <para>And of course, you can combine peg revision and
            operative revision specifiers to fine-tune the exact item
            you wish to view:</para>

          <informalexample>
            <programlisting>
http://host.example.com/repos/project/trunk/renamed-thing.txt?p=123&amp;r=21
</programlisting>
          </informalexample>

          <para>The previous URL would display revision 21 of the
            object which, in revision 123, was located
            at <filename>/trunk/renamed-thing.txt</filename> in the
            repository.  See <xref linkend="svn.advanced.pegrevs" /> for a
            detailed explanation of these <quote>peg revision</quote>
            and <quote>operative revision</quote> concepts.  They can
            be a bit tricky to wrap your head around.</para>

          <para>Beginning with Subversion 1.8, <command>mod_dav_svn</command>
            has the ability to substitute keywords.  When 
            <command>mod_dav_svn</command>
            finds the query argument <literal>kw=1</literal> added to
            the URL of a file, it will expand keywords when delivering
            the file's content.  Omitting the <literal>kw</literal>
            parameter or using any value besides <literal>1</literal>
            for that parameter will cause Subversion to use its
            default behavior, which is to deliver the file's content
            without any keywords expanded.</para>

          <para>Because keyword substitution is typically performed by the
            Subversion client as part of its working copy administration
            and management, this is a handy way to get the server to deliver
            a keyword-expanded form of your versioned file without the use
            of a working copy.</para>

          <para>For example, if you wish to see the latest version of a
            <filename>README.txt</filename> file located in your
            project's <filename>/trunk</filename> with keywords
            expanded, add the query argument <literal>kw=1</literal> to the
            URL:</para>

          <informalexample>
            <programlisting>
http://host.example.com/repos/project/trunk/README.txt?kw=1
</programlisting>
          </informalexample>

          <para>As with client-side keyword expansion, only those keywords
            which are explicitly designated for expansion via the
            <literal>svn:keywords</literal> property set on the file itself
            will be expanded.  See
            <xref linkend="svn.advanced.props.special.keywords" /> for a
            detailed description of the keyword substitution feature.</para>

          <para>As a reminder, <command>mod_dav_svn</command> offers only a
            limited repository browsing experience.  You can see directory
            listings and file contents, but no revision properties
            (such as commit log messages) or file/directory
            properties.  For folks who require more extensive browsing
            of repositories and their history, there are several
            third-party software packages which offer this.  Some
            examples include ViewVC (<ulink url="http://viewvc.org" />),
            Trac (<ulink url="http://trac.edgewall.org" />) and WebSVN
            (<ulink url="http://websvn.info" />).  These third-party
            tools don't affect <command>mod_dav_svn</command>'s
            built-in <quote>browseability</quote>, and generally offer
            a much wider set of features, including the display of the
            aforementioned property sets, display of content
            differences between file revisions, and so on.</para>

        </sect4>

        <sect4 id="svn.serverconfig.httpd.extra.browsing.mimetype">
          <title>Proper MIME type</title>

          <para>When browsing a Subversion repository, the web browser
            gets a clue about how to render a file's contents by
            looking at the <literal>Content-Type:</literal> header
            returned in Apache's response to the
            HTTP <literal>GET</literal> request.  The value of this
            header is some sort of MIME type.  By default, Apache will
            tell the web browsers that all repository files are of
            the <quote>default</quote> MIME type,
            typically <literal>text/plain</literal>.  This can be
            frustrating, however, if a user wishes repository files to
            render as something more meaningful&mdash;for example,
            it might be nice to have a <filename>foo.html</filename> file
            in the repository actually render as HTML when
            browsing.</para>

          <para>To make this happen, you need only to make sure that
            your files have the proper <literal>svn:mime-type</literal>
            set.  We discuss this in more detail in
            <xref linkend="svn.advanced.props.special.mime-type"/>,
            and you can even configure your client to automatically
            attach proper <literal>svn:mime-type</literal> properties
            to files entering the repository for the first time; see
            <xref linkend="svn.advanced.props.auto"/>.</para>

          <para>Continuing our example, if one were to set
            the <literal>svn:mime-type</literal> property
            to <literal>text/html</literal> on
            file <filename>foo.html</filename>, Apache would properly
            tell your web browser to render the file as HTML.  One
            could also attach proper <literal>image/*</literal>
            MIME-type properties to image files and ultimately get an
            entire web site to be viewable directly from a repository!
            There's generally no problem with this, as long as the web
            site doesn't contain any dynamically generated
            content.</para>

        </sect4>

        <sect4 id="svn.serverconfig.httpd.extra.browsing.xslt">
          <title>Customizing the look</title>

          <para>You generally will get more use out of URLs to
            versioned files&mdash;after all, that's where the
            interesting content tends to lie.  But you might have
            occasion to browse a Subversion directory listing, where
            you'll quickly note that the generated HTML used to
            display that listing is very basic, and certainly not
            intended to be aesthetically pleasing (or even
            interesting).  To enable customization of these directory
            displays, Subversion provides an XML index feature.  A
            single <literal>SVNIndexXSLT</literal> directive in your
            repository's <literal>Location</literal> block of
            <filename>httpd.conf</filename> will
            instruct <command>mod_dav_svn</command> to generate XML
            output when displaying a directory listing, and to
            reference the XSLT stylesheet of your choice:</para>

          <informalexample>
            <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
  SVNIndexXSLT "/svnindex.xsl"
  &hellip;
&lt;/Location&gt;
</programlisting>
          </informalexample>

          <para>Using the <literal>SVNIndexXSLT</literal> directive
            and a creative XSLT stylesheet, you can make your
            directory listings match the color schemes and imagery
            used in other parts of your web site.  Or, if you'd
            prefer, you can use the sample stylesheets provided in the
            Subversion source distribution's
            <filename>tools/xslt/</filename> directory.
            Keep in mind that the path provided to the
            <literal>SVNIndexXSLT</literal> directory is actually a
            URL path&mdash;browsers need to be able to read your
            stylesheets to make use of them!</para>

        </sect4>

        <sect4 id="svn.serverconfig.httpd.extra.browsing.reposlisting">
          <title>Listing repositories</title>

          <para>If you're serving a collection of repositories from a
            single URL via the <literal>SVNParentPath</literal>
            directive, then it's also possible to have Apache display
            all available repositories to a web browser.  Just
            activate the <literal>SVNListParentPath</literal>
            directive:</para>

          <informalexample>
            <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
  SVNListParentPath on
  &hellip;
&lt;/Location&gt;
</programlisting>
          </informalexample>

          <para>If a user now points her web browser to the
            URL <literal>http://host.example.com/svn/</literal>,
            she'll see a list of all Subversion repositories sitting
            in <filename>/var/svn</filename>.  Obviously, this can be
            a security problem, so this feature is turned off by
            default.</para>

        </sect4>
      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.extra.logging">
        <title>Apache logging</title>

        <para>Because Apache is an HTTP server at heart, it contains
          fantastically flexible logging features.  It's beyond the
          scope of this book to discuss all of the ways logging can be
          configured, but we should point out that even the most
          generic <filename>httpd.conf</filename> file will cause
          Apache to produce two logs:
          <filename>error_log</filename>
          and <filename>access_log</filename>.  These logs may appear
          in different places, but are typically created in the
          logging area of your Apache installation.  (On Unix, they
          often live
          in <filename>/usr/local/apache2/logs/</filename>.)</para>

        <para>The <filename>error_log</filename> describes any internal
          errors that Apache runs into as it works.
          The <filename>access_log</filename> file records every
          incoming HTTP request received by Apache.  This makes it
          easy to see, for example, which IP addresses Subversion
          clients are coming from, how often particular clients use
          the server, which users are authenticating properly, and
          which requests succeed or fail.</para>

        <para>Unfortunately, because HTTP is a stateless protocol,
          even the simplest Subversion client operation generates
          multiple network requests.  It's very difficult to look at
          the <filename>access_log</filename> and deduce what the
          client was doing&mdash;most operations look like a series
          of cryptic <literal>PROPPATCH</literal>, <literal>GET</literal>,
          <literal>PUT</literal>, and <literal>REPORT</literal>
          requests.  To make things worse, many client operations send
          nearly identical series of requests, so it's even harder to
          tell them apart.</para>

        <para><command>mod_dav_svn</command>, however, can come to
          your aid.  By activating an <quote>operational
          logging</quote> feature, you can
          ask <command>mod_dav_svn</command> to create a separate log
          file describing what sort of high-level operations your
          clients are performing.</para>

        <para>To do this, you need to make use of
          Apache's <literal>CustomLog</literal> directive (which is
          explained in more detail in Apache's own documentation).
          Be sure to invoke this
          directive <emphasis>outside</emphasis> your
          Subversion <literal>Location</literal> block:</para>

        <informalexample>
          <programlisting>
&lt;Location /svn&gt;
  DAV svn
  &hellip;
&lt;/Location&gt;

CustomLog logs/svn_logfile "%t %u %{SVN-ACTION}e" env=SVN-ACTION
</programlisting>
        </informalexample>

        <para>In this example, we're asking Apache to create a special
          logfile, <filename>svn_logfile</filename>, in the standard
          Apache <filename>logs</filename> directory.
          The <literal>%t</literal> and <literal>%u</literal>
          variables are replaced by the time and username of the
          request, respectively.  The really important parts are the
          two instances of <literal>SVN-ACTION</literal>.
          When Apache sees that variable, it substitutes the value of
          the <literal>SVN-ACTION</literal> environment variable,
          which is automatically set by <command>mod_dav_svn</command>
          whenever it detects a high-level client action.</para>

        <para>So, instead of having to interpret a
          traditional <filename>access_log</filename> like
          this:</para>

        <informalexample>
          <programlisting>
[26/Jan/2007:22:25:29 -0600] "PROPFIND /svn/calc/!svn/vcc/default HTTP/1.1" 207 398
[26/Jan/2007:22:25:29 -0600] "PROPFIND /svn/calc/!svn/bln/59 HTTP/1.1" 207 449
[26/Jan/2007:22:25:29 -0600] "PROPFIND /svn/calc HTTP/1.1" 207 647
[26/Jan/2007:22:25:29 -0600] "REPORT /svn/calc/!svn/vcc/default HTTP/1.1" 200 607
[26/Jan/2007:22:25:31 -0600] "OPTIONS /svn/calc HTTP/1.1" 200 188
[26/Jan/2007:22:25:31 -0600] "MKACTIVITY /svn/calc/!svn/act/e6035ef7-5df0-4ac0-b811-4be7c823f998 HTTP/1.1" 201 227
&hellip;
</programlisting>
        </informalexample>

        <para>you can peruse a much more
          intelligible <filename>svn_logfile</filename> like
          this:</para>

        <informalexample>
          <programlisting>
[26/Jan/2007:22:24:20 -0600] - get-dir /tags r1729 props
[26/Jan/2007:22:24:27 -0600] - update /trunk r1729 depth=infinity
[26/Jan/2007:22:25:29 -0600] - status /trunk/foo r1729 depth=infinity
[26/Jan/2007:22:25:31 -0600] sally commit r1730
</programlisting>
        </informalexample>

        <para>In addition to the <literal>SVN-ACTION</literal>
          environment variable, <command>mod_dav_svn</command> also
          populates the <literal>SVN-REPOS</literal>
          and <literal>SVN-REPOS-NAME</literal> variables, which carry
          the filesystem path to the repository and the basename
          thereof, respectively.  You might wish to include references
          to one or both of these variables in
          your <literal>CustomLog</literal> format string, too,
          especially if you are combining usage information from
          multiple repositories into a single log file.  For an
          exhaustive list of all actions logged, see
          <xref linkend="svn.serverconfig.operational-logging"/>.</para>

        <para>Obviously, the more information that Apache logs about
          your Subversion activities, the more disk space on your
          server those logs consume.  It is non uncommon for
          high-traffic Subversion servers to generate many gigabytes
          of log information daily.  Obviously, logs are only valuable
          if they can be meaningfully processed, and huge log files
          can quickly become unwieldy.  There are various standard
          approaches to Apache HTTP Server log management which are
          outside the scope of this book.  Administrators are
          encouraged to use the log rotation and archival approach
          which works best for them.</para>

        <para>But what if Subversion is simply generating too much log
          information to be useful?  For example, in
          <xref linkend="svn.serverconfig.httpd.perf.bulk-updates" />,
          we mentioned that certain approaches that Subversion clients
          may take to checkouts and other update-style operations can
          cause rapid growth of your server logs as requests for
          individual pieces of the update data set are individually
          logged (whereas in previous version of Subversion, they
          might not have been).  In this case, you might consider
          using some Apache configuration magic to selectively silence
          some of that log activity.</para>

        <para>Apache HTTP Server's
          <literal>mod_setenvif</literal> module offers
          a <literal>SetEnvIf</literal> directive which is handy for
          conditionally setting environment variables.  And as it
          turns out, the <literal>CustomLog</literal> directive can be
          told to conditionally log requests based on the state of
          environment variables.  The following is a sample
          configuration which instructs the server
          to <emphasis>not</emphasis> log <literal>GET</literal>
          and <literal>PROPFIND</literal> requests aimed at private
          Subversion URLs.</para>

        <informalexample>
          <programlisting>
# Matches everything, just to initialize the "in_repos" variable.
SetEnvIf Request_URI "^" in_repos=0

# Set "in_repos" if this is a request for a private Subversion URL.
SetEnvIf Request_URI "/!svn/" in_repos=1

# Set "do_not_log" for non-public request types we don't care to log.
SetEnvIf Request_Method "GET" do_not_log
SetEnvIf Request_Method "PROPFIND" do_not_log

# Unset "do_not_log" for URLs that aren't private Subversion URLs.
SetEnvIf in_repos 0 !do_not_log

# Log requests, but only if "do_not_log" isn't set.
CustomLog logs/access_log env=!do_not_log
</programlisting>
        </informalexample>

        <para>Using this configuration, <command>httpd</command> would
          still log <literal>GET</literal> requests aimed at public
          Subversion URLs.  These are the sorts of requests generated
          by a web browser as someone navigates the repository
          directly.  But <literal>GET</literal>
          and <literal>PROPFIND</literal> requests aimed at so-called
          "private" Subversion URLs&mdash;which are the very sorts of
          requests used to fetch each and every individual file during
          a checkout operation&mdash;won't get logged.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.extra.writethruproxy">
        <title>Write-through proxying</title>

        <para>
          <indexterm>
            <primary>WebDAV</primary>
            <secondary>proxies</secondary>
            <see>httpd, write-through proxies</see>
          </indexterm>
          <indexterm>
            <primary>httpd</primary>
            <secondary>write-through proxies</secondary>
            <tertiary>master</tertiary>
          </indexterm>
          <indexterm>
            <primary>httpd</primary>
            <secondary>write-through proxies</secondary>
            <tertiary>slave</tertiary>
          </indexterm>One of the nice advantages of using Apache as a
          Subversion server is that it can be set up for simple
          replication.  For example, suppose that your team is
          distributed across four offices around the globe.  The
          Subversion repository can exist only in one of those
          offices, which means the other three offices will not enjoy
          accessing it&mdash;they're likely to experience
          significantly slower traffic and response times when
          updating and committing code.  A powerful solution is to set
          up a system consisting of one <firstterm>master</firstterm>
          Apache server and several <firstterm>slave</firstterm>
          Apache servers.  If you place a slave server in each office,
          users can check out a working copy from whichever slave
          is closest to them.  All read requests go to their local
          slave.  Write requests get automatically routed to the
          single master server.  When the commit completes, the master
          then automatically <quote>pushes</quote> the new revision to
          each slave server using the <command>svnsync</command>
          replication tool.</para>

        <para>This configuration creates a huge perceptual speed
          increase for your users, because Subversion client traffic
          is typically 80&ndash;90% read requests.  And if those
          requests are coming from a <emphasis>local</emphasis>
          server, it's a huge win.</para>

        <para>In this section, we'll walk you through a standard setup
          of this single-master/multiple-slave system.  However, keep
          in mind that your servers must be running at least Apache
          2.2.0 (with <command>mod_proxy</command> loaded) and
          Subversion 1.5 (<command>mod_dav_svn</command>).</para>

        <note>
          <para>Ours is just one example of how you might setup a
            Subversion write-through proxy configuration.  There are
            other approaches.  For example, rather than having the
            master server push changes out to every slave server, the
            slaves could periodically pull those changes from the
            master.  Or perhaps the master could push changes to a
            single slave, which then pushes the same change to the
            next slave, and so on down the line.  Administrators are
            encouraged to use this section for basic understanding
            of what happens in a Subversion WebDAV proxy deployment
            scenario, and then implement the specific approach that
            works best for their organization.</para>
        </note>

        <sect4 id="svn.serverconfig.httpd.extra.writethruproxy.configure">
          <title>Configure the servers</title>

          <para>First, configure your master server's
            <filename>httpd.conf</filename> file in the usual way.
            Make the repository available at a certain URI location,
            and configure authentication and authorization however
            you'd like.  After that's done, configure each of your
            <quote>slave</quote> servers in the exact same way, but
            add the special <literal>SVNMasterURI</literal> directive
            to the block:</para>

          <informalexample>
            <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNPath /var/svn/repos
  SVNMasterURI http://master.example.com/svn
  &hellip;
&lt;/Location&gt;
</programlisting>
          </informalexample>

          <para>This new directive tells a slave server to redirect
            all write requests to the master.  (This is done
            automatically via Apache's <command>mod_proxy</command>
            module.)  Ordinary read requests, however, are still
            serviced by the slaves.  Be sure that your master and
            slave servers all have matching authentication and
            authorization configurations;  if they fall out of sync,
            it can lead to big headaches.</para>

          <para>Next, we need to deal with the problem of infinite
            recursion.  With the current configuration, imagine what
            will happen when a Subversion client performs a commit to
            the master server.  After the commit completes, the server
            uses <command>svnsync</command> to replicate the new
            revision to each slave.  But because
            <command>svnsync</command> appears to be just another
            Subversion client performing a commit, the slave will
            immediately attempt to proxy the incoming write request
            back to the master!  Hilarity ensues.</para>

          <para>The solution to this problem is to have the master
            push revisions to a different
            <literal>&lt;Location&gt;</literal> on the slaves.  This
            location is configured to <emphasis>not</emphasis> proxy
            write requests at all, but to accept normal commits from
            (and only from) the master's IP address:</para>

          <informalexample>
            <programlisting>
&lt;Location /svn-proxy-sync&gt;
  DAV svn
  SVNPath /var/svn/repos
  Order deny,allow
  Deny from all
  # Only let the server's IP address access this Location:
  Allow from 10.20.30.40
  &hellip;
&lt;/Location&gt;
</programlisting>
          </informalexample>

        </sect4>

        <sect4 id="svn.serverconfig.httpd.extra.writethruproxy.replicate">
          <title>Set up replication</title>

          <para>Now that you've configured
            your <literal>Location</literal> blocks on master and
            slaves, you need to configure the master to replicate to
            the slaves.  Our walkthough uses <command>svnsync</command>,
            which is covered in more detail in
            <xref linkend="svn.reposadmin.maint.replication.svnsync"
            />.</para>

          <para>First, make sure that each slave repository has a
            pre-revprop-change hook script which
            allows remote revision property changes.  (This is
            standard procedure for being on the receiving end of
            <command>svnsync</command>.) Then log into the master
            server and configure each of the slave repository URIs to
            receive data from the master repository on the local
            disk:</para>

          <informalexample>
            <screen>
$ svnsync init http://slave1.example.com/svn-proxy-sync \
               file:///var/svn/repos
Copied properties for revision 0.
$ svnsync init http://slave2.example.com/svn-proxy-sync \
               file:///var/svn/repos
Copied properties for revision 0.
$ svnsync init http://slave3.example.com/svn-proxy-sync \
               file:///var/svn/repos
Copied properties for revision 0.

# Perform the initial replication

$ svnsync sync http://slave1.example.com/svn-proxy-sync \
               file:///var/svn/repos
Transmitting file data ....
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .......
Committed revision 2.
Copied properties for revision 2.
&hellip;

$ svnsync sync http://slave2.example.com/svn-proxy-sync \
               file:///var/svn/repos
Transmitting file data ....
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .......
Committed revision 2.
Copied properties for revision 2.
&hellip;

$ svnsync sync http://slave3.example.com/svn-proxy-sync \
               file:///var/svn/repos
Transmitting file data ....
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .......
Committed revision 2.
Copied properties for revision 2.
&hellip;
</screen>
          </informalexample>

          <para>After this is done, we configure the master server's
            post-commit hook script to invoke
            <command>svnsync</command> on each slave server:</para>

          <informalexample>
            <programlisting>
#!/bin/sh
# Post-commit script to replicate newly committed revision to slaves

svnsync sync http://slave1.example.com/svn-proxy-sync \
             file:///var/svn/repos &gt; /dev/null 2&gt;&amp;1 &amp;
svnsync sync http://slave2.example.com/svn-proxy-sync \
             file:///var/svn/repos &gt; /dev/null 2&gt;&amp;1 &amp;
svnsync sync http://slave3.example.com/svn-proxy-sync \
             file:///var/svn/repos &gt; /dev/null 2&gt;&amp;1 &amp;
</programlisting>
          </informalexample>

          <para>The extra bits on the end of each line aren't
            necessary, but they're a sneaky way to allow the sync
            commands to run in the background so that the Subversion
            client isn't left waiting forever for the commit to
            finish.  In addition to this
            post-commit hook, you'll need a
            post-revprop-change hook as well so
            that when a user, say, modifies a log message, the slave
            servers get that change also:</para>

          <informalexample>
            <programlisting>
#!/bin/sh
# Post-revprop-change script to replicate revprop-changes to slaves

REV=${2}
svnsync copy-revprops http://slave1.example.com/svn-proxy-sync \
                      file:///var/svn/repos \
                      -r ${REV} &gt; /dev/null 2&gt;&amp;1 &amp;
svnsync copy-revprops http://slave2.example.com/svn-proxy-sync \
                      file:///var/svn/repos \
                      -r ${REV} &gt; /dev/null 2&gt;&amp;1 &amp;
svnsync copy-revprops http://slave3.example.com/svn-proxy-sync \
                      file:///var/svn/repos \
                      -r ${REV} &gt; /dev/null 2&gt;&amp;1 &amp;
</programlisting>
          </informalexample>

          <para>The only thing we've left out here is what to do about
            user-level locks (of the <command>svn lock</command>
            variety).  Locks are enforced by the master server during
            commit operations; but all the information about locks is
            distributed during read operations such as <command>svn
            update</command> and <command>svn status</command> by the
            slave server.  As such, a fully functioning proxy setup
            needs to perfectly replicate lock information from the
            master server to the slave servers.  Unfortunately, most
            of the mechanisms that one might employ to accomplish this
            replication fall short in one way or
            another<footnote><para><ulink
            url="http://subversion.tigris.org/issues/show_bug.cgi?id=3457"
            /> tracks these problems.</para></footnote>.  Many teams
            don't use Subversion's locking features at all, so this
            may be a nonissue for you.  Sadly, for those teams which
            do use locks, we have no recommendations on how to
            gracefully work around this shortcoming.</para>

        </sect4>

        <sect4 id="svn.serverconfig.httpd.extra.writethruproxy.caveats">
          <title>Caveats</title>

          <para>Your master/slave replication system should now be
            ready to use.  A couple of words of warning are in order,
            however.  Remember that this replication isn't entirely
            robust in the face of computer or network crashes.  For
            example, if one of the automated
            <command>svnsync</command> commands fails to complete for
            some reason, the slaves will begin to fall behind.  For
            example, your remote users will see that they've committed
            revision 100, but then when they run <command>svn
            update</command>, their local server will tell them that
            revision 100 doesn't yet exist!  Of course, the problem
            will be automatically fixed the next time another commit
            happens and the subsequent <command>svnsync</command> is
            successful&mdash;the sync will replicate all waiting
            revisions.  But still, you may want to set up some sort of
            out-of-band monitoring to notice synchronization failures
            and force <command>svnsync</command> to run when things go
            wrong.</para>

          <para>Another limitation of the write-through proxy
            deployment model involves version mismatches&mdash;of the
            version of Subversion which is installed, that
            is&mdash;between the master and slave servers.  Each new
            release of Subversion may (and often does) add new
            features to the network protocol used between the clients
            and servers.  Since feature negotiation happens against
            the slave, it is the slave's protocol version and feature
            set which is used.  But write operations are passed
            through to the master server quite literally.  Therefore,
            there is a risk that the slave server will answer a
            feature negotiation request from the client in way that is
            true for the slave, but untrue for the master if the
            master is running an older version of Subversion.  This
            could result in the client trying to use a new feature
            that the master doesn't understand, and failing.</para>

          <para>Subversion 1.8 helps to mitigate this problem via the
            introduction of a new Apache configuration
            directive, <literal>SVNMasterVersion</literal>.  By
            configuring each of your slave servers
            with <literal>SVNMasterVersion</literal> set to the
            release version of the Subversion instance which is
            running on your master server, the slave servers can more
            accurately negotiate feature support with the
            client.</para>

          <para>Unfortunately, Subversion 1.7 doesn't offer
            the <literal>SVNMasterVersion</literal> configuration
            directive and is known to have some specific problems
            along these lines.  If you are deploying a Subversion 1.7
            slave server in front of a pre-1.7 master, you'll want to
            configure your slave server's
            Subversion <literal>&lt;Location&gt;</literal> block with
            the <literal>SVNAdvertiseV2Protocol Off</literal>
            directive.</para>

          <tip>
            <para>For the best results possible, try to run the same
              version of Subversion on your master and slave
              servers.</para>
          </tip>

          <sidebar>
            <title>Can We Set Up Replication with svnserve?</title>

            <para>If you're using <command>svnserve</command> instead
              of Apache as your server, you can certainly configure
              your repository's hook scripts to invoke
              <command>svnsync</command> as we've shown here, thereby
              causing automatic replication from master to slaves.
              Unfortunately, at the time of this writing there is no way to
              make slave <command>svnserve</command> servers
              automatically proxy write requests back to the master
              server.  This means your users would only be able to
              check out read-only working copies from the slave
              servers.  You'd have to configure your slave servers to
              disallow write access completely.  This might be useful
              for creating read-only <quote>mirrors</quote> of popular
              open source projects, but it's not a transparent
              proxying system.</para>
          </sidebar>

        </sect4>
      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.extra.other">
        <title>Other Apache features</title>

        <para>Several of the features already provided by Apache in
          its role as a robust web server can be leveraged for
          increased functionality or security in Subversion as well.
          The Subversion client is able to use SSL (the Secure Sockets
          Layer, discussed earlier).  If your Subversion client is
          built to support SSL, it can access your Apache server
          using <literal>https://</literal> and enjoy a high-quality
          encrypted network session.</para>

        <para>Equally useful are other features of the Apache and
          Subversion relationship, such as the ability to specify a
          custom port (instead of the default HTTP port 80) or a
          virtual domain name by which the Subversion repository
          should be accessed, or the ability to access the repository
          through an HTTP proxy.</para>

        <para>Finally, because <command>mod_dav_svn</command> is
          speaking a subset of the WebDAV/DeltaV protocol, it's
          possible to access the repository via third-party DAV
          clients.  Most modern operating systems (Win32, OS X, and
          Linux) have the built-in ability to mount a DAV server as a
          standard network <quote>shared folder.</quote> This is a
          complicated topic, but also wondrous when implemented.  For
          details, read <xref linkend="svn.webdav"/>.</para>

        <para>Note that there are a number of other small tweaks one
          can make to <command>mod_dav_svn</command> that perhaps do
          not merit extensive coverage.  For those interested,
          however, we provide a complete list of
          all <filename>httpd.conf</filename> directives
          to which <command>mod_dav_svn</command> responds in
          <xref linkend="svn.serverconfig.httpd.ref.mod_dav_svn"
          />.</para>

      </sect3>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.httpd.ref">
      <title>Subversion Apache HTTP Server Configuration Reference</title>

      <para>In the previous sections, we've mentioned numerous
        directives that administrators can use in their
        <filename>httpd.conf</filename> files to enable and configure
        their Subversion server offering, introducing each directive
        as we also introduce the functionality it toggles.  In this
        section, we'll quickly summarize <emphasis>all</emphasis> the
        configuration directives supported by both of the Apache HTTP
        Server modules which are provided as part of the standard
        Subversion distribution.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.ref.mod_dav_svn">
        <title>mod_dav_svn configuration directives</title>

        <para>The following configuration directives are recognized
          and supported by Subversion's Apache HTTP Server module,
          <command>mod_dav_svn</command>.</para>

        <variablelist>
    
          <varlistentry>
            <term><literal>DAV svn</literal></term>
            <listitem>

              <para>Must be included in any
                <literal>Directory</literal> or <literal>Location</literal>
                block for a Subversion repository.  It
                tells <command>httpd</command> to use the Subversion
                backend for <literal>mod_dav</literal> to handle all
                requests.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNActivitiesDB
              <replaceable>directory-path</replaceable></literal></term>
            <listitem>

              <para>Specifies the location in the filesystem where the
                activities database should be stored.  By default,
                <command>mod_dav_svn</command> creates and uses a
                directory in the repository
                called <filename>dav/activities.d</filename>.  The
                path specified with this option must be an absolute
                path.</para>

              <para>If specified for
                an <literal>SVNParentPath</literal>
                area, <command>mod_dav_svn</command> appends the
                basename of the repository to the path specified here.
                For example:</para>

              <informalexample>
          <screen>
&lt;Location /svn&gt;
  DAV svn

  # any "/svn/foo" URL will map to a repository in 
  # /net/svn.nfs/repositories/foo
  SVNParentPath         "/net/svn.nfs/repositories"

  # any "/svn/foo" URL will map to an activities db in
  #  /var/db/svn/activities/foo
  SVNActivitiesDB       "/var/db/svn/activities"
&lt;/Location&gt;
</screen>
        </informalexample>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNAdvertiseV2Protocol On|Off</literal></term>
            <listitem>

              <para>New to Subversion 1.7, this toggles
                whether <command>mod_dav_svn</command> advertises its
                support for the new version of its HTTP protocol also
                introduced in that version.  Most admins will not wish
                to use this directive (which is <literal>On</literal>
                by default), choosing instead to enjoy the performance
                benefits that the new protocol offers.  However, when
                configuring a server as a write-through proxy to
                another server which does not support the new
                protocol, set this directive's value
                to <literal>Off</literal>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNAllowBulkUpdates On|Off|Prefer</literal></term>
            <listitem>

              <para>Toggles support for all-inclusive responses to
                update-style requests.  Subversion clients use
                <literal>REPORT</literal> requests to get information
                about directory tree checkouts and updates from
                <command>mod_dav_svn</command>.  They can ask the
                server to send that information in one of two ways:
                with the entirety of the tree's information in one
                massive (bulk) response, or with a
                <firstterm>skelta</firstterm> (a skeletal
                representation of a tree delta) which contains just
                enough information for the client to know what
                <emphasis>additional</emphasis> data to fetch from the
                server using subsequent requests.  When this directive
                is included with a value of <literal>Off</literal>,
                <command>mod_dav_svn</command> will only ever respond
                to these <literal>REPORT</literal> requests with
                skelta responses, regardless of the type of responses
                requested by the client.</para>

              <para>The default value of this directive is
                <literal>On</literal>, which permits the server to
                reply to update requests using the style of response
                (bulk or skelta) requested by the client.  Beginning
                in Subversion 1.8, this directive also accepts a value
                of <literal>Prefer</literal>, which is similar
                to <literal>On</literal> but additionally causes the
                server to announce to clients that it
                <emphasis>prefers</emphasis> to handle bulk update
                requests.</para>

              <para>Most folks won't need to use this directive at
                all.  It primarily exists for administrators who
                wish&mdash;for security or auditing reasons&mdash;to
                force Subversion clients to fetch individually all the
                files and directories needed for updates and
                checkouts, thus leaving an audit trail of
                <literal>GET</literal> and <literal>PROPFIND</literal>
                requests in Apache's logs.</para>

            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>SVNAutoversioning On|Off</literal></term>
            <listitem>

              <para>When its value is
                <literal>On</literal>, allows write requests from
                WebDAV clients to result in automatic commits.  A
                generic log message is auto-generated and attached to
                each revision.  If you enable autoversioning, you'll
                likely want to set <literal>ModMimeUsePathInfo
                On</literal> so that <literal>mod_mime</literal> can
                set <literal>svn:mime-type</literal> to the correct
                MIME type automatically (as best as
                <literal>mod_mime</literal> is able to, of course).
                For more information, see <xref
                linkend="svn.webdav"/>.  The default value of this
                directive is <literal>Off</literal>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNCacheFullTexts On|Off</literal></term>
            <listitem>

              <para>When set to <literal>On</literal>, this tells
                Subversion to cache content fulltexts if sufficient
                in-memory cache is available, which could offer a
                significant performance benefit to the server.  (See
                also the <literal>SVNInMemoryCacheSize</literal>
                directive.)  The default value of this directive
                is <literal>Off</literal>.</para>

            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>SVNCacheTextDeltas On|Off</literal></term>
            <listitem>

              <para>When set to <literal>On</literal>, this tells
                Subversion to cache content deltas if sufficient
                in-memory cache is available, which could offer a
                significant performance benefit to the server.  (See
                also the <literal>SVNInMemoryCacheSize</literal>
                directive.)  The default value of this directive
                is <literal>Off</literal>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNCompressionLevel
              <replaceable>level</replaceable></literal></term>
            <listitem>

              <para>Specifies the compression level used when sending
                file content over the network.  A value
                of <literal>0</literal> disables compression
                altogether, and <literal>9</literal> is the maximum
                value.  <literal>5</literal> is the default
                value.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNHooksEnv
              <replaceable>file-path</replaceable></literal></term>
            <listitem>

              <para>Specifies the location of the Subversion
                repository hook script environment configuration file.
                This file is used to describe the initial environment
                in which repository hook scripts are executed.  For
                more on this feature, see
                <xref linkend="svn.reposadmin.hooks.configuration"
                />.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNIndexXSLT
              <replaceable>directory-path</replaceable></literal></term>
            <listitem>

              <para>Specifies the URI of an XSL transformation for
                directory indexes.  This directive is optional.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNInMemoryCacheSize
              <replaceable>size</replaceable></literal></term>
            <listitem>

              <para>Specifies the maximum size (in kbytes) per process
                of Subversion's in-memory object cache.  The default
                value is <literal>16384</literal>; use a value
                of <literal>0</literal> to deactivate this cache
                altogether.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNListParentPath On|Off</literal></term>
            <listitem>

              <para>When set to <literal>On</literal>, allows
                a <literal>GET</literal>
                of <literal>SVNParentPath</literal>, which results in
                a listing of all repositories under that path.  The
                default setting is
                <literal>Off</literal>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNMasterURI
              <replaceable>url</replaceable></literal></term>
            <listitem>

              <para>Specifies a URI to the master Subversion
                repository (used for a write-through proxy).</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNMasterVersion
              <replaceable>X.Y</replaceable></literal></term>
            <listitem>

              <para>Specifies the release version number of the
                Subversion instance which is serving the master
                repository (used for a write-through proxy).</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNParentPath
              <replaceable>directory-path</replaceable></literal></term>
            <listitem>

              <para>Specifies the location in the filesystem of a
                parent directory whose child directories are
                Subversion repositories.  In a configuration block for
                a Subversion repository, either this directive or
                <literal>SVNPath</literal> must be present, but not
                both.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNPath
              <replaceable>directory-path</replaceable></literal></term>
            <listitem>

              <para>Specifies the location in the
                filesystem for a Subversion repository's files.  In a
                configuration block for a Subversion repository,
                either this directive or
                <literal>SVNParentPath</literal> must be present, but
                not both.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNPathAuthz On|Off|short_circuit</literal></term>
            <listitem>

              <para>Controls path-based authorization by enabling
                subrequests (<literal>On</literal>), disabling
                subrequests (<literal>Off</literal>; see <xref
                linkend="svn.serverconfig.httpd.authz.pathauthzoff"/>),
                or querying <command>mod_authz_svn</command> directly
                (<literal>short_circuit</literal>).  The default
                value of this directive is <literal>On</literal>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNReposName
              <replaceable>name</replaceable></literal></term>
            <listitem>

              <para>Specifies the name of a Subversion repository for
                use in <literal>HTTP GET</literal> responses.  This
                value will be prepended to the title of all directory
                listings (which are served when you navigate to a
                Subversion repository with a web browser).  This
                directive is optional.</para>

               <note>
                 <para>Subversion will not use the repository name as
                   configured via this directive when trying to match
                   rules in access control files.  The repository names
                   used in that file's syntax are always derived from
                   the repository URL.  See
                   <xref linkend="svn.serverconfig.pathbasedauthz.getting-started"
                   /> for details.</para>
               </note>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNSpecialURI
              <replaceable>component</replaceable></literal></term>
            <listitem>

              <para>Specifies the URI component (namespace) for
                special Subversion resources.  The default is
                <literal>!svn</literal>, and most
                administrators will never use this directive.  Set
                this only if there is a pressing need to have a file
                named <filename>!svn</filename> in your repository.
                If you change this on a server already in use, it will
                break all of the outstanding working copies, and your
                users will hunt you down with pitchforks and flaming
                torches.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNUseUTF8 On|Off</literal></term>
            <listitem>

              <para>When set to <literal>On</literal>,
                <command>mod_dav_svn</command> will communicate with
                hook scripts using repository root paths encoded in
                UTF-8, and will expect those scripts to likewise
                generate output (such as error messages) encoded in
                UTF-8.  The default value of this option
                is <literal>Off</literal>, which means
                that <command>mod_dav_svn</command> assumes a 7-bit
                ASCII encoding for its hook script interactions.  This
                option is available as of Subversion 1.8.</para>

              <note>
                <para>Administrators should ensure that the character
                  set and encoding expectations of hook scripts match
                  all the ways they might be invoked.  For example, if
                  one repository is served by both <command>httpd</command>
                  and <command>svnserve</command>, <command>svnserve</command>
                  should also be configured to use UTF-8 (by setting
                  an appropriate locale in its environment) if this
                  option is enabled for <command>mod_dav_svn</command>.
                  Also, local filesystem paths containing non-ASCII
                  characters which will be accessed by those scripts
                  (such as repository root paths) must be properly
                  encoded in the filesystem to match the scripts'
                  expectations.</para>
              </note>

            </listitem>
          </varlistentry>

        </variablelist>
      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.ref.mod_authz_svn">
        <title>mod_authz_svn configuration directives</title>

        <para>The following configuration directives are provided
          by <command>mod_authz_svn</command>, Subversion's path-based
          authorization Apache HTTP Server module.  For an in-depth
          description of using path-based authorization in Subversion,
          see <xref linkend="svn.serverconfig.pathbasedauthz"/>.</para>

        <variablelist>
   
          <varlistentry>
            <term><literal>AuthzForceUsernameCase Upper|Lower</literal></term>
            <listitem>

              <para>Set to <literal>Upper</literal>
                or <literal>Lower</literal> to perform case conversion
                of the specified sort on the authenticated username
                before checking it for authorization.  While usernames
                are compared in a case-sensitive fashion against those
                referenced in the authorization rules file, this
                directive can at least normalize variably-cased
                usernames into something consistent.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>AuthzSVNAccessFile
              <replaceable>file-path</replaceable></literal></term>
            <listitem>

              <para>Consult <replaceable>file-path</replaceable> for
                access rules describing the permissions for paths in
                Subversion repository.  In a configuration
                block for a Subversion repository or a colletion of repositories,
                either this directive or
                <literal>AuthzSVNReposRelativeAccessFile</literal> can be
                present, but not both.</para>
              <para>Beginning with Subversion 1.8,
                <literal>AuthzSVNAccessFile</literal> accepts a URL to a file
                stored inside a Subversion repository.  It is possible to store
                the file in the same repository to which the access rules are
                being applied or another repository.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>AuthzSVNAnonymous On|Off</literal></term>
            <listitem>

              <para>Set to <literal>Off</literal> to disable two
                special-case behaviours of this module: interaction
                with the <literal>Satisfy Any</literal> directive and
                enforcement of the authorization policy even when no
                <literal>Require</literal> directives are present.
                The default value of this directive is
                <literal>On</literal>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>AuthzSVNAuthoritative On|Off</literal></term>
            <listitem>

              <para>Set to <literal>Off</literal> to allow access
                control to be passed along to lower modules.  The
                default value of this directive is
                <literal>On</literal>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>AuthzSVNNoAuthWhenAnonymousAllowed On|Off</literal></term>
            <listitem>

              <para>Set to <literal>On</literal> to suppress
                authentication and authorization for requests which
                anonymous users are allowed to perform.  The default
                value of this directive is
                <literal>On</literal>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>AuthzSVNReposRelativeAccessFile
              <replaceable>file-path</replaceable></literal></term>
            <listitem>

              <para>Consult <replaceable>file-path</replaceable> for
                access rules describing the permissions for paths in
                Subversion repository.  Unlike
                <literal>AuthzSVNAccessFile</literal>, the path specified
                for <literal>AuthzSVNReposRelativeAccessFile</literal> is
                relative from the /conf directory in the repository on
                filesystem.  In other words, the <replaceable>file-path</replaceable>
                specifies a per repository file that must by accessible by
                the relative path for all repositories in a configuration block.
                In a configuration block for a Subversion repository or a collection
                of repositories either this directive or
                <literal>AuthzSVNAccessFile</literal> can be present, but not both.
                This option is available as of Subversion 1.7.</para>
              <para>Beginning with Subversion 1.8,
                <literal>AuthzSVNAccessFile</literal> accepts a URL to a file
                stored inside a Subversion repository.  It is possible to store
                the file in the same repository to which the access rules are
                being applied or another repository.</para>

            </listitem>
          </varlistentry>

        </variablelist>
      </sect3>

    </sect2>
  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.serverconfig.pathbasedauthz">

    <title>Path-Based Authorization</title>

    <para>Both Apache and <command>svnserve</command> are capable of
      granting (or denying) permissions to users.  Typically this is
      done over the entire repository: a user can read the repository
      (or not), and she can write to the repository (or not).</para>

    <para>It's also possible, however, to define finer-grained access
      rules.  One set of users may have permission to write to a
      certain directory in the repository, but not others; another
      directory might not even be readable by all but a few special
      people.  It's even possible to restrict access on a per file
      basis.</para>

    <para>Both Subversion servers use a common file format to describe
      these path-based access rules.  In this section, we will
      explain that file format, as well how to configure your
      Subversion server to use it for managing path-based
      authorization.</para>

    <sidebar>
      <title>Do You Really Need Path-Based Access Control?</title>

      <para>A lot of administrators setting up Subversion for the
        first time tend to jump into path-based access control without
        giving it a lot of thought.  The administrator usually knows
        which teams of people are working on which projects, so it's
        easy to jump in and grant certain teams access to certain
        directories and not others.  It seems like a natural thing,
        and it appeases the administrator's desire to maintain tight
        control of the repository.</para>

      <para>Note, though, that there are often invisible (and
        visible!) costs associated with this feature.  In the visible
        category, the server needs to do a lot more work to ensure
        that the user has the right to read or write each specific
        path; in certain situations, there's very noticeable
        performance loss.  In the invisible category, consider the
        culture you're creating.  Most of the time, while certain
        users <emphasis>shouldn't</emphasis> be committing changes to
        certain parts of the repository, that social contract doesn't
        need to be technologically enforced.  Teams can sometimes
        spontaneously collaborate with each other; someone may want to
        help someone else out by committing to an area she doesn't
        normally work on.  By preventing this sort of thing at the
        server level, you're setting up barriers to unexpected
        collaboration.  You're also creating a bunch of rules that
        need to be maintained as projects develop, new users are
        added, and so on.  It's a bunch of extra work to
        maintain.</para>

        <para>Remember that this is a version control system!  Even if
        somebody accidentally commits a change to something she
        shouldn't, it's easy to undo the change.  And if a user
        commits to the wrong place with deliberate malice, it's a
        social problem anyway, and that the problem needs to be dealt
        with outside Subversion.</para>

      <para>So, before you begin restricting users' access rights, ask
        yourself whether there's a real, honest need for this, or
        whether it's just something that <quote>sounds good</quote> to
        an administrator.  Decide whether it's worth sacrificing some
        server speed, and remember that there's very little risk
        involved; it's bad to become dependent on technology as a
        crutch for social problems.<footnote><para>A common theme in
        this book!</para></footnote></para>

      <para>As an example to ponder, consider that the Subversion
        project itself has always had a notion of who is allowed to
        commit where, but it's always been enforced socially.  This is
        a good model of community trust, especially for open source
        projects.  Of course, sometimes there <emphasis>are</emphasis>
        truly legitimate needs for path-based access control; within
        corporations, for example, certain types of data really can be
        sensitive, and access needs to be genuinely restricted to
        small groups of people.</para>

    </sidebar>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.pathbasedauthz.getting-started">

      <title>Getting Started with Path-Based Access Control</title>

      <para>Subversion offers path-based access control in Apache via
        the <command>mod_authz_svn</command> module, which must be
        loaded using the <literal>LoadModule</literal> directive
        in <filename>httpd.conf</filename> in the same fashion
        that <command>mod_dav_svn</command> itself is loaded.  To
        enable the use of this module for your repositories, you'll
        add the <literal>AuthzSVNAccessFile</literal> or
        <literal>AuthzSVNReposRelativeAccessFile</literal> directives (again
        within the <filename>httpd.conf</filename> file) pointing to
        your own access rules file.  (For a full explanation, see
        <xref linkend="svn.serverconfig.httpd.authz.perdir"/>.)</para>

      <para>To configure path-based authorization
        in <command>svnserve</command>, simply point
        the <literal>authz-db</literal> configuration variable (within
        your <filename>svnserve.conf</filename> file) to your access
        rules file.</para>

      <para>Once your server knows where to look for your access
        rules, it's time to define those rules.</para>

      <para>The syntax of the Subversion access file is the same
        familiar one used by <filename>svnserve.conf</filename> and
        the runtime configuration files.  Lines that start with a hash
        (<literal>#</literal>) are ignored.  In its simplest form,
        each section names a versioned path and, optionally, the
        repository in which that path is found.  In other words,
        except for a few reserved sections, section names are of one
        of two forms: either <literal>[repos-name:path]</literal>
        or <literal>[path]</literal> when
        <literal>AuthzSVNAccessFile</literal> is used.  If you configured
        per repository access files via <literal>AuthzSVNReposRelativeAccessFile</literal>
        directive, you should always use <literal>[path]</literal> form
        only.  Authenticated usernames are the
        option names within each section, and an option's value
        describes that user's level of access to the repository path:
        either <literal>r</literal> (read-only) or <literal>rw</literal>
        (read/write).  If the user is not mentioned at all, no access is
        allowed.</para>

      <note>
        <para>Paths used in access file sections must be specified
          using Subversion's <quote>internal style</quote>, which
          mostly just means that they are encoded in UTF-8 and use
          forward slash (<literal>/</literal>) characters as directory
          separators (even on Windows systems).  Note also that these
          paths do not employ any character escaping mechanism (such
          as URI-encoding)&mdash;spaces in path names should be
          represented exactly as such in access file section names
          (<literal>[repos-name:path&nbsp;with&nbsp;spaces]</literal>,
          e.g.)</para>
      </note>

      <para>Here's a simple example demonstrating a piece of the
        access configuration which grants read access Sally, and
        read/write access to Harry, for the
        path <filename>/branches/calc/bug-142</filename> (and all its
        children) in the repository <literal>calc</literal>:</para>

      <informalexample>
        <programlisting>
[calc:/branches/calc/bug-142]
harry = rw
sally = r
</programlisting>
      </informalexample>

      <warning>
        <para>Prior to version 1.7, Subversion treated repository names
          and paths in a case-insensitive fashion for the purposes of
          access control, converting them to lower case internally
          before comparing them against the contents of your access
          file.  It now does these comparisons case-sensitively.  If you
          upgraded to Subversion 1.7 from an older version, you should
          review your access files for case correctness.</para>
      </warning>

      <para>The name of a repository as evaluated by the authorization
        subsystem is derived directly from the repository's path.
        Exactly how this happens differs between to two server
        options. <command>mod_dav_svn</command> uses only the basename
        of the repository's root URL<footnote><para>Any human-readable
        name for a repository configured via
        the <literal>SVNReposName</literal> <filename>httpd.conf</filename>
        directive will be ignored by the authorization subsystem.
        Your access control file sections must refer to repositories
        by their server-sensitive paths as previously
        described.</para></footnote>,
        while <command>svnserve</command> uses the entire relative
        path from the serving root (as determined by
        its <option>--root</option> (<option>-r</option>) command-line
        option) to the repository.</para>

      <warning>
        <para>The differences in the ways that a repository's name is
          determined by each of <command>mod_dav_svn</command>
          and <command>svnserve</command> can cause problems when
          trying to serve a repository via both servers
          simultaneously.  Naturally, an administrator would prefer to
          point both servers' configurations toward a common access
          file.  However, for this to work, you must ensure that the
          repository name portion of the file's section names are
          compatible with each server's idea of what the repository
          name should be&mdash;for example, by
          configuring <command>svnserve</command>'s root to be the
          same as <command>mod_dav_svn</command>'s configured
          <literal>SVNParentPath</literal>, or by using a different
          access file per repository so that section names needn't
          reference the repository at all.</para>
      </warning>

      <para>If you're using the <literal>SVNParentPath</literal>
        directive, it's important to specify the repository names in
        your sections.  If you omit them, a section such as
        <literal>[/some/dir]</literal> will match the path
        <filename>/some/dir</filename> in <emphasis>every</emphasis>
        repository.  If you're using the <literal>SVNPath</literal>
        directive, however, it's fine to provide only paths in your
        sections&mdash;after all, there's only one repository.</para>

      <para>Permissions are inherited from a path's parent directory.
        That means we can specify a subdirectory with a different
        access policy for Sally.  Let's continue our previous
        example, and grant Sally write access to a child of the branch
        that she's otherwise permitted only to read:</para>

      <informalexample>
        <programlisting>
[calc:/branches/calc/bug-142]
harry = rw
sally = r

# give sally write access only to the 'testing' subdir
[calc:/branches/calc/bug-142/testing]
sally = rw
</programlisting>
      </informalexample>

      <para>Now Sally can write to the <filename>testing</filename>
        subdirectory of the branch, but can still only read other parts.
        Harry, meanwhile, continues to have complete read/write access
        to the whole branch.</para>

      <para>It's also possible to explicitly deny permission to someone
        via inheritance rules, by setting the username variable to
        nothing:</para>

      <informalexample>
        <programlisting>
[calc:/branches/calc/bug-142]
harry = rw
sally = r

[calc:/branches/calc/bug-142/secret]
harry =
</programlisting>
      </informalexample>

      <para>In this example, Harry has read/write access to the
        entire <filename>bug-142</filename> tree, but has absolutely no
        access at all to the <filename>secret</filename> subdirectory
        within it.</para>

      <tip>
        <para>The thing to remember is that the most specific path
          always matches first.  The server tries to match the path
          itself, and then the parent of the path, then the parent of
          that, and so on.  The net effect is that mentioning a specific
          path in the access file will always override any permissions
          inherited from parent directories.</para>

        <para>Similarly, sections that specify a repository name have
          precedence over those that don't: if both
          <literal>[calc:/some/path]</literal> and
          <literal>[/some/path]</literal> are present, the former will be used
          and the latter ignored for <literal>calc</literal>.</para>
      </tip>

      <para>By default, nobody has any access to any repository at all.
        That means that if you're starting with an empty file, you'll
        probably want to give at least read permission to all users at
        the roots of the repositories.  You can do this by using the
        asterisk variable (<literal>*</literal>), which means <quote>all
        users</quote>:</para>

      <informalexample>
        <programlisting>
[/]
* = r
</programlisting>
      </informalexample>

      <para>This is a common setup; notice that no repository
        name is mentioned in the section name.  This makes all repositories
        world-readable to all users.  Once all users have read access to
        the repositories, you can give explicit
        <literal>rw</literal> permission to certain users on specific
        subdirectories within specific repositories.</para>

      <para>Note that while all of the previous examples use
        directories, that's only because defining access rules on
        directories is the most common case.  You may similarly
        restrict access on file paths, too.</para>

      <informalexample>
        <programlisting>
[calendar:/projects/calendar/manager.ics]
harry = rw
sally = r
</programlisting>
      </informalexample>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.pathbasedauthz.groups">

      <title>Access Control Groups</title>

      <para>The access file also allows you to define whole groups of
        users, much like the Unix <filename>/etc/group</filename>
        file.  To do this, create a <literal>groups</literal> section
        in your access file, and then describe your groups within that
        section: each variable's name defines the name of the group,
        and its value is a comma-delimited list of usernames which
        are part of that group.</para>

      <informalexample>
        <programlisting>
[groups]
calc-developers = harry, sally, joe
paint-developers = frank, sally, jane
everyone = harry, sally, joe, frank, jane
</programlisting>
      </informalexample>

      <para>Groups can be granted access control just like users.
        Distinguish them with an <quote>at sign</quote>
        (<literal>@</literal>) prefix:</para>

      <informalexample>
        <programlisting>
[calc:/projects/calc]
@calc-developers = rw

[paint:/projects/paint]
jane = r
@paint-developers = rw
</programlisting>
      </informalexample>

      <para>Another important fact is that group permissions are not
        overridden by individual user permissions. Rather, the
        <emphasis>combination</emphasis> of all matching permissions is
        granted.  In the prior example, Jane is a member of the
        <literal>paint-developers</literal> group, which has read/write
        access.  Combined with the <literal>jane = r</literal> rule,
        this still gives Jane read/write access.  Permissions for group
        members can only be extended beyond the permissions the group
        already has. Restricting users who are part of a group to less
        than their group's permissions is impossible.</para>

      <para>Groups can also be defined to contain other groups:</para>

      <informalexample>
        <programlisting>
[groups]
calc-developers = harry, sally, joe
paint-developers = frank, sally, jane
everyone = @calc-developers, @paint-developers
</programlisting>
      </informalexample>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.pathbasedauthz.aliases">

      <title>Username Aliases</title>

      <para>Some authentication systems expect and carry relatively
        short usernames of the sorts we've been describing
        here&mdash;<literal>harry</literal>,
        <literal>sally</literal>, <literal>joe</literal>, and so on.  But
        other authentication systems&mdash;such as those which use LDAP
        stores or SSL client certificates&mdash;may carry much more
        complex usernames.  For example, Harry's username in an
        LDAP-protected system might be <literal>CN=Harold
        Hacker,OU=Engineers,DC=red-bean,DC=com</literal>.  With
        usernames like that, the access file can become quite bloated
        with long or obscure usernames that are easy to
        mistype.</para>

      <para>Fortunately, Subversion 1.5 introduced username aliases to
        the access file syntax.  Username aliases allow you to have to
        type the correct complex username only once, in a statement
        which assigns to it a more easily digestable alias.</para>

      <para>Username aliases are defined in the
        special <literal>aliases</literal> section of the access file,
        with each variable name in that section defining an alias, and
        the value of those variables carrying the real Subversion
        username which is being aliased.</para>

      <informalexample>
        <programlisting>
[aliases]
harry = CN=Harold Hacker,OU=Engineers,DC=red-bean,DC=com
sally = CN=Sally Swatterbug,OU=Engineers,DC=red-bean,DC=com
joe = CN=Gerald I. Joseph,OU=Engineers,DC=red-bean,DC=com
&hellip;
</programlisting>
      </informalexample>

      <para>Once you've defined a set of aliases, you can refer to the
        users elsewhere in the access file via their aliases in all the
        same places you could have instead used their actual usernames.
        Simply prepend an ampersand to the alias to distinguish it from
        a regular username:</para>

      <informalexample>
        <programlisting>
[groups]
calc-developers = &amp;harry, &amp;sally, &amp;joe
paint-developers = &amp;frank, &amp;sally, &amp;jane
everyone = @calc-developers, @paint-developers
</programlisting>
      </informalexample>

      <para>You might also choose to use aliases if your users'
        usernames change frequently.  Doing so allows you to need to
        update only the aliases table when these username changes occur,
        instead of doing global search-and-replace operations on the
        whole access file.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.pathbasedauthz.authclass-tokens">

      <title>Advanced Access Control Features</title>

      <para>Beginning with Subversion 1.5, the access file syntax also
        supports some <quote>magic</quote> tokens for helping you to
        make rule assignments based on the user's authentication
        class.  One such token is
        the <literal>$authenticated</literal> token.  Use this token
        where you would otherwise specify a username, alias, or group
        name in your authorization rules to declare the permissions
        granted to any user who has authenticated with any username at
        all.  Similarly employed is the <literal>$anonymous</literal>
        token, except that it matches everyone who has
        <emphasis>not</emphasis> authenticated with a username.</para>

      <informalexample>
        <programlisting>
[calendar:/projects/calendar]
$anonymous = r
$authenticated = rw
</programlisting>
      </informalexample>

      <para>Another handy bit of access file syntax magic is the use
        of the tilde (<literal>~</literal>) character as an exclusion
        marker.  In your authorization rules, prefixing a username,
        alias, group name, or authentication class token with a tilde
        character will cause Subversion to apply the rule to users who
        do <emphasis>not</emphasis> match the rule.  Though somewhat
        unnecessarily obfuscated, the following block is equivalent to
        the one in the previous example:</para>

      <informalexample>
        <programlisting>
[calendar:/projects/calendar]
~$authenticated = r
~$anonymous = rw
</programlisting>
      </informalexample>

      <para>A less obvious example might be as follows:</para>

      <informalexample>
        <programlisting>
[groups]
calc-developers = &amp;harry, &amp;sally, &amp;joe
calc-owners = &amp;hewlett, &amp;packard
calc = @calc-developers, @calc-owners

# Any calc participant has read-write access...
[calc:/projects/calc]
@calc = rw

# ...but only allow the owners to make and modify release tags.
[calc:/projects/calc/tags]
~@calc-owners = r
</programlisting>
      </informalexample>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.pathbasedauthz.gotchas">

      <title>Some Gotchas with Access Control</title>

      <para>If you're using Apache as your Subversion server and have
        made certain subdirectories of your repository unreadable to
        certain users, you need to be aware of a possible nonoptimal
        behavior with <command>svn checkout</command>.</para>

      <para>Depending on which HTTP communication library the
        Subversion client is using, it may request that the entire
        payload of a checkout or update be delivered in a single
        (often large) response to the primary checkout/update request.
        When this happens, this single request is the
        <emphasis>only</emphasis> opportunity Apache has to demand
        user authentication.  This has some odd side effects.  For
        example, if a certain subdirectory of the repository is
        readable only by user Sally, and user Harry checks out a
        parent directory, his client will respond to the initial
        authentication challenge as Harry.  As the server generates
        the large response, there's no way it can resend an
        authentication challenge when it reaches the special
        subdirectory; thus the subdirectory is skipped altogether,
        rather than asking the user to reauthenticate as Sally at the
        right moment.</para>

      <para>In a similar way, if the root of the repository is
        anonymously world-readable, the entire checkout will be done
        without authentication&mdash;again, skipping the unreadable
        directory, rather than asking for authentication partway
        through.<footnote><para>For more on this, see the blog
        post <emphasis>Authz and Anon Authn Agony</emphasis> at
        <ulink url="http://blogs.collab.net/subversion/2007/03/authz_and_anon_/"
        />.</para></footnote></para>
      <!-- TODO: Merge content from the blog post into the book. --> 

    </sect2>
  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.serverconfig.operational-logging">
    <title>High-level Logging</title>

    <para>Both the Apache <command>httpd</command>
      and <command>svnserve</command> Subversion servers provide
      support for high-level logging of Subversion operations.
      Configuring each of the server options to provide this level of
      logging is done differently, of course, but the output from each
      is designed to conform to a uniform syntax.</para>

    <para>To enable high-level logging in <command>svnserve</command>,
      you need only use the <option>--log-file</option> command-line
      option when starting the server, passing as the value to the
      option the file to which <command>svnserve</command> should
      write its log output.</para>

    <informalexample>
      <screen>
$ svnserve -d -r /path/to/repositories --log-file /var/log/svn.log
</screen>
    </informalexample>

    <para>Enabling the same in Apache is a bit more involved, but is
      essentially an extension of Apache's stock log output
      configuration mechanisms&mdash;see
      <xref linkend="svn.serverconfig.httpd.extra.logging"/> for
      details.</para>

    <para>The following is a list of Subversion action log messages
      produced by its high-level logging mechanism, followed by one or
      more examples of the log message as it appears in the log
      output.</para>

    <variablelist>
      <varlistentry>
        <term>Checkout or export</term>
        <listitem>
          <programlisting>
checkout-or-export /path r62 depth=infinity
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Commit</term>
        <listitem>
          <programlisting>
commit harry r100
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Diffs</term>
        <listitem>
          <programlisting>
diff /path r15:20 depth=infinity ignore-ancestry
diff /path1@15 /path2@20 depth=infinity ignore-ancestry
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Fetch a directory</term>
        <listitem>
          <programlisting>
get-dir /trunk r17 text
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Fetch a file</term>
        <listitem>
          <programlisting>
get-file /path r20 props
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Fetch a file revision</term>
        <listitem>
          <programlisting>
get-file-revs /path r12:15 include-merged-revisions
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Fetch merge information</term>
        <listitem>
          <programlisting>
get-mergeinfo (/path1 /path2)
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Lock</term>
        <listitem>
          <programlisting>
lock /path steal
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Log</term>
        <listitem>
          <programlisting>
log (/path1,/path2,/path3) r20:90 discover-changed-paths revprops=()
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Replay revisions (svnsync)</term>
        <listitem>
          <programlisting>
replay /path r19
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Revision property change</term>
        <listitem>
          <programlisting>
change-rev-prop r50 propertyname
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Revision property list</term>
        <listitem>
          <programlisting>
rev-proplist r34
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Status</term>
        <listitem>
          <programlisting>
status /path r62 depth=infinity
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Switch</term>
        <listitem>
          <programlisting>
switch /pathA /pathB@50 depth=infinity
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Unlock</term>
        <listitem>
          <programlisting>
unlock /path break
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Update</term>
        <listitem>
          <programlisting>
update /path r17 send-copyfrom-args
</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>As a convenience to administrators who wish to post-process
      their Subversion high-level logging output (perhaps for
      reporting or analysis purposes), Subversion source code
      distributions provide a Python module (located at
      <filename>tools/server-side/svn_server_log_parse.py</filename>)
      which can be used to parse Subversion's log output.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.serverconfig.optimization">
    <title>Server Optimization</title>

    <para>Part of the due diligence when offering a service such as a
      Subversion server involves capacity planning and performance
      tuning.  Subversion doesn't tend to be particularly greedy in
      terms of server resources such as CPU cycles and memory, but any
      service can benefit from optimizations, especially when usage of
      the service skyrockets<footnote><para>In Subversion's case, the
      skyrocketing affect is, of course, due to its cool name.  Well,
      that and its popularity, reliability, ease of
      use&hellip;.</para></footnote>.  In this section, we'll discuss
      some ways you can tweak your Subversion server configuration
      to offer even better performance and scalability.</para>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.optimization.caching">
      <title>Data Caching</title>

      <para>Generally speaking, the most expensive part of a
        Subversion server's job is fetching data from the repository.
        Subversion 1.6 attempted to offset this cost by introducing
        some in-memory caching of certain classes of data read from
        the repository.  But Subversion 1.7 takes this a step further,
        not only caching the results of some of the more costly
        operations, but also by providing in each of the available
        servers the means by which fine-tune the size and some
        behaviors of the cache.</para>

      <para>For <command>svnserve</command>, you can specify the size
        of the cache using the <option>--memory-cache-size</option>
        (<option>-M</option>) command-line option.  You can also
        dictate whether <command>svnserve</command> should attempt to
        cache content fulltexts and deltas via the
        boolean <option>--cache-fulltexts</option>
        and <option>--cache-txdeltas</option> options,
        respectively.</para>

      <informalexample>
        <screen>
$ svnserve -d -r /path/to/repositories \
           --memory-cache-size 1024 \
           --cache-txdeltas yes \
           --cache-fulltexts yes
&hellip;
$
</screen>
      </informalexample>

      <para><command>mod_dav_svn</command> provides the same degree of
        cache configurability via <filename>httpd.conf</filename>
        directives.
        The <literal>SVNInMemoryCacheSize</literal>,
        <literal>SVNCacheFullTexts</literal>,
        and <literal>SVNCacheTextDeltas</literal> directives may be
        used at the server configuration level to control Subversion's
        data cache characteristics:</para>

      <informalexample>
        <programlisting>
&lt;IfModule dav_svn_module&gt;
  # Enable a 1 Gb Subversion data cache for both fulltext and deltas.
  SVNInMemoryCacheSize 1048576
  SVNCacheTextDeltas On
  SVNCacheFullTexts On
&lt;/IfModule&gt;
</programlisting>
      </informalexample>

      <para>So what settings should you use?  Certainly you need to
        consider what resources are available on your server.  To get
        any benefit out of the cache at all, you'll probably want to
        let the cache be at least large enough to hold all the files
        which are most commonly accessed in your repository (for
        example, your project's <filename>trunk</filename> directory
        tree).</para>

      <tip>
        <para>Setting the memory cache size to <literal>0</literal>
          will disable this enhanced caching mechanism and cause
          Subversion to fall back to using the older cache mechanisms
          introduced in Subversion 1.6.</para>
      </tip>

      <note>
        <para>Currently, only repositories which make use of the FSFS
          backend data store make use of this data caching
          functionality.</para>
      </note>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.optimization.compression">
      <title>Network Compression of Data</title>

      <para>Compressing the data transmitted across the wire can
        greatly reduce the size of those network transmissions, but
        comes at the cost of server (and client) CPU cycles.
        Depending on your server's CPU capacity, the typical access
        patterns of the clients who use your servers, and the
        bandwidth of the networks between them, you might wish to fine
        tune just how hard your server will work to compress the data
        it sends across the wire.  To assist with this fine tuning
        process, Subversion 1.7 offers
        the <option>--compression</option> (<option>-c</option>)
        option to <command>svnserve</command> and
        the <literal>SVNCompressionLevel</literal> directive
        for <command>mod_dav_svn</command>.  Both accept a value which
        is an integer between 0 and 9 (inclusive), where 9 offers the
        best compression of wire data, and 0 disables compression
        altogether.</para>

      <para>For example, on a local area network (LAN) with 1-Gigabit
        connections, it might not make sense to have the server
        compress its network transmissions (which also forces the
        clients to decompress them), as the network itself is so fast
        that users won't really benefit from the smaller overall
        network payload.  On the other hand, servers which are
        accessed primarily by clients with low-bandwidth connections
        would be doing those clients a favor by minimizing the overall
        size of its network communications.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.serverconfig.multimethod">

    <title>Supporting Multiple Repository Access Methods</title>

    <para>You've seen how a repository can be accessed in many
      different ways.  But is it possible&mdash;or safe&mdash;for your
      repository to be accessed by multiple methods simultaneously?
      The answer is yes, provided you use a bit of foresight.</para>

    <para>At any given time, these processes may require read and
      write access to your repository:</para>

    <itemizedlist>
      <listitem>
        <para>Regular system users using a Subversion client (as
          themselves) to access the repository directly via
          <literal>file://</literal> URLs</para>
      </listitem>
      <listitem>
        <para>Regular system users connecting to SSH-spawned private
          <command>svnserve</command> processes (running as
          themselves), which access the repository</para>
      </listitem>
      <listitem>
        <para>An <command>svnserve</command> process&mdash;either a
          daemon or one launched by
          <command>inetd</command>&mdash;running as a particular fixed
          user</para>
      </listitem>
      <listitem>
        <para>An Apache <command>httpd</command> process, running as a
          particular fixed user</para>
      </listitem>
    </itemizedlist>

    <para>The most common problem administrators run into is
      repository ownership and permissions.  Does every process (or
      user) in the preceding list have the rights to read and write the
      repository's underlying data files?  Assuming you have a
      Unix-like operating system, a straightforward approach might be
      to place every potential repository user into a
      new <literal>svn</literal> group, and make the repository wholly
      owned by that group.  But even that's not enough, because a
      process may write to the database files using an unfriendly
      umask&mdash;one that prevents access by other users.</para>

    <para>So the next step beyond setting up a common group for
      repository users is to force every repository-accessing process
      to use a sane umask.  For users accessing the repository
      directly, you can make the <command>svn</command> program into a
      wrapper script that first runs <userinput>umask 002</userinput> and
      then runs the real <command>svn</command> client program.  You
      can write a similar wrapper script for the
      <command>svnserve</command> program, and add a <userinput>umask
      002</userinput> command to Apache's own startup script,
      <filename>apachectl</filename>.  For example:</para>

    <informalexample>
      <screen>
$ cat /usr/bin/svn

#!/bin/sh

umask 002
/usr/bin/svn-real "$@"
</screen>
    </informalexample>

    <para>Another common problem is often encountered on Unix-like
      systems.  If your repository is backed by Berkeley DB, for
      example, it occasionally creates new log files to journal its
      actions.  Even if the Berkeley DB repository is wholly owned by
      the <command>svn</command> group, these newly created log files
      won't necessarily be owned by that same group, which then
      creates more permissions problems for your users.  A good
      workaround is to set the group SUID bit on the
      repository's <filename>db</filename> directory.  This causes all
      newly created log files to have the same group owner as the
      parent directory.</para>

    <para>Once you've jumped through these hoops, your repository
      should be accessible by all the necessary processes.  It may
      seem a bit messy and complicated, but the problems of having
      multiple users sharing write access to common files are classic
      ones that are not often elegantly solved.</para>

    <para>Fortunately, most repository administrators will never
      <emphasis>need</emphasis> to have such a complex configuration.
      Users who wish to access repositories that live on the same
      machine are not limited to using <literal>file://</literal>
      access URLs&mdash;they can typically contact the Apache HTTP
      server or <command>svnserve</command> using
      <literal>localhost</literal> for the server name in their
      <literal>http://</literal> or <literal>svn://</literal> URL.
      And maintaining multiple server processes for your Subversion
      repositories is likely to be more of a headache than necessary.
      We recommend that you choose a single server that best meets your
      needs and stick with it!</para>

    <sidebar>
      <title>The svn+ssh:// Server Checklist</title>

      <para>It can be quite tricky to get a bunch of users with
        existing SSH accounts to share a repository without
        permissions problems.  If you're confused about all the things
        that you (as an administrator) need to do on a Unix-like
        system, here's a quick checklist that resummarizes some of the
        topics discussed in this section:</para>

      <itemizedlist>
        <listitem>
          <para>All of your SSH users need to be able to read and
            write to the repository, so put all the SSH users into a
            single group.</para>
        </listitem>
        <listitem>
          <para>Make the repository wholly owned by that group.</para>
        </listitem>
        <listitem>
          <para>Set the group permissions to read/write.</para>
        </listitem>
        <listitem>
          <para>Your users need to use a sane umask when accessing the
            repository, so make sure <command>svnserve</command>
            (<filename>/usr/bin/svnserve</filename>, or wherever it
            lives in <literal>$PATH</literal>) is actually a wrapper
            script that runs <userinput>umask 002</userinput> and
            executes the real <command>svnserve</command>
            binary.</para>
        </listitem>
        <listitem>
          <para>Take similar measures when using
            <command>svnlook</command> and
            <command>svnadmin</command>.  Either run them with a sane
            umask or wrap them as just described.</para>
        </listitem>
      </itemizedlist>

    </sidebar>

  </sect1>
</chapter>

<!--
local variables:
sgml-parent-document: ("book.xml" "chapter")
end:
-->
