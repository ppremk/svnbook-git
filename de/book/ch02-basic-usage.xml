<chapter id="svn.tour">
<!--
  <title>Basic Usage</title>
-->
  <title>Grundlegende Benutzung</title>

<!--
  <para>Theory is useful, but its application is just plain fun.
    Let's move now into the details of using Subversion.  By the time
    you reach the end of this chapter, you will be able to perform all
    the tasks you need to use Subversion in a normal day's work.
    You'll start with getting your files into Subversion, followed by
    an initial checkout of your code.  We'll then walk you through
    making changes and examining those changes.  You'll also see how
    to bring changes made by others into your working copy, examine
    them, and work through any conflicts that might arise.</para>
-->
  <para>Theorie ist nützlich, doch deren Anwendung ist der pure Spaß.
    Lassen Sie uns nun zu den Details von Subversion kommen. Wenn Sie
    das Ende dieses Kapitels erreicht haben, werden Sie in der Lage
    sein, alle Aufgaben zu erledigen, die sich bei der normalen
    täglichen Arbeit mit Subversion stellen. Sie werden damit
    beginnen, Ihre Dateien in Subversion einzupflegen, gefolgt von
    einem initialen Checkout Ihres Codes. Dann werden wir bei unserem
    Rundgang zeigen, wie Änderungen gemacht und diese Änderungen
    untersucht werden. Sie werden auch sehen, wie Sie die Änderungen
    anderer in Ihre Arbeitskopie bringen, untersuchen, und sich durch
    eventuell auftretende Konflikte arbeiten können.</para>

<!--
  <para>This chapter will not provide exhaustive coverage
    of all of Subversion's commands&mdash;rather, it's a conversational
    introduction to the most common Subversion tasks that you'll
    encounter.  This chapter assumes that you've read and understood
    <xref linkend="svn.basic"/> and are familiar with the general
    model of Subversion.  For a complete reference of all commands,
    see <xref linkend="svn.ref"/>.</para>
-->
  <para>Dieses Kapitel ist nicht als erschöpfende Liste aller Befehle
    von Subversion gedacht ist &ndash; es ist eher eine Einführung in
    die gebräuchlichsten Aufgaben von Subversion, denen Sie begegnen
    werden. Dieses Kapitel setzt voraus, dass Sie
    <xref linkend="svn.basic"/> gelesen und verstanden haben und dass
    Sie mit dem allgemeinen Subversion-Modell vertraut sind. Für eine
    vollständige Referenz aller Befehle, siehe
    <xref linkend="svn.ref"/>.</para>

<!--
  <para>Also, this chapter assumes that the reader is seeking
    information about how to interact in a basic fashion with an
    existing Subversion repository.  No repository means no working
    copy; no working copy means not much of interest in this chapter.
    There are many Internet sites which offer free or inexpensive
    Subversion repository hosting services.  Or, if you'd prefer to
    set up and administer your own repositories, check out
    <xref linkend="svn.reposadmin"/>.  But don't expect the
    examples in this chapter to work without the user having access
    to a Subversion repository.</para>
-->
  <para>Dieses Kapitel geht weiter davon aus, dass der Leser
    Informationen sucht, wie er auf grundlegende Art mit einem
    bestehenden Subversion-Projektarchiv interagieren kann. Kein
    Projektarchiv bedeutet, keine Arbeitskopie; keine Arbeitskopie
    bedeutet, nicht viel Interesse an diesem Kapitel. Es gibt viele
    Orte im Internet, die freie oder preiswerte Bewirtungsdienste für
    Subversion-Projektarchive anbieten. Oder, falls Sie es bevorzugen
    sollten, Ihre eigenen Projektarchive einzurichten und zu
    verwalten, schauen Sie sich <xref linkend="svn.reposadmin"/> an.
    Erwarten Sie aber nicht, dass die Beispiele in diesem Kapitel
    funktionieren, ohne dass der Anwender Zugriff auf ein
    Subversion-Projektarchiv hat.</para>

<!--
  <para>Finally, any Subversion operation that contacts the repository
    over a network may potentially require that the user authenticate.
    For the sake of simplicity, our examples throughout this chapter
    avoid demonstrating and discussing authentication.  Be aware that
    if you hope to apply the knowledge herein to an existing,
    real-world Subversion instance, you'll probably be forced to
    provide at least a username and password to the server.  See
    <xref linkend="svn.serverconfig.netmodel.creds"/> for a detailed
    description of Subversion's handling of authentication and client
    credentials.</para>

-->
  <para>Zum Schluss sei noch gesagt, dass jede Subversion-Operation,
    die über ein Netzwerk mit dem Projektarchiv Kontakt aufnimmt,
    möglicherweise erfordert, dass sich der Anwender authentifiziert.
    Der Einfachheit halber vermeiden unsere Beispiele über das gesamte
    Kapitel hinweg die Darstellung und Erörterung der
    Authentifizierung. Beachten Sie, dass sie wahrscheinlich dazu
    gezwungen werden, dem Server zumindest einen Anwendernamen und ein
    Passwort anzugeben, falls Sie das hier erlangte Wissen auf einer
    echten Subversion-Instanz anwenden möchten. Für eine detaillierte
    Beschreibung, wie Subversion Authentifizierung und
    Client-Berechtigungsnachweise behandelt, siehe
    <xref linkend="svn.serverconfig.netmodel.creds"/></para>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.help">
<!--
    <title>Help!</title>
-->
    <title>Hilfe!</title>

    <indexterm>
      <primary>svn</primary>
<!--
      <secondary>subcommands</secondary>
-->
      <secondary>Unterbefehle</secondary>
      <tertiary>help</tertiary>
    </indexterm>

<!--
    <para>It goes without saying that this book exists to be a source
      of information and assistance for Subversion users new and old.
      Conveniently, though, the Subversion command-line is
      self-documenting, alleviating the need to grab a book off the
      shelf (wooden, virtual, or otherwise).  The <command>svn
      help</command> command is your gateway to that built-in
      documentation:</para>
-->
    <para>Es bedarf keiner Erwähnung, dass dieses Buch existiert, um
      als Quelle für Information und Hilfe neuen und alten
      Subversion-Anwendern zu dienen. Allerdings ist die Kommandozeile
      von Subversion praktischerweise selbst-dokumentierend, was die
      Notwendigkeit herabsetzt, das Buch aus dem (hölzernen,
      virtuellen oder sonstigen) Regal hervorzuholen. Der Befehl
      <command>svn help</command> ist Ihr Einstieg zu dieser
      eingebauten Dokumentation:</para>

    <informalexample>
      <screen>
$ svn help <!--
Subversion command-line client, version 1.6.13.
Type 'svn help &lt;subcommand&gt;' for help on a specific subcommand.
Type 'svn - -version' to see the program version and RA modules
  or 'svn - -version - -quiet' to see just the version number.

Most subcommands take file and/or directory arguments, recursing
on the directories.  If no arguments are supplied to such a
command, it recurses on the current directory (inclusive) by default.

Available subcommands:
-->
Aufruf: svn &lt;Unterbefehl&gt; [Optionen] [Parameter]
Subversion-Kommandozeilenclient, Version 1.6.13.
Geben Sie »svn help &lt;Unterbefehl&gt;« ein, um Hilfe zu einem Unterbefehl
          zu erhalten.
Geben Sie »svn --version« ein, um die Programmversion und die Zugriffsmodule
     oder »svn --version --quiet«, um nur die Versionsnummer zu sehen.

Die meisten Unterbefehle akzeptieren Datei- und/oder Verzeichnisparameter,
wobei die Verzeichnisse rekursiv durchlaufen werden. Wenn keine Parameter
angegeben werden, durchläuft der Befehl das aktuelle Verzeichnis rekursiv.

Verfügbare Unterbefehle:
   add
   blame (praise, annotate, ann)
   cat
&hellip;
</screen>
    </informalexample>

<!--
    <para>As described in the previous output, you can ask for help on
      a particular subcommand by running <userinput>svn help
      <replaceable>SUBCOMMAND</replaceable></userinput>.  Subversion
      will respond with the full usage message for that subcommand,
      including its syntax, options, and behavior:</para>

-->
    <para>Wie in der vorangegangenen Ausgabe beschrieben, bekommen Sie
      Hilfe zu einem bestimmten Unterbefehl mit <userinput>svn help
      <replaceable>UNTERBEFEHL</replaceable></userinput>. Subversion
      antwortet mit der vollständigen Aufrufbeschreibung für diesen
      Unterbefehl mitsamt seiner Syntax, den Optionen und dem
      Verhalten:</para>

    <informalexample>
      <screen>
$ svn help help <!--
help (?, h): Describe the usage of this program or its subcommands.
usage: help [SUBCOMMAND...]

Global options:
  - -username ARG           : specify a username ARG
  - -password ARG           : specify a password ARG
-->
help (?, h): Beschreibt die Anwendung dieses Programms und seiner Unterbefehle.
Aufruf: help [UNTERBEFEHL...]

Globale Optionen:
  --username PAR           : Benutzername PAR angeben
  --password PAR           : Passwort PAR angeben
&hellip;
</screen>
    </informalexample>

    <sidebar>
<!--
      <title>Options and Switches and Flags, Oh My!</title>
-->
      <title>Optionen und Schalter und Flags, oh Mann!</title>

      <indexterm>
        <primary>svn</primary>
<!--
        <secondary>options</secondary>
-->
        <secondary>Optionen</secondary>
      </indexterm>

<!--
      <para>The Subversion command-line client has numerous command
        modifiers.  Some folks refer to such things
        as <quote>switches</quote> or <quote>flags</quote>&mdash;in
        this book, we'll call them <quote>options</quote>.  You'll
        find the options supported by a given <command>svn</command>
        subcommand, plus a set of options which are globally supported
        by all subcommands, listed near the bottom of the built-in
        usage message for that subcommand.</para>

-->
      <para>Der Subversion-Kommandozeilen-Client besitzt zahlreiche
        Befehlsmodifizierer. Manche Leute nennen diese Dinge 
        <quote>Schalter</quote> oder <quote>Flags</quote> &ndash; in
        diesem Buch nennen wie sie <quote>Optionen</quote>. Sie finden
        die von einem <command>svn</command>-Unterbefehl unterstützten
        Optionen, neben einer Reihe von Optionen, die global von allen
        Unterbefehlen unterstützt werden, am Ende der eingebauten
        Aufrufbeschreibung für diesen Unterbefehl.</para>

<!--
      <para>Subversion's options have two distinct forms:  short
        options are a single hyphen followed by a single letter, and
        long options consist of two hyphens followed by several
        letters and hyphens (e.g., <literal>-s</literal>
        and <literal>- -this-is-a-long-option</literal>, respectively).
        Every option has at least one long format.  Some, such as
        the <option>- -changelist</option> option, feature an
        abbreviated long-format alias (<option>- -cl</option>, in this
        case).  Only certain options&mdash;generally the most-used
        ones&mdash;have an additional short format.  To maintain
        clarity in this book, we usually use the long form in code
        examples, but when describing options, if there's a short
        form, we'll provide the long form (to improve clarity) and the
        short form (to make it easier to remember).  Use the form
        you're more comfortable with when executing your own
        Subversion commands.</para>
-->

      <para>Die Optionen von Subversion haben zwei unterschiedliche
        Formen: Kurzoptionen bestehen aus einem Bindestrich gefolgt
        von einem einzelnen Buchstaben, und Langoptionen bestehen aus
        zwei Bindestrichen gefolgt von mehreren Buchstaben und
        Bindestrichen (z.B. <literal>-s</literal> bzw.
        <literal>--dies-ist-eine-langoption</literal>).  Jede Option
        besitzt mindestens ein Langformat. Einige, etwa die Option
        <option>--changelist</option>, verfügen über einen
        abgekürzten Alias im Langformat (hier <option>--cl</option>).
        Nur bestimmte Optionen, typischerweise die am meisten
        gebrauchten, haben zusätzlich ein Kurzformat. Um die Klarheit
        in diesem Buch zu bewahren, benutzen wir in den Beispielen
        die Langform, doch wenn Optionen beschrieben werden, die eine
        Kurzform besitzen, nennen wir sowohl die Langform (der Klarheit
        wegen) als auch die Kurzform (um sie sich leichter merken zu
        können). Sie sollten die Form benutzen, mit der Sie am besten
        zurechtkommen, jedoch versuchen Sie nicht, beide gleichzeitig
        zu verwenden.</para>

    </sidebar>

<!--
    <para>Many Unix-based distributions of Subversion include manual
      pages of the sort that can be invoked using
      the <command>man</command> program, but those tend to carry only
      pointers to other sources of real help, such as the project's
      website and to the website which hosts this book.  Also, several
      companies offer Subversion help and support, too, usually via a
      mixture of web-based discussion forums and fee-based consulting.
      And of course, the Internet holds a decade's worth of
      Subversion-related discussions just begging to be located by
      your favorite search engine.  Subversion help is never too far
      away.</para>

-->
    <para>Viele Unix-basierte Distributionen von Subversion enthalten
      Handbuchseiten, die mit dem Programm <command>man</command>
      aufgerufen werden können, doch jene beinhalten in der Regel nur
      Verweise auf andere Quellen eigentlicher Hilfe, etwa die
      Webpräsenz des Projektes und derjenigen, die dieses Buch
      bewirtet. Daneben bieten mehrere Firmen Hilfe und Unterstützung
      für Subversion an, üblicherweise als Mischung von webbasierten
      Diskussionsforen und entgeltlicher Beratung. Und
      selbstverständlich bietet das Internet einen Hort von einem
      Jahrzehnt an Diskussionen zum Thema Subversion, der nur darauf
      wartet, von Ihrer Lieblings-Suchmaschine geborgen zu werden.
      Hilfe zu Subversion ist nie zu weit weg.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.importing">
<!--
    <title>Getting Data into Your Repository</title>
-->
    <title>Wie Sie Daten in Ihr Projektarchiv bekommen</title>

<!--
    <para>You can get new files into your Subversion
      repository in two ways: <command>svn import</command> and <command>svn
      add</command>.  We'll discuss <command>svn import</command> now
      and will discuss <command>svn add</command> later in this
      chapter when we review a typical day with Subversion.</para>
-->
    <para>Sie können neue Dateien auf zweierlei Weisen in das
      Subversion-Projektarchiv bekommen: <command>svn import</command> und
      <command>svn add</command>.  Wir werden <command>svn
      import</command> jetzt und <command>svn add</command> später in
      diesem Kapitel besprechen, wenn wir einen typischen Tag mit
      Subversion durchnehmen.</para>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.importing.import">
<!--
      <title>Importing Files and Directories</title>
-->
      <title>Importieren von Dateien und Verzeichnissen</title>

      <indexterm>
        <primary>svn</primary>
<!--
        <secondary>subcommands</secondary>
-->
        <secondary>Unterbefehle</secondary>
        <tertiary>import</tertiary>
      </indexterm>

<!--
      <para>The <command>svn import</command> command is a quick way to
        copy an unversioned tree of files into a repository, creating
        intermediate directories as necessary.  <command>svn
        import</command> doesn't require a working copy, and your files
        are immediately committed to the repository.  You typically
        use this when you have an existing tree of files that you want to
        begin tracking in your Subversion repository.  For example:</para>
-->
      <para>Mit dem <command>svn import</command>-Befehl kann ein
        unversionierter Verzeichnisbaum schnell in ein Projektarchiv
        kopiert werden, wobei benötigte Zwischenverzeichnisse nach
        Bedarf angelegt werden. <command>svn import</command>
        erfordert keine Arbeitskopie und pflegt Ihre Dateien sofort in
        das Projektarchiv ein. Typischerweise verwenden Sie diesen Befehl,
        wenn bereits ein Verzeichnisbaum besteht, den Sie
        aber in einem Subversion-Projektarchiv pflegen möchten. Zum
        Beispiel:</para>

      <informalexample>
        <screen>
$ svn import /path/to/mytree \
             http://svn.example.com/svn/repo/some/project \ <!--
             -m "Initial import"
Adding         mytree/foo.c
Adding         mytree/bar.c
Adding         mytree/subdir
Adding         mytree/subdir/quux.h

Committed revision 1.
-->
Hinzufügen     mytree/foo.c
Hinzufügen     mytree/bar.c
Hinzufügen     mytree/subdir
Hinzufügen     mytree/subdir/quux.h

Revision 1 übertragen.
</screen>
      </informalexample>

<!--
      <para>The previous example copied the contents of the local
        directory <filename>mytree</filename> into the directory
        <filename>some/project</filename> in the repository.  Note
        that you didn't have to create that new directory
        first&mdash;<command>svn import</command> does that for you.
        Immediately after the commit, you can see your data in the
        repository:</para>
-->
      <para>Im vorstehenden Beispiel wurde der Inhalt des
        Verzeichnisses <filename>mytree</filename> in das
        Verzeichnis <filename>some/project</filename> des
        Projektarchivs abgelegt. Beachten Sie, dass Sie dieses neue
        Verzeichnis nicht erst anlegen mussten &ndash; <command>svn
        import</command> erledigt das für Sie. Unmittelbar nach der
        Übergabe können Sie Ihre Daten im Projektarchiv sehen:</para>

      <informalexample>
        <screen>
$ svn list http://svn.example.com/svn/repo/some/project
bar.c
foo.c
subdir/
$
</screen>
      </informalexample>

<!--
      <para>Note that after the import is finished, the original local
        directory is <emphasis>not</emphasis> converted into a working
        copy.  To begin working on that data in a versioned fashion,
        you still need to create a fresh working copy of that
        tree.</para>
-->
      <para>Beachten Sie, dass nach dem Import das ursprüngliche
        Verzeichnis <emphasis>nicht</emphasis> in eine Arbeitskopie
        umgewandelt wird. Um auf diesen Daten auf eine versionierte
        Art und Weise arbeiten zu können, müssen Sie noch eine
        Arbeitskopie aus diesem Baum erzeugen.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.importing.layout">
<!--
      <title>Recommended Repository Layout</title>
-->
      <title>Empfohlene Aufteilung des Projektarchivs</title>

      <indexterm>
        <primary>trunk</primary>
      </indexterm>
      <indexterm>
        <primary>tags</primary>
      </indexterm>
      <indexterm>
        <primary>branches</primary>
      </indexterm>
      <indexterm>
<!--
        <primary>project root</primary>
-->
        <primary>Projektwurzel</primary>
      </indexterm>

<!--
      <para>Subversion provides the ultimate flexibility in terms of
        how you arrange your data.  Because it simply versions
        directories and files, and because it ascribes no particular
        meaning to any of those objects, you may arrange the data in
        your repository in any way that you choose.  Unfortunately,
        this flexibility also means that it's easy to find
        yourself <quote>lost without a roadmap</quote> as you attempt
        to navigate different Subversion repositories which may carry
        completely different and unpredictable arrangements of the
        data within them.</para>
-->
      <para>Subversion bietet äußerste Flexibilität, was die Anordnung
        Ihrer Daten betrifft. Da es einfach Verzeichnisse und Dateien
        versioniert und keinem dieser Objekte eine bestimmte Bedeutung
        zuschreibt, können Sie die Daten in Ihrem Projektarchiv auf
        beliebige Weise anordnen. Leider bedeutet diese Flexibilität
        auch, dass Sie sich <quote>ohne Karte leicht verirren</quote>
        können, wenn Sie versuchen, sich in verschiedenen
        Subversion-Projektarchiven zurechtzufinden, die eine komplett
        unterschiedliche und unvorhersehbare Anordnung der in ihnen
        vorhandenen Daten haben.</para>

<!--
      <para>To counteract this confusion, we recommend that you follow
        a repository layout convention (established long ago, in the
        nascency of the Subversion project itself) in which a handful
        of strategically named Subversion repository directories
        convey valuable meaning about the data they hold.  Most
        projects have a recognizable <quote>main line</quote>,
        or <firstterm>trunk</firstterm>, of development;
        some <firstterm>branches</firstterm>, which are divergent
        copies of development lines; and
        some <firstterm>tags</firstterm>, which are named, stable
        snapshots of a particular line of development.  So we first
        recommend that each project have a
        recognizable <firstterm>project root</firstterm> in the
        repository, a directory under which all of the versioned
        information for that project&mdash;and only that
        project&mdash;lives.  Secondly, we suggest that each project
        root contain a <filename>trunk</filename> subdirectory for the
        main development line, a
        <filename>branches</filename> subdirectory in which specific
        branches (or collections of branches) will be created, and
        a <filename>tags</filename> subdirectory in which specific
        tags (or collections of tags) will be created.  Of course, if
        a repository houses only a single project, the root of the
        repository can serve as the project root, too.</para>

      <para>Here are some examples:</para>
-->
      <para>Um dieser Verwirrung entgegenzuwirken, empfehlen wir
        Ihnen, dass Sie einer Konvention zur Gestaltung des
        Projektarchivs (bereits vor langer Zeit eingeführt, während der
        Entstehung der Subversion-Projektes) folgen, in der eine
        handvoll strategisch benannter Verzeichnisse des
        Subversion-Projektarchivs eine nützliche Aussage über die sich
        darin befindlichen Daten machen. Die meisten Projekte besitzen
        eine erkennbare <quote>Hauptlinie</quote> oder
        <firstterm>Trunk</firstterm> der Entwicklung, einige
        <quote>Zweige</quote> (engl. <firstterm>branches</firstterm>),
        die abweichende Kopien von Entwicklungslinien darstellen und
        einige  <firstterm>Tags</firstterm>, die benannte stabile
        Momentaufnahmen einer bestimmten Entwicklungslinie sind. Also
        empfehlen wir zunächst, dass jedes Projekt eine erkennbare
        <firstterm>Projektwurzel</firstterm> im Projektarchiv hat, ein
        Verzeichnis unter dem sich die gesamte versionierte
        Information des Projektes befindet, und zwar nur dieses
        Projektes. Zweitens schlagen wir vor, dass jede Projektwurzel
        ein Unterverzeichnis <filename>trunk</filename> für die
        Hauptentwicklungslinie hat, ein Unterverzeichnis
        <filename>branches</filename>, in dem bestimmte Zweige (oder
        Sammlungen von Zweigen) erstellt werden und ein
        Unterverzeichnis <filename>tags</filename>, in dem bestimmte
        Tags (oder Sammlungen von Tags) angelegt werden.
        Selbstverständlich kann die Wurzel des Projektarchivs auch als
        Projektwurzel dienen, falls das Projektarchiv nur ein einziges
        Projekt beheimatet.</para>

      <para>Hier sind ein paar Beispiele:</para>

      <informalexample>
        <screen>
$ svn list file:///var/svn/single-project-repo
trunk/
branches/
tags/
$ svn list file:///var/svn/multi-project-repo
project-A/
project-B/
$ svn list file:///var/svn/multi-project-repo/project-A
trunk/
branches/
tags/
$
</screen>
      </informalexample>

<!--
      <para>We talk much more about tags and branches in
        <xref linkend="svn.branchmerge"/>.  For details and some
        advice on how to set up repositories when you have multiple
        projects, see <xref linkend="svn.branchmerge.maint.layout"/>.
        Finally, we discuss project roots more in
        <xref linkend="svn.reposadmin.projects.chooselayout"/>.</para>
-->
      <para>Wir werden in <xref linkend="svn.branchmerge"/> viel mehr
        über Tags und Zweige reden. Details und Ratschläge zum
        Einrichten von Projektarchiven bei mehreren Projekten finden
        Sie in <xref linkend="svn.branchmerge.maint.layout"/>.
        Schließlich erörtern wir Projektwurzeln näher in
        <xref linkend="svn.reposadmin.projects.chooselayout"/>.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.importing.naming">
<!--
      <title>What's In a Name?</title>
-->
      <title>Was steckt in einem Namen?</title>

<!--
      <para>Subversion tries hard not to limit the type of data you
        can place under version control.  The contents of files and
        property values are stored and transmitted as binary data, and
        <xref linkend="svn.advanced.props.special.mime-type"/>
        tells you how to give Subversion a hint that
        <quote>textual</quote> operations don't make sense for a
        particular file.  There are a few places, however, where
        Subversion places restrictions on information it
        stores.</para>
-->
      <para>Subversion gibt sich alle Mühe, nicht die Art der Daten
        einzuschränken, die Sie unter Versionskontrolle setzen können.
        Der Inhalt von Dateien und Werte von Eigenschaften werden als binäre
        Daten gespeichert und übermittelt, und <xref
          linkend="svn.advanced.props.special.mime-type"/> sagt Ihnen,
        wie Sie Subversion darauf hinweisen, dass
        <quote>Text</quote>-Operationen für eine bestimmte Datei
        keinen Sinn ergeben. Trotzdem gibt es einige wenige Stellen,
        an denen Subversion Einschränkungen für gespeicherte
        Informationen vorsieht.</para>

<!--
      <para>Subversion internally handles certain bits of
        data&mdash;for example, property names, pathnames, and log
        messages&mdash;as UTF-8-encoded Unicode.  This is not to say
        that all your interactions with Subversion must involve UTF-8,
        though.  As a general rule, Subversion clients will gracefully
        and transparently handle conversions between UTF-8 and the
        encoding system in use on your computer, if such a conversion
        can meaningfully be done (which is the case for most common
        encodings in use today).</para>
-->
      <para>Subversion behandelt intern bestimmte
        Dateneinheiten &ndash; z.B. Namen von Eigenschaften, Pfadnamen und
        Protokollmitteilungen &ndash; als UTF-8-kodiertes Unicode.  Das heißt
        aber nicht, dass all Ihre Interaktionen mit Subversion in
        UTF-8 erfolgen müssen. Im Allgemeinen werden Subversion-Clients
        die Umwandlungen zwischen UTF-8 und dem auf Ihrem
        Computer verwendeten Kodiersystem großzügig und transparent
        vornehmen, sofern eine solche Umwandlung sinnvollerweise
        durchgeführt werden kann (was bei den meisten gebräuchlichsten
        Kodierungen heutzutage der Fall ist).</para>

<!--
      <para>In WebDAV exchanges and older versions of some of
        Subversion's administrative files, paths are used as XML
        attribute values, and property names in XML tag names.  This
        means that pathnames can contain only legal XML (1.0)
        characters, and properties are further limited to ASCII
        characters.  Subversion also prohibits <literal>TAB</literal>,
        <literal>CR</literal>, and <literal>LF</literal> characters in
        path names to prevent paths from being broken up in diffs or
        in the output of commands such as <command>svn log</command>
        or <command>svn status</command>.</para>
-->
      <para>Darüber hinaus werden Pfadnamen sowohl bei
        WebDAV-Übertragungen als auch in einigen der Steuerdateien von
        Subversion als XML-Attributwerte verwendet. Das bedeutet, dass
        Pfadnamen nur aus zulässigen XML (1.0) Zeichen bestehen
        dürfen. Subversion verbietet ebenfalls
        <literal>TAB</literal>-, <literal>CR</literal>- und
        <literal>LF</literal>-Zeichen in Pfadnamen, um zu verhindern,
        das Pfade in Vergleichen oder bei Befehlsausgaben, wie
        <command>svn log</command> oder <command>svn status</command>
        zerrissen werden.</para>

<!--
      <para>While it may seem like a lot to remember, in practice
        these limitations are rarely a problem.  As long as your
        locale settings are compatible with UTF-8 and you don't use
        control characters in path names, you should have no trouble
        communicating with Subversion.  The command-line client adds
        an extra bit of help&mdash;to create
        <quote>legally correct</quote> versions for internal
        use it will automatically escape illegal
        path characters as needed in URLs that you type.</para>
-->
      <para>Obwohl es sich anhört, als müsse man sich eine Menge
        merken, sind diese Einschränkungen selten ein Problem. Solange
        Ihre Locale-Einstellungen kompatibel zu UTF-8 sind und Sie
        keine Kontrollzeichen in den Pfadnamen verwenden, sollten Sie
        keine Probleme habe, mit Subversion zu kommunizieren. Der
        Kommandozeilen-Client bietet Ihnen noch ein wenig
        Extrahilfe &ndash; um <quote>korrekte</quote> Versionen für den
        internen Gebrauch zu erzeugen, maskiert er bei Bedarf automatisch
        illegale Zeichen in URL-Pfaden, die Sie eingeben.</para>

    </sect2>
  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.initial">
<!--
    <title>Creating a Working Copy</title>
-->
    <title>Erstellen einer Arbeitskopie</title>

    <indexterm>
      <primary>svn</primary>
<!--
      <secondary>subcommands</secondary>
-->
      <secondary>Unterbefehle</secondary>
      <tertiary>checkout</tertiary>
    </indexterm>

<!--
    <para>Most of the time, you will start using a Subversion
      repository by performing a <firstterm>checkout</firstterm> of
      your project.  Checking out a directory from a repository
      creates a working copy of that directory on your local machine.
      Unless otherwise specified, this copy contains the youngest
      (that is, most recently created or modified) versions of the
      directory and its children found in the Subversion
      repository:</para>
-->
    <para>In den meisten Fällen werden Sie ein Subversion-Projektarchiv
      zu nutzen beginnen, indem Sie einen
      <firstterm>Checkout</firstterm> Ihres Projektes vornehmen. Das
      Auschecken eines Verzeichnisses aus dem Projektarchivs erzeugt eine
      Arbeitskopie dieses Verzeichnisses auf Ihrem lokalen Rechner.
      Falls nicht anderweitig angegeben, enthält diese Kopie die
      jüngste (d.h. zuletzt erzeugte oder geänderte) im
      Subversion-Projektarchiv aufgefundene Version des Verzeichnisses
      und seiner Kinder:</para>

    <informalexample>
      <screen>
$ svn checkout http://svn.example.com/svn/repo/trunk
A    trunk/README
A    trunk/INSTALL
A    trunk/src/main.c
A    trunk/src/header.h
&hellip; <!--
Checked out revision 8810.
-->
Ausgecheckt, Revision 8810.
$
</screen>
    </informalexample>


<!--
    <para>Although the preceding example checks out the trunk
      directory, you can just as easily check out a deeper
      subdirectory of a repository by specifying that subdirectory's
      URL as the checkout URL:</para>
-->
    <para>Obwohl im vorangehenden Beispiel das Trunk-Verzeichnis
      ausgecheckt wird, können Sie ebenso leicht irgendein tiefer
      befindliches Unterverzeichnis aus einem Projektarchiv
      auschecken, indem Sie den URL dieses Unterverzeichnisses als URL
      für den Checkout angeben:</para>

    <informalexample>
      <screen>
$ svn checkout http://svn.example.com/svn/repo/trunk/src
A    src/main.c
A    src/header.h
A    src/lib/helpers.c
&hellip; <!--
Checked out revision 8810.
-->
Ausgecheckt, Revision 8810.
$
</screen>
    </informalexample>

<!--
    <para>Since Subversion uses a copy-modify-merge model instead of
      lock-modify-unlock (see <xref linkend="svn.basic.vsn-models"/>),
      you can immediately make changes to the files and directories in
      your working copy.  Your working copy is just like any other
      collection of files and directories on your system.  You can
      edit the files inside it, rename it, even delete the entire
      working copy and forget about it.</para>
-->
    <para>Da Subversion ein
      <emphasis>Kopieren-Ändern-Zusammenführen</emphasis>-Modell
      (copy-modify-merge model) statt eines
      <emphasis>Sperren-Ändern-Entsperren</emphasis>-Modells
      (lock-modify-unlock) verwendet (siehe
      <xref linkend="svn.basic.vsn-models"/>), können Sie sofort damit
      beginnen, Änderungen an den Dateien und Verzeichnissen Ihrer
      Arbeitskopie vorzunehmen. Ihre Arbeitskopie ist wie jede
      beliebige andere Ansammlung aus Dateien und Verzeichnissen auf
      Ihrem System. Sie können die Dateien darin bearbeiten,
      umbenennen, sogar die komplette Arbeitskopie löschen und
      vergessen.</para>

<!--
    <warning>
      <para>While your working copy is <quote>just like any other
        collection of files and directories on your system,</quote>
        you can edit files at will, but you must tell Subversion
        about <emphasis>everything else</emphasis> that you do.  For
        example, if you want to copy or move an item in a working
        copy, you should use <command>svn copy</command> or
        <command>svn move</command> instead of the copy and move
        commands provided by your operating system.  We'll talk more
        about them later in this chapter.</para>
    </warning>
-->
    <warning>
      <para>Obwohl sich Ihre Arbeitskopie <quote>wie jede beliebige
        andere Ansammlung aus Dateien und Verzeichnissen auf Ihrem
        System</quote> verhält, können Sie zwar beliebig Dateien
        editieren, doch Sie müssen Subversion über <emphasis>alles
        andere</emphasis> was Sie tun in Kenntnis setzen. Wenn Sie
        z.B. ein Objekt in der Arbeitskopie kopieren oder verschieben
        möchten, sollten Sie <command>svn copy</command> oder
        <command>svn move</command> verwenden statt der Kopier- oder
        Verschiebebefehle Ihres Betriebssystems. Wir werden
        darauf später im Kapitel näher eingehen.</para>
    </warning>

<!--
    <para>Unless you're ready to commit the addition of a new file or
      directory or changes to existing ones, there's no need to
      further notify the Subversion server that you've done
      anything.</para>
-->
    <para>Sofern Sie nicht bereit sind, das Hinzufügen einer neuen
      Datei oder eines neuen Verzeichnisses oder Änderungen an
      bestehenden Objekten an das Projektarchiv zu übergeben, besteht
      keine Notwendigkeit, dem Subversion-Server mitzuteilen, dass Sie
      irgendetwas gemacht haben.</para>

    <sidebar>
<!--
      <title>What Is This .svn Directory?</title>
-->
      <title>Was ist dieses .svn-Verzeichnis?</title>

<!--
      <para>The topmost directory of a working copy&mdash;and prior to
        version 1.7, every versioned subdirectory
        thereof&mdash;contains a special administrative subdirectory
        named <filename>.svn</filename>.  Usually, your operating
        system's directory listing commands won't show this
        subdirectory, but it is nevertheless an important directory.
        Whatever you do, don't delete or change anything in the
        administrative area!  Subversion uses that directory and its
        contents to manage your working copy.</para>
-->
      <para>Das oberste Verzeichnis einer Arbeitskopie &ndash; und vor
        Version 1.7 jedes versionierte Unterverzeichnis davon &ndash;
        enthält ein besonderes Verzeichnis für Verwaltungszwecke
        namens <filename>.svn</filename>. Normalerweise zeigt Ihnen
        das Programm Ihres Betriebssystems zum Auflisten von
        Verzeichnisinhalten dieses Verzeichnis nicht an, es ist aber
        trotzdem ein wichtiges Verzeichnis. Egal was Sie machen,
        löschen oder ändern Sie nichts in diesem Verwaltungsbereich!
        Subversion verwendet dieses Verzeichnis und seinen Inhalt zum
        Verwalten Ihrer Arbeitskopie.</para>
    </sidebar>

<!--
    <para>Notice that in the previous pair of examples, Subversion
      chose to create a working copy in a directory named for the
      final component of the checkout URL.  This occurs only as a
      convenience to the user when the checkout URL is the only bit of
      information provided to the <command>svn checkout</command>
      command.  Subversion's command-line client gives you additional
      flexibility, though, allowing you to optionally specify the
      local directory name that Subversion should use for the working
      copy it creates.  For example:</para>
-->
    <para>Beachten Sie, dass in den vorangegangenen Beispielen
      Subversion eine Arbeitskopie in einem Verzeichnis angelegt hat,
      dessen Name der letzten Komponente des Checkout-URLs entsprach.
      Das passiert nur aus reiner Anwenderfreundlichkeit, wenn dem
      Befehl <command>svn checkout</command> lediglich der URL zum
      Auschecken übergeben wird. Der Kommandozeilen-Client von
      Subversion bietet Ihnen dennoch zusätzlich die Möglichkeit, den
      Namen des lokalen Verzeichnisses anzugeben, den Subversion zum
      Anlegen der Arbeitskopie verwenden soll. Zum Beispiel:</para>

    <informalexample>
      <screen>
$ svn checkout http://svn.example.com/svn/repo/trunk my-working-copy
A    my-working-copy/README
A    my-working-copy/INSTALL
A    my-working-copy/src/main.c
A    my-working-copy/src/header.h
&hellip; <!--
Checked out revision 8810.
-->
Ausgecheckt, Revision 8810.
$
</screen>
    </informalexample>

<!--
    <para>If the local directory you specify doesn't yet
      exist, that's okay&mdash;<command>svn checkout</command> will
      create it for you.</para>
-->
    <para>Falls das von Ihnen angegebene lokale Verzeichnis noch nicht
      existiert, ist das in Ordnung: <command>svn checkout</command>
      legt es für Sie an.</para> 

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.cycle">
<!--
    <title>Basic Work Cycle</title>
-->
    <title>Der grundlegende Arbeitszyklus</title>

<!--
    <para>Subversion has numerous features, options, bells, and
      whistles, but on a day-to-day basis, odds are that you will use
      only a few of them.  In this section, we'll run through the most
      common things that you might find yourself doing with Subversion
      in the course of a day's work.</para>
-->
    <para>Subversion hat zahlreiche Features, Optionen und noch jede
      Menge Schnickschnack, aber für die tägliche Arbeit ist die
      Wahrscheinlichkeit groß, nur wenig davon zu benutzen. In diesem
      Abschnitt gehen wir durch die gebräuchlichsten Dinge, die Sie
      während des Tagesgeschäftes mit Subversion machen werden.</para>

<!--
    <para>The typical work cycle looks like this:</para>
-->
    <para>Der typische Arbeitszyklus sieht so aus:</para>

    <orderedlist>
      <listitem>
<!--
        <para><emphasis>Update your working copy.</emphasis> This
          involves the use of the <command>svn update</command>
          command.</para>
-->
        <para><emphasis>Aktualisieren Sie Ihre
          Arbeitskopie.</emphasis> Das bedingt die Verwendung des
          Befehls <command>svn update</command>.</para>
      </listitem>
      <listitem>
<!--
        <para><emphasis>Make your changes.</emphasis> The most common
          changes that you'll make are edits to the contents of your
          existing files.  But sometimes you need to add, remove, copy
          and move files and directories&mdash;the <command>svn
          add</command>, <command>svn delete</command>, <command>svn
          copy</command>, and <command>svn move</command> commands
          handle those sorts of structural changes within the working
          copy.</para>
-->
        <para><emphasis>Nehmen Sie Ihre Änderungen vor.</emphasis> Die
          häufigsten Änderungen, die Sie machen werden, sind
          Bearbeitungen des Inhalts Ihrer bestehenden Dateien. Doch
          manchmal müssen Sie Dateien und Verzeichnisse hinzufügen,
          entfernen und verschieben &ndash; die Befehle <command>svn
          add</command>, <command>svn delete</command>, <command>svn
          copy</command> sowie <command>svn move</command>
          bewerkstelligen derartige strukturelle Änderungen in der
          Arbeitskopie.</para>
      </listitem>
      <listitem>
<!--
        <para><emphasis>Review your changes.</emphasis>
          The <command>svn status</command> and <command>svn
          diff</command> commands are critical to reviewing the
          changes you've made in your working copy.</para>
-->
        <para><emphasis>Überprüfen Sie Ihre Änderungen.</emphasis> Die
          Befehle <command>svn status</command> und <command>svn
          diff</command> sind entscheidend beim Überprüfen der von
          Ihnen in der Arbeitskopie vorgenommenen Änderungen.</para>
      </listitem>

      <listitem>
<!--
        <para><emphasis>Fix your mistakes.</emphasis>  Nobody's
          perfect, so as you review your changes, you may spot
          something that's not quite right.  Sometimes the easiest way
          to fix a mistake is start all over again from scratch.
          The <command>svn revert</command> command restores a file
          or directory to its unmodified state.</para>
-->
        <para><emphasis>Beheben Sie Ihre Fehler.</emphasis> Niemand
          ist vollkommen, und so kann es passieren, dass Sie beim
          Überprüfen Ihrer Änderungen etwas entdecken, was nicht
          richtig ist. Manchmal ist es am einfachsten, einfach erneut
          von vorne zu beginnen. Der Befehl <command>svn
          revert</command> stellt den ungeänderten Zustand einer Datei
          oder eines Verzeichnisses wieder her.</para>
      </listitem>
      <listitem>
<!--
        <para><emphasis>Resolve any conflicts (merge others'
          changes).</emphasis>  In the time it takes you to make and
          review your changes, others might have made and published
          changes, too.  You'll want to integrate their changes into
          your working copy to avoid the potential out-of-dateness
          scenarios when you attempt to publish your own.  Again,
          the <command>svn update</command> command is the way to do
          this.  If this results in local conflicts, you'll need to
          resolve those using the <command>svn resolve</command>
          command.</para>
-->
        <para><emphasis>Lösen Sie etwaige Konflikte auf (arbeiten Sie
          die Änderungen anderer ein).</emphasis> Während der Zeit,
          die Sie benötigen, um Änderungen vorzunehmen und zu
          überprüfen, hätten andere ebenfalls Änderungen machen und
          sie veröffentlichen können. Sie sollten deren Änderungen in
          Ihre Arbeitskopie integrieren, um Szenarien bedingt durch
          Veralterung zu vermeiden, die möglicherweise entstehen, wenn
          Sie Ihre Änderungen veröffentlichen wollen. Auch hier hilft
          Ihnen der Befehl <command>svn update</command> weiter.
          Sollte das zu lokalen Konflikten führen, müssen Sie jene
          mithilfe des Befehls <command>svn resolve</command>
          auflösen.</para>
      </listitem>
      <listitem>
<!--
        <para><emphasis>Publish (commit) your changes.</emphasis>
          The <command>svn commit</command> command transmits your
          changes to the repository where, if they are accepted, they
          create the newest versions of all the things you modified.
          Now others can see your work, too!</para>
-->
        <para><emphasis>Veröffentlichen (übergeben) Sie Ihre
          Änderungen.</emphasis> Der Befehl <command>svn
          commit</command> überträgt Ihre Änderungen in das
          Projektarchiv, in dem sie, falls sie angenommen werden, die
          neueste Version aller Dinge erstellen, die Sie modifiziert
          haben. Nun können auch andere Ihre Arbeit sehen.</para>
      </listitem>
    </orderedlist>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.update">
<!--
      <title>Update Your Working Copy</title>
-->
      <title>Aktualisieren Sie Ihre Arbeitskopie</title>

      <indexterm>
        <primary>svn</primary>
<!--
        <secondary>subcommands</secondary>
-->
        <secondary>Unterbefehle</secondary>
        <tertiary>update</tertiary>
      </indexterm>

<!--
      <para>When working on a project that is being modified via
        multiple working copies, you'll want to update your working
        copy to receive any changes committed from other working
        copies since your last update.  These might be changes that
        other members of your project team have made, or they might
        simply be changes you've made yourself from a different
        computer.  To protect your data, Subversion won't
        allow you commit new changes to out-of-date files and
        directories, so it's best to have the latest versions
        of all your project's files and directories before making new
        changes of your own.</para>
-->
      <para>Wenn Sie in einem Projekt arbeiten, das über mehrere
        Arbeitskopien modifiziert wird, sollten Sie Ihre Arbeitskopie
        aktualisieren, damit Sie die Änderungen aus anderen
        Arbeitskopien seit Ihrer letzten Aktualisierung mitbekommen.
        Es kann sich dabei um Änderungen handeln, die andere
        Mitarbeiter aus dem Team gemacht haben, oder aber Änderungen,
        die Sie selbst von einem anderen Computer gemacht haben.  Um
        Ihre Daten zu schützen, erlaubt es Ihnen Subversion nicht,
        neue Änderungen auf veraltete Dateien und Verzeichnisse
        anzuwenden, so dass Sie am besten die neuesten Versionen aller
        Ihrer Projektdateien und -verzeichnisse haben, bevor Sie
        selbst irgendwelche Änderungen vornehmen.</para>

<!--
      <para>Use <command>svn update</command> to bring your working
        copy into sync with the latest revision in the
        repository:</para>

-->
      <para>Verwenden Sie  <command>svn update</command>, um Ihre
        Arbeitskopie mit der letzten Revision im Projektarchiv zu
        synchronisieren:</para>

      <informalexample>
        <screen>
$ svn update
Updating '.':
U    foo.c
U    bar.c <!--
Updated to revision 2.
-->
Aktualisiert zu Revision 2.
$
</screen>
      </informalexample>

<!--
      <para>In this case, it appears that someone checked in
        modifications to both <filename>foo.c</filename>
        and <filename>bar.c</filename> since the last time you
        updated, and Subversion has updated your working copy to
        include those changes.</para>
-->
      <para>In diesem Fall sieht es so aus, dass jemand Änderungen
        sowohl an <filename>foo.c</filename> als auch an
        <filename>bar.c</filename> übergeben hat, seit Sie das letzte
        Mal aktualisiert haben, und Subversion hat Ihre Arbeitskopie
        aktualisiert, damit sie beide Änderungen enthält.</para>

<!--
      <para>When the server sends changes to your working copy via
        <command>svn update</command>, a letter code is displayed next
        to each item to let you know what actions Subversion performed
        to bring your working copy up to date.  To find out what these
        letters mean, run <userinput>svn help update</userinput> or
        see <xref linkend="svn.ref.svn.c.update"/> in
        <xref linkend="svn.ref"/>.</para>
-->
      <para>Wenn der Server über <command>svn update</command>
        Änderungen an Ihre Arbeitskopie schickt, wird ein
        Buchstabencode neben jedem Objekt angezeigt, um Ihnen
        anzuzeigen, was Subversion gemacht hat, um die Arbeitskopie
        auf den neuesten Stand zu bringen. Zur Bedeutung der
        Buchstaben, rufen Sie <userinput>svn help update</userinput>
        auf oder schauen sich <xref linkend="svn.ref.svn.c.update"/>
        in <xref linkend="svn.ref"/> an.</para>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.edit">
<!--
      <title>Make Your Changes</title>
-->
      <title>Nehmen Sie Ihre Änderungen vor</title>

<!--
      <para>Now you can get to work and make changes in your working
        copy.  You can make two kinds of changes to your working
        copy: <firstterm>file changes</firstterm> and <firstterm>tree
        changes</firstterm>.  You don't need to tell Subversion that
        you intend to change a file; just make your changes using your
        text editor, word processor, graphics program, or whatever
        tool you would normally use.  Subversion automatically detects
        which files have been changed, and in addition, it handles
        binary files just as easily as it handles text files&mdash;and
        just as efficiently, too.  Tree changes are different, and
        involve changes to a directory's structure.  Such changes
        include adding and removing files, renaming files or
        directories, and copying files or directories to new
        locations.  For tree changes, you use Subversion operations
        to <quote>schedule</quote> files and directories for removal,
        addition, copying, or moving.  These changes may take place
        immediately in your working copy, but no additions or removals
        will happen in the repository until you commit them.</para>
-->
      <para>Nun können Sie loslegen und Änderungen an Ihrer
        Arbeitskopie vornehmen. Sie können zwei Arten von Änderungen
        an Ihrer Arbeitskopie machen:
        <firstterm>Dateiänderungen</firstterm> und
        <firstterm>Baumänderungen</firstterm>. Sie brauchen Subversion
        nicht mitteilen, dass Sie beabsichtigen, eine Datei zu ändern;
        machen Sie einfach Ihre Änderungen mit Ihrem Editor,
        Textverarbeitungsprogramm, Grafikprogramm oder was Sie sonst
        normalerweise benutzen. Subversion merkt automatisch, welche
        Dateien verändert wurden; darüber hinaus behandelt es binäre
        Dateien ebenso einfach wie Textdateien &ndash; und ebenso
        effizient. Davon unterscheiden sich Baumänderungen, die
        Änderungen an der Verzeichnisstruktur nach sich ziehen. Zu
        solchen Änderungen zählen das Hinzufügen und Entfernen von
        Dateien, das Umbenennen von Dateien oder Verzeichnissen sowie
        das Kopieren von Dateien und Verzeichnissen an andere Orte.
        Für Baumänderungen verwenden Sie Subversion-Operationen, um
        Dateien und Verzeichnisse zum Löschen, Hinzufügen, Kopieren
        oder Verschieben <quote>einzuplanen</quote>. Diese Änderungen
        können sofort in Ihrer Arbeitskopie stattfinden, jedoch wird
        im Projektarchiv nichts hinzugefügt oder gelöscht bevor Sie
        die Änderungen übergeben haben.</para>

      <sidebar>
<!--
        <title>Versioning Symbolic Links</title>
-->
        <title>Versionierung symbolischer Links</title>

<!--
        <para>On non-Windows platforms, Subversion is able to version
          files of the special type <firstterm>symbolic
          link</firstterm> (or <quote>symlink</quote>).  A symlink is
          a file that acts as a sort of transparent reference to some
          other object in the filesystem, allowing programs to read
          and write to those objects indirectly by performing
          operations on the symlink itself.</para>
-->
        <para>Auf Nicht-Windows-Systemen kann Subversion den
          besonderen Dateityp <firstterm>symbolischer Link</firstterm>
          (oder <firstterm>Symlink</firstterm>) versionieren. Ein
          Symlink ist eine Datei, die sich wie eine transparente
          Referenz auf ein anderes Objekt im Dateisystem verhält, und
          somit Programmen die Möglichkeit bietet, indirekt auf dieses
          Objekt zuzugreifen, indem sie Operationen auf dem Symlink
          ausführen.</para>

<!--
        <para>When a symlink is committed into a Subversion
          repository, Subversion remembers that the file was in fact a
          symlink, as well as the object to which the symlink
          <quote>points.</quote>  When that symlink is checked out to
          another working copy on a non-Windows system, Subversion
          reconstructs a real filesystem-level symbolic link from the
          versioned symlink.  But that doesn't in any way limit the
          usability of working copies on systems such as Windows that
          do not support symlinks.  On such systems, Subversion simply
          creates a regular text file whose contents are the path to
          which the original symlink pointed.  While that file
          can't be used as a symlink on a Windows system, it also
          won't prevent Windows users from performing their other
          Subversion-related activities.</para> </sidebar>
-->
        <para>Wenn ein Symlink in Subversion übergeben wird, merkt
          sich Subversion sowohl, dass die Datei eigentlich ein
          Symlink ist, als auch das Objekt, auf das der Symlink
          <quote>zeigt</quote>. Wenn dieser Symlink auf einem
          Nicht-Windows-System in einer anderen Arbeitskopie ausgecheckt
          wird, rekonstruiert Subversion aus dem versionierten Symlink
          einen echten Symlink auf Dateisystemebene. Jedoch
          beeinträchtigt das keineswegs die Benutzbarkeit von
          Arbeitskopien auf Systemen wie Windows, die keine Symlinks
          unterstützen. Auf diesen Systemen erzeugt Subversion einfach
          eine Textdatei, deren Inhalt der Pfad ist, auf den der
          ursprüngliche Symlink gezeigt hat. Obwohl diese Datei unter
          Windows nicht als Symlink verwendet werden kann, hindert es
          Windows-Benutzer nicht an der Ausübung anderer Tätigkeiten
          mit Subversion.</para> </sidebar>

<!--
      <para>Here is an overview of the five Subversion subcommands
        that you'll use most often to make tree changes:</para>
-->
      <para>Hier ist ein Überblick der fünf Subversion-Unterbefehle,
        die Sie am häufigsten benutzen werden, um Änderungen am
        Verzeichnisbaum vorzunehmen:</para>

      <variablelist>

        <varlistentry>
          <term><userinput>svn add FOO</userinput></term>
          <listitem>
            <indexterm>
              <primary>svn</primary>
<!--
              <secondary>subcommands</secondary>
-->
              <secondary>Unterbefehle</secondary>
              <tertiary>add</tertiary>
            </indexterm>
<!--
            <para>Use this to schedule the file, directory, or
              symbolic link <filename>FOO</filename> to be added to
              the repository.  When you next
              commit, <filename>FOO</filename> will become a child of
              its parent directory.  Note that if
              <filename>FOO</filename> is a directory, everything
              underneath <filename>FOO</filename> will be scheduled
              for addition.  If you want only to add
              <filename>FOO</filename> itself, pass the
              <option>- -depth=empty</option> option.</para>
-->
            <para>Verwenden Sie diesen Befehl, um die Datei, das
              Verzeichnis oder den symbolischen Link
              <filename>FOO</filename> zum Hinzufügen in das
              Projektarchiv vormerken. Wenn Sie das nächste Mal übergeben,
              wird <filename>FOO</filename> ein Kind seines
              Elternverzeichnisses. Beachten Sie, dass alles unterhalb
              von <filename>FOO</filename> zum Hinzufügen vorgemerkt
              wird, falls <filename>FOO</filename> ein Verzeichnis
              ist. Falls Sie nur <filename>FOO</filename> selber
              hinzufügen möchten, geben Sie die Option
              <option>--depth=empty</option> an.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><userinput>svn delete FOO</userinput></term>
          <listitem>
            <indexterm>
              <primary>svn</primary>
<!--
              <secondary>subcommands</secondary>
-->
              <secondary>Unterbefehle</secondary>
              <tertiary>delete</tertiary>
            </indexterm>
<!--
            <para>Use this to schedule the file, directory, or
              symbolic link <filename>FOO</filename> to be deleted
              from the repository.  If <filename>FOO</filename> is a
              file or link, it is immediately deleted from your
              working copy.  If <filename>FOO</filename> is a
              directory, it is not deleted, but Subversion schedules
              it for deletion.  When you commit your
              changes, <filename>FOO</filename> will be entirely
              removed from your working copy and the
              repository.<footnote><para>Of course, nothing is ever
              totally deleted from the repository&mdash;just from
              its <literal>HEAD</literal> revision.  You may continue
              to access the deleted item in previous revisions.
              Should you desire to resurrect the item so that it is
              again present in <literal>HEAD</literal>, see
              <xref linkend="svn.branchmerge.basicmerging.resurrect"
              />.</para></footnote></para>
-->
            <para>Verwenden Sie das, um die Datei, das Verzeichnis
              oder den symbolischen Link <filename>FOO</filename> zum
              Löschen aus dem Projektarchiv vormerken.
              <filename>FOO</filename> wird sofort aus der
              Arbeitskopie entfernt, falls es eine Datei oder ein Link
              ist. Falls <filename>FOO</filename> ein Verzeichnis ist,
              wird es nicht gelöscht, sondern zum Löschen vorgemerkt.
              Wenn Sie Ihre Änderungen übergeben, wird das gesamte
              Verzeichnis <filename>FOO</filename> aus der
              Arbeitskopie und dem Projektarchiv entfernt.
              <footnote><para>Selbstverständlich wird nichts jemals
              vollständig aus dem Projektarchiv gelöscht &ndash;
              lediglich aus seiner <literal>HEAD</literal>-Revision.
              Sie können weiterhin auf das gelöschte Objekt in
              früheren Revisionen zugreifen. Sollten Sie den Wunsch
              haben, das Objekt wiederauferstehen zu lassen, so das es
              wieder in <literal>HEAD</literal> vorhanden ist, siehe
              <xref linkend="svn.branchmerge.basicmerging.resurrect"
              />.</para></footnote></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><userinput>svn copy FOO BAR</userinput></term>
          <listitem>
            <indexterm>
              <primary>svn</primary>
<!--
              <secondary>subcommands</secondary>
-->
              <secondary>Unterbefehle</secondary>
              <tertiary>copy</tertiary>
            </indexterm>
<!--
            <para>Create a new item <filename>BAR</filename> as a
              duplicate of <filename>FOO</filename> and automatically
              schedule <filename>BAR</filename> for addition.  When
              <filename>BAR</filename> is added to the repository on
              the next commit, its copy history is recorded (as having
              originally come from <filename>FOO</filename>).
              <command>svn copy</command> does not create intermediate
              directories unless you pass the
              <option>- -parents</option> option.</para>
-->
            <para>Erzeuge ein neues Objekt <filename>BAR</filename>
              als Duplikat von <filename>FOO</filename> und merke
              <filename>BAR</filename> automatisch zum Hinzufügen vor.
              Wird bei der nächsten Übergabe <filename>BAR</filename> dem
              Projektarchiv hinzugefügt, wird die Historie der Kopie
              mit aufgezeichnet (so wie sie ursprünglich in
              <filename>FOO</filename> war).  <command>svn
              copy</command> erzeugt keine Zwischenverzeichnisse,
              sofern nicht die Option <option>--parents</option>
              angegeben wird..</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><userinput>svn move FOO BAR</userinput></term>
          <listitem>
            <indexterm>
              <primary>svn</primary>
<!--
              <secondary>subcommands</secondary>
-->
              <secondary>Unterbefehle</secondary>
              <tertiary>move</tertiary>
            </indexterm>
<!--
            <para>This command is exactly the same as running
              <userinput>svn copy FOO BAR; svn delete FOO</userinput>.
              That is, <filename>BAR</filename> is scheduled for
              addition as a copy of <filename>FOO</filename>, and
              <filename>FOO</filename> is scheduled for removal.
              <command>svn move</command> does not create intermediate
              directories unless you pass the
              <option>- -parents</option> option.</para>
-->
            <para>Dieser Befehl macht genau das gleiche wie
              <userinput>svn copy FOO BAR; svn delete FOO</userinput>.
              D.h., <filename>BAR</filename> wird zum Hinzufügen als
              Kopie von <filename>FOO</filename> und
              <filename>FOO</filename> selbst zum Löschen vorgemerkt.
              <command>svn move</command> erzeugt keine
              Zwischenverzeichnisse, sofern nicht die Option
              <option>--parents</option> angegeben wird.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><userinput>svn mkdir FOO</userinput></term>
          <listitem>
            <indexterm>
              <primary>svn</primary>
<!--
              <secondary>subcommands</secondary>
-->
              <secondary>Unterbefehle</secondary>
              <tertiary>mkdir</tertiary>
            </indexterm>
<!--
            <para>This command is exactly the same as running
              <userinput>mkdir FOO; svn add FOO</userinput>.  That is,
              a new directory named <filename>FOO</filename> is
              created and scheduled for addition.</para>
-->
            <para>Dieser Befehl macht genau das gleiche wie
              <userinput>mkdir FOO; svn add FOO</userinput>. D.h., ein
              neues Verzeichnis namens <filename>FOO</filename> wird
              angelegt und zum Hinzufügen vorgemerkt.</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <sidebar>
<!--
        <title>Changing the Repository Without a Working Copy</title>
-->
        <title>Ändern des Projektarchivs ohne Arbeitskopie</title>

<!--
        <para>Subversion <emphasis>does</emphasis> offer ways to
          immediately commit tree changes to the repository without an
          explicit commit action.  In particular, specific uses
          of <command>svn mkdir</command>, <command>svn
          copy</command>, <command>svn move</command>, and
          <command>svn delete</command> can operate directly on
          repository URLs as well as on working copy paths.  Of
          course, as previously mentioned, <command>svn
          import</command> always makes direct changes to the
          repository.</para>
-->
        <para>Subversion <emphasis>bietet</emphasis> Wege, um 
          Änderungen am Verzeichnisbaum ohne explizite Übergabe
          unmittelbar in das Projektarchiv zu übertragen. Im einzelnen
          können besondere Anwendungen von <command>svn
          mkdir</command>, <command>svn copy</command>, <command>svn
          move</command> und <command>svn delete</command> sowohl
          direkt auf Projektarchiv-URLs als auch auf Pfaden in der
          Arbeitskopie arbeiten. Selbstverständlich macht <command>svn
          import</command>, wie bereits erwähnt, immer Änderungen
          direkt am Projektarchiv.</para>

<!--
        <para>There are pros and cons to performing URL-based
          operations.  One obvious advantage to doing so is speed:
          sometimes, checking out a working copy that you don't
          already have solely to perform some seemingly simple action
          is an overbearing cost.  A disadvantage is that you are
          generally limited to a single, or single type of, operation
          at a time when operating directly on URLs.  Finally, the
          primary advantage of a working copy is in its utility as a
          sort of <quote>staging area</quote> for changes.  You can
          make sure that the changes you are about to commit make
          sense in the larger scope of your project before committing
          them.  And, of course, these staged changes can be as
          complex or as a simple as they need to be, yet result in but
          a single new revision when committed.</para>
-->
        <para>Es gibt Vor- und Nachteile bei URL-basierten
          Operationen. Ein offensichtlicher Vorteil davon ist
          Geschwindigkeit: das Auschecken einer Arbeitskopie, die Sie
          noch nicht haben, nur um eine scheinbar einfache Aktion
          durchzuführen, bedeutet unverhältnismäßige Kosten. Ein
          Nachteil ist, dass Sie im Allgemeinen auf eine einzelne
          Operation oder einen einzelnen Operationstypen beschränkt
          sind, wenn Sie direkt auf URLs arbeiten. Schließlich liegt
          der Hauptvorteil einer Arbeitskopie darin, dass sie sich als
          eine Art <quote>Bereitstellungsraum</quote> verwenden lässt.
          Sie können sicherstellen, dass die Änderungen, die Sie
          übergeben möchten, im Gesamtzusammenhang Ihres Projektes
          einen Sinn ergeben, bevor sie tatsächlich in das
          Projektarchiv übergeben werden. Und selbstverständlich
          können diese vorbereiteten Änderungen so einfach oder so
          kompliziert wie notwendig sein, und dennoch bei der Übergabe
          in einer einzigen neuen Revision münden.</para>

      </sidebar>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.examine">
<!--
      <title>Review Your Changes</title>
-->
      <title>Überprüfen Sie Ihre Änderungen</title>

      <indexterm>
<!--
        <primary>log message</primary>
-->
        <primary>Protokollnachricht</primary>
      </indexterm>

<!--
      <para>Once you've finished making changes, you need to commit
        them to the repository, but before you do so, it's usually a
        good idea to take a look at exactly what you've changed.  By
        examining your changes before you commit, you can compose a
        more accurate <firstterm>log message</firstterm> (a
        human-readable description of the committed changes stored
        alongside those changes in the repository).  You may also
        discover that you've inadvertently changed a file, and that
        you need to undo that change before committing.  Additionally,
        this is a good opportunity to review and scrutinize changes
        before publishing them.  You can see an overview of the
        changes you've made by using the <command>svn status</command>
        command, and you can dig into the details of those changes by
        using the <command>svn diff</command> command.</para>
-->
      <para>Sobald Sie mit Ihren Änderungen fertig sind, müssen Sie
        sie ins Projektarchiv bringen; es ist normalerweise eine gute
        Idee, sich die Änderungen zuvor noch einmal anzusehen.
        Dadurch, dass Sie die Änderungen noch einmal begutachten,
        können Sie eine genauere
        <firstterm>Protokollnachricht</firstterm> schreiben (eine
        menschenlesbare Beschreibung der übergebenen Änderungen, die
        neben ihnen im Projektarchiv gespeichert wird). Es könnte auch
        sein, dass Sie feststellen, versehentlich eine Datei geändert
        zu haben, und dass Sie vor der Übergabe diese Änderung
        rückgängig machen müssen. Zusätzlich bietet sich hierbei eine
        gute Gelegenheit, die Änderungen vor der Veröffentlichung noch
        einmal genau durchzugehen. Sie können sich mit <command>svn
        status</command> einen Überblick über Ihre Änderungen
        verschaffen und mit <command>svn diff</command> die Änderungen
        im Detail anzeigen lassen.</para>

      <sidebar>
<!--
        <title>Look Ma! No Network!</title>
-->
        <title>Guck mal, Mutti, kein Netzwerk!</title>

<!--
        <para>You can use the commands <command>svn status</command>,
          <command>svn diff</command>, and <command>svn
          revert</command> without any network access even if your
          repository <emphasis>is</emphasis> across the network.  This
          makes it easy to manage and review your changes-in-progress
          when you are working offline or are otherwise unable to
          contact your repository over the network.</para>
-->
        <para>Sie können die Befehle <command>svn status</command>,
          <command>svn diff</command> und <command>svn
          revert</command> ohne Netzzugriff verwenden, selbst wenn das
          Projektarchiv im Netz <emphasis>ist</emphasis>.  Das macht
          es leicht, Ihre in Arbeit befindlichen Änderungen zu
          verwalten, wenn Sie irgendwo ohne Netzverbindung sind oder
          aus anderen Gründen das Projektarchiv über das Netz nicht
          erreichen können.</para>

        <indexterm>
<!--
          <primary>text-base</primary>
-->
          <primary>Text-Base</primary>
        </indexterm>
        <indexterm>
<!--
          <primary>delta</primary>
-->
          <primary>Delta</primary>
        </indexterm>

<!--
        <para>Subversion does this by keeping private caches of
          pristine, unmodified versions of each versioned file inside
          its working copy administrative area (or prior to version 1.7,
          potentially multiple administrative areas).  This allows
          Subversion to report&mdash;and revert&mdash;local
          modifications to those files <emphasis>without network
          access</emphasis>.  This cache (called the
          <firstterm>text-base</firstterm>) also allows Subversion to
          send the user's local modifications during a commit to the
          server as a compressed <firstterm>delta</firstterm> (or
          <quote>difference</quote>) against the pristine version.
          Having this cache is a tremendous benefit&mdash;even if you
          have a fast Internet connection, it's generally much faster
          to send only a file's changes rather than the whole file to
          the server.</para>
-->
        <para>Subversion bewerkstelligt das, indem es private
          Zwischenspeicher der ursprünglichen, unveränderten Versionen
          jeder versionierten Datei innerhalb des Verwaltungsbereichs
          der Arbeitskopie (oder, vor Version 1.7, möglicherweise
          mehrfacher Verwaltungsbereiche) vorhält. Das erlaubt es
          Subversion, lokale Änderungen an diesen Dateien
          <emphasis>ohne Netzzugriff</emphasis> anzuzeigen &ndash; und
          rückgängig zu machen. Darüber hinaus erlaubt dieser Cache
          (<quote>Text-Base</quote> genannt) Subversion bei einer
          Übergabe, die lokalen Änderungen des Benutzers als
          komprimiertes <firstterm>Delta</firstterm> (oder
          <quote>Differenz</quote>) gegenüber der unveränderten
          Version zum Server zu senden.  Diesen Cache zu haben,
          bedeutet einen riesigen Vorteil &ndash; selbst wenn Sie eine
          schnelle Internet-Verbindung haben, ist es viel schneller,
          nur die Änderungen an einer Datei statt die vollständige
          Datei an den Server zu übermitteln.</para>

      </sidebar>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.examine.status">
<!--
        <title>See an overview of your changes</title>
-->
        <title>Verschaffen Sie sich einen Überblick über Ihre Änderungen</title>

        <indexterm>
          <primary>svn</primary>
<!--
          <secondary>subcommands</secondary>
-->
          <secondary>Unterbefehle</secondary>
          <tertiary>status</tertiary>
        </indexterm>

<!--
        <para>To get an overview of your changes, use the
          <command>svn status</command> command.  You'll probably use
          <command>svn status</command> more than any other Subversion
          command.</para>
-->
        <para>Um einen Überblick über Ihre Änderungen zu bekommen,
          verwenden Sie den Befehl <command>svn status</command>.
          Wahrscheinlich werden Sie den Befehl <command>svn
          status</command> häufiger benutzen als alle anderen
          Subversion-Befehle.</para>

<!--
        <tip>
          <para>Because the <command>cvs status</command> command's
            output was so noisy, and because <command>cvs
            update</command> not only performs an update, but also
            reports the status of your local changes, most CVS users
            have grown accustomed to using <command>cvs
            update</command> to report their changes.  In Subversion,
            the update and status reporting facilities are completely
            separate.  See
            <xref linkend="svn.forcvs.status-vs-update"/> for more
            details.</para>
        </tip>

-->
        <tip>
          <para>Da die Ausgabe des Befehls <command>cvs
            status</command> so geräuschvoll war, und  <command>cvs
            update</command> nicht nur eine Aktualisierung vornimmt
            sondern auch den Status Ihrer lokalen Änderungen meldet,
            haben sich die meisten Anwender von CVS angewöhnt,
            <command>cvs update</command> zum Anzeigen Ihrer Meldungen
            zu verwenden. In Subversion sind die Aktualisierungs- und
            Statusmeldefunktionen vollständig getrennt. Zu Details,
            siehe <xref linkend="svn.forcvs.status-vs-update"/></para>
        </tip>

<!--
        <para>If you run <userinput>svn status</userinput> at the top
          of your working copy with no additional arguments, it will
          detect and report all file and tree changes you've
          made.</para>
-->
        <para>Wenn Sie <userinput>svn status</userinput> ohne
          zusätzliche Argumente ganz oben in Ihrer Arbeitskopie
          aufrufen, erfasst und meldet es alle Datei- und
          Verzeichnisbaumänderungen, die Sie gemacht haben.</para>

        <informalexample>
          <screen>
$ svn status
?       scratch.c
A       stuff/loot
A       stuff/loot/new.c
D       stuff/old.c
M       bar.c
$
</screen>
        </informalexample>

<!--
        <para>In its default output mode, <command>svn
          status</command> prints seven columns of characters,
          followed by several whitespace characters, followed by a
          file or directory name.  The first column tells the status
          of a file or directory and/or its contents.  Some of the
          most common codes that <command>svn status</command>
          displays are:</para>
-->
        <para>In seinem Standard-Ausgabemodus zeigt <command>svn
          status</command> sieben Spalten mit Zeichen, gefolgt von
          mehreren Leerzeichen und einem Datei- oder Verzeichnisnamen
          an. Die erste Spalte gibt Aufschluss über den Zustand einer
          Datei oder eines Verzeichnisses und/oder des entsprechenden
          Inhalts. Einige der häufigsten Codes, die <command>svn
          status</command> anzeigt, sind:</para>

        <variablelist>

          <varlistentry>
            <term><computeroutput>?      item</computeroutput></term>
            <listitem>
<!--
              <para>The file, directory, or symbolic link
                <filename>item</filename> is not under version
                control.</para>
-->
              <para>Die  Datei, das Verzeichnis oder der symbolische
                Link <filename>item</filename> ist nicht unter
                Versionskontrolle.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>A      item</computeroutput></term>
            <listitem>
<!--
              <para>The file, directory, or symbolic link
                <filename>item</filename> has been scheduled for
                addition into the repository.</para>
-->
              <para>Die Datei, das Verzeichnis oder der symbolische
                Link <filename>item</filename> ist zum Hinzufügen in
                das Projektarchiv vorgemerkt.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>C      item</computeroutput></term>
            <listitem>

<!--
              <para>The file <filename>item</filename> is in a state
                of conflict.  That is, changes received from the
                server during an update overlap with local changes
                that you have in your working copy (and weren't
                resolved during the update).  You must resolve this
                conflict before committing your changes to the
                repository.</para>
-->
              <para>Die Datei <filename>item</filename> befindet sich
                in einem Konfliktzustand. D.h., Änderungen, die vom
                Server bei einer Aktualisierung empfangen wurden,
                überlappen sich mit lokalen Änderungen, die Sie in
                Ihrer Arbeitskopie haben (und konnten beim
                Aktualisieren nicht automatisch aufgelöst werden). Sie
                müssen den Konflikt auflösen, bevor Sie Ihre
                Änderungen in das Projektarchiv übergeben können.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>D      item</computeroutput></term>
            <listitem>
<!--
              <para>The file, directory, or symbolic link
                <filename>item</filename> has been scheduled for
                deletion from the repository.</para>
-->
              <para>Die Datei, das Verzeichnis oder der symbolische
                Link <filename>item</filename> ist zum Löschen im
                Projektarchiv vorgemerkt.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>M      item</computeroutput></term>
            <listitem>
<!--
              <para>The contents of the file <filename>item</filename>
                have been modified.</para>
-->
              <para>Der Inhalt der Datei <filename>item</filename>
                ist geändert worden.</para>
            </listitem>
          </varlistentry>

        </variablelist>

<!--
        <para>If you pass a specific path to <command>svn
          status</command>, you get information about that item
          alone:</para>
-->
        <para>Wenn Sie einen speziellen Pfad an <command>svn
          status</command> übergeben, bekommen Sie nur Informationen
          über dieses Objekt:</para>

        <informalexample>
          <screen>
$ svn status stuff/fish.c
D       stuff/fish.c
</screen>
        </informalexample>

<!--
        <para><command>svn status</command> also has a
          <option>- -verbose</option> (<option>-v</option>) option,
          which will show you the status of <emphasis>every</emphasis>
          item in your working copy, even if it has not been
          changed:</para>
-->
        <para><command>svn status</command> hat auch eine
          <option>--verbose</option>-Option (<option>-v</option>),
          die Ihnen den Zustand <emphasis>jedes</emphasis> Objektes in
          der Arbeitskopie anzeigt, selbst wenn es sich nicht geändert
          hat:</para>

        <informalexample>
          <screen>
$ svn status -v
M               44        23    sally     README
                44        30    sally     INSTALL
M               44        20    harry     bar.c
                44        18    ira       stuff
                44        35    harry     stuff/trout.c
D               44        19    ira       stuff/fish.c
                44        21    sally     stuff/things
A                0         ?     ?        stuff/things/bloo.h
                44        36    harry     stuff/things/gloo.c
</screen>
        </informalexample>

<!--
        <para>This is the <quote>long form</quote> output of
          <command>svn status</command>.  The letters in the first
          column mean the same as before, but the second column shows
          the working revision of the item.  The third and fourth
          columns show the revision in which the item last changed,
          and who changed it.</para>
-->
        <para>Dies ist das <quote>lange Format</quote> der Ausgabe von
          <command>svn status</command>.  Die Buchstaben in der ersten
          Spalte bedeuten dasselbe wie vorher, jedoch zeigt die zweite
          Spalte die Arbeitsrevision des Objektes an. Die dritte und
          vierte Spalte zeigen die Revision der letzten Änderung an
          und wer es geändert hat.</para>

<!--
        <para>None of the prior invocations to <command>svn
          status</command> contact the repository&mdash;they merely
          report what is known about the working copy items based on
          the records stored in the working copy administrative area
          and on the timestamps and contents of modified files.  But
          sometimes it is useful to see which of the items in your
          working copy have been modified in the repository since the
          last time you updated your working copy.  For
          this, <command>svn status</command> offers the
          <option>- -show-updates</option> (<option>-u</option>)
          option, which contacts the repository and adds information
          about items that are out of date:</para>
-->
        <para>Keiner der vorangegangenen Aufrufe von <command>svn
          status</command> stellt eine Verbindung zum Projektarchiv
          her &ndash; sie berichten lediglich, das, was über die
          Objekte in der Arbeitskopie aus den Aufzeichnungen im
          Verwaltungsbereich der Arbeitskopie hervorgeht, sowie aus
          den Zeitstempeln und dem Inhalt geänderter Dateien. Manchmal
          ist es jedoch dienlich, zu sehen, welche der Objekte in
          Ihrer Arbeitskopie seit Ihrer letzten Aktualisierung im
          Projektarchiv geändert wurden.  Dafür bietet <command>svn
          status</command> die Option <option>--show-updates</option>
          (<option>-u</option>), die eine Verbindung zum Projektarchiv
          herstellt, und Informationen darüber bereitstellt, was nicht
          mehr aktuell ist:</para>

        <informalexample>
          <screen>
$ svn status -u -v
M      *        44        23    sally     README
M               44        20    harry     bar.c
       *        44        35    harry     stuff/trout.c
D               44        19    ira       stuff/fish.c
A                0         ?     ?        stuff/things/bloo.h <!--
Status against revision:   46
-->
Status bezogen auf Revision:   46
</screen>
        </informalexample>

<!--
        <para>Notice in the previous example the two asterisks: if you
          were to run <userinput>svn update</userinput> at this point,
          you would receive changes to <filename>README</filename>
          and <filename>trout.c</filename>.  This tells you some very
          useful information&mdash;because one of those items is also
          one that you have locally modified (the
          file <filename>README</filename>), you'll need to update and
          get the servers changes for that file before you commit, or
          the repository will reject your commit for being out of
          date.  We discuss this in more detail later.</para>
-->
        <para>Beachten Sie die zwei Sternchen im vorangegangenen
          Beispiel: Wenn Sie an dieser Stelle <userinput>svn
          update</userinput> aufrufen würden, erhielten Sie Änderungen
          an <filename>README</filename> und
          <filename>trout.c</filename>. Das gibt Ihnen einige sehr
          wichtige Informationen: Da eins dieser Objekte auch von
          Ihnen lokal geändert wurde (die Datei
          <filename>README</filename>) müssen Sie vor der Übergabe
          aktualisieren, um die Änderungen an
          <filename>README</filename> vom Server mitzubekommen, oder
          das Projektarchiv wird Ihre Übergabe ablehnen, da sie nicht
          aktuell ist. Wir werden das später detailliert
          erörtern</para>

<!--
        <para><command>svn status</command> can display much more
          information about the files and directories in your working
          copy than we've shown here&mdash;for an exhaustive
          description of <command>svn status</command> and its output,
          run <userinput>svn help status</userinput> or see
          <xref linkend="svn.ref.svn.c.status"/> in
          <xref linkend="svn.ref"/>.</para>
-->
        <para><command>svn status</command> kann viel mehr
          Informationen über Dateien und Verzeichnisse in Ihrer
          Arbeitskopie anzeigen als wir hier gezeigt haben &ndash; für
          eine erschöpfende Beschreibung von <command>svn
          status</command> und dessen Ausgabe, rufen Sie
          <userinput>svn help status</userinput> auf oder schauen Sie
          unter <xref linkend="svn.ref.svn.c.status"/> in
          <xref linkend="svn.ref"/>.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.examine.diff">
<!--
        <title>Examine the details of your local modifications</title>
-->
        <title>Untersuchen Sie die Details Ihrer lokalen Änderungen</title>

        <indexterm>
          <primary>svn</primary>
<!--
          <secondary>subcommands</secondary>
-->
          <secondary>Unterbefehle</secondary>
          <tertiary>diff</tertiary>
        </indexterm>
        <indexterm>
<!--
          <primary>unified diff</primary>
-->
          <primary>unified-diff-Format</primary>
        </indexterm>

<!--
        <para>Another way to examine your changes is with the
          <command>svn diff</command> command, which displays
          differences in file content.  When you run <userinput>svn
          diff</userinput> at the top of your working copy with no
          arguments, Subversion will print the changes you've made to
          human-readable files in your working copy.  It displays
          those changes in <firstterm>unified diff</firstterm> format,
          a format which describes changes as <quote>hunks</quote>
          (or <quote>snippets</quote>) of a file's content where each
          line of text is prefixed with a single-character code: a
          space, which means the line was unchanged; a minus sign
          (<literal>-</literal>), which means the line was removed
          from the file; or a plus sign (<literal>+</literal>), which
          means the line was added to the file.  In the context
          of <command>svn diff</command>, those minus-sign- and
          plus-sign-prefixed lines show how the lines looked before
          and after your modifications, respectively.</para>
-->
        <para>Eine andere Möglichkeit, Ihre Änderungen zu untersuchen,
          ist es, den Befehl <command>svn diff</command> zu verwenden,
          der Unterschiede im Dateiinhalt anzeigt. Wenn Sie
          <userinput>svn diff</userinput> ganz oben in Ihrer
          Arbeitskopie ohne Argumente aufrufen, gibt Subversion
          die von Ihnen gemachten Änderungen an menschenlesbaren
          Dateien in Ihrer Arbeitskopie aus. Jene Änderungen werden in
          einem Format namens <firstterm>unified diff</firstterm>
          angezeigt, welches Änderungen als <quote>Brocken</quote>
          (oder <quote>Schnipsel</quote>) des Dateiinhalts anzeigt,
          wobei jeder Textzeile ein Zeichencode vorangestellt wird:
          ein Leerzeichen, das bedeutet, dass die Zeile nicht geändert
          wurde, ein Minus (<literal>-</literal>), das bedeutet, dass
          die Zeile aus der Datei entfernt wurde oder ein Plus
          (<literal>+</literal>), das bedeutet, dass die Zeile der
          Datei hinzugefügt wurde. Im Kontext des Befehls <command>svn
          diff</command> zeigen Ihnen diese Minus- und Pluszeilen, wie
          die Zeilen vor bzw. nach Ihren Änderungen
          aussahen.</para>

<!--
        <para>Here's an example:</para>
-->
        <para>Hier ein Beispiel:</para>

        <informalexample>
          <screen>
$ svn diff
Index: bar.c
===================================================================
--- bar.c	(revision 3)
+++ bar.c	(working copy)
@@ -1,7 +1,12 @@
+#include &lt;sys/types.h&gt;
+#include &lt;sys/stat.h&gt;
+#include &lt;unistd.h&gt;
+
+#include &lt;stdio.h&gt;

 int main(void) {
-  printf("Sixty-four slices of American Cheese...\n");
+  printf("Sixty-five slices of American Cheese...\n");
 return 0;
 }

Index: README
===================================================================
--- README	(revision 3)
+++ README	(working copy)
@@ -193,3 +193,4 @@
+Note to self:  pick up laundry.

Index: stuff/fish.c
===================================================================
--- stuff/fish.c	(revision 1)
+++ stuff/fish.c	(working copy)
-Welcome to the file known as 'fish'.
-Information on fish will be here soon.

Index: stuff/things/bloo.h
===================================================================
--- stuff/things/bloo.h	(revision 8)
+++ stuff/things/bloo.h	(working copy)
+Here is a new file to describe
+things about bloo.
</screen>
        </informalexample>

        <indexterm>
          <primary>patches</primary>
        </indexterm>
<!--
        <para>The <command>svn diff</command> command produces this
          output by comparing your working files against its pristine
          text-base.  Files scheduled for addition are displayed as
          files in which every line was added; files scheduled for
          deletion are displayed as if every line was removed from
          those files.  The output from <command>svn diff</command> is
          somewhat compatible with the <command>patch</command>
          program&mdash;more so with the <command>svn patch</command>
          subcommand introduced in Subversion 1.7.  Patch processing
          commands such as these read and apply <firstterm>patch
          files</firstterm> (or <quote>patches</quote>), which are
          files that describe differences made to one or more files.
          Because of this, you can share the changes you've made in
          your working copy with someone else without first committing
          those changes by creating a patch file from the redirected
          output of <command>svn diff</command>:</para>
-->
        <para>Der Befehl <command>svn diff</command> erzeugt diese
          Ausgabe, indem er Ihre Arbeitsdateien mit der unveränderten
          Text-Base vergleicht. Dateien, die zum Hinzufügen vorgemerkt
          sind, werden vollständig als hinzugefügter Text dargestellt,
          und Dateien, die zum Löschen vorgemerkt sind, werden
          vollständig als gelöschter Text dargestellt. Die Ausgabe von
          <command>svn diff</command> ist einigermaßen kompatibel zum
          Programm <command>patch</command> &ndash; mehr allerdings
          mit dem in Subversion 1.7 eingeführten Unterbefehl
          <command>svn patch</command>. Patch-Programme wie diese
          lesen und verwenden <firstterm>Patch-Dateien</firstterm>
          (oder <quote>Patches</quote>), wobei es sich um Dateien
          handelt, die Unterschiede an einer oder mehreren Dateien
          beschreiben.  Daher können Sie die in Ihrer Arbeitskopie
          vorgenommenen Änderungen mit jemanden teilen, ohne die
          Änderungen erst übergeben zu müssen, indem Sie aus der
          umgeleiteten Ausgabe des Befehls <command>svn diff</command>
          eine Patch-Datei erzeugen:</para>

        <informalexample>
          <screen>
$ svn diff &gt; patchfile
$
</screen>
        </informalexample>

<!--
        <para>Subversion uses its internal diff engine, which produces
          unified diff format, by default.  If you want diff output in
          a different format, specify an external diff program using
          <option>- -diff-cmd</option> and pass any additional flags
          that it needs via the <option>- -extensions</option>
          (<option>-x</option>) option.  For example, you might want
          Subversion to defer its difference calculation and display
          to the GNU <command>diff</command> program, asking that
          program to print local modifications made to the
          file <filename>foo.c</filename> in context diff format
          (another flavor of difference format) while ignoring changes
          made only to the case of the letters used in the file's
          contents:</para>
-->
        <para>Subversion verwendet seinen eingebauten
          diff-Algorithmus, der standardmäßig das unified-diff-Format
          benutzt.  Falls Sie die Ausgabe von diff in einem anderen
          Format haben möchten, geben Sie ein externes diff-Programm
          mit der <option>--diff-cmd</option>-Option an, und übergeben
          Sie ihm beliebige Flags mit der Option
          <option>--extensions</option> (<option>-x</option>). Sie
          möchten beispielsweise, dass Subversion die Berechnung und
          Anzeige der Unterschiede an das GNU-Programm
          <command>diff</command> delegiert, wobei die lokalen
          Änderungen an der Datei <filename>foo.c</filename> im
          Kontext-Format ausgegeben (einer anderen Darstellung der
          Unterschiede) und Unterschiede in Groß- und Kleinschreibung
          des Dateiinhalts ignoriert werden:</para>

        <informalexample>
          <screen>
$ svn diff --diff-cmd /usr/bin/diff -x "-i" foo.c
&hellip;
$
</screen>
        </informalexample>

      </sect3>

    </sect2>


    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.revert">
<!--
      <title>Fix Your Mistakes</title>
-->
      <title>Beheben Sie Ihre Fehler</title>

<!--
      <para>Suppose while viewing the output of <command>svn
        diff</command> you determine that all the changes you made to
        a particular file are mistakes.  Maybe you shouldn't have
        changed the file at all, or perhaps it would be easier to make
        different changes starting from scratch.  You could edit the
        file again and unmake all those changes.  You could try to
        find a copy of how the file looked before you changed it, and
        then copy its contents atop your modified version.  You
        could attempt to apply those changes to the file again in
        reverse using <userinput>patch -R</userinput>.  And there are
        probably other approaches you could take.</para>
-->
      <para>Angenommen, Sie stellen beim Ansehen der Ausgabe von
        <command>svn diff</command> fest, dass alle Änderungen, die
        Sie an einer bestimmten Datei gemacht haben, fehlerhaft waren.
        Vielleicht hätten Sie die Datei überhaupt nicht ändern sollen,
        oder es wäre einfacher, noch einmal bei Null
        anzufangen. Sie könnten die Datei erneut bearbeiten und alle
        Änderungen rückgängig machen. Sie könnten versuchen, eine
        Kopie der Datei im Ursprungszustand zu bekommen und deren
        Inhalt über Ihre Änderungen zu kopieren. Sie könnten
        versuchen, diese Änderungen erneut mit <userinput>patch
        -R</userinput> rückwärts anzuwenden. Es gibt wahrscheinlich
        noch andere Herangehensweisen, die Sie ausprobieren
        könnten.</para>

      <indexterm>
        <primary>svn</primary>
<!--
        <secondary>subcommands</secondary>
-->
        <secondary>Unterbefehle</secondary>
        <tertiary>revert</tertiary>
      </indexterm>

<!--
      <para>Fortunately in Subversion, undoing your work and starting
        over from scratch doesn't require such acrobatics.  Just use
        the <command>svn revert</command> command:</para>
-->
      <para>In Subversion bedarf das Rückgängigmachen
        und bei Null anfangen glücklicherweise nicht derartiger
        Akrobatik. Verwenden Sie einfach den Befehl <command>svn
        revert</command>:</para>

      <informalexample>
        <screen>
$ svn status README
M       README
$ svn revert README <!--
Reverted 'README'
-->
Rückgängig gemacht: »README«
$ svn status README
$
</screen>
      </informalexample>

<!--
      <para>In this example, Subversion has reverted the file to its
        premodified state by overwriting it with the pristine version
        of the file cached in the text-base area.  But note that
        <command>svn revert</command> can undo
        <emphasis>any</emphasis> scheduled operation&mdash;for
        example, you might decide that you don't want to add a new
        file after all:</para>
-->
      <para>In diesem Beispiel hat Subversion die Datei wieder so her,
        wie sie vor der Änderung war, indem sie mit der unveränderten
        Version der Datei aus dem Cache der Text-Base überschrieben
        wurde. Beachten Sie aber auch, dass <command>svn
        revert</command> <emphasis>jegliche</emphasis> vorgemerkten
        Operationen rückgängig machen kann &ndash; z.B. könnten Sie
        sich entscheiden, eine neue Datei erst gar nicht hinzufügen zu
        wollen:</para>

      <informalexample>
        <screen>
$ svn status new-file.txt
?       new-file.txt
$ svn add new-file.txt
A         new-file.txt
$ svn revert new-file.txt <!--
Reverted 'new-file.txt'
-->
Rückgängig gemacht: »new-file.txt«
$ svn status new-file.txt
?       new-file.txt
$
</screen>
      </informalexample>

<!--
      <para>Or perhaps you mistakenly removed a file from version
        control:</para>
-->
      <para>Oder vielleicht haben Sie die Datei versehentlich aus der
        Versionsverwaltung gelöscht:</para>

      <informalexample>
        <screen>
$ svn status README

$ svn delete README
D         README

$ svn revert README <!--
Reverted 'README'
-->
Rückgängig gemacht: »README«
$ svn status README
$
</screen>
      </informalexample>

<!--
      <para>The <command>svn revert</command> command offers salvation
        for imperfect people.  It can save you huge amounts of time
        and energy that would otherwise be spent manually unmaking
        changes or, worse, disposing of your working copy and checking
        out a fresh one just to have a clean slate to work with
        again.</para>
-->
      <para>Der Befehl <command>svn revert</command> bietet die
        Rettung für unvollkommene Menschen. Er kann Ihnen jede Menge
        Zeit und Energie einzusparen helfen, die ansonsten beim
        manuellen Rückgängigmachen entstanden wäre, oder noch
        schlimmer, wenn Sie Ihre Arbeitskopie durch eine frische
        hätten ersetzen müssen, um noch einmal neu anzufangen.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.resolve">
<!--
      <title>Resolve Any Conflicts</title>
-->
      <title>Lösen Sie etwaige Konflikte auf</title>

      <indexterm>
<!--
        <primary>conflicts</primary>
        <secondary>resolving</secondary>
-->
        <primary>Konflikte</primary>
        <secondary>Auflösung</secondary>
      </indexterm>

<!--
      <para>We've already seen how <userinput>svn status
        -u</userinput> can predict conflicts, but dealing with those
        conflicts is still something that remains to be done.
        Conflicts can occur any time you attempt to merge or integrate
        (in a very general sense) changes from the repository into
        your working copy.  By now you know that <command>svn
        update</command> creates exactly that sort of
        scenario&mdash;that command's very purpose is to bring your
        working copy up to date with the repository by merging all the
        changes made since your last update into your working
        copy.  So how does Subversion report these conflicts to you,
        and how do you deal with them?</para>

-->
      <para>Wir haben bereits gesehen, wie <userinput>svn status
        -u</userinput> Konflikte vorhersagen kann, jedoch müssen wir
        uns noch um diese Konflikte kümmern. Konflikte können
        jederzeit auftreten, wenn Sie versuchen, Änderungen aus dem
        Projektarchiv mit Ihrer Arbeitskopie zusammenzuführen oder zu
        integrieren (in einem sehr allgemeinen Sinn). Bis hierher
        wissen Sie, dass <command>svn update</command> genau diese Art
        von Szenario hervorruft &ndash; der eigentliche Zweck dieses
        Befehls ist es, Ihre Arbeitskopie mit dem Projektarchiv auf
        einen Stand zu bringen, indem alle Änderungen seit Ihrer
        letzten Aktualisierung mit Ihrer Arbeitskopie zusammengeführt
        werden. Wie teilt Ihnen Subversion nun diese Konflikte mit,
        und wie gehen Sie damit um?</para>

<!--
      <para>Suppose you run <userinput>svn update</userinput> and you
        see this sort of interesting output:</para>
-->
      <para>Angenommen, Sie rufen <command>svn update</command> auf
        und sehen diese interessante Ausgabe:</para>

      <informalexample>
        <screen>
$ svn update
Updating '.':
U    INSTALL
G    README <!--
Conflict discovered in 'bar.c'.
Select: (p) postpone, (df) diff-full, (e) edit,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options: 
-->
Konflikt in »bar.c« entdeckt.
Auswahl: (p) zurückstellen, (df) voller Diff, (e) editieren,
         (mc) eigene konfliktbehaftete Datei, (tc) fremde konfliktbehaftete Datei,
         (s) alle Optionen anzeigen: 
</screen>
      </informalexample>

<!--
      <para>The <computeroutput>U</computeroutput> (which stands for
        <quote>Updated</quote>) and <computeroutput>G</computeroutput>
        (for <quote>merGed</quote>) codes are no cause for concern;
        those files cleanly absorbed changes from the repository.  A
        file marked with <computeroutput>U</computeroutput> contains
        no local changes but was updated with changes from the
        repository.  One marked with
        <computeroutput>G</computeroutput> had local changes to begin
        with, but the changes coming from the repository didn't
        overlap with those local changes.</para>
-->
      <para>Die Codes <computeroutput>U</computeroutput> und
        <computeroutput>G</computeroutput> sind kein Grund zur
        Beunruhigung; diese Dateien haben die Änderungen aus dem
        Projektarchiv sauber aufgenommen. Eine mit
        <computeroutput>U</computeroutput> markierte Datei enthält
        keine lokalen Änderungen, wurden jedoch mit Änderungen aus dem
        Projektarchiv aktualisiert.  Eine mit
        <computeroutput>G</computeroutput> markierte Datei enthielt
        zwar lokale Änderungen, die Änderungen aus dem Projektarchiv
        haben sich aber nicht damit überschnitten.</para>

<!--
      <para>It's the next few lines which are interesting.  First,
        Subversion reports to you that in its attempt to merge
        outstanding server changes into the
        file <filename>bar.c</filename>, it has detected that some of
        those changes clash with local modifications you've made to
        that file in your working copy but have not yet committed.
        Perhaps someone has changed the same line of text you also
        changed.  Whatever the reason, Subversion instantly flags this
        file as being in a state of conflict.  It then asks you what
        you want to do about the problem, allowing you to
        interactively choose an action to take toward resolving the
        conflict.  The most commonly used options are displayed, but
        you can see all of the options by
        typing <replaceable>s</replaceable>:</para>
-->
      <para>Die nächsten paar Zeilen sind allerdings interessant.
        Zunächst teilt Ihnen Subversion mit, dass es beim Versuch,
        ausstehende Server-Änderungen in die Datei
        <filename>bar.c</filename> hineinzubringen, festgestellt hat,
        dass einige dieser Änderungen mit lokalen Änderungen
        kollidieren, die Sie an dieser Datei in Ihrer Arbeitskopie
        vorgenommen, jedoch noch nicht übergeben haben. Vielleicht hat
        jemand dieselbe Textzeile wie Sie geändert. Wie dem auch sei,
        Subversion markiert diese Datei umgehend als konfliktbehaftet.
        Dann fragt es Sie, wie Sie mit diesem Problem umgehen möchten,
        indem es Ihnen interaktiv einen Bearbeitungsschritt zur
        Auflösung des Konfliktes anbietet. Die am häufigsten
        verwendeten Optionen werden angezeigt, aber Sie können auch
        alle Optionen sehen, wenn Sie <replaceable>s</replaceable>
        eintippen:</para>
      <informalexample>
        <screen>
&hellip; <!--
Select: (p) postpone, (df) diff-full, (e) edit,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options: s

  (e)  edit             - change merged file in an editor
  (df) diff-full        - show all changes made to merged file
  (r)  resolved         - accept merged version of file

  (dc) display-conflict - show all conflicts (ignoring merged version)
  (mc) mine-conflict    - accept my version for all conflicts (same)
  (tc) theirs-conflict  - accept their version for all conflicts (same)

  (mf) mine-full        - accept my version of entire file (even non-conflicts)
  (tf) theirs-full      - accept their version of entire file (same)

  (p)  postpone         - mark the conflict to be resolved later
  (l)  launch           - launch external tool to resolve conflict
  (s)  show all         - show this list

Select: (p) postpone, (df) diff-full, (e) edit,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options:
-->
Auswahl: (p) zurückstellen, (df) voller Diff, (e) editieren,
         (mc) eigene konfliktbehaftete Datei, (tc) fremde konfliktbehaftete Datei,
         (s) alle Optionen anzeigen: s

  (e)  editieren          - zusammengeführte Datei in einem Editor ändern
  (df) voller Diff        - alle Änderungen in der zusammengeführten Datei anzeigen
  (r)  aufgelöst          - akzeptieren der zusammengeführten Version der Datei
  (dc) Konflikte anzeigen - alle Konflikte anzeigen (die zusammengeführte Version
                            ignorieren)
  (mc) mine-conflict      - eigene Version für alle Konflikte akzeptieren (das selbe)
  (tc) theirs-conflict    - fremde Version für alle Konflikte akzeptieren (das selbe)

  (mf) volle eigene Datei - die eigene Version der kompletten Datei akzeptieren
                            (selbst Nicht-Konflikte)
  (tf) volle fremde Datei - die fremde Version der kompletten Datei akzeptieren
                            (das selbe)
  (p)  zurückstellen      - den Konflikt erst später auflösen
  (l)  starten            - Starten eines externen Programms zur Konfliktauflösung
  (s)  alle anzeigen      - diese Liste anzeigen

Auswahl: (p) zurückstellen, (df) voller Diff, (e) editieren,
         (mc) eigene konfliktbehaftete Datei, (tc) fremde konfliktbehaftete Datei,
         (s) alle Optionen anzeigen:
</screen>
      </informalexample>

<!--
      <para>Let's briefly review each of these options before we go
        into detail on what each option means.</para>
-->
      <para>Bevor wir im Detail erklären, was jede Option bedeutet,
        gehen wir noch mal eben die Optionen durch.</para>

      <variablelist>
        <varlistentry>
<!--
          <term><computeroutput>(e)  edit</computeroutput></term>
-->
          <term><computeroutput>(e)  editieren</computeroutput></term>
          <listitem>

<!--
            <para>Open the file in conflict with your favorite editor,
              as set in the environment variable
              <literal>EDITOR</literal>.</para>
-->
            <para>Die Konfliktdatei im bevorzugten Editor, wie in
              der Umgebungsvariablen <literal>EDITOR</literal>
              angegeben, öffnen.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
<!--
          <term><computeroutput>(df) diff-full</computeroutput></term>
-->
          <term><computeroutput>(df) voller Diff</computeroutput></term>
          <listitem>

<!--
            <para>Display the differences between the base revision
              and the conflicted file itself in unified diff format.</para>
-->
            <para>Die Unterschiede zwischen der Basisrevision und der
              Konfliktdatei im unified-diff-Format anzeigen.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
<!--
          <term><computeroutput>(r)  resolved</computeroutput></term>
-->
          <term><computeroutput>(r)  aufgelöst</computeroutput></term>
          <listitem>

<!--
            <para>After editing a file, tell
              <command>svn</command> that you've resolved the
              conflicts in the file and that it should accept the
              current contents&mdash;basically that you've
              <quote>resolved</quote> the conflict.</para>
-->
            <para>Nach dem Bearbeiten einer Datei teilen Sie 
              <command>svn</command> mit, dass Sie die Konflikte in
              der Datei aufgelöst haben und der aktuelle Inhalt
              übernommen werden soll.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
<!--
          <term><computeroutput>(dc) display-conflict</computeroutput></term>
-->
          <term><computeroutput>(dc) Konflikte anzeigen</computeroutput></term>
          <listitem>
<!--
            <para>Display all conflicting regions of the file,
              ignoring changes which were successfully merged.</para>
-->
            <para>Zeigt alle konfliktbehafteten Regionen der Datei an,
              wobei erfolgreich zusammengeführte Änderungen ignoriert
              werden.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>(mc) mine-conflict</computeroutput></term>
          <listitem>

<!--
            <para>Discard any newly received changes from the server
              which conflict with your local changes to the file under
              review.  However, accept and merge all non-conflicting
              changes received from the server for that file.</para>
-->
            <para>Die neuen vom Server erhaltenen Änderungen
              verwerfen, die in Konflikt mit Ihren lokalen Änderungen
              an der zu überprüfenden Datei stehen. Jedoch werden alle
              nicht in Konflikt stehenden Änderungen vom Server für
              diese Datei angenommen und zusammengeführt.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>(tc) theirs-conflict</computeroutput></term>
          <listitem>
<!--
            <para>Discard any local changes which conflict with
              incoming changes from the server for the file under
              review.  However, preserve all non-conflicting local
              changes to that file.</para>
-->
            <para>Alle lokalen Änderungen an der zu überprüfenden
              Datei verwerfen, die in Konflikt zu Änderungen vom
              Server stehen. Jedoch werden alle nicht in Konflikt
              stehenden lokalen Änderungen an dieser Datei
              beibehalten.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
<!--
          <term><computeroutput>(mf) mine-full</computeroutput></term>
-->
          <term><computeroutput>(mf) volle eigene Datei</computeroutput></term>
          <listitem>
<!--
            <para>Discard all newly received changes from the server
              for the file under review, but preserve all your local
              changes for that file.</para>
-->
            <para>Alle neuen vom Server erhaltenen Änderungen für die
              zu überprüfende Datei verwerfen, aber alle Ihre lokalen
              Änderungen an dieser Datei beibehalten.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
<!--
          <term><computeroutput>(tf) theirs-full</computeroutput></term>
-->
          <term><computeroutput>(tf) volle fremde Datei</computeroutput></term>
          <listitem>
<!--
            <para>Discard all your local changes to the file under
              review and use only the newly received changes from the
              server for that file.</para>
-->
            <para>Alle Ihre lokalen Änderungen für die zu überprüfende
              Datei verwerfen und nur die neuen vom Server erhaltenen
              Änderungen für diese Datei verwenden.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
<!--
          <term><computeroutput>(p)  postpone</computeroutput></term>
-->
          <term><computeroutput>(p)  zurückstellen</computeroutput></term>
          <listitem>
<!--
            <para>Leave the file in a conflicted state for you to
              resolve after your update is complete.</para>
-->
            <para>Die Datei im Konfliktzustand lassen, um nach
              Abschluss der Aktualisierung die Konfliktauflösung
              durchzuführen.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
<!--
          <term><computeroutput>(l)  launch</computeroutput></term>
-->
          <term><computeroutput>(l)  starten</computeroutput></term>
          <listitem>

<!--
            <para>Launch an external program to perform the conflict
              resolution.  This requires a bit of preparation
              beforehand.</para>
-->
            <para>Ein externes Programm zur Konfliktauflösung starten.
              Das setzt Vorbereitungen voraus.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
<!--
          <term><computeroutput>(s)  show all</computeroutput></term>
-->
          <term><computeroutput>(s)  alle anzeigen</computeroutput></term>
          <listitem>

<!--
            <para>Show the list of all possible commands you can use
              in interactive conflict resolution.</para>
-->
            <para>Die Liste aller bei der interaktiven
              Konfliktauflösung möglichen Befehle anzeigen.</para>

          </listitem>
        </varlistentry>

      </variablelist>

<!--
      <para>We'll cover these commands in more detail now, grouping
        them together by related functionality.</para>
-->
      <para>Wir werden diese Befehle nun detaillierter behandeln,
        wobei sie nach Funktionalität gruppiert werden.</para>


      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.diff">

<!--
        <title>Viewing conflict differences interactively</title>
-->
        <title>Interaktive Begutachtung der Konflikte</title>

        <indexterm>
<!--
          <primary>conflicts</primary>
          <secondary>reviewing</secondary>
-->
          <primary>Konflikte</primary>
          <secondary>Überprüfung</secondary>
        </indexterm>

<!--
        <para>Before deciding how to attack a conflict interactively,
          odds are that you'd like to see exactly what is in conflict.
          Two of the commands available at the interactive conflict
          resolution prompt can assist you here.  The first is
          the <quote>diff-full</quote> command
          (<userinput>df</userinput>), which displays all the local
          modifications to the file in question plus any conflict
          regions:</para>
-->
        <para>Bevor Sie entscheiden, wie Sie einen Konflikt beseitigen
          wollen, wollen Sie wahrscheinlich genau sehen, worin der
          Konflikt besteht. Zwei der bei der interaktiven Aufforderung
          zur Verfügung stehenden Befehle können Ihnen dabei helfen.
          Der erste ist der Befehl <quote>voller Diff</quote>
          (<userinput>df</userinput>), der alle lokalen Änderungen an
          der zu begutachtenden Datei und die in Konflikt stehenden
          Regionen anzeigt:</para>

        <informalexample>
          <screen>
&hellip; <!--
Select: (p) postpone, (df) diff-full, (e) edit,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options: df
-->
Auswahl: (p) zurückstellen, (df) voller Diff, (e) editieren,
         (mc) eigene konfliktbehaftete Datei, (tc) fremde konfliktbehaftete Datei,
         (s) alle Optionen anzeigen: df
--- .svn/text-base/sandwich.txt.svn-base      Tue Dec 11 21:33:57 2007
+++ .svn/tmp/tempfile.32.tmp     Tue Dec 11 21:34:33 2007
@@ -1 +1,5 @@
-Just buy a sandwich.
+&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
+Go pick up a cheesesteak.
+=======
+Bring me a taco!
+&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r32
&hellip;
</screen>
        </informalexample>

<!--
        <para>The first line of the diff content shows the previous
          contents of the working copy (the <literal>BASE</literal>
          revision), the next content line is your change, and the
          last content line is the change that was just received from
          the server (<emphasis>usually</emphasis> the
          <literal>HEAD</literal> revision).</para>
-->
        <para>Die erste Zeile des diff-Inhalts zeigt den vorherigen
          Inhalt der Arbeitskopie (die
          <literal>BASE</literal>-Revision), die nächste Zeile
          beinhaltet Ihre Änderung und die letzte Zeile ist die
          Änderung, die soeben vom Server empfangen worden ist
          (<emphasis>gewöhnlich</emphasis> die
          <literal>HEAD</literal>-Revision).</para>

<!--
        <para>The second command is similar to the first, but
          the <quote>display-conflict</quote>
          (<userinput>dc</userinput>) command shows only the conflict
          regions, not all the changes made to the file.
          Additionally, this command uses a slightly different display
          format for the conflict regions which allows you to more
          easily compare the file's contents in those regions as they
          would appear in each of three states: original and unedited;
          with your local changes applied and the server's conflicting
          changes ignored; and with only the server's incoming changes
          applied and your local, conflicting changes reverted.</para>

-->
        <para>Der zweite Befehl ist ähnlich wie der erste, jedoch
          zeigt der Befehl <quote>Konflikte anzeigen</quote>
          (<userinput>dc</userinput>) nur die in Konflikt stehenden
          Regionen an statt aller Änderungen an der Datei. Darüber
          hinaus verwendet dieser Befehl ein etwas anderes
          Darstellungsformat für die Konfliktregionen, das es Ihnen
          auf einfache Weise erlaubt, den Dateiinhalt dieser Regionen
          in den drei möglichen Zuständen zu vergleichen: original und
          unbearbeitet, mit Ihren Änderungen, wobei die in Konflikt
          stehenden Änderungen vom Server ignoriert werden und mit den
          Änderungen vom Server, wobei Ihre lokalen Änderungen
          rückgängig gemacht wurden.</para>

<!--
        <para>After reviewing the information provided by these
          commands, you're ready to move on to the next action.</para>

-->
        <para>Nachdem Sie die durch diesen Befehl bereitgestellten
          Informationen geprüft haben, können Sie den nächsten Schritt
          in Angriff nehmen.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.resolve">

<!--
        <title>Resolving conflict differences interactively</title>
-->
        <title>Interaktive Konfliktauflösung</title>

        <indexterm>
<!--
          <primary>conflicts</primary>
          <secondary>resolution</secondary>
          <tertiary>interactive</tertiary>
-->
          <primary>Konflikte</primary>
          <secondary>Auflösung</secondary>
          <tertiary>interaktiv</tertiary>
        </indexterm>

<!--
        <para>There are several different ways to resolve conflicts
          interactively&mdash;two of which allow you to selectively
          merge and edit changes, the rest of which allow you to
          simply pick a version of the file and move along.</para>
-->
        <para>Es gibt mehrere unterschiedliche Wege, um Konflikte
          interaktiv aufzulösen &ndash; von denen Ihnen zwei erlauben,
          Änderungen selektiv zusammenzuführen und zu editieren und
          die restlichen, die es Ihnen erlauben, einfach eine Version
          der Datei auszuwählen und weiterzumachen.</para>

<!--
        <para>If you wish to choose some combination of your local
          changes, you can use the <quote>edit</quote> command
          (<userinput>e</userinput>) to manually edit the file with
          conflict markers in a text editor (configured per the
          instructions in <xref linkend="svn.advanced.externaleditors"
          />).  After you've edited the file, if you're satisfied with
          the changes you've made, you can tell Subversion that the
          edited file is no longer in conflict by using
          the <quote>resolved</quote> command
          (<literal>r</literal>).</para>
-->
        <para>Falls Sie eine beliebige Kombination Ihrer lokalen
          Änderungen auswählen wollen, können Sie den Befehl
          <quote>editieren</quote> (<userinput>e</userinput>)
          verwenden, um die Datei mit den Konfliktmarken manuell in
          einem Texteditor (nach den Anweisungen in <xref
          linkend="svn.advanced.externaleditors"/> konfiguriert)
          bearbeiten. Nachdem Sie die Datei bearbeitet haben und mit
          Ihren Änderungen zufrieden sind, können Sie Subversion
          mitteilen, das sich die bearbeitete Datei nicht mehr im
          Konfliktzustand befindet, indem Sie den Befehl
          <quote>resolved</quote> (<literal>r</literal>)
          benutzen.</para>

<!--
        <para>Regardless of what your local Unix snob will likely tell
          you, editing the file by hand in your favorite text editor
          is a somewhat low-tech way of remedying conflicts (see
          <xref linkend="svn.tour.cycle.resolve.byhand" /> for a
          walkthrough).  For this reason, Subversion provides
          the <quote>launch</quote> resolution command
          (<userinput>l</userinput>) to fire up a fancy graphical
          merge tool instead (see
          <xref linkend="svn.advanced.externaldifftools.merge"
          />).</para>

-->
        <para>Egal, was Ihnen wahrscheinlich Ihr Unix-Snob erzählen
          wird, die manuelle Bearbeitung der Datei in Ihrem
          Lieblings-Texteditor ist die Low-Tech Variante zur
          Beseitigung von Konflikten (siehe <xref
          linkend="svn.tour.cycle.resolve.byhand" /> für die
          Vorgehensweise). Aus diesem Grund bietet Subversion den
          Befehl <quote>starten</quote> (<userinput>l</userinput>) zum
          Starten eines schicken graphischen Werkzeugs zum
          Zusammenführen (siehe <xref
          linkend="svn.advanced.externaldifftools.merge"/>).</para>

<!--
        <para>If you decide that you don't need to merge any changes,
          but just want to accept one version of the file or the
          other, you can either choose your changes (a.k.a.
          <quote>mine</quote>) by using the <quote>mine-full</quote>
          command (<userinput>mf</userinput>) or choose theirs by using the
          <quote>theirs-full</quote> command
          (<userinput>tf</userinput>).</para>
-->
        <para>Falls Sie entscheiden, dass Sie keine Änderungen
          zusammenzuführen brauchen, sondern lediglich eine der beiden
          Dateiversionen akzeptieren wollen, können Sie entweder Ihre
          Änderungen (auch <quote>meine</quote>) mit dem
          <quote>mine-full</quote>-Befehl (<userinput>mf</userinput>)
          oder die der Anderen mit dem <quote>theirs-full</quote>-Befehl
          (<userinput>tf</userinput>) auswählen.</para>

<!--
        <para>Finally, there is also a pair of compromise options
          available.  The <quote>mine-conflict</quote>
          (<userinput>mc</userinput>)
          and <quote>theirs-conflict</quote>
          (<userinput>tc</userinput>) commands instruct Subversion to
          select your local changes or the server's incoming changes,
          respectively, as the <quote>winner</quote> for all conflicts
          in the file.  But, unlike the <quote>mine-full</quote>
          and <quote>theirs-full</quote> commands, these commands
          preserve both your local changes and changes received from
          the server in regions of the file where no conflict was
          detected.</para>

-->
        <para>Zum Schluss gibt es noch ein Paar von Kompromissoptionen.
          Die Befehle <quote>mine-conflict</quote>
          (<userinput>mc</userinput>)
          und <quote>theirs-conflict</quote>
          (<userinput>tc</userinput>) sagen Subversion, es soll Ihre
          lokalen Änderungen bzw. die Änderungen vom Server zum
          Auflösen aller Konflikte innerhalb der Datei heranziehen.
          Im Gegensatz zu den Befehlen <quote>volle eigene
          Datei</quote> und <quote>volle fremde Datei</quote> bewahren
          beide Befehle jedoch Ihre lokalen Änderungen und die
          Änderungen vom Server an den Stellen der Datei, an denen
          keine Konflikte entdeckt wurden.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.pending">

<!--
        <title>Postponing conflict resolution</title>
-->
        <title>Aufschieben der Konfliktauflösung</title>

        <indexterm>
<!--
          <primary>conflicts</primary>
          <secondary>resolution</secondary>
          <tertiary>postponing</tertiary>
-->
          <primary>Konflikte</primary>
          <secondary>Auflösung</secondary>
          <tertiary>aufschieben</tertiary>
        </indexterm>

<!--
        <para>This may sound like an appropriate section for avoiding
          marital disagreements, but it's actually still about
          Subversion, so read on.  If you're doing an update and
          encounter a conflict that you're not prepared to review or
          resolve, you can type <userinput>p</userinput> to postpone
          resolving a conflict on a file-by-file basis when you run
          <userinput>svn update</userinput>.  If you know in advance
          that you don't want to resolve any conflicts interactively,
          you can pass the <option>- -non-interactive</option> option
          to <command>svn update</command>, and any file in conflict
          will be marked with a <computeroutput>C</computeroutput>
          automatically.</para>
-->
        <para>Das hört sich vielleicht an wie ein passender Abschnitt
          zur Vermeidung von Ehestreitigkeiten, doch es geht immer
          noch um Subversion; also lesen Sie weiter.  Falls Sie eine
          Aktualisierung vornehmen und ein Konflikt auftaucht, den Sie
          nicht begutachten oder auflösen können, ermöglicht Ihnen das
          Eingeben von <userinput>p</userinput> die Konfliktauflösung
          Datei für Datei aufzuschieben, wenn Sie <userinput>svn
          update</userinput> aufrufen. Falls Sie bereits vorher
          wissen, dass Sie aktualisieren wollen, ohne Konflikte
          aufzulösen, können Sie die Option
          <option>--non-interactive</option> an <command>svn
          update</command> übergeben, und jede Datei mit Konflikten
          wird automatisch mit einem
          <computeroutput>C</computeroutput> gekennzeichnet.</para>

<!--
        <para>The <computeroutput>C</computeroutput>
          (for <quote>Conflicted</quote>) means that the changes from the
          server overlapped with your own, and now you have to
          manually choose between them after the update has completed.
          When you postpone a conflict resolution,
          <command>svn</command> typically does three things to assist
          you in noticing and resolving that conflict:</para>
-->
        <para>Das <computeroutput>C</computeroutput> (für
          <quote>Conflicted</quote>) bedeutet, dass
          die Änderungen vom Server sich mit Ihren eigenen
          überschneiden, und Sie nach Abschluss der Aktualisierung
          manuell aus den Änderungen wählen müssen. Wenn Sie eine
          Konfliktauflösung verschieben, macht <command>svn</command>
          typischerweise drei Dinge, um Ihnen bei der
          Konfliktauflösung zu helfen:</para>

        <itemizedlist>

          <indexterm>
<!--
            <primary>conflicts</primary>
            <secondary>conflict markers</secondary>
-->
            <primary>Konflikte</primary>
            <secondary>Konfliktmarken</secondary>
          </indexterm>

          <listitem>
<!--
            <para>Subversion prints a <computeroutput>C</computeroutput>
              during the update and remembers that the file is in a
              state of conflict.</para>
-->
            <para>Subversion gibt ein
              <computeroutput>C</computeroutput> während der
              Aktualisierung aus und merkt sich, dass die Datei in
              einem Konfliktzustand ist.</para>
          </listitem>

          <listitem>
<!--
            <para>If Subversion considers the file to be mergeable, it
              places <firstterm>conflict
              markers</firstterm>&mdash;special strings of text that
              delimit the <quote>sides</quote> of the
              conflict&mdash;into the file to visibly demonstrate the
              overlapping areas.  (Subversion uses the
              <literal>svn:mime-type</literal> property to decide whether a
              file is capable of contextual, line-based merging.  See
              <xref linkend="svn.advanced.props.special.mime-type"/>
              to learn more.)</para>
-->
            <para>Falls Subversion die Datei als geeignet zum
              Zusammenführen ansieht, fügt es
              <firstterm>Konfliktmarken</firstterm> &ndash; besondere
              Zeichenketten, die die Konfliktregion begrenzen &ndash;
              in die Datei ein, um die überlappenden Bereiche
              besonders hervorzuheben.  (Subversion verwendet die Eigenschaft
              <literal>svn:mime-type</literal>, um
              festzustellen, ob sich die Datei kontextuell zeilenweise
              zusammenführen lässt. Siehe <xref
              linkend="svn.advanced.props.special.mime-type"/>, um
              mehr zu erfahren.)</para>
          </listitem>

          <listitem>
<!--
            <para>For every conflicted file, Subversion places three
              extra unversioned files in your working copy:</para>
-->
            <para>Für jede Datei mit Konflikten stellt Subversion drei
              zusätzliche unversionierte Dateien in Ihre
              Arbeitskopie:</para>

            <variablelist>

              <varlistentry>
                <term><filename>filename.mine</filename></term>
                <listitem>
<!--
                  <para>This is the file as it existed in your working
                    copy before you began the update process.  It
                    contains any local modifications you had made to
                    the file up to that point.  (If Subversion
                    considers the file to be unmergeable,
                    the <filename>.mine</filename> file isn't created,
                    since it would be identical to the working
                    file.)</para>
-->
                  <para>Dies ist die Datei aus der Arbeitskopie bevor
                    Sie die Aktualisierung begannen.  Diese Datei beinhaltet
                    alle von Ihnen bis dahin vorgenommenen lokalen Änderungen.
                    (Falls Subversion diese Datei als nicht-zusammenführbar
                    erachtet, wird die <filename>.mine</filename>-Datei nicht
                    erstellt, da sie identisch mit der Datei der Arbeitskopie
                    wäre.)</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><filename>filename.r<replaceable>OLDREV</replaceable>
                      </filename></term>
                <listitem>
<!--
                  <para>This is the file as it existed in the
                    <literal>BASE</literal> revision&mdash;that is,
                    the unmodified revision of the file in your
                    working copy <emphasis>before</emphasis> you began
                    the update process&mdash;where
                    <replaceable>OLDREV</replaceable> is that base
                    revision number.</para>
-->
                  <para>Dies ist die Datei, wie sie in der
                    <literal>BASE</literal>-Revision aussah, d.h., die
                    unmodifizierte Revision der Datei in Ihrer
                    Arbeitskopie <emphasis>bevor</emphasis> Sie die
                    Aktualisierung begonnen haben, wobei
                    <replaceable>OLDREV</replaceable> die
                    Nummer der <literal>BASE</literal>-Revision
                    ist.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><filename>filename.r<replaceable>NEWREV</replaceable>
                      </filename></term>
                <listitem>
<!--
                  <para>This is the file that your Subversion client
                    just received from the server via the update of
                    your working copy, where
                    <replaceable>NEWREV</replaceable> corresponds to
                    the revision number to which you were updating
                    (<literal>HEAD</literal>, unless otherwise
                    requested).</para>
-->
                  <para>Dies ist die Datei, die Ihr Subversion-Client
                    soeben durch die Aktualisierung Ihrer Arbeitskopie
                    vom Server erhalten hat, wobei
                    <replaceable>NEWREV</replaceable> der
                    Revisionsnummer entspricht, auf der Sie
                    aktualisiert haben (<literal>HEAD</literal>, falls
                    nichts anderes angegeben wurde).</para>
                </listitem>
              </varlistentry>

            </variablelist>
          </listitem>

        </itemizedlist>

<!--
        <para>For example, Sally makes changes to the file
          <filename>sandwich.txt</filename>, but does not yet commit
          those changes.  Meanwhile, Harry commits changes to that
          same file.  Sally updates her working copy before committing
          and she gets a conflict, which she postpones:</para>
-->
        <para>Beispielsweise ändert Sally die Datei
          <filename>sandwich.txt</filename>, übergibt diese Änderungen
          jedoch noch nicht. In der Zwischenzeit übergibt Harry
          Änderungen an derselben Datei. Sally aktualisiert Ihre
          Arbeitskopie vor der Übergabe und bekommt einen Konflikt,
          den sie verschiebt:</para>

        <informalexample>
          <screen>
$ svn update
Updating '.':
Conflict discovered in 'sandwich.txt'.  <!--
Select: (p) postpone, (df) diff-full, (e) edit,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options: p
-->
Konflikt in »sandwich.txt« entdeckt.
Auswahl: (p) zurückstellen, (df) voller Diff, (e) editieren,
         (mc) eigene konfliktbehaftete Datei, (tc) fremde konfliktbehaftete Datei
         (s) alle Optionen anzeigen: p
C    sandwich.txt <!--
Updated to revision 2.
Summary of conflicts:
  Text conflicts: 1
-->
Aktualisiert zu Revision 2.
Konfliktübersicht:
  Textkonflikte: 1
$ ls -1
sandwich.txt
sandwich.txt.mine
sandwich.txt.r1
sandwich.txt.r2
</screen>
        </informalexample>

<!--
        <para>At this point, Subversion will <emphasis>not</emphasis>
          allow Sally to commit the file
          <filename>sandwich.txt</filename> until the three temporary
          files are removed:</para>
-->
        <para>An dieser Stelle erlaubt Subversion Sally
          <emphasis>nicht</emphasis>, die Datei
          <filename>sandwich.txt</filename> an das Projektarchiv zu
          übergeben, solange die drei temporären Dateien nicht
          entfernt werden:</para>

        <informalexample>
          <screen>
$ svn commit -m "Add a few more things" <!--
svn: E155015: Commit failed (details follow):
svn: E155015: Aborting commit: '/home/sally/svn-work/sandwich.txt' remains in conflict
-->
svn: E155015: Übertragen schlug fehl (Details folgen):
svn: E155015: Übertragung abgebrochen: »/home/sally/svn-work/sandwich.txt« bleibt im Konflikt
</screen>
        </informalexample>

<!--
        <para>If you've postponed a conflict, you need to resolve the
          conflict before Subversion will allow you to commit your
          changes.  You'll do this with the <command>svn
          resolve</command> command and one of several arguments to
          the <option>- -accept</option> option.</para>
-->
        <para>Falls Sie eine Konfliktauflösung aufgeschoben haben,
          müssen Sie den Konflikt auflösen, bevor Ihnen Subversion
          erlaubt, Ihre Änderungen in das Projektarchiv einzustellen. Sie
          werden dafür den <command>svn resolve</command>-Befehl mit
          einem von mehreren Argumenten für die
          <option>--accept</option>-Option aufrufen.</para>

<!--
        <para>If you want to choose the version of the file that you
          last checked out before making your edits, choose
          the <replaceable>base</replaceable> argument.</para>
-->
        <para>Falls Sie die Dateiversion vor Ihren Änderungen haben
          möchten, wählen Sie das
          <replaceable>base</replaceable>-Argument.</para>

<!--
        <para>If you want to choose the version that contains only
          your edits, choose the <replaceable>mine-full</replaceable>
          argument.</para>
-->
        <para>Falls Sie die Version möchten, die nur Ihre Änderungen
          enthält, wählen Sie das
          <replaceable>mine-full</replaceable>-Argument.</para>

<!--
        <para>If you want to choose the version that your most recent
          update pulled from the server (and thus discarding your
          edits entirely), choose
          the <replaceable>theirs-full</replaceable> argument.</para>
-->
        <para>Falls Sie die Version möchten, die Ihre letzte
          Aktualisierung vom Server gezogen hat (und somit Ihre
          Änderungen vollständig verwerfen wollen), wählen Sie das
          Argument <replaceable>theirs-full</replaceable>.</para>

<!--
        <para>However, if you want to pick and choose from your
          changes and the changes that your update fetched from the
          server, merge the conflicted text <quote>by hand</quote> (by
          examining and editing the conflict markers within the file)
          and then choose the <replaceable>working</replaceable>
          argument.</para>
-->
        <para>Wenn Sie jedoch frei aus Ihren Änderungen und den
          Änderungen vom Server wählen möchten, führen Sie den
          konfliktbehafteten Text <quote>händisch</quote> zusammen
          (indem Sie die Konfliktmarken in der Datei begutachten und
          editieren) und wählen das
          <replaceable>working</replaceable>-Argument.</para>

<!--
        <para><command>svn resolve</command> removes the three
          temporary files and accepts the version of the file that you
          specified with the <option>- -accept</option> option, and
          Subversion no longer considers the file to be in a state of
          conflict:</para>
-->
        <para><command>svn resolve</command> entfernt die drei
          temporären Dateien und akzeptiert die Version, die Sie mit
          der <option>--accept</option>-Option angeben. Subversion
          betrachtet die Datei nun als nicht mehr
          konfliktbehaftet:</para>

        <informalexample>
          <screen>
$ svn resolve --accept working sandwich.txt <!--
Resolved conflicted state of 'sandwich.txt'
-->
Konflikt von »sandwich.txt« aufgelöst
</screen>
        </informalexample>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.byhand">
<!--
        <title>Merging conflicts by hand</title>
-->
        <title>Manuelle Konfliktauflösung</title>

        <indexterm>
<!--
          <primary>conflicts</primary>
          <secondary>resolution</secondary>
          <tertiary>manual</tertiary>
-->
          <primary>Konflikte</primary>
          <secondary>Auflösung</secondary>
          <tertiary>manuell</tertiary>
        </indexterm>

<!--
        <para>Merging conflicts by hand can be quite intimidating the
          first time you attempt it, but with a little practice, it
          can become as easy as falling off a bike.</para>
-->
        <para>Das manuelle Auflösen von Konflikten kann ganz
          schön einschüchternd sein, wenn Sie es das erste Mal
          versuchen; jedoch kann es mit etwas Übung so leicht werden,
          wie vom Fahrrad zu fallen.</para>

<!--
        <para>Here's an example.  Due to a miscommunication, you and
          Sally, your collaborator, both edit the file
          <filename>sandwich.txt</filename> at the same time.  Sally
          commits her changes, and when you go to update your working
          copy, you get a conflict and you're going to have to edit
          <filename>sandwich.txt</filename> to resolve the conflict.
          First, let's take a look at the file:</para>
-->
        <para>Hier ist ein Beispiel. Aufgrund einer schlechten Absprache
          bearbeiten Sie und Ihre Mitarbeiterin Sally gleichzeitig die
          Datei <filename>sandwich.txt</filename>.  Sally übergibt
          ihre Änderungen an das Projektarchiv, und sobald Sie versuchen,
          Ihre Arbeitskopie zu aktualisieren, erhalten Sie einen
          Konflikt und müssen <filename>sandwich.txt</filename>
          bearbeiten, um den Konflikt aufzulösen. Zunächst wollen wir
          uns die Datei einmal ansehen:</para>

        <informalexample>
          <screen>
$ cat sandwich.txt
Top piece of bread
Mayonnaise
Lettuce
Tomato
Provolone
&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Salami
Mortadella
Prosciutto
=======
Sauerkraut
Grilled Chicken
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
Creole Mustard
Bottom piece of bread
</screen>
        </informalexample>

<!--
        <para>The strings of less-than signs, equals signs, and
          greater-than signs are conflict markers and are not part of
          the actual data in conflict.  You generally want to ensure
          that those are removed from the file before your next
          commit.  The text between the first two sets of markers is
          composed of the changes you made in the conflicting
          area:</para>
-->
        <para>Die Zeichenketten aus Kleiner-als-Zeichen,
          Gleichheitszeichen und Größer-als-Zeichen sind
          Konfliktmarken und gehören nicht zu den eigentlichen Daten,
          die in Konflikt stehen. Im Allgemeinen werden Sie
          sicherstellen wollen, dass die Konflikte aus der Datei
          entfernt werden, bevor sie das nächste Mal eine Übergabe
          durchführen. Der Text zwischen den ersten beiden Marken
          besteht aus den Änderungen, die Sie im Konfliktbereich
          vorgenommen haben:</para>

        <informalexample>
          <screen>
&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Salami
Mortadella
Prosciutto
=======
</screen>
        </informalexample>

<!--
        <para>The text between the second and third sets of conflict
          markers is the text from Sally's commit:</para>
-->
        <para>Der Text zwischen der zweiten und der dritten Marke ist
          der Text aus Sallys Übergabe:</para>

        <informalexample>
          <screen>
=======
Sauerkraut
Grilled Chicken
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
</screen>
        </informalexample>

<!--
        <para>Usually you won't want to just delete the conflict
          markers and Sally's changes&mdash;she's going to be awfully
          surprised when the sandwich arrives and it's not what she
          wanted.  This is where you pick up the phone or walk across
          the office and explain to Sally that you can't get
          sauerkraut from an Italian deli.<footnote><para>And if you
          ask them for it, they may very well ride you out of town on
          a rail.</para></footnote>  Once you've agreed on the changes
          you will commit, edit your file and remove the conflict
          markers:</para>
-->
        <para>Für gewöhnlich werden Sie nicht einfach die
          Konfliktmarken mitsamt der Änderungen von Sally löschen
          wollen &ndash; sie wird furchtbar überrascht sein, wenn das
          Sandwich kommt und nicht das drauf ist, was sie wollte. Hier
          ist der Zeitpunkt gekommen, zu dem Sie zum Telefon greifen
          oder durch das Büro gehen und Sally erklären, dass man in
          einem italienischen Delikatessenladen kein Sauerkraut
          bekommt.<footnote><para>Und wenn Sie danach fragen, wird man
          Sie wahrscheinlich auf einer Schiene aus der Stadt
          tragen.</para></footnote> Sobald Sie sich über die zu
          übergebenden Änderungen einig sind, können Sie Ihre Datei
          bearbeiten und die Konfliktmarken entfernen:</para>

        <informalexample>
          <screen>
Top piece of bread
Mayonnaise
Lettuce
Tomato
Provolone
Salami
Mortadella
Prosciutto
Creole Mustard
Bottom piece of bread
</screen>
        </informalexample>

<!--
        <para>Now use <command>svn resolve</command>, and you're
          ready to commit your changes:</para>
-->
        <para>Verwenden Sie jetzt <command>svn resolve</command>, und
          Sie sind bereit, Ihre Änderungen an das Projektarchiv zu
          übergeben:</para>

        <informalexample>
          <screen>
$ svn resolve --accept working sandwich.txt <!--
Resolved conflicted state of 'sandwich.txt'
$ svn commit -m "Go ahead and use my sandwich, discarding Sally's edits."
-->
Konflikt von »sandwich.txt« aufgelöst
$ svn commit -m "Mach weiter mit meinem Sandwich, vergiss Sallys Änderungen."
</screen>
        </informalexample>

<!--
        <para>Note that <command>svn resolve</command>, unlike most of
          the other commands we deal with in this chapter, requires
          that you explicitly list any filenames that you wish to
          resolve.  In any case, you want to be careful and use
          <command>svn resolve</command> only when you're certain that
          you've fixed the conflict in your file&mdash;once the
          temporary files are removed, Subversion will let you commit
          the file even if it still contains conflict markers.</para>
-->
        <para>Beachten Sie, dass <command>svn resolve</command>,
          anders als die meisten anderen Befehle, die wir in diesem
          Kapitel behandeln, erwartet, dass Sie ausdrücklich alle
          Dateien aufzählen, deren Konflikt Sie beseitigt haben. Auf
          alle Fälle sollten Sie sorgfältig vorgehen und
          <command>svn resolve</command> nur verwenden, falls Sie
          sicher sind, den Konflikt in Ihrer Datei beseitigt zu haben
          &ndash; sobald die temporären Dateien entfernt sind, lässt
          Subversion zu, dass Sie die Datei in das Projektarchiv stellen,
          selbst wenn sie noch Konfliktmarken enthält.</para>

<!--
        <para>If you ever get confused while editing the conflicted
          file, you can always consult the three files that Subversion
          creates for you in your working copy&mdash;including your
          file as it was before you updated.  You can even use a
          third-party interactive merging tool to examine those three
          files.</para>
-->
        <para>Falls Sie mal bei der Bearbeitung der konfliktbehafteten
          Datei verwirrt sein sollten, können Sie jederzeit in den
          drei Dateien nachsehen, die Subversion für Sie in der
          Arbeitskopie bereitstellt &ndash; dazu gehört auch Ihre
          Datei vor der Aktualisierung. Sie können sogar ein
          Zusammenführungs-Werkzeug eines Drittanbieters verwenden, um diese drei
          Dateien zu untersuchen.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.theirsfull">
<!--
        <title>Discarding your changes in favor of a newly fetched
          revision</title>
-->
        <title>Verwerfen Ihrer Änderungen zugunsten einer aktualisierten Revision aus dem Projektarchiv</title>
  
<!--
        <indexterm>
          <primary>conflicts</primary>
          <secondary>resolution</secondary>
        </indexterm>
  
        <para>If you get a conflict and decide that you want to throw
          out your changes, you can run <userinput>svn resolve
          - -accept theirs-full
          <replaceable>CONFLICTED-PATH</replaceable></userinput> and
          Subversion will discard your edits and remove the temporary
          files:</para>
-->
        <indexterm>
          <primary>Konflikte</primary>
          <secondary>Auflösung</secondary>
        </indexterm>
  
        <para>Falls Sie einen Konflikt erhalten und entscheiden, dass
          Sie Ihre Änderungen verwerfen wollen, können Sie
          <userinput>svn resolve --accept theirs-full
          <replaceable>CONFLICTED-PATH</replaceable></userinput>
          aufrufen, und Subversion wird Ihre Änderungen ignorieren und
          die temporären Dateien entfernen:</para>

<!--
        <informalexample>
         <screen>
$ svn update
Updating '.':
Conflict discovered in 'sandwich.txt'.
Select: (p) postpone, (df) diff-full, (e) edit,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options: p
C    sandwich.txt
Updated to revision 2.
Summary of conflicts:
  Text conflicts: 1
$ ls sandwich.*
sandwich.txt  sandwich.txt.mine  sandwich.txt.r2  sandwich.txt.r1
$ svn resolve - -accept theirs-full sandwich.txt
Resolved conflicted state of 'sandwich.txt'
$
</screen>
       </informalexample>
-->
        <informalexample>
         <screen>
$ svn update
Konflikt in »sandwich.txt« entdeckt.
Auswahl: (p) zurückstellen, (df) voller Diff, (e) editieren,
         (mc) eigene konfliktbehaftete Datei, (tc) fremde konfliktbehaftete Datei
         (s) alle Optionen anzeigen: p
C    sandwich.txt
Aktualisiert zu Revision 2.
$ ls sandwich.*
sandwich.txt  sandwich.txt.mine  sandwich.txt.r2  sandwich.txt.r1
$ svn resolve --accept theirs-full sandwich.txt
Konflikt von »sandwich.txt« aufgelöst
$
</screen>
       </informalexample>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.revert">
<!--
        <title>Punting: Using svn revert</title>
-->
        <title>Die Verwendung von svn revert</title>

<!--
        <para>If you decide that you want to throw out your changes
          and start your edits again (whether this occurs after a
          conflict or anytime), just revert your changes:</para>
-->
        <para>Falls Sie sich entscheiden, Ihre Änderungen zu verwerfen
          und erneut mit der Bearbeitung zu beginnen (ob nach einem
          Konflikt oder sonst zu jeder Zeit), machen Sie einfach Ihre
          Änderungen rückgängig:</para>

        <informalexample>
          <screen>
$ svn revert sandwich.txt <!--
Reverted 'sandwich.txt'
-->
Rückgängig gemacht: »sandwich.txt«
$ ls sandwich.*
sandwich.txt
$
</screen>
        </informalexample>

<!--
        <para>Note that when you revert a conflicted file, you don't
          have to use <command>svn resolve</command>.</para>
-->
        <para>Beachten Sie, dass Sie beim Rückgängigmachen einer
          konfliktbehafteten Datei nicht <command>svn
          resolve</command> zu verwenden brauchen.</para>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.commit">
<!--
      <title>Commit Your Changes</title>
-->
      <title>Übergeben Ihrer Änderungen</title>

<!--
      <para>Finally!  Your edits are finished, you've merged all
        changes from the server, and you're ready to commit your
        changes to the repository.</para>
-->
      <para>Endlich!  Sie haben die Bearbeitung abgeschlossen, Sie
        haben alle Änderungen vom Server eingearbeitet, und Sie sind
        bereit, Ihre Änderungen an das Projektarchiv zu übergeben.</para>

<!--
      <para>The <command>svn commit</command> command sends all of
        your changes to the repository.  When you commit a change, you
        need to supply a log message describing your change.  Your log
        message will be attached to the new revision you create.  If
        your log message is brief, you may wish to supply it on the
        command line using the <option>- -message</option>
        (<option>-m</option>) option:</para>
-->
      <para>Der Befehl <command>svn commit</command> schickt all Ihre
        Änderungen zum Projektarchiv. Wenn Sie eine Änderung
        übergeben, müssen Sie einen Protokolleintrag erstellen, der
        die Änderung beschreibt. Dieser Eintrag wird mit der von Ihnen
        erzeugten neuen Revision verknüpft. Wenn Ihr
        Eintrag kurz ist, können Sie ihn mit der Option
        <option>--message</option> (<option>-m</option>) in der
        Kommandozeile angeben:</para>

      <informalexample>
        <screen>
$ svn commit -m "Corrected number of cheese slices." <!--
Sending        sandwich.txt
Transmitting file data .
Committed revision 3.
-->
Sende          sandwich.txt
Übertrage Daten .
Revision 3 übertragen.
</screen>
      </informalexample>

<!--
      <para>However, if you've been composing your log message in some
        other text file as you work, you may want to tell Subversion
        to get the message from that file by passing its filename as
        the value of the <option>- -file</option> (<option>-F</option>)
        option:</para>
-->
      <para>Falls Sie jedoch Ihren Protokolleintrag während der Arbeit
        in irgendeiner Textdatei erstellen möchten, können Sie
        Subversion mitteilen, sich den Eintrag aus dieser Datei zu
        holen, indem Sie ihren Namen mit der Option
        <option>--file</option> (<option>-F</option>) angeben:</para>

      <informalexample>
        <screen>
$ svn commit -F logmsg <!--
Sending        sandwich.txt
Transmitting file data .
Committed revision 4.
-->
Sende          sandwich.txt
Übertrage Daten .
Revision 4 übertragen.
</screen>
      </informalexample>

<!--
      <para>If you fail to specify either the
        <option>- -message</option> (<option>-m</option>)
        or <option>- -file</option> (<option>-F</option>) option,
        Subversion will automatically launch your favorite editor (see
        the information on <literal>editor-cmd</literal> in
        <xref linkend="svn.advanced.confarea.opts.config"/>) for
        composing a log message.</para>
-->
      <para>Sollten Sie vergessen, entweder die Option
        <option>--message</option> (<option>-m</option>) oder die
        Option <option>--file</option> (<option>-F</option>)
        anzugeben, startet Subversion automatisch Ihren
        Lieblingseditor (siehe die Information zu
        <literal>editor-cmd</literal> in <xref
        linkend="svn.advanced.confarea.opts.config"/>), damit Sie
        einen Protokolleintrag erstellen können.</para>

      <tip>
<!--
        <para>If you're in your editor writing a commit message and
          decide that you want to cancel your commit, you can just
          quit your editor without saving changes.  If you've already
          saved your commit message, simply delete all the text, save
          again, and then abort:</para>
-->
        <para>Wenn Sie gerade in Ihrem Editor einen Eintrag schreiben
          und sich entschließen, die Übergabe abzubrechen, können Sie
          einfach Ihren Editor beenden, ohne die Änderungen zu
          sichern. Falls Sie den Eintrag bereits gesichert haben
          sollten, löschen Sie einfach den gesamten Text, sichern Sie
          erneut und brechen dann ab:</para>

        <informalexample>
          <screen>
$ svn commit <!--
Waiting for Emacs...Done

Log message unchanged or not specified
(a)bort, (c)ontinue, (e)dit
-->

Logmeldung unverändert oder nicht angegeben
A)bbrechen, Weitermac)hen, E)ditieren:
a
$
</screen>
        </informalexample>
      </tip>

<!--
      <para>The repository doesn't know or care whether your changes make
        any sense as a whole; it checks only to make sure nobody
        else has changed any of the same files that you did when you
        weren't looking.  If somebody <emphasis>has</emphasis> done
        that, the entire commit will fail with a message informing you
        that one or more of your files are out of date:</para>
-->
      <para>Das Projektarchiv weiß nicht, ob Ihre Änderung im Ganzen
        einen Sinn ergeben, es ist ihm auch egal; es überprüft
        lediglich, ob nicht irgendjemand anderes irgendeine derselben Dateien
        geändert hat wie Sie, als Sie mal weggeschaut haben. Falls
        jemand das gemacht <emphasis>hat</emphasis>, wird die gesamte
        Übergabe mit einer Meldung fehlschlagen, dass eine oder
        mehrere Ihrer Dateien nicht mehr aktuell sind:</para>

      <informalexample>
        <screen> <!--
$ svn commit -m "Add another rule"
Sending        rules.txt
svn: E155011: Commit failed (details follow):
svn: E155011: File '/home/sally/svn-work/sandwich.txt' is out of date
-->
$ svn commit -m "Noch eine Regel hinzufügen"
Sende          rules.txt
svn: E155011: Übertragen schlug fehl (Details folgen):
svn: E155011: Datei »/home/sally/svn-work/sandwich.txt« ist veraltet
&hellip;
</screen>
      </informalexample>

<!--
      <para>(The exact wording of this error message depends on the
        network protocol and server you're using, but the idea is the
        same in all cases.)</para>
-->
      <para>(Der genaue Wortlaut dieser Fehlermeldung hängt vom
        verwendeten Netzwerkprotokoll und vom Server ab, doch die
        Bedeutung ist in allen Fällen gleich.)</para>

<!--
      <para>At this point, you need to run <userinput>svn
        update</userinput>, deal with any merges or conflicts that
        result, and attempt your commit again.</para>
-->
      <para>Zu diesem Zeitpunkt müssen Sie <userinput>svn
        update</userinput> aufrufen, sich um eventuelle
        Zusammenführungen oder Konflikte kümmern und die Übergabe
        erneut versuchen.</para>

<!--
      <para>That covers the basic work cycle for using Subversion.
        Subversion offers many other features that you can use
        to manage your repository and working copy, but most of your
        day-to-day use of Subversion will involve only the commands
        that we've discussed so far in this chapter.  We will,
        however, cover a few more commands that you'll use fairly
        often.</para>
-->
      <para>Das deckt den grundlegenden Arbeitszyklus für die
        Verwendung von Subversion ab. Subversion bietet viele andere
        Möglichkeiten, die Sie benutzen können, um Ihr Projektarchiv und
        Ihre Arbeitskopie zu verwalten, doch der größte Teil Ihrer
        täglichen Arbeit mit Subversion wird lediglich die in diesem
        Kapitel behandelten Befehle berühren. Wir werden jedoch noch
        ein paar mehr Befehle behandeln, die Sie ziemlich oft
        verwenden werden.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.history">
<!--
    <title>Examining History</title>
-->
    <title>Geschichtsforschung</title>

<!--
    <para>Your Subversion repository is like a time machine.  It keeps
      a record of every change ever committed and allows you to
      explore this history by examining previous versions of files and
      directories as well as the metadata that accompanies them.  With
      a single Subversion command, you can check out the repository
      (or restore an existing working copy) exactly as it was at any
      date or revision number in the past.  However, sometimes you
      just want to <emphasis>peer into</emphasis> the past instead of
      <emphasis>going into</emphasis> it.</para>
-->
    <para>Ihr Subversion-Projektarchiv ist wie eine Zeitmaschine. Es legt
      einen Eintrag für jede jemals übergebene Änderung an und erlaubt
      Ihnen, diese Geschichte durch die Untersuchung sowohl ehemaliger
      Datei- und Verzeichnisversionen als auch der begleitenden
      Metadaten zu erforschen. Mit einem einzigen Subversion-Befehl
      können Sie das Projektarchiv genauso auschecken (oder eine
      bestehende Arbeitskopie wiederherstellen), wie es zu einem
      beliebigen Zeitpunkt oder einer Revisionsnummer in der
      Vergangenheit war. Allerdings möchten Sie manchmal nur in die
      Vergangenheit <emphasis>spähen</emphasis> anstatt dorthin zu
      <emphasis>gehen</emphasis>.</para>

<!--
    <para>Several commands can provide you with historical data from
      the repository:</para>
-->
    <para>Es gibt mehrere Befehle, die Sie mit historischen Daten aus dem
      Projektarchiv versorgen können:</para>

      <variablelist>

        <varlistentry>
          <term><command>svn diff</command></term>
          <listitem>
<!--
            <para>Shows line-level details of a particular change</para>
-->
            <para>Zeigt die Details einer bestimmten Änderung auf
              Zeilenebene</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn log</command></term>
          <listitem>
<!--
            <para>Shows you broad information: log messages with date
              and author information attached to revisions and which
              paths changed in each revision</para>
-->
            <para>Zeigt Ihnen grobe Informationen: Mit Revisionen
              verknüpfte Protokolleinträge zu Datum
              und Autor und welche Pfade sich in jeder Revision
              geändert haben.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn cat</command></term>
          <listitem>
<!--
            <para>Retrieves a file as it existed in a particular
              revision number and displays it on your screen</para>
-->
            <para>Holt eine Datei hervor, wie sie mit einer bestimmten
              Revisionsnummer einmal ausgesehen hat und zeigt sie auf
              dem Bildschirm an</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn annotate</command></term>
          <listitem>
<!--
            <para>Retrieves a human-readable file as it existed in a
              particular revision number, displaying its contents in a
              tabular form with last-changed information attributed to
              each line of the file.</para>
-->
            <para>Holt eine Datei hervor, wie sie mit einer bestimmten
              Revisionsnummer einmal ausgesehen hat und zeigt den
              Inhalt in Tabellenform mit Informationen, wann jede
              Zeile das letzte Mal geändert wurde.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn list</command></term>
          <listitem>
<!--
            <para>Displays the files in a directory for any given
              revision</para>
-->
            <para>Zeigt die Dateien in einem Verzeichnis für eine
              gewünschte Revision an</para>
          </listitem>
        </varlistentry>

      </variablelist>


    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.diff">
<!--
      <title>Examining the Details of Historical Changes</title>
-->
      <title>Detaillierte Untersuchung der Änderungsgeschichte</title>

<!--
      <para>We've already seen <command>svn diff</command>
        before&mdash;it displays file differences in unified diff
        format; we used it to show the local modifications made to
        our working copy before committing to the repository.</para>
-->
      <para><command>svn diff</command> ist uns bereits begegnet
        &ndash; es zeigt Dateiunterschiede im unified-diff-Format; wir
        verwendeten es, um die lokalen Änderungen an unserer
        Arbeitskopie anzuzeigen, bevor wir sie dem Projektarchiv
        übergaben.</para>

<!--
      <para>In fact, it turns out that there are
        <emphasis>three</emphasis> distinct uses of <command>svn
        diff</command>:</para>
-->
      <para>Tatsächlich stellt sich heraus, dass es
        <emphasis>drei</emphasis> verschiedene
        Verwendungsmöglichkeiten für <command>svn diff</command>
        gibt:</para>

      <itemizedlist>

        <listitem>
<!--
          <para>Examining local changes</para>
-->
          <para>zum Untersuchen lokaler Änderungen</para>
        </listitem>

        <listitem>
<!--
          <para>Comparing your working copy to the repository</para>
-->
	  <para>zum Vergleichen Ihrer Arbeitskopie mit dem
	    Projektarchiv</para>
        </listitem>

        <listitem>
<!--
          <para>Comparing repository revisions</para>
-->
          <para>zum Vergleichen von Projektarchiv-Revisionen</para>
        </listitem>

      </itemizedlist>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.diff.local">
<!--
        <title>Examining local changes</title>
-->
        <title>Untersuchen lokaler Änderungen</title>

<!--
        <para>As we've seen, invoking <userinput>svn diff</userinput> with
          no options will compare your working files to the cached
          <quote>pristine</quote> copies in
          the <filename>.svn</filename> area:</para>
-->
        <para>Wie wir gesehen haben, vergleicht der Aufruf von
          <userinput>svn diff</userinput> ohne Optionen die
          Arbeitsdateien mit den zwischengespeicherten
          <quote>ursprünglichen</quote> Kopien im
          <filename>.svn</filename>-Bereich:</para>

        <informalexample>
          <screen>
$ svn diff
Index: rules.txt
===================================================================
--- rules.txt	(revision 3)
+++ rules.txt	(working copy)
@@ -1,4 +1,5 @@
 Be kind to others
 Freedom = Responsibility
 Everything in moderation
-Chew with your mouth open
+Chew with your mouth closed
+Listen when others are speaking
$
</screen>
        </informalexample>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.diff.wcrepos">
<!--
        <title>Comparing working copy to repository</title>
-->
        <title>Vergleichen der Arbeitskopie mit dem Projektarchiv</title>

<!--
        <para>If a single <option>- -revision</option>
          (<option>-r</option>) number is passed, your
          working copy is compared to the specified revision in the
          repository:</para>
-->
        <para>Wird eine einzelne Nummer mit <option>--revision</option>
          (<option>-r</option>) übergeben, wird die Arbeitskopie mit
          der angegebenen Revision im Projektarchiv verglichen:</para>

        <informalexample>
          <screen>
$ svn diff -r 3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt	(revision 3)
+++ rules.txt	(working copy)
@@ -1,4 +1,5 @@
 Be kind to others
 Freedom = Responsibility
 Everything in moderation
-Chew with your mouth open
+Chew with your mouth closed
+Listen when others are speaking
$
</screen>
        </informalexample>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.diff.reposrepos">
<!--
        <title>Comparing repository revisions</title>
-->
        <title>Vergleichen von Projektarchiv-Revisionen</title>

<!--
        <para>If two revision numbers, separated by a colon, are
          passed via <option>- -revision</option>
          (<option>-r</option>), the two revisions are directly
          compared:</para>
-->
        <para>Werden zwei Revisionsnummern durch einen Doppelpunkt
          getrennt mit <option>--revision</option>
          (<option>-r</option>) übergeben, werden die beiden
          Revisionen direkt miteinander verglichen:</para>

        <informalexample>
          <screen>
$ svn diff -r 2:3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt	(revision 2)
+++ rules.txt	(revision 3)
@@ -1,4 +1,4 @@
 Be kind to others
-Freedom = Chocolate Ice Cream
+Freedom = Responsibility
 Everything in moderation
 Chew with your mouth open
$
</screen>
        </informalexample>

<!--
        <para>A more convenient way of comparing one revision to the
          previous revision is to use the <option>- -change</option>
          (<option>-c</option>) option:</para>
-->
        <para>Eine bequemere Möglichkeit, eine Revision mit der
          Vorgänger-Revision zu vergleichen, bietet die Verwendung der
          Option <option>--change</option>
          (<option>-c</option>):</para>

        <informalexample>
          <screen>
$ svn diff -c 3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt	(revision 2)
+++ rules.txt	(revision 3)
@@ -1,4 +1,4 @@
 Be kind to others
-Freedom = Chocolate Ice Cream
+Freedom = Responsibility
 Everything in moderation
 Chew with your mouth open
$
</screen>
        </informalexample>

<!--
        <para>Lastly, you can compare repository revisions even when
          you don't have a working copy on your local machine, just by
          including the appropriate URL on the command line:</para>
-->
        <para>Zu guter Letzt können Sie Revisionen im Projektarchiv auch
          dann vergleichen, falls Sie gar keine Arbeitskopie auf Ihrem
          lokalen Rechner haben, indem Sie einfach den entsprechenden
          URL auf der Kommandozeile angeben:</para>

        <informalexample>
          <screen>
$ svn diff -c 5 http://svn.example.com/repos/example/trunk/text/rules.txt
&hellip;
$
</screen>
        </informalexample>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.log">
<!--
      <title>Generating a List of Historical Changes</title>
-->
      <title>Erzeugung einer Liste der Änderungsgeschichte</title>

<!--
      <para>To find information about the history of a file or
        directory, use the <command>svn log</command>
        command. <command>svn log</command> will provide you with a
        record of who made changes to a file or directory, at what
        revision it changed, the time and date of that revision,
        and&mdash;if it was provided&mdash;the log message that accompanied
        the commit:</para>
-->
      <para>Um Informationen über den Werdegang einer Datei oder eines
        Verzeichnisses zu bekommen, benutzen Sie den Befehl
        <command>svn log</command>. <command>svn log</command>
        versorgt Sie mit einem Eintrag, der Auskunft darüber gibt, wer
        Änderungen an einer Datei oder einem Verzeichnis gemacht hat,
        in welcher Revision die Änderung stattfand, zu welcher Zeit und
        welchem Datum die Revision entstand sowie &ndash; falls
        verfügbar &ndash; dem die Übergabe begleitenden
        Protokolleintrag:</para>

      <informalexample>
        <screen>
$ svn log
------------------------------------------------------------------------ <!--
r3 | sally | 2008-05-15 23:09:28 -0500 (Thu, 15 May 2008) | 1 line

Added include lines and corrected # of cheese slices.
-->
r3 | sally | 2008-05-15 23:09:28 -0500 (Do, 15. Mai 2008) | 1 Zeile

include-Zeilen hinzugefügt und Anzahl der Käsescheiben korrigiert.
------------------------------------------------------------------------ <!--
r2 | harry | 2008-05-14 18:43:15 -0500 (Wed, 14 May 2008) | 1 line

Added main() methods.
-->
r2 | harry | 2008-05-14 18:43:15 -0500 (Mi, 14. Mai 2008) | 1 Zeile

main()-Methoden hinzugefügt.
------------------------------------------------------------------------ <!--
r1 | sally | 2008-05-10 19:50:31 -0500 (Sat, 10 May 2008) | 1 line

Initial import
-->
r1 | sally | 2008-05-10 19:50:31 -0500 (Sa, 10. Mai 2008) | 1 Zeile

Erstimport
------------------------------------------------------------------------
</screen>
      </informalexample>

<!--
      <para>Note that the log messages are printed in
        <emphasis>reverse chronological order</emphasis> by default.
        If you wish to see a different range of revisions in a
        particular order or just a single revision, pass the
        <option>- -revision</option> (<option>-r</option>)
        option:</para>
-->
      <para>Beachten Sie, dass die Protokolleinträge standardmäßig in
        <emphasis>umgekehrter zeitlicher Reihenfolge</emphasis>
        ausgegeben werden. Falls Sie eine andere Folge von Revisionen
        in einer bestimmten Anordnung oder nur eine einzige Revision
        sehen möchten, übergeben Sie die Option
        <option>--revision</option> (<option>-r</option>):</para>

      <table id="svn.tour.history.log.tbl-1">
<!--
        <title>Common log requests</title>
-->
        <title>Häufige Protokollanfragen</title>
        <tgroup cols="2">
          <thead>
            <row>
<!--
              <entry>Command</entry>
              <entry>Description</entry>
-->
              <entry>Befehl</entry>
              <entry>Beschreibung</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><userinput>svn log -r 5:19</userinput></entry>
<!--
              <entry>Display logs for revisions 5 through 19 in
                chronological order</entry>
-->
              <entry>Anzeige der Protokolleinträge für die Revisionen
                5 bis 19 in chronologischer Reihenfolge</entry>
            </row>
            <row>
              <entry><userinput>svn log -r 19:5</userinput></entry>
<!--
              <entry>Display logs for revisions 5 through 19 in
                reverse chronological order</entry>
-->
              <entry>Anzeige der Protokolleinträge für die Revisionen
                5 bis 19 in umgekehrt chronologischer
                Reihenfolge</entry>
            </row>
            <row>
              <entry><userinput>svn log -r 8</userinput></entry>
<!--
              <entry>Display logs for revision 8 only</entry>
-->
              <entry>Anzeige des Protokolleintrags nur für Revision
                8</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

<!--
      <para>You can also examine the log history of a single file or
        directory.  For example:</para>
-->
      <para>Sie können sich auch die Protokollgeschichte einer
        einzigen Datei oder eines einzigen Verzeichnisses ansehen. Zum
        Beispiel:</para>

      <informalexample>
        <screen>
$ svn log foo.c
&hellip;
$ svn log http://foo.com/svn/trunk/code/foo.c
&hellip;
</screen>
      </informalexample>

<!--
      <para>These will display log messages <emphasis>only</emphasis>
        for those revisions in which the working file (or URL)
        changed.</para>
-->
      <para>Diese Befehle zeigen <emphasis>nur</emphasis>
        Protokolleinträge für die Revisionen, in der sich die
        Arbeitsdatei (oder URL) geändert hat.</para>

      <sidebar>

<!--
        <title>Why Does svn log Not Show Me What I
          Just Committed?</title>
-->
        <title>Warum zeigt mir svn log nicht, was ich gerade übergeben
          habe?</title>

<!--
        <para>If you make a commit and immediately type <userinput>svn
          log</userinput> with no arguments, you may notice that your
          most recent commit doesn't show up in the list of log
          messages.  This is due to a combination of the behavior of
          <command>svn commit</command> and the default behavior of
          <command>svn log</command>.  First, when you commit changes
          to the repository, <command>svn</command> bumps only the
          revision of files (and directories) that it commits, so
          usually the parent directory remains at the older revision
          (See
          <xref linkend="svn.basic.in-action.mixedrevs.update-commit"/>
          for an explanation of why).  <command>svn log</command> then
          defaults to fetching the history of the directory at its
          current revision, and thus you don't see the newly committed
          changes.  The solution here is to either update your working
          copy or explicitly provide a revision number to <command>svn
          log</command> by using the <option>- -revision</option>
          (<option>-r</option>) option.</para>
-->
        <para>Wenn Sie Ihre Änderungen an das Projektarchiv übergeben und
          sofort <userinput>svn log</userinput> ohne Argumente
          eingeben, wird Ihnen vielleicht auffallen, dass Ihre letzte
          Änderung nicht in der Liste der Protokolleinträge
          auftaucht. Das liegt an der Kombination des Verhaltens von
          <command>svn commit</command> und dem Standardverhalten von
          <command>svn log</command>. Wenn Sie Änderungen an das
          Projektarchiv übergeben, erhöht <command>svn</command> zunächst
          nur die Revision der Dateien (und Verzeichnisse) die es
          übernimmt, so dass das Elternverzeichnis normalerweise auf
          der älteren Revision verbleibt (siehe <xref
          linkend="svn.basic.in-action.mixedrevs.update-commit"/> für
          die Erklärung, warum das so ist). <command>svn log</command>
          holt dann standardmäßig die Geschichte des Verzeichnisses in
          der gegenwärtigen Revision, und so kommt es, dass Sie die
          neu übergebenen Änderungen nicht sehen. Die Lösung besteht
          entweder in einer Aktualisierung Ihrer Arbeitskopie oder
          indem Sie dem Befehl <command>svn log</command> ausdrücklich
          mit der Option <option>--revision</option>
          (<option>-r</option>) eine Revisionsnummer mitgeben.</para>

      </sidebar>

<!--
      <para>If you want even more information about a file or
        directory, <command>svn log</command> also takes a
        <option>- -verbose</option> (<option>-v</option>) option.
        Because Subversion allows you to move and copy files and
        directories, it is important to be able to track path changes
        in the filesystem.  So, in verbose mode, <command>svn
        log</command> will include a list of changed paths in a
        revision in its output:</para>
-->
      <para>Wenn Sie noch mehr Informationen über eine Datei oder ein
        Verzeichnis benötigen, können Sie <command>svn log</command>
        auch die Option <option>--verbose</option>
        (<option>-v</option>) mitgeben. Weil Ihnen Subversion erlaubt,
        Dateien und Verzeichnisse zu kopieren und zu verschieben, ist
        es wichtig, Pfadänderungen im Dateisystem
        mitzuverfolgen. Daher beinhaltet bei dieser Option die Ausgabe
        von <command>svn log</command> eine Liste veränderter Pfade in
        einer Revision:</para>

      <informalexample>
        <screen>
$ svn log -r 8 -v
------------------------------------------------------------------------ <!--
r8 | sally | 2008-05-21 13:19:25 -0500 (Wed, 21 May 2008) | 1 line

Changed paths:
-->
r8 | sally | 2008-05-21 13:19:25 -0500 (Mi, 21. Mai 2008) | 1 Zeile

Geänderte Pfade:
   M /trunk/code/foo.c
   M /trunk/code/bar.h
   A /trunk/code/doc/README
<!--
Frozzled the sub-space winch.
-->
Die Unterraumwinde gefrozzelt.

------------------------------------------------------------------------
</screen>
      </informalexample>

<!--
      <para><command>svn log</command> also takes
        a <option>- -quiet</option> (<option>-q</option>) option, which
        suppresses the body of the log message.  When combined
        with <option>- -verbose</option> (<option>-v</option>), it
        gives just the names of the changed files.</para>
-->
      <para><command>svn log</command> akzeptiert ebenfalls die
        Option <option>--quiet</option> (<option>-q</option>), die den
        Protokolleintrag unterdrückt.  Zusammen mit der Option
        <option>--verbose</option> (<option>-v</option>) zeigt es nur
        die Namen der geänderten Dateien an.</para>

      <sidebar>
<!--
        <title>Why Does svn log Give Me an Empty
          Response?</title>
-->
        <title>Warum gibt mir svn log eine leere Antwort?</title>

<!--
        <para>After working with Subversion for a bit, most users will
          come across something like this:</para>
-->
        <para>Nach ein wenig Arbeit mit Subversion werden die meisten
          Benutzer so etwas begegnen:</para>

        <informalexample>
          <screen>
$ svn log -r 2
------------------------------------------------------------------------
$
</screen>
        </informalexample>

<!--
        <para>At first glance, this seems like an error.  But recall
          that while revisions are repository-wide, <command>svn
          log</command> operates on a path in the repository.  If you
          supply no path, Subversion uses the current working
          directory as the default target.  As a result, if you're
          operating in a subdirectory of your working copy and attempt
          to see the log of a revision in which neither that directory
          nor any of its children was changed, Subversion will show you
          an empty log.  If you want to see what changed in that
          revision, try pointing <command>svn log</command> directly at
          the topmost URL of your repository, as in <userinput>svn log
          -r 2 ^/</userinput>.</para>
-->
        <para>Auf den ersten Blick sieht es aus wie ein Fehler. Aber
          seien Sie daran erinnert, dass, während Revisionen über das
          gesamte Projektarchiv zählen, <command>svn log</command> auf
          einem Pfad im Projektarchiv arbeitet. Wenn Sie keinen Pfad
          angeben, verwendet Subversion das aktuelle
          Arbeitsverzeichnis als Standardargument.  Deshalb zeigt Subversion
          Ihnen einen leeren Protokolleintrag, falls Sie in einem
          Unterverzeichnis Ihrer Arbeitskopie arbeiten und versuchen,
          sich den Protokolleintrag einer Revision anzusehen, in dem
          sich weder dieses Verzeichnis noch irgendein Unterverzeichnis
          darin geändert hat. Falls Sie sehen wollen, was sich in der
          Revision geändert hat, versuchen Sie <command>svn
          log</command> direkt auf den obersten URL Ihres Projektarchivs
          zeigen zu lassen, wie in <userinput>svn log -r 2
          ^/</userinput>.</para>

      </sidebar>

<!--
      <para>As of Subversion 1.7, users of the Subversion command-line
        can also take advantage of a special output mode
        for <command>svn log</command> which integrates a difference
        report such as is generated by the <command>svn diff</command>
        command we introduced earlier.  When you invoke <command>svn
        log</command> with the <option>- -diff</option> option,
        Subversion will append to each revision log chunk in the log
        report a <command>diff</command>-style difference report.
        This is a very convenient way to see both the high-level, semantic
        changes and the line-based modifications of a revision all at
        the same time!</para>
-->
      <para>Seit Subversion 1.7 können Anwender der Subversion
        Kommandozeile den besonderen Ausgabemodus für
        <command>svn log</command> verwenden, der eine Anzeige der
        Unterschiede integriert, wie sie der Befehl <command>svn
        diff</command> erzeugt, der oben eingeführt wurde. Wenn Sie
        <command>svn log</command> mit der Option <option>--diff</option>
        aufrufen, hängt Subversion an jedes Revisionsprotokoll einen
        Bericht über die Unterschiede im <command>diff</command>-Stil.
        Das ist sehr praktisch, um sowohl die groben semantischen als
        auch die zeilenweisen Änderungen einer Revision gleichzeitig
        zu sehen.</para>

    </sect2>

    <!-- =============================================================== -->
    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.browsing">
<!--
      <title>Browsing the Repository</title>
-->
      <title>Stöbern im Projektarchiv</title>

<!--
      <para>Using <command>svn cat</command> and <command>svn
        list</command>, you can view various revisions of files and
        directories without changing the working revision of your
        working copy.  In fact, you don't even need a working copy to
        use either one.</para>
-->
      <para>Wenn Sie <command>svn cat</command> und <command>svn
        list</command> verwenden, können Sie sich verschiedene
        Revisionen von Dateien und Verzeichnissen ansehen, ohne die
        Revision Ihrer Arbeitskopie ändern zu müssen. Tatsächlich
        brauchen Sie dafür nicht einmal eine Arbeitskopie.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.browsing.cat">
<!--
        <title>Displaying file contents</title>
-->
        <title>Anzeige von Dateiinhalten</title>


<!--
        <para>If you want to examine an earlier version of a file and
          not necessarily the differences between two files, you can use
          <command>svn cat</command>:</para>
-->
        <para>Falls Sie eine frühere Version einer Datei untersuchen
          möchten und nicht notwendigerweise die Unterschiede zwischen
          zwei Dateien, können Sie <command>svn cat</command>
          verwenden:</para>

        <informalexample>
          <screen>
$ svn cat -r 2 rules.txt
Be kind to others
Freedom = Chocolate Ice Cream
Everything in moderation
Chew with your mouth open
$
</screen>
        </informalexample>

<!--
        <para>You can also redirect the output directly into a
          file:</para>
-->
        <para>Sie können die Ausgabe auch direkt in eine Datei
          umleiten:</para>

        <informalexample>
          <screen>
$ svn cat -r 2 rules.txt &gt; rules.txt.v2
$
</screen>
        </informalexample>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.browsing.annotate">
<!--
        <title>Displaying line-by-line change attribution</title>
-->
        <title>Anzeigen der zeilenweisen Zuordnung von Änderungen</title>

<!--
        <para>Very similar to the <command>svn cat</command> command
          we discussed in the previous section is the <command>svn
          annotate</command> command.  This command also displays the
          contents of a versioned file, but it does so using a tabular
          format.  Each line of output shows not only a line of the
          file's content but also the username, the revision number
          and (optionally) the datestamp of the revision in which that
          line was last modified.</para>
-->
        <para>Sehr ähnlich wie der im vorangegangenen Abschnitt
          besprochene Befehl <command>svn cat</command> ist der Befehl
          <command>svn annotate</command>. Auch dieser Befehl zeigt
          den Inhalt einer versionierten Datei an, jedoch macht er das
          tabellarisch. Jede ausgegebene Zeile zeigt nicht nur eine
          Zeile des Dateiinhalts, sondern auch den Namen des
          Erstellers, der Revisionsnummer und (optional) des
          Zeitstempels der Revision, in der die Zeile zuletzt geändert
          wurde.</para>

<!--
        <para>When used with a working copy file target, <command>svn
          annotate</command> will by default show line-by-line
          attribution of the file as it currently appears in the
          working copy.</para>
-->
        <para>Wenn es auf eine Datei der Arbeitskopie angewendet wird,
          zeigt <command>svn annotate</command> standardmäßig eine
          zeilenweise Zuordnung der Datei, so wie sie gerade in der
          Arbeitskopie vorliegt.</para>

        <informalexample>
          <screen>
$ svn annotate rules.txt
     1      harry Be kind to others
     3      sally Freedom = Responsibility
     1      harry Everything in moderation
     -          - Chew with your mouth closed
     -          - Listen when others are speaking
</screen>
        </informalexample>

<!--
        <para>Notice that for some lines, there is no attribution
          provided.  In this case, that's because those lines have
          been modified in the working copy's version of the file.  In
          this way, <command>svn annotate</command> becomes another
          way for you to see which lines in the file you have
          changed.  You can use the <literal>BASE</literal> revision
          keyword (see <xref linkend="svn.tour.revs.keywords" />) to
          instead see the unmodified form of the file as it resides
          in your working copy.</para>
-->
        <para>Beachten Sie, dass für einige Zeilen keine Zuordnung
          angegeben wird. In diesem Fall liegt es daran, dass diese
          Zeilen in der Arbeitskopie der Datei geändert wurden. Auf
          diese Weise wird <command>svn annotate</command> eine
          Alternative für Sie, um zu sehen, welche Zeilen in einer
          Datei Sie geändert haben. Sie können das
          Revisions-Schlüsselwort <literal>BASE</literal> verwenden
          (siehe <xref linkend="svn.tour.revs.keywords" />), um
          stattdessen die unveränderte Form der Datei in Ihrer
          Arbeitskopie zu betrachten.</para>

        <informalexample>
          <screen>
$ svn annotate rules.txt@BASE
     1      harry Be kind to others
     3      sally Freedom = Responsibility
     1      harry Everything in moderation
     1      harry Chew with your mouth open
</screen>
        </informalexample>

<!--
        <para>The <option>- -verbose (-v)</option> option causes
          <command>svn annotate</command> to also include on each line
          the datestamp associated with that line's reported revision
          number.  (This adds a significant amount of width to each
          line of ouput, so we'll skip the demonstration here.)</para>
-->
        <para>Die Option <option>--verbose (-v)</option> veranlasst
          <command>svn annotate</command>, auf jeder Zeile zusätzlich
          den zur angezeigten Revisionsnummer gehörigen Zeitstempel
          auszugeben. (Das erhöht erheblich die Breite jeder
          Ausgabezeile, so dass wir an dieser Stelle auf eine
          Demonstration verzichten.)</para>

<!--
        <para>As with <command>svn cat</command>, you can also
          ask <command>svn annotate</command> to display previous
          versions of the file.  This can be a handy trick when, after
          finding out who most recently modified a particular line of
          interest in the file, you then wish to see who modified the
          same line prior to that.</para>
-->
        <para>Wie bei <command>svn cat</command> können Sie auch
          <command>svn annotate</command> auffordern, ältere
          Revisionen der Datei anzuzeigen. Das kann ein nützlicher
          Trick sein, wenn Sie wissen möchten, wer eine bestimmte
          Zeile vor der letzten Änderung geändert hat.</para>

        <informalexample>
          <screen>
$ svn blame rules.txt -r 2
     1      harry Be kind to others
     1      harry Freedom = Chocolate Ice Cream
     1      harry Everything in moderation
     1      harry Chew with your mouth open
</screen>
        </informalexample>

<!--
        <para>Unlike the <command>svn cat</command> command, the
          functionality of <command>svn annotate</command> is tied
          heavily to the idea of <quote>lines</quote> of text in a
          human-readable file.  As such, if you attempt to run the
          command on a file that Subversion has determined is
          <emphasis>not</emphasis> human-readable (per the file's
          <literal>svn:mime-type</literal> property&mdash;see <xref
          linkend="svn.advanced.props.special.mime-type" /> for
          details), you'll get an error message.</para>
-->
        <para>Anders als beim Befehl <command>svn cat</command> ist
          die Funktionalität von <command>svn annotate</command> stark
          an das Konzept von <quote>Zeilen</quote> mit Text in einer
          menschenlesbaren Datei gebunden. Somit führt der Versuch,
          diesen Befehl auf eine Datei anzuwenden, die Subversion als
          <emphasis>nicht</emphasis> menschenlesbar (über die
          Dateieigenschaft <literal>svn:mime-type</literal> &ndash;
          siehe <xref linkend="svn.advanced.props.special.mime-type"
          /> für Details) erachtet, bekommen Sie eine
          Fehlermeldung.</para>

        <informalexample>
          <screen>
$ svn annotate images/logo.png <!--
Skipping binary file: 'images/logo.png'
-->
Überspringe Binärdatei: »images/logo.png«
$
</screen>
        </informalexample>

<!--
        <para>As revealed in the error message, you can use
          the <option>- -force</option> option to disable this check
          and proceed with the annotation as if the file's contents
          are, in fact, human-readable and line-based.  Naturally, if
          you force Subversion to try to perform line-based annotation
          on a nontextual file, you'll get what you asked for: a
          screenful of nonsense.</para>
-->
        <para>Wie die Fehlermeldung verrät, können Sie die Option
          <option>--force</option> verwenden, um diese Überprüfung zu
          unterbinden und mit der Zuordnung weitermachen, als handele
          es sich tatsächlich um menschenlesbaren, zeilenbasierten
          Dateiinhalt. Natürlich bekommen Sie, was Sie haben wollen,
          wenn Sie Subversion dazu zwingen, eine zeilenbasierte
          Zuordnung auf eine Nicht-Text-Datei anzuwenden: einen
          Bildschirm voller Müll.</para>

        <informalexample>
          <screen>
$ svn annotate images/logo.png --force
     6      harry \211PNG
     6      harry ^Z
     6      harry 
     7      harry \274\361\MI\300\365\353^X\300&hellip;
</screen>
        </informalexample>

        <tip>
<!--
          <para>Depending on your mood at the time you execute this
            command and your reasons for doing so, you may find
            yourself typing <userinput>svn blame &hellip;</userinput>
            or <userinput>svn praise &hellip;</userinput> instead of
            using the canonical <command>svn annotate</command>
            command form.  That's okay&mdash;the Subversion developers
            anticipated as much, so those particular command aliases
            work, too!</para>
-->
          <para>Abhängig von Ihrer Stimmung zum Zeitpunkt der
            Ausführung dieses Befehls sowie Ihren Gründen dafür,
            könnte es sein, dass Sie <userinput>svn blame
            &hellip;</userinput> oder <userinput>svn praise
            &hellip;</userinput> statt der kanonischen Kommandoform
            <command>svn annotate</command> eintippen. Das geht in
            Ordnung &ndash; die Entwickler von Subversion haben so
            etwas erwartet, so dass diese besonderen Befehls-Aliase
            auch funktionieren.</para>
        </tip>

<!--
        <para>Finally, as with many of Subversion's informational
          commands, you can also reference files in your <command>svn
          annotate</command> command invocations by their repository
          URLs, allowing access to this information even when you
          don't have ready access to a working copy.</para>
-->
        <para>Schließlich können Sie, wie bei vielen der
          informationellen Subversion-Befehle, auch in Aufrufen des
          Befehls <command>svn annotate</command> Dateien über deren
          Projektarchiv-URLs referenzieren, was Ihnen erlaubt, diese
          Informationen auch ohne Zugang zu einer Arbeitskopie zu
          erlangen.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.browsing.list">
<!--
        <title>Listing versioned directories</title>
-->
        <title>Auflistung versionierter Verzeichnisse</title>

<!--
        <para>The <command>svn list</command> command shows you what
          files are in a repository directory without actually
          downloading the files to your local machine:</para>
-->
        <para>Der Befehl <command>svn list</command> zeigt Ihnen,
          welche Dateien sich in einem Projektarchiv-Verzeichnis
          befinden, ohne die Dateien auf Ihren lokalen Rechner
          herunterladen zu müssen:</para>

        <informalexample>
          <screen>
$ svn list http://svn.example.com/repo/project
README
branches/
tags/
trunk/
</screen>
        </informalexample>

<!--
        <para>If you want a more detailed listing, pass the
          <option>- -verbose</option> (<option>-v</option>) flag to get
          output like this:</para>
-->
        <para>Falls Sie eine detailliertere Auflistung wünschen,
          übergeben Sie die Option <option>--verbose</option>
          (<option>-v</option>), um eine Ausgabe ähnlich der folgenden
          zu bekommen:</para>

        <informalexample>
          <screen>
$ svn list -v http://svn.example.com/repo/project
  23351 sally                 Feb 05 13:26 ./
  20620 harry            1084 Jul 13  2006 README
  23339 harry                 Feb 04 01:40 branches/
  23198 harry                 Jan 23 17:17 tags/
  23351 sally                 Feb 05 13:26 trunk/
</screen>
        </informalexample>

<!--
        <para>The columns tell you the revision at which the file or
          directory was last modified, the user who modified it, the size
          if it is a file, the date it was last modified, and the item's
          name.</para>
-->
        <para>Die Spalten zeigen Ihnen die Revision, in der die Datei
          zuletzt geändert wurde, den Benutzer, der sie änderte, die
          Größe, falls es sich um eine Datei handelt, sowie den Namen
          des Objektes.</para>

        <warning>
<!--
          <para>The <userinput>svn list</userinput> command with no
            arguments defaults to the <emphasis>repository
            URL</emphasis> of the current working
            directory, <emphasis>not</emphasis> the local working copy
            directory.  After all, if you want a listing of your local
            directory, you could use just plain
            <command>ls</command> (or any reasonable non-Unixy
            equivalent).</para>
-->
          <para>Der Befehl <userinput>svn list</userinput> ohne
            Argumente verwendet standardmäßig den
            <emphasis>Projektarchiv-URL</emphasis> des aktuellen
            Arbeitsverzeichnisses und <emphasis>nicht</emphasis> das
            Verzeichnis der lokalen Arbeitskopie. Schließlich können
            Sie, falls Sie eine Auflistung des lokalen Verzeichnisses
            möchten, das einfache <command>ls</command> (oder
            irgendein vernünftiges nicht-unixartiges Äquivalent)
            benutzen.</para>
        </warning>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.snapshots">

<!--
      <title>Fetching Older Repository Snapshots</title>
-->
      <title>Bereitstellung älterer Projektarchiv-Schnappschüsse</title>

<!--
      <para>In addition to all of the previous commands, you can use
        the <option>- -revision</option> (<option>-r</option>) option
        with <command>svn update</command> to take an entire working
        copy <quote>back in time</quote>:<footnote><para>See?  We told
        you that Subversion was a time
        machine.</para></footnote></para>
-->
      <para>Zusätzlich zu den obigen Befehlen können Sie die Option
        <option>--revision</option> (<option>-r</option>) mit
        <command>svn update</command> verwenden, um eine vollständige
        Arbeitskopie <quote>zeitlich zurückzusetzen</quote>:<footnote>
        <para>Sehen Sie? Wir haben Ihnen gesagt, dass Subversion eine
        Zeitmaschine sei.</para></footnote></para>

      <informalexample>
        <screen> <!--
# Make the current directory look like it did in r1729.
-->
# Lass das aktuelle Verzeichnis aussehen wie in r1729.
$ svn update -r 1729
Updating '.':
&hellip;
$
</screen>
      </informalexample>

      <tip>
<!--
        <para>Many Subversion newcomers attempt to use the preceding
          <command>svn update</command> example to <quote>undo</quote>
          committed changes, but this won't work as you can't commit
          changes that you obtain from backdating a working copy if
          the changed files have newer revisions.  See <xref
          linkend="svn.branchmerge.basicmerging.resurrect"/> for a
          description of how to <quote>undo</quote> a commit.</para>
-->
        <para>Viele Subversion-Neulinge versuchen das vorangehende
          <command>svn update</command>-Beispiel zu verwenden, um
          übergebene Änderungen <quote>rückgängig</quote> zu machen,
          was allerdings nicht funktioniert, da Sie keine Änderungen
          übergeben können, die Sie durch das zeitliche Zurücksetzen
          einer Arbeitskopie erhalten haben, falls die geänderten
          Dateien neuere Revisionen haben. Siehe <xref
          linkend="svn.branchmerge.basicmerging.resurrect"/> für eine
          Beschreibung, wie eine Übergabe <quote>rückgängig</quote>
          gemacht wird.</para>
      </tip>

<!--
      <para>If you'd prefer to create a whole new working copy from an
        older snapshot, you can do so by modifying the typical
        <command>svn checkout</command> command.  As with <command>svn
        update</command>, you can provide
        the <option>- -revision</option> (<option>-r</option>) option.
        But for reasons that we cover in
        <xref linkend="svn.advanced.pegrevs" />, you might instead want
        to specify the target revision as part of Subversion's
        expanded URL syntax.</para>

-->
      <para>Sollten Sie es bevorzugen, eine vollständige neue
        Arbeitskopie aus einem älteren Schnappschuss zu erzeugen,
        können Sie das, indem Sie den üblichen Befehl <command>svn
        checkout</command> modifizieren. Wie bei <command>svn
        update</command>, können Sie die Option
        <option>--revision</option> (<option>-r</option>) mitgeben.
        Aus Gründen, die wir in <xref linkend="svn.advanced.pegrevs"
        /> erörtern werden, sollten Sie stattdessen die Zielrevision
        als Teil der erweiterten URL-Syntax von Subversion
        angeben.</para>

      <informalexample>
        <screen> <!--
# Checkout the trunk from r1729.
-->
# Den Trunk von r1729 auschecken.
$ svn checkout http://svn.example.com/svn/repo/trunk@1729 trunk-1729
&hellip; <!--
# Checkout the current trunk as it looked in r1729.
-->
# Den aktuellen Trunk auschecken, wie er in r1729 aussah.
$ svn checkout http://svn.example.com/svn/repo/trunk -r 1729 trunk-1729
&hellip;
$
</screen>
      </informalexample>

<!--
      <para>Lastly, if you're building a release and wish to bundle up
        your versioned files and directories, you can use <command>svn
        export</command> to create a local copy of all or part of your
        repository without any <filename>.svn</filename>
        administrative directories included.  The basic syntax of this
        subcommand is identical to that of <command>svn
        checkout</command>:</para>
-->
      <para>Wenn Sie am Ende ein Release bauen und die versionierten
        Dateien und Verzeichnisse zu einem Bündel schnüren möchten,  können
        Sie <command>svn export</command> verwenden, um eine lokale
        Kopie des gesamten oder teilweisen Projektarchivs ohne
        irgendwelche
        <filename>.svn</filename>-Verzeichnisse zu erhalten. Die
        Syntax ist grundsätzlich identisch zu der von <command>svn
        checkout</command>:</para>

      <informalexample>
        <screen> <!--
# Export the trunk from the latest revision.
-->
# Den Trunk aus der letzten Revision exportieren.
$ svn export http://svn.example.com/svn/repo/trunk trunk-export
&hellip; <!--
# Export the trunk from r1729.
-->
# Den Trunk aus r1729 exportieren.
$ svn export http://svn.example.com/svn/repo/trunk@1729 trunk-1729
&hellip; <!--
# Export the current trunk as it looked in r1729. 
-->
# Den aktuellen Trunk exportieren, wie er in in r1729 aussah. 
$ svn export http://svn.example.com/svn/repo/trunk -r 1729 trunk-1729
&hellip;
$
</screen>
      </informalexample>

    </sect2>

  </sect1>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.cleanup">
<!--
    <title>Sometimes You Just Need to Clean Up</title>
-->
    <title>Manchmal müssen Sie einfach nur aufräumen</title>

<!--
    <para>Now that we've covered the day-to-day tasks that you'll
      frequently use Subversion for, we'll review a few administrative
      tasks relating to your working copy.</para>
-->
    <para>Nachdem wir nun die täglichen Aufgaben abgehandelt haben,
      für die Sie regelmäßig Subversion verwenden, gehen wir nun ein
      paar Verwaltungsaufgaben für Ihre Arbeitskopie durch.</para>


    <!-- =============================================================== -->
    <sect2 id="svn.tour.cleanup.disposal">
<!--
      <title>Disposing of a Working Copy</title>
-->
      <title>Entsorgen einer Arbeitskopie</title>

<!--
      <para>Subversion doesn't track either the state or the existence of
        working copies on the server, so there's no server overhead to
        keeping working copies around.  Likewise, there's no need to
        let the server know that you're going to delete a working
        copy.</para>
-->
      <para>Subversion merkt sich weder den Zustand noch das
        Vorhandensein einer Arbeitskopie auf dem Server, so dass
        serverseitig kein Aufwand für Arbeitskopien
        anfällt. Dementsprechend besteht keine Notwendigkeit, dem
        Server mitzuteilen, dass Sie vorhaben, eine Arbeitskopie zu
        löschen.</para>

<!--
      <para>If you're likely to use a working copy again, there's
        nothing wrong with just leaving it on disk until you're ready
        to use it again, at which point all it takes is an
        <command>svn update</command> to bring it up to date and ready
        for use.</para>
-->
      <para>Falls die Wahrscheinlichkeit besteht, dass Sie eine
        Arbeitskopie wiederverwenden möchten, ist es nicht verkehrt,
        sie einfach auf der Platte zu lassen, bis Sie sie wieder
        benutzen wollen. Zu diesem Zeitpunkt reicht lediglich ein
        <command>svn update</command> zum Aktualisieren, und sie ist
        gebrauchsfertig.</para>

<!--
      <para>However, if you're definitely not going to use a working
        copy again, you can safely delete the entire thing using
        whatever directory removal capabilities your operating system
        offers.  We recommend that before you do so you
        run <userinput>svn status</userinput> and review any files
        listed in its output that are prefixed with a
        <literal>?</literal> to make certain that they're not of
        importance.</para>
-->
      <para>Falls Sie die Arbeitskopie jedoch bestimmt nicht mehr
        verwenden möchten, können Sie sie ruhig löschen, indem Sie die
        zum Löschen von Verzeichnissen vorgesehenen Bordmittel Ihres
        Betriebssystems verwenden. Wir empfehlen jedoch, vorher
        <userinput>svn status</userinput> aufzurufen und alle Dateien
        zu untersuchen, denen ein <literal>?</literal> voransteht, um
        sicherzugehen, dass sie nicht wichtig sind.</para>

    </sect2>

    <sect2 id="svn.tour.cleanup.interruption">
<!--
      <title>Recovering from an Interruption</title>
-->
      <title>Wiederherstellung nach einer Unterbrechung</title>

<!--
      <para>When Subversion modifies your working copy&mdash;either
        your files or its own administrative state&mdash;it tries to do
        so as safely as possible.  Before changing the working copy,
        Subversion logs its intentions in a private <quote>to-do
        list</quote>, of sorts.  Next, it performs those actions to
        effect the desired change, holding a lock on the relevant part
        of the working copy while it works.  This prevents other
        Subversion clients from accessing the working copy mid-change.
        Finally, Subversion releases its lock and cleans up its
        private to-do list.  Architecturally, this is similar to a
        journaled filesystem.  If a Subversion operation is
        interrupted (e.g, if the process is killed or if the machine
        crashes), the private to-do list remains on disk.  This allows
        Subversion to return to that list later to complete any
        unfinished operations and return your working copy to a
        consistent state.</para>
-->
      <para>Wenn Subversion Ihre Arbeitskopie verändert, entweder Ihre
        Dateien oder seinen eigenen Verwaltungsbereich, versucht es so
        sicher vorzugehen wie möglich. Bevor die
        Arbeitskopie geändert wird, schreibt Subversion seine
        Absichten in eine Art private <quote>Merkliste</quote>. Dann
        führt es diese Aktionen aus, um die Änderungen durchzuführen,
        wobei es während der Arbeit den relevanten Teil der Arbeitskopie
        sperrt, um andere Clients davon abzuhalten, während der
        Änderung auf die Arbeitskopie zuzugreifen. Zuletzt entfernt
        Subversion die Sperre und räumt die private Merkliste auf.
        Architektonisch ähnelt das einem Dateisystem mit Journal.
        Falls eine Operation von Subversion unterbrochen wird (z.B.
        wenn der Prozess abgeschossen wird oder der Rechner abstürzt),
        verbleibt die private Merkliste auf der Platte. Das erlaubt es
        Subversion später zu der Merkliste zurückzukehren, um die
        vorher begonnene Operationen zu vervollständigen und Ihre
        Arbeitskopie wieder in einen konsistenten Zustand zu
        bringen.</para>

<!--
      <para>This is exactly what <command>svn cleanup</command> does:
        it searches your working copy and runs any leftover to-do
        items, removing working copy locks as it completes those
        operations.  If Subversion ever tells you that some part of
        your working copy is <quote>locked,</quote> run <command>svn
        cleanup</command> to remedy the problem.  The <command>svn
        status</command> command will inform you about administrative
        locks in the working copy, too, by displaying
        an <literal>L</literal> next to those locked paths:</para>
-->
      <para>Genau das macht <command>svn cleanup</command>: Es
        durchsucht Ihre Arbeitskopie und arbeitet etwaige übrig
        gebliebene Punkte von der Merkliste ab, wobei Sperren in der
        Arbeitskopie entfernt werden. Falls Ihnen Subversion jemals
        mitteilt, dass ein Teil Ihrer Arbeitskopie
        <quote>gesperrt</quote> ist, sollten Sie <command>svn
        cleanup</command> aufrufen, um das Problem zu beheben. Der
        Befehl <command>svn status</command> informiert Sie auch über
        administrative Sperren in der Arbeitskopie, indem es ein
        <literal>L</literal> neben diesen gesperrten Pfaden
        anzeigt:</para>

      <informalexample>
        <screen>
$ svn status
  L     somedir
M       somedir/foo.c
$ svn cleanup
$ svn status
M       somedir/foo.c
</screen>
      </informalexample>

<!--
      <para>Don't confuse these working copy administrative locks with
        the user-managed locks that Subversion users create when using
        the lock-modify-unlock model of concurrent version control;
        see the sidebar
        <xref linkend="svn.advanced.locking.meanings"/> for
        clarification.</para>
-->
      <para>Verwechseln Sie diese administrativen Sperren nicht mit
        den anwenderverwalteten Sperren, die Subversion-Anwender
        anlegen, wenn sie das sperren-ändern-freigeben-Modell der
        gleichzeitigen Versionskontrolle verwenden; zur Klärung siehe
        den Kasten <xref
        linkend="svn.advanced.locking.meanings"/>.</para>
    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.treeconflicts">
<!--
    <title>Dealing with Structural Conflicts</title>
-->
    <title>Umgang mit Strukturkonflikten</title>

<!--
    <para>So far, we have only talked about conflicts at the level of
      file content.  When you and your collaborators make overlapping
      changes within the same file, Subversion forces you to merge
      those changes before you can commit.<footnote><para>Well,
      you <emphasis>could</emphasis> mark files containing conflict
      markers as resolved and commit them, if you really wanted to.
      But this is rarely done in practice.</para></footnote></para>
-->
    <para>Bis hierhin haben wir nur über Konflikte auf der Ebene von
      Dateiinhalten gesprochen. Wenn Sie und Ihre Mitarbeiter
      überlappende Änderungen innerhalb derselben Datei vornehmen,
      zwingt Sie Subversion dazu, diese Änderungen zusammenzuführen,
      bevor Sie sie übergeben können.<footnote><para>Natürlich
      <emphasis>könnten</emphasis> Sie Dateien, die
      Konfliktmarkierungen enthalten, als konfliktfrei erklären und
      übergeben, wenn Sie es wirklich wollten, doch das wird in der
      Praxis kaum gemacht.</para></footnote></para>

<!--
    <para>But what happens if your collaborators move or delete a file
      that you are still working on?  Maybe there was a
      miscommunication, and one person thinks the file should be
      deleted, while another person still wants to commit changes to
      the file.  Or maybe your collaborators did some refactoring,
      renaming files and moving around directories in the process.  If
      you were still working on these files, those modifications may
      need to be applied to the files at their new location.  Such
      conflicts manifest themselves at the directory tree structure
      level rather than at the file content level, and are known
      as <firstterm>tree conflicts</firstterm>.</para>
-->
    <para>Was passiert aber, wenn Ihre Mitarbeiter eine Datei
      verschieben oder löschen, an der Sie noch arbeiten? Vielleicht
      gab es ein Verständnisproblem oder die eine Person glaubt, die
      Datei soll gelöscht werden, während die andere Person noch
      Änderungen an der Datei übergeben will. Vielleicht haben Ihre
      Mitarbeiter ja auch etwas Refactoring betrieben und dabei
      Dateien umbenannt und Verzeichnisse verschoben. Falls Sie noch
      an diesen Dateien gearbeitet haben, müssten diese Änderungen auf
      die Dateien am der neuen Stelle angewendet werden. Derartige
      Konflikte äußern sich auf der Ebene der Verzeichnisstruktur
      statt des Dateiinhaltes und sind bekannt als
      <firstterm>Baumkonflikte</firstterm>.</para>

    <sidebar>
<!--
      <title>Tree conflicts prior to Subversion 1.6</title>
-->
      <title>Baumkonflikte vor Subversion 1.6</title>

<!--
      <para>Prior to Subversion 1.6, tree conflicts could yield rather
        unexpected results.  For example, if a file was locally
        modified, but had been renamed in the repository,
        running <command>svn update</command> would make Subversion
        carry out the following steps:</para>
-->
      <para>Vor Subversion 1.6 konnten Baumkonflikte zu ziemlich
        unerwarteten Ergebnissen führen. Wenn beispielsweise eine
        Datei lokal geändert im Projektarchiv jedoch umbenannt worden
        war, hätte ein <command>svn update</command> Subversion zu den
        folgenden Schritten veranlasst:</para>

      <itemizedlist>
<!--
        <listitem><para>Check the file to be renamed for local
          modifications.</para></listitem>
-->
        <listitem><para>Überprüfe, ob die umzubenennende Datei lokale
          Änderungen hat.</para></listitem>

<!--
        <listitem><para>Delete the file at its old location, and if it
          had local modifications, keep an on-disk copy of the file at
          the old location.  This on-disk copy now appears as an
          unversioned file in the working copy.</para></listitem>
-->
        <listitem><para>Lösche die Datei an ihrer alten Stelle und
          bewahre eine Kopie der Datei an der alten Stelle auf, falls
          lokale Änderungen vorhanden waren. Diese Kopie erscheint nun
          als eine nicht versionierte Datei in der
          Arbeitskopie.</para></listitem>
<!--
        <listitem><para>Add the file, as it exists in the repository,
          at its new location.</para></listitem>
-->
        <listitem><para>Füge die Datei wie sie im Projektarchiv
          besteht an ihrer neuen Stelle hinzu.</para></listitem>
      </itemizedlist>

<!--
      <para>When this situation arises, there is the possibility that
        the user makes a commit without realizing that local
        modifications have been left in a now-unversioned file in the
        working copy, and have not reached the repository.  This gets
        more and more likely (and tedious) if the number of files
        affected by this problem is large.</para>
-->
      <para>Beim Eintreten dieser Situation besteht die Möglichkeit,
        dass der Anwender eine Übergabe durchführt, ohne sich bewusst
        zu sein, dass sich lokale Änderungen immer noch in einer nun
        nicht-versionierten Datei der Arbeitskopie befinden und noch
        nicht im Projektarchiv sind. Dies wird wahrscheinlicher (und
        lästiger), falls die Anzahl der von diesem Problem berührten
        Dateien groß ist.</para>

<!--
      <para>Since Subversion 1.6, this and other similar situations
        are flagged as conflicts in the working copy.</para>
-->
      <para>Seit Subversion 1.6 werden diese und ähnliche Situationen
        als Konflikte in der Arbeitskopie  
        gekennzeichnet.</para>

    </sidebar>

<!--
    <para>As with textual conflicts, tree conflicts prevent a commit
      from being made from the conflicted state, giving the user the
      opportunity to examine the state of the working copy for
      potential problems arising from the tree conflict, and resolving
      any such problems before committing.</para>
-->
    <para>Wie bei textuellen Konflikten verhindern Baumkonflikte eine
      Übergabe aus dem Konfliktzustand und geben dem Anwender die
      Gelegenheit, den Zustand der Arbeitskopie auf potenzielle
      Probleme, die aus dem Baumkonflikt entstehen könnten, zu
      überprüfen und vor der Übergabe aufzulösen.</para>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.treeconflicts.example">
<!--
      <title>An Example Tree Conflict</title>
-->
      <title>Ein Beispiel für einen Baumkonflikt</title>

<!--
      <para>Suppose a software project you were working on currently
        looked like this:</para>
-->
      <para>Gegeben sei folgendes Softwareprojekt, an dem Sie gerade
        arbeiten:</para>

      <informalexample>
        <screen>
$ svn list -Rv svn://svn.example.com/trunk/
     13 harry                 Sep 06 10:34 ./
     13 harry              27 Sep 06 10:34 COPYING
     13 harry              41 Sep 06 10:32 Makefile
     13 harry              53 Sep 06 10:34 README
     13 harry                 Sep 06 10:32 code/
     13 harry              54 Sep 06 10:32 code/bar.c
     13 harry             130 Sep 06 10:32 code/foo.c
$
</screen>
      </informalexample>

<!--
      <para>Later, in revision 14, your collaborator Harry renames the file
        <filename>bar.c</filename> to <filename>baz.c</filename>.
        Unfortunately, you don't realize this yet.  As it turns out,
        you are busy in your working copy composing a different set of
        changes, some of which also involve modifications
        to <filename>bar.c</filename>:</para>
-->
      <para>Später, in Revision 14, benennt Ihr Kollege Harry die
        Datei <filename>bar.c</filename> in <filename>baz.c</filename>
        um. Sie merken das noch nicht. Wie sich herausstellt, sind Sie
        in Ihrer Arbeitskopie damit beschäftigt, eine Menge
        unterschiedlicher Änderungen vorzunehmen, von denen einige
        auch <filename>bar.c</filename> berühren:</para>

      <informalexample>
        <screen>
$ svn diff
Index: code/foo.c
===================================================================
--- code/foo.c	(revision 13)
+++ code/foo.c	(working copy)
@@ -3,5 +3,5 @@
 int main(int argc, char *argv[])
 {
     printf("I don't like being moved around!\n%s", bar());
-    return 0;
+    return 1;
 }
Index: code/bar.c
===================================================================
--- code/bar.c	(revision 13)
+++ code/bar.c	(working copy)
@@ -1,4 +1,4 @@
 const char *bar(void)
 {
-    return "Me neither!\n";
+    return "Well, I do like being moved around!\n";
 }
$
</screen>
      </informalexample>

<!--
      <para>You first realize that someone else has
        changed <filename>bar.c</filename> when your own commit
        attempt fails:</para>
-->
      <para>Sie bemerken erst, dass jemand anderes
        <filename>bar.c</filename> geändert hat, als Ihr eigener
        Übertragungsversuch scheitert:</para>

      <informalexample>
        <screen>
$ svn commit -m "Small fixes" <!--
Sending        code/bar.c
svn: E155011: Commit failed (details follow):
svn: E155011: File '/home/svn/project/code/bar.c' is out of date
svn: E160013: File not found: transaction '14-e', path '/code/bar.c'
-->
Sende          code/bar.c
Übertrage Daten ..
svn: E155011: Übertragen schlug fehl (Details folgen):
svn: E155011: Datei »/home/svn/project/code/bar.c« ist veraltet
svn: E160013: Datei nicht gefunden: Transaktion »14-e«, Pfad »/code/bar.c«
$
</screen>
      </informalexample>
<!-- XXX: That error message should be cleaned up! -->

<!--
      <para>At this point, you need to run <command>svn update</command>.
        Besides bringing our working copy up to date so that you can
        see Harry's changes, this also flags a tree conflict so you
        have the opportunity to evaluate and properly resolve it.</para>
-->
      <para>An dieser Stelle müssen Sie <command>svn update</command>
        aufrufen. Außer Ihre Arbeitskopie zu aktualisieren, so dass
        Sie Harrys Änderungen sehen können, markiert es auch einen
        Baumkonflikt, so dass Sie die Gelegenheit bekommen, die
        Situation abzuschätzen und entsprechend aufzulösen.</para>

      <informalexample>
        <screen>
$ svn update
Updating '.':
   C code/bar.c
A    code/baz.c
U    Makefile <!--
Updated to revision 14.
Summary of conflicts:
  Tree conflicts: 1
-->
Aktualisiert zu Revision 5.
Konfliktübersicht:
  Baumkonflikte: 1
</screen>
      </informalexample>

<!--
      <para>In its output, <command>svn update</command> signifies tree
        conflicts using a capital C in the fourth output column.
        <command>svn status</command> reveals additional details of the
        conflict:</para>
-->
      <para>In seiner Ausgabe zeigt <command>svn update</command>
        Baumkonflikte mit einem großen C in der vierten Spalte an.
        <command>svn status</command> enthüllt weitere Details zum
        Konflikt:</para>

      <informalexample>
        <screen>
$ svn status
M       code/foo.c
A  +  C code/bar.c
      >   local edit, incoming delete upon update <!--
Summary of conflicts:
  Tree conflicts: 1
-->
Konfliktübersicht:
  Baumkonflikte: 1
$
</screen>
      </informalexample>

<!--
      <para>Note how <filename>bar.c</filename> is automatically
        scheduled for re-addition in your working copy, which
        simplifies things in case you want to keep the file.</para>
-->
      <para>Beachten Sie, wie <filename>bar.c</filename> automatisch
        in Ihrer Arbeitskopie zum erneuten Hinzufügen vorgemerkt wird,
        was die Sache vereinfacht, sollten sie sich entscheiden, die
        Datei zu behalten.</para>

<!--
      <para>Because a move in Subversion is implemented as a copy
        operation followed by a delete operation, and these two
        operations cannot be easily related to one another during an
        update, all Subversion can warn you about is an incoming
        delete operation on a locally modified file.  This delete
        operation <emphasis>may</emphasis> be part of a move, or it
        could be a genuine delete operation.  Determining exactly what
        semantic change was made to the repository is
        important&mdash;you want to know just how your own edits fit
        into the overall trajectory of the project.  So read log
        messages, talk to your collaborators, study the line-based
        differences&mdash;do whatever you must do&mdash;to determine
        your best course of action.</para>
-->
      <para>Da eine Verschiebung in Subversion als eine Kopie mit
        anschließender Löschung implementiert ist, und diese beiden
        Operationen sich bei einer Aktualisierung sich nicht einfach
        in Beziehung setzen lassen, kann Sie Subversion lediglich
        über eine hereinkommende Löschung einer lokal modifizierten
        Datei warnen. Diese Löschung <emphasis>kann</emphasis> Teil
        einer Verschiebung sein oder eine tatsächliche Löschung. Es
        ist wichtig, herauszufinden, welche semantische Änderung genau
        am Projektarchiv vorgenommen wurde &ndash; Sie sollten wissen,
        wie sich Ihre Änderungen in das Gesamtbild des Projektes
        einpassen lassen. Lesen Sie also die Protokokllnachrichten, 
        halten Sie mit Ihren Kollegen Rücksprache, begutachten Sie
        die zeilenbasierten Änderungen &ndash; machen Sie, was auch
        immer zu tun ist &ndash; um Ihre nächsten Schritte zu
        bestimmen.</para>

<!--
      <para>In this case, Harry's commit log message tells you what
        you need to know.</para>
-->
      <para>In diesem Fall verrät Ihnen die Protokollnachricht der
        Übertragung von Harry alles, was Sie wissen müssen.</para>


      <informalexample>
        <screen>
$ svn log -r14 ^/trunk
------------------------------------------------------------------------ <!--
r14 | harry | 2011-09-06 10:38:17 -0400 (Tue, 06 Sep 2011) | 1 line

Changed paths:
-->
r14 | harry | 2011-09-06 10:38:17 -0400 (Di, 06. Sep 2011) | 1 Zeile
Geänderte Pfade:
   M /Makefile
   D /code/bar.c
   A /code/baz.c (from /code/bar.c:13)

Rename bar.c to baz.c, and adjust Makefile accordingly.
------------------------------------------------------------------------
$
</screen>
      </informalexample>

<!--
      <warning>
        <para>Local edits to the file <filename>bar.c</filename>, which is
          renamed during an update to <filename>baz.c</filename>, will
          only be applied to <filename>bar.c</filename> if your working
          copy of <filename>bar.c</filename> is based on the revision in
          which it was last modified before being moved in the repository.
          Otherwise, Subversion will resort to retreiving
          <filename>baz.c</filename> from the repository, and will not
          try to transfer your local modifications to it.  You will have
          to do so manually.</para>
      </warning>
-->
      <warning>
        <para>Lokale Änderungen an der Datei
          <filename>bar.c</filename>, die während einer Aktualisierung
          in <filename>baz.c</filename> umbenannt wird, werden nur
          dann auf <filename>bar.c</filename> angewendet, falls Ihre
          Arbeitskopie von <filename>bar.c</filename> auf der Revision
          aufbaut, in der sie zuletzt modifiziert wurde, bevor sie im
          Projektarchiv verschoben wurde. Anderenfalls wird Subversion
          sich damit begnügen, <filename>baz.c</filename> aus dem
          Projektarchiv zu holen, und nicht versuchen, Ihre lokalen
          Änderungen dorthin zu übertragen. Das müssen Sie manuell
          machen.</para>
      </warning>

<!--
      <para><command>svn info</command> shows the URLs of the items
        involved in the conflict. The <emphasis>left</emphasis> URL
        shows the source of the local side of the conflict, while
        the <emphasis>right</emphasis> URL shows the source of the
        incoming side of the conflict. These URLs indicate where you
        should start searching the repository's history for the change
        which conflicts with your local change.</para>
-->
      <para><command>svn info</command> zeigt die URLs der am Konflikt
        beteiligten Objekte. Der <emphasis>linke</emphasis> URL
        zeigt die Quelle der lokalen Seite des Konfliktes, während die
        <emphasis>rechte</emphasis> URL die Quelle der hereinkommenden
        Seite des Konfliktes anzeigt. Diese URLs weisen darauf hin, wo
        Sie mit der Suche nach der mit Ihrer lokalen Änderung in
        Konflikt stehenden Änderung in der Vorgeschichte des
        Projektarchivs beginnen sollten.</para>

      <informalexample>
        <screen>
$ svn info code/bar.c <!--
Path: code/bar.c
-->
Pfad: code/bar.c
Name: bar.c
URL: http://svn.example.com/svn/repo/trunk/code/bar.c
&hellip; <!--
Tree conflict: local edit, incoming delete upon update
  Source  left: (file) ^/trunk/code/bar.c@4
  Source right: (none) ^/trunk/code/bar.c@5
-->
Baumkonflikt: lokal editiert, eingehend gelöscht bei Aktualisierung
  Quelle  links: (Datei) ^/trunk/code/bar.c@4
  Quelle  rechts: (nichts) ^/trunk/code/bar.c@5

$
</screen>
      </informalexample>

<!--
      <para><filename>bar.c</filename> is now said to be the
        <firstterm>victim</firstterm> of a tree conflict.
        It cannot be committed until the conflict is resolved:</para>
-->
      <para><filename>bar.c</filename> heißt nun
        <firstterm>Opfer</firstterm> eines Baumkonfliktes.  Sie kann
        nicht übergeben werden, bevor der Konflikt aufgelöst
        wird:</para>

      <informalexample>
        <screen>
$ svn commit -m "Small fixes" <!--
svn: E155015: Commit failed (details follow):
svn: E155015: Aborting commit: '/home/svn/project/code/bar.c' remains in confl
ict
-->
svn: E155015: Übertragen schlug fehl (Details folgen):
svn: E155015: Übertragung abgebrochen: »/home/svn/project/code/bar.c« bleibt
im Konflikt
$
</screen>
      </informalexample>

<!--
      <para>To resolve this conflict, you must either agree or
        disagree with the move that Harry made.</para>
-->

      <para>Um diesen Konflikt aufzulösen, müssen Sie entweder mit
        Harrys Vorgehen einverstanden sein oder nicht.</para>

<!--
      <para>If you agree with the move, your <filename>bar.c</filename>
        is superfluous.  You'll want to delete it and mark the tree
        conflict as resolved.  But wait:  you made changes to that
        file!  Before deleting <filename>bar.c</filename>, you need to
        decide if the changes you made to it need to be applied
        elsewhere, for example to the new <filename>baz.c</filename>
        file where all of <filename>bar.c</filename>'s code now lives.
        Let's assume that your changes do need to <quote>follow the
        move</quote>.  Subversion isn't smart enough to do this work
        for you<footnote><para>In some cases, Subversion 1.5 and 1.6
        <emphasis>would</emphasis> actually handle this for you, but
        this somewhat hit-or-miss functionality was removed in
        Subversion 1.7.</para></footnote>, so you need to migrate your
        changes manually.</para>
-->
      <para>Falls Sie mit dem Vorgehen einverstanden sind, ist Ihr
        <filename>bar.c</filename> überflüssig. Sie können es löschen
        und den Baumkonflikt als aufgelöst markieren. Aber halt: Sie
        haben Änderungen an der Datei vorgenommen! Bevor Sie
        <filename>bar.c</filename> löschen, müssen Sie entscheiden, ob
        die von Ihnen gemachten Änderungen an einer anderen Stelle
        vorgenommen werden müssen, zum Beispiel an der neuen Datei
        <filename>baz.c</filename>, in der sich nun der Code aus
        <filename>bar.c</filename> befindet. Wir nehmen einmal an,
        dass Ihre Änderungen tatsächlich müssen <quote>der
        Verschiebung folgen</quote> müssen. Subversion ist nicht
        schlau genug, um diese Arbeit für Sie zu
        übernehmen<footnote><para>In manchen Fällen
        <emphasis>hätten</emphasis> Subversion 1.5 und 1.6 das für Sie
        gemacht, doch ist diese Aufs-Geratewohl-Funktionalität in
        Subversion 1.7 entfernt worden.</para></footnote>, so dass Sie
        Ihre Änderungen manuell übertragen müssen.</para>

<!--
      <para>In our example, you could manually re-make your change
        to <filename>bar.c</filename> pretty easily&mdash;it was,
        after all, a single-line change.  That's not always the case,
        though, so we'll show a more scalable approach.  We'll first
        use <command>svn diff</command> to create a patch file.  Then
        we'll edit the headers of that patch file to point to the new
        name of our renamed file.  Finally, we re-apply the modified
        patch to our working copy.</para>
-->
      <para>In unserem Beispiel könnten Sie einfach Ihre Änderungen an
        <filename>bar.c</filename> noch einmal vornehmen &ndash; es
        war schließlich nur eine Änderung in einer Zeile. Das ist
        allerdings nicht immer der Fall, weshalb wir einen
        skalierbareren Ansatz zeigen. Zunächst erzeugen wir mit
        <command>svn diff</command> eine Patch-Datei. Dann bearbeiten
        wir die Kopfzeilen dieser Patch-Datei, so dass sie auf den
        neuen Namen der umbenannten Datei zeigen. Schließlich wenden
        wir den modifizierten Patch erneut auf unsere Arbeitskopie
        an.</para>

      <informalexample>
        <screen>
$ svn diff code/bar.c > PATCHFILE
$ cat PATCHFILE
Index: code/bar.c
===================================================================
--- code/bar.c	(working copy)
+++ code/bar.c	(working copy)
@@ -1,4 +1,4 @@
 const char *bar(void)
 {
-    return "Me neither!\n";
+    return "Well, I do like being moved around!\n";
 } <!--
$ ### Edit PATCHFILE to refer to code/baz.c instead of code/bar.c
-->
$ ### PATCHFILE bearbeiten, so dass es sich auf code/baz.c statt auf code/bar.c bezieht
$ cat PATCHFILE
Index: code/baz.c
===================================================================
--- code/baz.c	(working copy)
+++ code/baz.c	(working copy)
@@ -1,4 +1,4 @@
 const char *bar(void)
 {
-    return "Me neither!\n";
+    return "Well, I do like being moved around!\n";
 }
$ svn patch PATCHFILE
U         code/baz.c
$
</screen>
      </informalexample>

<!--
      <para>Now that the changes you originally made
        to <filename>bar.c</filename> have been successfully
        reproduced in <filename>baz.c</filename>, you can
        delete <filename>bar.c</filename> and resolve the conflict,
        instructing the resolution logic to accept what is currently
        in the working copy as the desired result.</para>
-->
      <para>Da nun die ursprünglich an to <filename>bar.c</filename>
        vorgenommenen Änderungen erfolgreich in
        <filename>baz.c</filename> reproduziert wurden, können Sie
        <filename>bar.c</filename> löschen und den Konflikt auflösen,
        indem Sie die Auflösungslogik anweisen, den aktuellen Inhalt
        der Arbeitskopie als das gewünschte Ergebnis zu
        akzeptieren.</para>

      <informalexample>
        <screen>
$ svn delete --force code/bar.c
D         code/bar.c
$ svn resolve --accept=working code/bar.c <!--
Resolved conflicted state of 'code/bar.c'
-->
Konflikt von »code/bar.c« aufgelöst
$ svn status
M       code/foo.c
M       code/baz.c
$ svn diff
Index: code/foo.c
===================================================================
--- code/foo.c  (revision 14)
+++ code/foo.c  (working copy)
@@ -3,5 +3,5 @@
 int main(int argc, char *argv[])
 {
     printf("I don't like being moved around!\n%s", bar());
-    return 0;
+    return 1;
 }
Index: code/baz.c
===================================================================
--- code/baz.c  (revision 14)
+++ code/baz.c  (working copy)
@@ -1,4 +1,4 @@
 const char *bar(void)
 {
-    return "Me neither!\n";
+    return "Well, I do like being moved around!\n";
 }
$
</screen>
      </informalexample>

<!--
      <para>But what if you do not agree with the move?  Well, in that
        case, you can delete <filename>baz.c</filename> instead, after
        making sure any changes made to it after it was renamed are
        either preserved or not worth keeping.  (Do not forget to also
        revert the changes Harry made to <filename>Makefile</filename>.)
        Since <filename>bar.c</filename> is already scheduled for
        re-addition, there is nothing else left to do, and the
        conflict can be marked resolved:</para>
-->
      <para>Falls Sie mit dem Vorgehen nicht einverstanden sind,
        können Sie stattdessen <filename>baz.c</filename> löschen,
        nachdem Sie sichergestellt haben, das alle nach der
        Umbenennung vorgenommenen Änderungen entweder bewahrt worden
        sind, oder verworfen werden können. Vergessen Sie nicht, die
        Änderungen zurückzunehmen, die Harry an
        <filename>Makefile</filename> gemacht hat. Da
        <filename>bar.c</filename> bereits zum neu Hinzufügen
        vorgemerkt ist, bleibt nichts mehr zu tun, und der Konflikt
        kann als aufgelöst markiert werden:</para>

      <informalexample>
        <screen>
$ svn delete --force code/baz.c
D         code/baz.c
$ svn resolve --accept=working code/bar.c <!--
Resolved conflicted state of 'code/bar.c'
-->
Konflikt von »code/bar.c« aufgelöst
$ svn status
M       code/foo.c
A  +    code/bar.c
D       code/baz.c
M       Makefile
$ svn diff
Index: code/foo.c
===================================================================
--- code/foo.c	(revision 14)
+++ code/foo.c	(working copy)
@@ -3,5 +3,5 @@
 int main(int argc, char *argv[])
 {
     printf("I don't like being moved around!\n%s", bar());
-    return 0;
+    return 1;
 }
Index: code/bar.c
===================================================================
--- code/bar.c	(revision 14)
+++ code/bar.c	(working copy)
@@ -1,4 +1,4 @@
 const char *bar(void)
 {
-    return "Me neither!\n";
+    return "Well, I do like being moved around!\n";
 }
Index: code/baz.c
===================================================================
--- code/baz.c	(revision 14)
+++ code/baz.c	(working copy)
@@ -1,4 +0,0 @@
-const char *bar(void)
-{
-    return "Me neither!\n";
-}
Index: Makefile
===================================================================
--- Makefile	(revision 14)
+++ Makefile	(working copy)
@@ -1,2 +1,2 @@
 foo: 
-	$(CC) -o $@ code/foo.c code/baz.c
+	$(CC) -o $@ code/foo.c code/bar.c
</screen>
      </informalexample>

<!--
      <para>You've now resolved your first tree conflict!  You can
        commit your changes and tell Harry during tea break about all
        the extra work he caused for you.</para>
-->
      <para>Sie haben nun Ihren ersten Baumkonflikt aufgelöst! Sie
        können Ihre Änderungen übergeben und Harry in der Kaffeepause
        erzählen, welche Mehrarbeit er Ihnen bereitet hat.</para>

    </sect2>
  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.summary">
<!--
    <title>Summary</title>
-->
    <title>Zusammenfassung</title>

<!--
      <para>Now we've covered most of the Subversion client commands.
        Notable exceptions are those dealing with branching and
        merging (see <xref linkend="svn.branchmerge"/>) and properties (see
        <xref linkend="svn.advanced.props"/>).  However, you may want to
        take a moment to skim through <xref linkend="svn.ref"/> to
        get an idea of all the different commands that Subversion
        has&mdash;and how you can use them to make your work
        easier.</para>
-->
      <para>Nun haben wir die meisten der Subversion-Client-Befehle
        behandelt. Erwähnenswerte Ausnahmen sind diejenigen, die sich
        mit dem Branchen und Zusammenführen befassen (siehe <xref
        linkend="svn.branchmerge"/>) sowie mit Eigenschaften (siehe <xref
        linkend="svn.advanced.props"/>). Jedoch möchten Sie vielleicht
        einen Augenblick damit verbringen, um durch <xref
        linkend="svn.ref"/> zu blättern, um ein Gefühl für all die
        verschiedenen Befehle zu bekommen, über die Subversion verfügt
        &ndash; und wie Sie sie verwenden können, um Ihre Arbeit zu
        erleichtern.</para>

  </sect1>

</chapter>

<!--
local variables:
sgml-parent-document: ("book.xml" "chapter")
end:
-->
