<chapter id="svn.basic">
<!--
  <title>Fundamental Concepts</title>
-->
  <title>Grundlegende Konzepte</title>

<!--
  <para>This chapter is a short, casual introduction to Subversion and
    its approach to version control.  We begin with a discussion of
    general version control concepts, work our way into the specific
    ideas behind Subversion, and show some simple examples of
    Subversion in use.</para>
-->
  <para>Das Kapitel ist eine kurze, lockere Einführung in Subversion
    und seinem Ansatz zu Versionskontrolle.  Wir besprechen die
    grundlegenden Konzepte von Versionskontrolle und arbeiten uns in
    die Richtung von Subversion und dessen spezifischen Ideen und
    zeigen einfache Beispiele zur Anwendung.</para>

<!--
  <para>Even though the examples in this chapter show people sharing
    collections of program source code, keep in mind that Subversion
    can manage any sort of file collection&mdash;it's not limited to
    helping computer programmers.</para>
-->
  <para>Obwohl die Beispiele in diesem Kapitel Leute zeigen, die
    gemeinsam an Quellcode arbeiten, sei daran erinnert, dass
    Subversion alle möglichen Arten von Datensammlungen verwalten
    kann &ndash; es beschränkt sich nicht darauf, Entwicklern zu
    helfen.</para>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.basic.version-control-basics">
<!--
    <title>Version Control Basics</title>
-->
    <title>Grundlagen der Versionskontrolle</title>

    <indexterm>
<!--
      <primary>version control systems</primary>
-->
      <primary>Versionskontrollsysteme</primary>
    </indexterm>

<!--
    <para>A version control system (or revision control system) is a
      system that tracks incremental versions (or revisions) of files
      and, in some cases, directories over time.  Of course, merely
      tracking the various versions of a user's (or group of users')
      files and directories isn't very interesting in itself.  What
      makes a version control system useful is the fact that it allows
      you to explore the changes which resulted in each of those
      versions and facilitates the arbitrary recall of the
      same.</para>
-->
    <para>Ein Versionskontrollsystem (oder Revisionskontrollsystem)
      ist ein System, das inkrementelle Versionen (oder Revisionen)
      von Dateien und, in manchen Fällen, Verzeichnissen über die Zeit
      hinweg verfolgt. Natürlich ist es für sich nicht sehr
      interessant, die verschiedenen Versionen eines Anwenders (oder
      einer Gruppe von Anwendern) zu verfolgen. Was ein
      Versionskontrollsystem nützlich macht, ist die Tatsache, dass es
      Ihnen erlaubt, die Änderungen zu untersuchen, die zu jeder
      dieser Versionen geführt haben und es ermöglicht, erstere
      jederzeit wieder aufzurufen.</para>

<!--
    <para>In this section, we'll introduce some fairly high-level
      version control system components and concepts.  We'll limit our
      discussion to modern version control systems&mdash;in today's
      interconnected world, there is very little point in
      acknowledging version control systems which cannot
      operate across wide-area networks.</para>
-->
    <para>In diesem Abschnitt werden wir einige Komponenten und
      Konzepte von Versionskontrollsystemen auf ziemlich hohem Niveau
      vorstellen. Wir werden uns auf moderne Versionskontrollsysteme
      beschränken &ndash; in der heutigen vernetzten Welt hat es wenig
      Sinn, Versionskontrollsystemen eine Berechtigung einzuräumen,
      die nicht über Netze hinweg arbeiten können.</para>

    <!-- =============================================================== -->
    <sect2 id="svn.basic.repository">
<!--
      <title>The Repository</title>
-->
      <title>Das Projektarchiv</title>

<!--
      <indexterm>
        <primary>repository</primary>
        <secondary>defined</secondary>
      </indexterm>

      <para>At the core of the version control system is a repository,
        which is the central store of that system's data.  The
        repository usually stores information in the form of a
        <firstterm>filesystem tree</firstterm>&mdash;a hierarchy of
        files and directories.  Any number of
        <firstterm>clients</firstterm> connect to the repository, and
        then read or write to these files.  By writing data, a client
        makes the information available to others; by reading data,
        the client receives information from others.
        <xref linkend="svn.basic.repository.dia-1"/> illustrates
        this.</para>
-->
      <indexterm>
        <primary>Projektarchiv</primary>
        <secondary>Definition</secondary>
      </indexterm>

      <para>Im Kern eines Versionskontrollsystems ist ein
        Projektarchiv, das der zentrale Speicher der Daten dieses
        Systems ist. Das Projektarchiv speichert Informationen
        gewöhnlicherweise in Form eines
        <firstterm>Dateisystembaumes</firstterm>, eine Hierarchie aus
        Dateien und Verzeichnissen. Eine beliebige Anzahl von
        <firstterm>Clients</firstterm> verbindet sich mit dem
        Projektarchiv und liest oder schreibt diese Dateien. Durch den
        Schreibvorgang, macht ein Client Informationen für andere
        verfügbar. Durch den Lesevorgang bekommt der Client
        Informationen von anderen zur Verfügung gestellt.
        <xref linkend="svn.basic.repository.dia-1"/> verdeutlicht
        das.</para>

      <figure id="svn.basic.repository.dia-1">
<!--
        <title>A typical client/server system</title>
-->
        <title>Ein typisches Client/Server System</title>
        <graphic fileref="images/ch02dia1.png"/>
      </figure>

<!--
      <para>Why is this interesting?  So far, this sounds like the
        definition of a typical file server.  And indeed, the
        repository <emphasis>is</emphasis> a kind of file server, but
        it's not your usual breed.  What makes the repository special
        is that as the files in the repository are changed, the
        repository remembers each version of those files.</para>
-->

      <para>Warum ist das interessant? Bis zu diesem Punkt hört
        sich das wie die Definition eines typischen Datei-Servers an.
        Und tatsächlich, das Projektarchiv <emphasis>ist</emphasis>
        eine Art von Datei-Server, aber nicht von der Art, die Sie
        kennen.  Was das Subversion-Projektarchiv so speziell macht
        ist, dass es sich während die Dateien im Projektarchiv
        geändert werden jede Version jener Dateien merkt.</para>

<!--
      <para>When a client reads data from the repository, it normally
        sees only the latest version of the filesystem tree.  But what
        makes a version control client interesting is that it also has
        the ability to request previous states of the filesystem from
        the repository.  A version control client can ask historical
        questions such as <quote>What did this directory contain last
        Wednesday?</quote> and <quote>Who was the last person to
        change this file, and what changes did he make?</quote>
        These are the sorts of questions that are at the heart of any
        version control system.</para>
-->

      <para>Wenn ein Client Daten aus dem Projektarchiv liest, bekommt
        der Client üblicherweise nur die letzte Version des
        Dateisystem-Baumes zu sehen. Was ein Versionskontrollsystem
        aber interessant macht, ist darüber hinaus die Fähigkeit,
        vorherige Zustände des Dateibaums aus dem Projektarchiv
        abzurufen. Ein Versionskontrollsystem kann historische Fragen
        stellen, wie <quote>Was beinhaltete das Verzeichnis am letzten
        Mittwoch?</quote> und <quote>Wer war die Person, die als
        letztes die Datei geändert hat und welche Änderungen hat sie
        gemacht?</quote>. Diese Art von Fragen sind die Grundlage
        eines Versionskontrollsystems.</para>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.basic.working-copy">
<!--
      <title>The Working Copy</title>
-->
      <title>Die Arbeitskopie</title>

<!--
      <indexterm>
        <primary>working copy</primary>
        <secondary>defined</secondary>
      </indexterm>

      <para>A version control system's value comes from the fact that it
        tracks versions of files and directories, but the rest of the
        software universe doesn't operate on <quote>versions of files
        and directories</quote>.  Most software programs understand
        how to operate only on a <emphasis>single</emphasis> version
        of a specific type of file.  So how does a version control
        user interact with an abstract&mdash;and, often,
        remote&mdash;repository full of multiple versions of various
        files in a concrete fashion?  How does his or her word
        processing software, presentation software, source code
        editor, web design software, or some other program&mdash;all
        of which trade in the currency of simple data files&mdash;get
        access to such files?  The answer is found in the version
        control construct known as a <firstterm>working
        copy</firstterm>.</para>
-->
      <indexterm>
        <primary>Arbeitskopie</primary>
        <secondary>Definition</secondary>
      </indexterm>

      <para>Der Wert eines Versionskontrollsystems rührt von der
        Tatsache her, dass es Versionen von Dateien und Verzeichnissen
        verfolgt, doch der Rest des Software-Universums arbeitet nicht
        auf <quote>Versionen von Dateien und Verzeichnissen</quote>.
        Die meisten Programme wissen, wie mit einer
        <emphasis>einzelnen</emphasis> Version eines bestimmten
        Dateityps umgegangen wird. Wie arbeitet also ein Anwender eines
        Versionskontrollsystems konkret mit einem abstrakten &ndash;
        und oft entfernten &ndash; Projektarchiv voll mit mehreren
        Versionen verschiedener Dateien? Wie schaffen es seine oder
        ihre Textbearbeitungs-Software, Präsentations-Software,
        Quelltexteditoren, Web-Design-Software oder sonstigen
        Programme, die alle nur mit einfachen Dateien umgehen können,
        Zugriff auf solche Dateien zu bekommen? Die Antwort findet
        sich im Versionskontroll-Konstrukt, das als
        <firstterm>Arbeitskopie</firstterm> bekannt ist.</para>

<!--
      <para>A working copy is, quite literally, a local copy of a
        particular version of a user's VCS-managed data upon which
        that user is free to work.  Working copies<footnote><para>The
        term <quote>working copy</quote> can be generally applied to
        any one file version's local instance.  When most folks use
        the term, though, they are referring to a whole directory tree
        containing files and subdirectories managed by the version
        control system.</para></footnote> appear to other software
        just as any other local directory full of files, so those
        programs don't have to be <quote>version-control-aware</quote>
        in order to read from and write to that data.  The task of
        managing the working copy and communicating changes made to
        its contents to and from the repository falls squarely to the
        version control system's client software.</para>
-->
      <para>Eine Arbeitskopie ist buchstäblich eine lokale Kopie einer
        bestimmten Version der vom VCS verwalteten Anwenderdaten mit der
        der Anwender frei arbeiten kann. Arbeitskopien<footnote><para>Der
        Begriff <quote>Arbeitskopie</quote> kann allgemein auf die
        lokale Instanz einer jeden Dateiversion angewendet werden. Die
        meisten Leute verwenden den Begriff aber, wenn sie sich auf
        einen kompletten Verzeichnisbaum beziehen, der Dateien und
        Verzeichnisse enthält, die vom Versionskontrollsystem
        verwaltet werden.</para></footnote> sehen für andere Software
        aus wie alle anderen lokalen Verzeichnisse voller Dateien, so
        dass diese Programme nicht
        <quote>versionskontroll-bewusst</quote> sein müssen, um die
        Daten zu lesen und zu schreiben. Die Aufgabe, die Arbeitskopie
        zu verwalten und Änderungen an ihrem Inhalt zum und vom
        Projektarchiv zu übergeben, fällt genau der Client-Software
        des Versionskontrollsystems zu.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.basic.vsn-models">
<!--
      <title>Versioning Models</title>
-->
      <title>Versionierungsmodelle</title>

<!--
      <para>If the primary mission of a version control system is to
        track the various versions of digital information over time, a
        very close secondary mission in any modern version control
        system is to enable collaborative editing and sharing of that
        data.  But different systems use different strategies to
        achieve this.  It's important to understand these different
        strategies, for a couple of reasons.  First, it will help you
        compare and contrast existing version control systems, in case
        you encounter other systems similar to Subversion.  Beyond
        that, it will also help you make more effective use of
        Subversion, since Subversion itself supports a couple of
        different ways of working.</para>
-->
      <para>Wenn die primäre Mission eines Versionskontrollsystems
        darin besteht, die unterschiedlichen Versionen digitaler
        Informationen über die Zeit hinweg zu verfolgen, liegt eine
        sehr nahe sekundäre Mission darin, das kollaborative
        Bearbeiten und Teilen dieser Daten zu ermöglichen. Jedoch
        verwenden unterschiedliche Systeme auch unterschiedliche
        Strategien, um dies zu bewerkstelligen. Aus einer Reihe von
        Gründen ist es wichtig, diese Unterschiede zu verstehen.
        Zunächst hilft es dabei, bestehende Versionskontrollsysteme zu
        vergleichen und gegenüberzustellen, falls Ihnen andere Systeme
        begegnen, die Subversion ähneln.  Darüber hinaus wird es Ihnen
        helfen, Subversion effektiver zu benutzen, da Subversion
        selbst eine Reihe unterschiedlicher Arbeitsweisen
        unterstützt.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.basic.vsn-models.problem-sharing">
<!--
        <title>The problem of file sharing</title>
-->
        <title>Das Problem verteilter Dateizugriffe</title>

<!--
        <para>All version control systems have to solve the same
          fundamental problem: how will the system allow users to
          share information, but prevent them from accidentally
          stepping on each other's feet?  It's all too easy for users
          to accidentally overwrite each other's changes in the
          repository.</para>
-->
        <para>Alle Versionskontrollsysteme haben das gleiche
          fundamentale Problem zu lösen: Wie soll es Anwendern erlaubt
          werden, Informationen zu teilen, aber sie davor zu bewahren,
          sich gegenseitig auf die Füße zu treten?  Es ist allzu
          einfach, die Änderungen eines anderen im Projektarchiv zu
          überschreiben.</para>

<!--
        <para>Consider the scenario shown in
          <xref linkend="svn.basic.vsn-models.problem-sharing.dia-1"/>.
          Suppose we have two coworkers, Harry and Sally.  They each
          decide to edit the same repository file at the same time.
          If Harry saves his changes to the repository first, it's
          possible that (a few moments later) Sally could accidentally
          overwrite them with her own new version of the file.  While
          Harry's version of the file won't be lost forever (because
          the system remembers every change), any changes Harry made
          <emphasis>won't</emphasis> be present in Sally's newer version
          of the file, because she never saw Harry's changes to begin
          with.  Harry's work is still effectively lost&mdash;or at
          least missing from the latest version of the file&mdash;and
          probably by accident.  This is definitely a situation we want
          to avoid!</para>
-->

        <para>Stellen Sie sich einmal folgendes Szenario in
          <xref linkend="svn.basic.vsn-models.problem-sharing.dia-1"/>
          vor: Zwei Kollegen, Harry und Sally, haben sich entschieden,
          dieselbe Datei zur gleichen Zeit zu bearbeiten.  Harry
          speichert seine Änderungen zuerst im Projektarchiv, es ist
          aber möglich, dass Sally nur einige Augenblicke später seine
          Datei mit ihrer überschreibt.  Harrys Änderungen der Datei
          sind zwar nicht für immer verloren (da das System jede
          Änderung aufzeichnet), aber alle seine Änderungen sind in
          Sallys später gespeicherter Version der Datei nicht
          vorhanden, da Sally diese Änderungen noch gar nicht kannte.
          Das heißt, dass Harrys Arbeit doch verloren ist, zumindest
          in der neuesten Version der Datei, und das vermutlich aus
          Versehen.  Eine solche Situation wollen wir auf alle Fälle
          vermeiden.</para>

        <figure id="svn.basic.vsn-models.problem-sharing.dia-1">
<!--
          <title>The problem to avoid</title>
-->
          <title>Das zu vermeidende Problem</title>
          <graphic fileref="images/ch02dia2.png"/>
        </figure>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.basic.vsn-models.lock-unlock">
<!--
        <title>The lock-modify-unlock solution</title>
-->
        <title>Die Sperren-Ändern-Entsperren-Lösung</title>

<!--
        <indexterm>
          <primary>version control</primary>
          <secondary>models</secondary>
          <tertiary>lock-modify-unlock</tertiary>
        </indexterm>

        <para>Many version control systems use a
          <firstterm>lock-modify-unlock</firstterm> model to address
          the problem of many authors clobbering each other's work.
          In this model, the repository allows only one person to
          change a file at a time.  This exclusivity policy is managed
          using locks.  Harry must <quote>lock</quote> a file before
          he can begin making changes to it.  If Harry has locked a
          file, Sally cannot also lock it, and therefore cannot make
          any changes to that file.  All she can do is read the file
          and wait for Harry to finish his changes and release his
          lock.  After Harry unlocks the file, Sally can take her turn
          by locking and editing the file.
          <xref linkend="svn.basic.vsn-models.lock-unlock.dia-1"/>
          demonstrates this simple solution.</para>
-->
        <indexterm>
          <primary>Versionskontrolle</primary>
          <secondary>Modelle</secondary>
          <tertiary>Sperren-Ändern-Entsperren</tertiary>
        </indexterm>
	
        <para>Viele Versionskontrollsysteme verwenden ein
          <firstterm>Sperren-Ändern-Entsperren</firstterm>-Modell um zu
          verhindern, dass verschiedene Autoren sich gegenseitig die Änderungen
          löschen. Bei diesem Modell erlaubt das Projektarchiv nur jeweils
          einem Programmierer den Zugriff auf eine Datei.  Harry müsste also
          die Datei sperren, ehe er anfängt, seine Änderungen einzugeben. Wenn
          Harry die Datei gesperrt hat, kann Sally sie nicht ebenfalls sperren
          und daher auch nichts ändern. Sie kann die Datei in der Zeit nur
          lesen und darauf warten, dass Harry mit seiner Arbeit fertig ist und
          die Datei entsperrt.
          <xref linkend="svn.basic.vsn-models.lock-unlock.dia-1"/></para>

        <figure id="svn.basic.vsn-models.lock-unlock.dia-1">
<!--
          <title>The lock-modify-unlock solution</title>
-->
          <title>Die Sperren-Ändern-Entsperren-Lösung</title>
          <graphic fileref="images/ch02dia3.png"/>
        </figure>

<!--
        <para>The problem with the lock-modify-unlock model is that it's
          a bit restrictive and often becomes a roadblock for
          users:</para>
-->
	
        <para>Das Problem bei einem Sperren-Ändern-Entsperren-Modell
          liegt in seinen Beschränkungen, die oft zu schier
          unüberwindlichen Hindernissen führen können.</para>

        <itemizedlist>
          <listitem>
<!--
            <para><emphasis>Locking may cause administrative
              problems.</emphasis>

              Sometimes Harry will lock a file and then forget about it.
              Meanwhile, because Sally is still waiting to edit the file,
              her hands are tied.  And then Harry goes on vacation.  Now
              Sally has to get an administrator to release Harry's lock.
              The situation ends up causing a lot of unnecessary delay
              and wasted time.</para>
-->
            <para><emphasis>Das Sperren kann zu administrativen
              Problemen führen.</emphasis> Vielleicht sperrt Harry
              eine Datei und vergisst dann, sie zu entsperren. In der
              Zwischenzeit sind Sally, die ebenfalls Änderungen an
              dieser Datei durchführen will, die Hände gebunden. Und
              dann geht Harry in Urlaub.  Nun muss Sally sich an einen
              Administrator wenden, um die Datei entsperrt zu
              bekommen. Das Ergebnis sind unnötige Verzögerungen und
              vergeudete Zeit.</para>
          </listitem>

          <listitem>
<!--
            <para><emphasis>Locking may cause unnecessary
              serialization.</emphasis>

              What if Harry is editing the beginning of a text file,
              and Sally simply wants to edit the end of the same file?
              These changes don't overlap at all.  They could easily
              edit the file simultaneously, and no great harm would
              come, assuming the changes were properly merged together.
              There's no need for them to take turns in this
              situation.</para>
-->
            <para><emphasis>Das Sperren kann zu einer unnötigen
              Serialisierung führen.</emphasis>

              Was ist, wenn Harry z. B. den Anfang einer Textdatei
              bearbeiten will, während Sally einfach nur das Ende
              ändern möchte? Diese Änderungen würden sich überhaupt
              nicht gegenseitig beeinflussen und könnten problemlos
              gleichzeitig durchgeführt werden, vorausgesetzt, sie
              würden anschließend vernünftig zusammengefasst.  Es gibt
              in dieser Situation keinen Grund, der Reihe nach zu
              arbeiten.</para>
          </listitem>
          <listitem>
<!--
            <para><emphasis>Locking may create a false sense of
              security.</emphasis>

              Suppose Harry locks and edits file A, while Sally
              simultaneously locks and edits file B.  But what if A and
              B depend on one another, and the changes made to each are
              semantically incompatible?  Suddenly A and B don't work
              together anymore.  The locking system was powerless to
              prevent the problem&mdash;yet it somehow provided a false
              sense of security.  It's easy for Harry and Sally to
              imagine that by locking files, each is beginning a safe,
              insulated task, and thus they need not bother discussing
              their incompatible changes early on.  Locking often
              becomes a substitute for real communication.</para>
-->	
            <para><emphasis>Das Sperren kann zu einem falschen Gefühl
              von Sicherheit führen.</emphasis>

              Angenommen Harry sperrt und bearbeitet Datei A, 
              während Sally gleichzeitig Änderungen an Datei B 
              durchführt. Was ist, wenn A und B voneinander abhängig 
              sind und die jeweiligen Änderungen nicht kompatibel sind? 
              Plötzlich funktioniert das Zusammenspiel zwischen A 
              und B nicht mehr. Das System des Sperrens hat dieses 
              Problem nicht verhindert, doch hat es fälschlicherweise 
              zu einem Gefühl der Sicherheit geführt. Es ist leicht, 
              sich vorzustellen, dass Harry und Sally der Meinung 
              waren, dass jeder von ihnen eine eigenständige, 
              voneinander unabhängige Änderung durchgeführt hat 
              und dass das Sperren dazu geführt hat, dass sie ihre 
              inkompatiblen Änderungen nicht vorher miteinander 
              besprochen haben. Sperren ist oft ein Ersatz für 
              echte Kommunikation.</para>
          </listitem>
        </itemizedlist>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.basic.vsn-models.copy-merge">
<!--
        <title>The copy-modify-merge solution</title>
-->
        <title>Die Kopieren–Ändern–Zusammenfassen-Lösung</title>

<!--
        <indexterm>
          <primary>version control</primary>
          <secondary>models</secondary>
          <tertiary>copy-modify-merge</tertiary>
        </indexterm>

        <para>Subversion, CVS, and many other version control systems
          use a <firstterm>copy-modify-merge</firstterm> model as an
          alternative to locking.  In this model, each user's client
          contacts the project repository and creates a personal
          working copy.  Users then work simultaneously and
          independently, modifying their private copies.  Finally, the
          private copies are merged together into a new, final
          version.  The version control system often assists with the
          merging, but ultimately, a human being is responsible for
          making it happen correctly.</para>
-->
        <para>Subversion, CVS und viele andere Versionskontrollsysteme
          benutzen ein
          <firstterm>Kopieren–Ändern–Zusammenfassen</firstterm>-Modell
          als Alternative zum Sperren. In diesem Modell verbindet sich
          jeder Client der Anwender mit dem Projektarchiv und erzeugt
          eine persönliche Arbeitskopie. Dann arbeiten die Anwender
          gleichzeitig und unabhängig voneinander an ihren privaten
          Kopien. Am Ende werden dann alle Einzelkopien zu einer
          neuen, aktuellen Version zusammengeführt. Das
          Versionskontrollsystem hilft oft bei dieser Zusammenführung,
          aber letztlich ist der Mensch dafür verantwortlich, das es
          korrekt abläuft.</para>

<!--
        <para>Here's an example.  Say that Harry and Sally each create
          working copies of the same project, copied from the
          repository.  They work concurrently and make changes to the
          same file A within their copies.  Sally saves her changes to
          the repository first.  When Harry attempts to save his changes
          later, the repository informs him that his file A is
          <firstterm>out of date</firstterm>.  In other words, file A
          in the repository has somehow changed since he last copied
          it.  So Harry asks his client
          to <firstterm>merge</firstterm> any new changes from the
          repository into his working copy of file A.  Chances are
          that Sally's changes don't overlap with his own; once he has
          both sets of changes integrated, he saves his working copy
          back to the repository.
          <xref linkend="svn.basic.vsn-models.copy-merge.dia-1"/> and
          <xref linkend="svn.basic.vsn-models.copy-merge.dia-2"/> show
          this process.</para>
-->
        <para>Hier ist ein Beispiel: Harry und Sally haben sich
          jeweils eine eigene Arbeitskopie des im Projektarchiv
          vorhandenen Projektes geschaffen. Beide arbeiten nun an
          der selben Datei A innerhalb ihrer jeweiligen Kopien. Sally
          speichert ihre Version zuerst im Projektarchiv ab. Wenn
          Harry später ebenfalls versucht, seine Änderungen zu
          speichern, informiert ihn das Projektarchiv, das seine Datei A
          nicht mehr aktuell ist. Das bedeutet, dass seitdem er sich
          seine Kopie erschaffen hat, sind irgendwelche Änderungen
          aufgetreten. Also bittet Harry seinen Client darum, diese
          neuen Änderungen in seine Arbeitskopie der Datei A
          einzuarbeiten. Die Möglichkeit besteht, dass Sallys
          Änderungen mit seinen nicht überlappen, wenn er also alle
          Änderungen eingearbeitet hat, kann er seine Arbeitskopie
          zurück in das Projektarchiv speichern.  Die Abbildungen
          <xref linkend="svn.basic.vsn-models.copy-merge.dia-1"/> und
          <xref linkend="svn.basic.vsn-models.copy-merge.dia-2"/>
          zeigen diesen Prozess.</para>

        <figure id="svn.basic.vsn-models.copy-merge.dia-1">
          <!--
          <title>The copy-modify-merge solution</title>
          -->
          <title>„Kopieren – Ändern – Zusammenfassen“ - Lösung</title>
          <graphic fileref="images/ch02dia4.png"/>
        </figure>

        <figure id="svn.basic.vsn-models.copy-merge.dia-2">
          <!--
          <title>The copy-modify-merge solution (continued)</title>
          -->
          <title>„Kopieren – Ändern – Zusammenfassen“ - Lösung (Fortsetzung)</title>
          <graphic fileref="images/ch02dia5.png"/>
        </figure>

<!--
        <indexterm>
          <primary>conflicts</primary>
        </indexterm>

        <para>But what if Sally's changes <emphasis>do</emphasis> overlap
          with Harry's changes?  What then?  This situation is called a
          <firstterm>conflict</firstterm>, and it's usually not much
          of a problem.  When Harry asks his client to merge the
          latest repository changes into his working copy, his copy of
          file A is somehow flagged as being in a state of conflict:
          he'll be able to see both sets of conflicting changes and
          manually choose between them.  Note that software can't
          automatically resolve conflicts; only humans are capable of
          understanding and making the necessary intelligent choices.
          Once Harry has manually resolved the overlapping
          changes&mdash;perhaps after a discussion with Sally&mdash;he
          can safely save the merged file back to the
          repository.</para>
        -->
        <indexterm>
          <primary>Konflikte</primary>
        </indexterm>

         <para>Was aber passiert, <emphasis>wenn</emphasis> Sallys
           Änderungen mit Harrys kollidieren? Diese Situation wird
           <firstterm>Konflikt</firstterm> genannt und ist
           normalerweise kein allzu großes Problem. Wenn Harry Sallys
           Änderungen in seine Datei einpflegen lassen will, werden in
           seiner Datei die miteinander in Konflikt stehenden
           Änderungen gekennzeichnet, er kann sämtliche Änderungen
           sehen und manuell zwischen ihnen wählen. Das Programm löst
           solche Konfliktsituationen nicht automatisch, nur Menschen
           sind in der Lage, die Probleme zu erkennen und die nötigen
           intelligenten Änderungen durchzuführen.  Wenn Harry die
           Konfliktsituationen &ndash; vielleicht nach einer kurzen
           Diskussion mit Sally &ndash; gelöst hat, kann er seine
           Datei problemlos ins Projektarchiv speichern.</para>

<!--
        <para>The copy-modify-merge model may sound a bit chaotic, but
          in practice, it runs extremely smoothly.  Users can work in
          parallel, never waiting for one another.  When they work on
          the same files, it turns out that most of their concurrent
          changes don't overlap at all; conflicts are infrequent.  And
          the amount of time it takes to resolve conflicts is usually
          far less than the time lost by a locking system.</para>
-->
        <para>Dieses
          <emphasis>Kopieren-Ändern-Zusammenfassen</emphasis>-Modell
          (engl.  copy-modify-merge model) klingt vielleicht ein wenig
          chaotisch, in der Praxis aber läuft es völlig glatt. Die
          einzelnen Anwender können parallel arbeiten, ohne einander in
          die Quere zu kommen oder unnötig warten zu müssen. Wenn sie
          an den selben Dateien arbeiten, zeigt es sich meistens, dass
          ihre jeweiligen Änderungen einander überhaupt nicht stören,
          wirkliche Konflikte sind selten. Und die Zeit, die es
          beansprucht, eine solche Konfliktsituation zu lösen, ist
          meist wesentlich kürzer als der Zeitverlust, der durch das
          Sperren auftritt.</para>

<!--
        <para>In the end, it all comes down to one critical factor:
          user communication.  When users communicate poorly, both
          syntactic and semantic conflicts increase.  No system can
          force users to communicate perfectly, and no system can
          detect semantic conflicts.  So there's no point in being
          lulled into a false sense of security that a locking system
          will somehow prevent conflicts; in practice, locking seems
          to inhibit productivity more than anything else.</para>
-->
        <para>Am Ende läuft alles auf einen kritischen Faktor hinaus:
          Kommunikation zwischen den Anwendern. Wenn diese Kommunikation
          eher spärlich abläuft, häufen sich sowohl semantische als
          auch syntaktische Konflikte. Kein System kann Anwender dazu
          zwingen, vernünftig miteinander zu kommunizieren und kein
          System kann semantische Konflikte erkennen.  Also hat es
          auch keinen Sinn, sich in dem falschen Gefühl von Sicherheit
          zu wiegen, dass das Sperren Konflikte irgendwie vermeiden
          könnte. In der Praxis verringert das System des Sperrens
          mehr als andere die Produktivität.</para>

        <sidebar id="svn.basic.vsn-models.copy-merge.sb-1">
<!--
          <title>When Locking Is Necessary</title>
-->
          <title>Wann das Sperren notwendig ist</title>

<!--
          <para>While the lock-modify-unlock model is considered
            generally harmful to collaboration, sometimes
            locking is appropriate.</para>
-->
          <para>Obwohl das Sperren-Ändern-Entsperren-Modell im
            Allgemeinen als schädlich für die Zusammenarbeit empfunden
            wird, ist es mitunter angebracht.</para>

<!--
          <para>The copy-modify-merge model is based on the assumption
            that files are contextually mergeable&mdash;that is, that the
            majority of the files in the repository are line-based text
            files (such as program source code).  But for files with
            binary formats, such as artwork or sound, it's often
            impossible to merge conflicting changes.  In these
            situations, it really is necessary for users to take strict
            turns when changing the file.  Without serialized access,
            somebody ends up wasting time on changes that are ultimately
            discarded.</para>
-->
          <para>Das Kopieren-Ändern-Zusammenführen-Modell beruht auf
            der Annahme, dass Dateien kontextbezogen zusammenführbar
            sind &ndash; d.h., die Mehrzahl der Dateien im
            Projektarchiv sind zeilenorientierte Textdateien (wie z.B.
            Programm-Quelltext).  Aber für Dateien in Binärformaten,
            wie Grafiken und Klänge, ist es oftmals nicht möglich,
            konfliktäre Änderungen zusammenzuführen. In diesen Fällen
            müssen die Benutzer tatsächlich eine strikte Schrittfolge
            beim Ändern der Datei einhalten. Ohne geordneten Zugriff
            wird schließlich jemand seine Zeit auf Änderungen
            verschwenden, die längst verworfen wurden.</para>

<!--
          <para>While Subversion is primarily a copy-modify-merge
            system, it still recognizes the need to lock an occasional
            file, and thus provides mechanisms for this.  We discuss
            this feature in <xref linkend="svn.advanced.locking"/>.</para>
-->
          <para>Auch wenn Subversion vorrangig ein
            Kopieren-Ändern-Zusammenführen-System ist, erkennt es die
            Notwendigkeit des Sperrens vereinzelter Dateien an und
            bietet dafür die Mechanismen. Wir diskutieren dieses
            Feature in <xref linkend="svn.advanced.locking"/>.</para>

        </sidebar>

      </sect3>
    </sect2>
  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.basic.in-action">
<!--
    <title>Version Control the Subversion Way</title>
-->
    <title>Versionskontrolle nach Art von Subversion</title>

<!--
    <para>We've mentioned already that Subversion is a modern,
      network-aware version control system.  As we described in
      <xref linkend="svn.basic.version-control-basics"/> (our
      high-level version control overview), a repository serves as the
      core storage mechanism for Subversion's versioned data, and it's
      via working copies that users and their software programs
      interact with that data.  In this section, we'll begin to
      introduce the specific ways in which Subversion implements
      version control.</para>
-->
    <para>Wir haben bereits erwähnt, dass Subversion ein modernes,
      netzbewusstes Versionskontrollsystem. Wie wir in
      <xref linkend="svn.basic.version-control-basics"/> beschrieben
      haben (unser Versionskontroll-Überblick auf hoher Ebene), dient
      ein Projektarchiv als Kern-Speichermechanismus für die
      versionierten Daten von Subversion, und über Arbeitskopien
      kommunizieren Anwender und ihre Software mit diesen Daten. In
      diesem Abschnitt werden wir damit beginnen, die besonderen
      Vorgehensweisen von Subversion bei der Implementierung von
      Versionskontrolle vorzustellen.</para>

    <!-- =============================================================== -->
    <sect2 id="svn.basic.svn-repositories">
<!--
      <title>Subversion Repositories</title>
-->
      <title>Subversion Projektarchive</title>

<!--
      <para>Subversion implements the concept of a version control
        repository much as any other modern version control system
        would.  Unlike a working copy, a Subversion repository is an
        abstract entity, able to be operated upon almost exclusively
        by Subversion's own libraries and tools.  As most of a user's
        Subversion interactions involve the use of the Subversion
        client and occur in the context of a working copy, we spend
        the majority of this book discussing the Subversion working
        copy and how to manipulate it.  For the finer details of the
        repository, though, check out
        <xref linkend="svn.reposadmin"/>.</para>
-->
      <para>Subversion implementiert das Konzept eines Projektarchivs
        für Versionskontrolle so, wie es jedes andere moderne
        Versionskontrollsystem auch machen würde. Im Gegensatz zu
        einer Arbeitskopie ist ein Subversion-Projektarchiv ein
        abstraktes Gebilde, das sich fast ausschließlich über die
        eigenen Subversion-Bibliotheken und -Werkzeuge manipulieren
        lässt. Da die meisten Interaktionen eines Anwenders mit
        Subversion die Benutzung des Subversion-Clients einbeziehen
        und im Kontext einer Arbeitskopie vollzogen werden, wird sich
        ein großer Teil dieses Buches mit dem Subversion-Projektarchiv
        und dessen Bearbeitung beschäftigen. Für die Feinheiten des
        Projektarchivs, siehe allerdings 
        <xref linkend="svn.reposadmin"/>.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.basic.in-action.revs">
<!--
      <title>Revisions</title>
-->
      <title>Revisionen</title>

<!--
      <indexterm>
        <primary>revisions</primary>
        <secondary>defined</secondary>
      </indexterm>

      <para>A Subversion client commits (that is, communicates the
        changes made to) any number of files and directories as a
        single atomic transaction.  By atomic transaction, we mean
        simply this: either all of the changes are accepted into the
        repository, or none of them is.  Subversion tries to retain
        this atomicity in the face of program crashes, system crashes,
        network problems, and other users' actions.</para>
-->
      <indexterm>
        <primary>Revisionen</primary>
        <secondary>Definition</secondary>
      </indexterm>

      <para>Ein Subversion-Client übergibt eine (d.h., übermittelt die
        Änderungen an einer) beliebigen Anzahl von Dateien und
        Verzeichnissen als eine einzige atomare Transaktion. Eine
        atomare Transaktion bedeutet: entweder es gehen alle
        Änderungen in das Projektarchiv oder keine. Angesichts von
        Programmabstürzen, Systemabstürzen, Netzproblemen oder anderer
        Benutzeraktionen hält Subversion an dieser Atomizität
        fest.</para>

<!--
      <para>Each time the repository accepts a commit, this creates a
        new state of the filesystem tree, called a
        <firstterm>revision</firstterm>.  Each revision is assigned a
        unique natural number, one greater than the number assigned to
        the previous revision.  The initial revision of a freshly
        created repository is numbered 0 and consists of nothing but
        an empty root directory.</para>
-->
      <para>Jedes Mal wenn das Projektarchiv eine Übertragung annimmt,
        wird ein neuer Zustand des Dateisystem-Baums erzeugt, der
        <firstterm>Revision</firstterm> genannt wird. Jeder Revision
        wird eine einmalige natürliche Zahl zugewiesen, die um eins
        größer ist als die Vorgänger-Revision. Die anfängliche
        Revision eines frisch erzeugten Projektarchivs bekommt die
        Nummer 0 und besteht lediglich aus einem leeren
        Wurzelverzeichnis.</para>

<!--
      <para><xref linkend="svn.basic.in-action.revs.dia-1"/>
        illustrates a nice way to visualize the repository.  Imagine
        an array of revision numbers, starting at 0, stretching from
        left to right.  Each revision number has a filesystem tree
        hanging below it, and each tree is a <quote>snapshot</quote>
        of the way the repository looked after a commit.</para>
-->
      <para><xref linkend="svn.basic.in-action.revs.dia-1"/> zeigt,
        wie man sich das Projektarchiv vorstellen kann. Stellen Sie
        sich eine Reihe von Revisionsnummern vor, die bei 0 startet
        und von links nach rechts wächst. Jede Revisionsnummer hat
        einen Dateisystem-Baum unter sich hängen, der ein
        <quote>Schnappschuss</quote> des Projektarchivs nach einer
        Übertragung ist.</para>

      <figure id="svn.basic.in-action.revs.dia-1">
<!--
        <title>Tree changes over time</title>
-->
        <title>Änderungen am Baum im Verlauf der Zeit</title>
        <graphic fileref="images/ch02dia7.png"/>
      </figure>

      <sidebar>
<!--
        <title>Global Revision Numbers</title>
-->
        <title>Globale Revisionsnummern</title>

<!--
        <indexterm>
          <primary>revisions</primary>
          <secondary>global</secondary>
        </indexterm>

        <para>Unlike most version control systems, Subversion's
          revision numbers apply to <emphasis>the entire repository
          tree</emphasis>, not individual files.  Each revision number
          selects an entire tree, a particular state of the repository
          after some committed change.  Another way to think about it
          is that revision N represents the state of the repository
          filesystem after the Nth commit.  When Subversion users talk
          about <quote>revision 5 of
          <filename>foo.c</filename>,</quote> they really mean
          <quote><filename>foo.c</filename> as it appears in revision
          5.</quote> Notice that in general, revisions N and M of a
          file do <emphasis>not</emphasis> necessarily differ!  Many
          other version control systems use per-file revision numbers,
          so this concept may seem unusual at first. (Former CVS users
          might want to see <xref linkend="svn.forcvs"/> for more
          details.)</para>
-->
        <indexterm>
          <primary>Revisionen</primary>
          <secondary>globale</secondary>
        </indexterm>

        <para>Anders als die meisten Versionskontrollsysteme werden
          die Revisionsnummern von Subversion auf
          <emphasis>den kompletten Projektarchiv-Baum</emphasis>
          anstatt auf einzelne Dateien angewendet. Jede
          Revisionsnummer wählt einen kompletten Baum aus; ein
          bestimmter Zustand nach der Übertragung einer Änderung. Man
          kann sich auch vorstellen, dass Revision N den Zustand des
          Projektarchiv-Dateisystems nach der n-ten Übertragung
          repräsentiert. Wenn Subversion-Benutzer von <quote>Revision
          5 von <filename>foo.c</filename></quote> sprechen, meinen
          sie tatsächlich <quote><filename>foo.c</filename> so wie es
          in Revision 5 aussieht</quote>. Beachten Sie, dass sich im
          Allgemeinen die Revisionen N und M einer Datei
          <emphasis>nicht</emphasis> notwendigerweise unterscheiden!
          Viele andere Versionskontrollsysteme verwenden dateibezogene
          Revisionsnummern, so dass dieses Konzept zunächst
          ungewöhnlich aussieht. (Ehemalige CVS-Benutzer sollten sich
          für weitergehende Informationen <xref linkend="svn.forcvs"/>
          ansehen.)</para>
      </sidebar>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.advanced.reposurls">
<!--
      <title>Addressing the Repository</title>
-->
      <title>Projektarchive adressieren</title>

<!--
      <indexterm>
        <primary>svn</primary>
        <secondary>syntax</secondary>
        <tertiary>URLs</tertiary>
      </indexterm>
      <indexterm>
        <primary>svnsync</primary>
        <secondary>syntax</secondary>
        <tertiary>URLs</tertiary>
      </indexterm>

      <para>Subversion client programs use URLs to identify versioned
        files and directories in Subversion repositories.  For the
        most part, these URLs use the standard syntax, allowing for
        server names and port numbers to be specified as part of the
        URL.</para>
-->
      <indexterm>
        <primary>svn</primary>
        <secondary>Syntax</secondary>
        <tertiary>URLs</tertiary>
      </indexterm>
      <indexterm>
        <primary>svnsync</primary>
        <secondary>Syntax</secondary>
        <tertiary>URLs</tertiary>
      </indexterm>

      <para>Subversion-Client-Programme verwenden URLs, um Dateien und
        Verzeichnisse in Subversion-Projektarchivs zu identifizieren.
        Meistens benutzen diese URLs die Standardsyntax, die es
        erlaubt, Servernamen und Portnummern als Teil des URL zu
        spezifizieren.</para>

      <informalexample>
        <itemizedlist spacing="compact">
          <listitem>
            <simpara>http://svn.example.com/svn/project</simpara>
          </listitem>
          <listitem>
            <simpara>http://svn.example.com:9834/repos</simpara>
          </listitem>
        </itemizedlist>
      </informalexample>

<!--
      <para>Subversion repository URLs aren't limited to only
        the <literal>http://</literal> variety.  Because Subversion
        offers several different ways for its clients to communicate
        with its servers, the URLs used to address the repository
        differ subtly depending on which repository access mechanism
        is employed.  <xref linkend="svn.basic.in-action.wc.tbl-1"/>
        describes how different URL schemes map to the available
        repository access methods.  For more details about
        Subversion's server options, see
        <xref linkend="svn.serverconfig"/>.</para>
-->
      <para>Die Subversion-Projektarchiv-URLs sind nicht beschränkt
        auf den Typ <literal>http://</literal>. Da Subversion mehrere
        unterschiedliche Kommunikationswege zwischen seinen Clients
        und Servern anbietet, unterscheiden sich die zur Adressierung
        des Projektarchivs verwendeten URLs auf eine subtile Art,
        abhängig davon, welcher Zugriffsmechanismus zum Projektarchiv
        angewendet werden soll.
        <xref linkend="svn.basic.in-action.wc.tbl-1"/> beschreibt, wie
        unterschiedliche  URL Schemata auf die verfügbaren
        Zugriffsmethoden abgebildet werden. Details über die
        Serveroptionen von Subversion finden Sie unter
        <xref linkend="svn.serverconfig"/>.</para>

      <table id="svn.basic.in-action.wc.tbl-1">
<!--
        <title>Repository access URLs</title>
-->
        <title>Projektarchiv-Zugriffs-URLs</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Schema</entry>
<!--
              <entry>Access method</entry>
-->
              <entry>Zugriffsmethode</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>file:///</literal></entry>
<!--
              <entry>Direct repository access (on local disk)</entry>
-->
              <entry>Direkter Zugriff auf das Projektarchiv (auf lokaler Platte)</entry>
            </row>
            <row>
              <entry><literal>http://</literal></entry>
<!--
              <entry>Access via WebDAV protocol to Subversion-aware
                Apache server</entry>
-->
              <entry>Zugriff über das WebDAV-Protokoll auf
                Apache-Server, die Subversion abhandeln können
              </entry>
            </row>
            <row>
              <entry><literal>https://</literal></entry>
<!--
              <entry>Same as <literal>http://</literal>, but with
                SSL encryption</entry>
-->
              <entry>Wie <literal>http://</literal>, jedoch mit
                SSL-Verschlüsselung</entry>
            </row>
            <row>
              <entry><literal>svn://</literal></entry>
<!--
              <entry>Access via custom protocol to an
                <literal>svnserve</literal> server</entry>
-->
              <entry>Zugriff über ein besonderes Protokoll auf einen
                <literal>svnserve</literal>-Server</entry>
            </row>
            <row>
              <entry><literal>svn+ssh://</literal></entry>
<!--
              <entry>Same as <literal>svn://</literal>, but through
                an SSH tunnel</entry>
-->
              <entry>Wie <literal>svn://</literal>, jedoch über einen
                SSH Tunnel</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

<!--
      <para>Subversion's handling of URLs has some notable nuances.
        For example, URLs containing the <literal>file://</literal>
        access method (used for local repositories) must, in
        accordance with convention, have either a server name
        of <literal>localhost</literal> or no server name at
        all:</para>
-->
      <para>Allerdings gibt es einige bemerkenswerte Feinheiten, wie
        Subversion mit URLs umgeht. Beispielsweise dürfen URLs, die
        die <literal>file://</literal>-Zugriffsmethode enthalten (für
        lokale Projektarchive verwendet), gemäß Konvention entweder
        den Servernamen <literal>localhost</literal> oder gar keinen
        Servernamen enthalten:</para>

      <informalexample>
        <itemizedlist spacing="compact">
          <listitem>
            <simpara>file:///var/svn/repos</simpara>
          </listitem>
          <listitem>
            <simpara>file://localhost/var/svn/repos</simpara>
          </listitem>
        </itemizedlist>
      </informalexample>


<!--
      <para>Also, users of the <literal>file://</literal> scheme on
        Windows platforms will need to use an unofficially
        <quote>standard</quote> syntax for accessing repositories
        that are on the same machine, but on a different drive than
        the client's current working drive.  Either of the two
        following URL path syntaxes will work, where
        <literal>X</literal> is the drive on which the repository
        resides:</para>
-->
      <para>Darüber hinaus müssen Benutzer des
        <literal>file://</literal> Schemas auf Windows-Plattformen
        eine inoffizielle <quote>Standard</quote>-Syntax verwenden
        falls auf Projektarchive auf derselben Maschine aber auf einem
        anderen Laufwerk zugegriffen werden soll.  Beide  der
        folgenden URL-Pfad-Syntaxen funktionieren, wobei
        <literal>X</literal> das Laufwerk ist, wo das Projektarchiv
        liegt:</para>

      <informalexample>
        <itemizedlist spacing="compact">
          <listitem>
            <simpara>file:///X:/var/svn/repos</simpara>
          </listitem>
          <listitem>
            <simpara>file:///X|/var/svn/repos</simpara>
          </listitem>
        </itemizedlist>
      </informalexample>

<!--
      <para>Note that a URL uses forward slashes even though the
        native (non-URL) form of a path on Windows uses backslashes.
        Also note that when using
        the <literal>file:///<replaceable>X</replaceable>|/</literal>
        form at the command line, you need to quote the URL (wrap it
        in quotation marks) so that the vertical bar character is not
        interpreted as a pipe.</para>
-->
      <para>Beachten Sie, dass ein URL Schrägstriche verwendet, selbst
        wenn die übliche (nicht-URL) Form eines Pfades unter Windows
        rückwärtige Schrägstriche verwendet. Beachten Sie ebenfalls,
        bei der Verwendung des Formats
        <literal>file:///<replaceable>X</replaceable>|/</literal>
        den URL in Anführungsstriche einzuschließen, damit der senkrechte Strich nicht als
        Pipe-Symbol interpretiert wird.</para>

      <note>
<!--
        <para>You cannot use Subversion's <literal>file://</literal> URLs
          in a regular web browser the way typical
          <literal>file://</literal> URLs can.  When you attempt to view
          a <literal>file://</literal> URL in a regular web browser, it
          reads and displays the contents of the file at that location
          by examining the filesystem directly.  However, Subversion's
          resources exist in a virtual filesystem (see <xref
          linkend="svn.developer.layerlib.repos" />), and your browser
          will not understand how to interact with that
          filesystem.</para>
-->
        <para>Sie können die <literal>file://</literal> URLs von Subversion
          nicht in einem normalen Web-Browser auf die Art und
          Weise verwenden wie andere <literal>file://</literal>
          URLs. Falls Sie versuchen, einen <literal>file://</literal>
          URL in einem gewöhnlichen Web-Browser anzusehen, wird der
          Inhalt der Datei von der angegebenen Stelle direkt aus dem
          Dateisystem gelesen und angezeigt. Allerdings befinden sich
          die Daten von Subversion in einem virtuellen Dateisystem
          (siehe <xref linkend="svn.developer.layerlib.repos" />), und
          der Browser wird nicht mit diesem Dateisystem umzugehen
          wissen.</para>
      </note>

<!--
      <para>The Subversion client will automatically encode URLs as
        necessary, just like a web browser does.  For example, the URL
        <literal>http://host/path with space/project/españa</literal>
        &mdash; which contains both spaces and upper-ASCII characters
        &mdash; will be automatically interpreted by Subversion as if
        you'd provided
        <literal>http://host/path%20with%20space/project/espa%C3%B1a</literal>.
        If the URL contains spaces, be sure to place it within
        quotation marks at the command line so that your shell treats
        the whole thing as a single argument to the program.</para>
-->
      <para>Der Subversion-Client wandelt URLs nach Bedarf automatisch
        um, wie es auch ein Web-Browser macht. So wird beispielsweise
        der URL
        <literal>http://host/path with space/project/españa</literal>
        &ndash; der sowohl Leerzeichen als auch Zeichen aus dem
        höheren ASCII-Bereich enthält &ndash; automatisch von
        Subversion so interpretiert als ob sie
        <literal>http://host/path%20with%20space/project/espa%C3%B1a</literal>
        geschrieben hätten. Falls der URL Leerzeichen enthält, stellen
        Sie sicher, ihn  auf der Kommandozeile in Anführungszeichen zu
        setzen, so dass Ihre Shell alles als ein einzelnes Argument
        für das Programm behandelt.</para>

<!--
      <para>There is one notable exception to Subversion's handling of
        URLs which also applies to its handling of local paths in many
        contexts, too.  If the final path component of your URL or
        local path contains an at sign (<literal>@</literal>), you need
        to use a special syntax&mdash;described in
        <xref linkend="svn.advanced.pegrevs" />&mdash;in order to make
        Subversion properly address that resource.</para>
-->
      <para>Es gibt eine erwähnenswerte Ausnahme von der Regel, wie
        Subversion URLs behandelt, die in vielen Kontexten auch auf
        die Behandlung lokaler Pfade anwendbar ist. Falls die letzte
        Pfadkomponente des URL oder lokalen Pfades einen Klammeraffen
        (<literal>@</literal>) enthält, müssen Sie eine besondere
        Syntax verwenden &ndash; in
        <xref linkend="svn.advanced.pegrevs"/> beschrieben &ndash;
        damit Subversion diese Ressource passend ansprechen
        kann.</para>

<!--
      <para>In Subversion 1.6, a new caret (<literal>^</literal>)
        notation was introduced as a shorthand for <quote>the URL of
        the repository's root directory</quote>.  For example, you can
        use the <literal>^/tags/bigsandwich/</literal> to refer to the
        URL of the <filename>/tags/bigsandwich</filename> directory in
        the root of the repository.  Note that this URL syntax works
        only when your current working directory is a working
        copy&mdash;the command-line client knows the repository's root
        URL by looking at the working copy's metadata.  Also note that
        when you wish to refer precisely to the root directory of the
        repository, you must do so using <literal>^/</literal> (with
        the trailing slash character), not merely
        <literal>^</literal>.</para>
-->
      <para>In Subversion 1.6 wurde eine neue Notation mit Zirkumflex
        (<literal>^</literal>) als Kurzschreibweise für <quote>der URL
        des Wurzelverzeichnisses des Projektarchivs</quote>
        eingeführt. Sie können beispielsweise
        <literal>^/tags/bigsandwich/</literal> verwenden, um sich auf
        den URL des Verzeichnisses
        <filename>/tags/bigsandwich</filename> im Wurzelverzeichnis
        des Projektarchivs zu beziehen. Beachten Sie, dass dieser URL
        nur dann funktioniert, wenn Ihre aktuelles Arbeitsverzeichnis
        eine Arbeitskopie ist &ndash; der Kommandozeilen-Client kennt
        den URL des Projektarchiv-Wurzelverzeichnisses, da er sich die
        Metadaten der Arbeitskopie ansieht. Beachten Sie auch, dass
        Sie <literal>^/</literal> statt nur <literal>^</literal>
        verwenden (mit dem abschließenden Schrägstrich), wenn Sie sich
        auf das Wurzelverzeichnis des Projektarchivs beziehen möchten.
        </para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.basic.in-action.wc">
<!--
      <title>Subversion Working Copies</title>
-->
      <title>Subversion-Arbeitskopien</title>


<!--
      <indexterm>
        <primary>working copy</primary>
        <secondary>defined</secondary>
      </indexterm>

      <para>A Subversion working copy is an ordinary directory tree on
        your local system, containing a collection of files.  You can
        edit these files however you wish, and if they're source code
        files, you can compile your program from them in the usual
        way.  Your working copy is your own private work area:
        Subversion will never incorporate other people's changes, nor
        make your own changes available to others, until you
        explicitly tell it to do so.  You can even have multiple
        working copies of the same project.</para>
-->
      <indexterm>
        <primary>Arbeitskopie</primary>
        <secondary>Definition</secondary>
      </indexterm>

      <para>Eine Subversion-Arbeitskopie ist ein gewöhnlicher
        Verzeichnisbaum auf Ihrem lokalen System, der eine Ansammlung
        von Dateien enthält. Sie können diese Dateien nach belieben
        bearbeiten, und wenn es sich um Quelltexte handelt, können Sie
        hieraus Ihr Programm auf die übliche Weise compilieren. Ihre
        Arbeitskopie ist Ihr privater Arbeitsbereich: nie wird
        Subversion weder die Änderungen von anderen einpflegen, noch
        Ihre eigenen Änderungen anderen zur Verfügung stellen, bis Sie
        es ausdrücklich dazu auffordern. Sie können sogar mehrere
        Arbeitskopien desselben Projektes haben.</para>

<!--
      <para>After you've made some changes to the files in your
        working copy and verified that they work properly, Subversion
        provides you with commands to <quote>publish</quote> your
        changes to the other people working with you on your project
        (by writing to the repository).  If other people publish their
        own changes, Subversion provides you with commands to merge
        those changes into your working copy (by reading from the
        repository).</para>
-->
      <para>Nachdem Sie einige Änderungen an den Dateien Ihrer
        Arbeitskopie gemacht und sichergestellt haben, dass sie
        funktionieren, stellt Ihnen Subversion Befehle zur Verfügung,
        um Ihre Änderungen den anderen, die an Ihrem Projekt
        mitarbeiten, <quote>publik</quote> zu machen (indem es ins
        Projektarchiv schreibt). Wenn die anderen ihre Änderungen
        veröffentlichen, stellt Ihnen Subversion Befehle zur
        Verfügung, um diese Änderungen in Ihr Arbeitsverzeichnis
        einzupflegen (indem es aus dem Projektarchiv liest).</para>

      <!-- ### TODO:  This will change in 1.7! -->
<!--
      <para>A working copy also contains some extra files, created and
        maintained by Subversion, to help it carry out these commands.
        In particular, each directory in your working copy contains a
        subdirectory named <filename>.svn</filename>, also known as
        the working copy's <firstterm>administrative
        directory</firstterm>.  The files in each administrative
        directory help Subversion recognize which files contain
        unpublished changes, and which files are out of date with
        respect to others' work.</para>
-->
      <para>Eine Arbeitskopie verfügt darüber hinaus über einige
        zusätzliche Dateien, die von Subversion erzeugt und gepflegt
        werden, um es bei diesen Befehlen zu unterstützen.
        Insbesondere enthält jedes Verzeichnis Ihrer Arbeitskopie ein
        Unterverzeichnis namens <filename>.svn</filename>, auch
        bekannt als das <firstterm>Verwaltungsverzeichnis</firstterm>
        der Arbeitskopie. Die Dateien in jedem Verwaltungsverzeichnis
        helfen Subversion dabei, zu erkennen, welche Dateien
        unveröffentlichte Änderungen enthalten und welche Dateien
        hinsichtlich der Arbeit anderer veraltet sind.</para>

<!--
      <tip>
        <para>While <filename>.svn</filename> is the de facto name of
          the Subversion administrative directory, Windows users may
          run into problems with the ASP.NET Web application framework
          disallowing access to directories whose names begin with a
          dot (<literal>.</literal>).  As a special consideration to
          users in such situations, Subversion will instead use
          <literal>_svn</literal> as the administrative directory name
          if it finds a variable
          named <literal>SVN_ASP_DOT_NET_HACK</literal> in its
          operating environment.  Throughout this book, any reference
          you find to <filename>.svn</filename> applies also
          to <literal>_svn</literal> when this <quote>ASP.NET
          hack</quote> is in use.</para>
      </tip>
-->
      <tip>
        <para>Obwohl <filename>.svn</filename> der allgemeine
          Standardname für das Subversion-Verwaltungsverzeichnis ist,
          könnten Windows mit dem  ASP.NET Web-Application-Framework
          bekommen, das Zugriff auf Verzeichnisse verbietet, deren
          Namen mit einem Punkt (<literal>.</literal>) beginnt. Mit
          Rücksicht auf Anwender in solchen Situationen verwendet
          Subversion stattdessen <literal>_svn</literal> als Namen für
          das Verwaltungsverzeichnis, falls es eine Variable namens
          <literal>SVN_ASP_DOT_NET_HACK</literal> in seiner
          Arbeitsumgebung findet. Für dieses Buch gelten durchgängig
          alle Referenzen auf <filename>.svn</filename> ebenfalls für
          <literal>_svn</literal>, falls dieser <quote>ASP.NET
          Hack</quote> angewendet wird.</para>
      </tip>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.basic.in-action.track-repos">
<!--
        <title>How the working copy works</title>
-->
        <title>Wie die Arbeitskopie funktioniert</title>

<!--
        <para>For each file in a working directory, Subversion records
          (among other things) two essential pieces of
          information:</para>
-->
        <para>Für jede Datei eines Arbeitsverzeichnis merkt sich
          Subversion (neben anderen Dingen) zwei essentielle
          Informationen:</para>


        <itemizedlist>
          <listitem>
<!--
            <para>What revision your working file is based on (this is
              called the file's <firstterm>working
              revision</firstterm>)</para>
-->
            <para>Auf welcher Revision Ihre Arbeitsdatei aufbaut (das
              wird die <firstterm>Arbeitsrevision</firstterm> der Datei
              genannt)</para>
          </listitem>

          <listitem>
<!--
            <para>A timestamp recording when the local copy was last
              updated by the repository</para>
-->
            <para>Ein Zeitstempel, der festhält, wann die lokale Kopie
              das letzte Mal vom Projektarchiv aktualisiert wurde.</para>
          </listitem>
        </itemizedlist>

<!--
        <para>Given this information, by talking to the repository,
          Subversion can tell which of the following four states a
          working file is in:</para>
-->
        <para>Mit diesen Informationen kann Subversion durch
          Kommunikation mit dem Projektarchiv feststellen, in
          welchem der folgenden Zustände sich eine Arbeitsdatei
          befindet:</para>

        <variablelist>
          <varlistentry>
<!--
            <term>Unchanged, and current</term>
-->
            <term>Unverändert und aktuell</term>

            <listitem>
<!--
              <para>The file is unchanged in the working directory, and
                no changes to that file have been committed to the
                repository since its working revision.  An <command>svn
                commit</command> of the file will do nothing, and an
                <command>svn update</command> of the file will do
                nothing.</para>
-->
              <para>Die Datei im Arbeitsverzeichnis ist unverändert, und
                keinerlei Änderungen an der Datei sind seit der
                Arbeitsrevision an das Projektarchiv übergeben worden. Ein
                <command>svn commit</command> der Datei würde nichts
                machen, und ein <command>svn update</command> der Datei
                auch nicht.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
<!--
            <term>Locally changed, and current</term>
-->
            <term>Lokal geändert und aktuell</term>

            <listitem>
<!--
              <para>The file has been changed in the working directory,
                and no changes to that file have been committed to the
                repository since you last updated.  There are local
                changes that have not been committed to the repository;
                thus an <command>svn commit</command> of the file will
                succeed in publishing your changes, and an <command>svn
                update</command> of the file will do nothing.</para>
-->
              <para>Die Datei wurde im Arbeitsverzeichnis geändert, und
                keinerlei Änderungen an der Datei sind seit der letzten
                Aktualisierung an das Projektarchiv übergeben worden. Es
                gibt lokale Änderungen, die noch nicht an das Projektarchiv
                übergeben worden sind, so dass ein <command>svn
                commit</command> der Datei Ihre Änderungen erfolgreich
                veröffentlichen würde, und ein <command>svn
                update</command> der Datei nichts tun würde.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
<!--
            <term>Unchanged, and out of date</term>
-->
            <term>Unverändert und veraltet</term>

            <listitem>
<!--
              <para>The file has not been changed in the working
                directory, but it has been changed in the repository.
                The file should eventually be updated in order to make
                it current with the latest public revision.
                An <command>svn commit</command> of the file will do
                nothing, and an
                <command>svn update</command> of the file will fold the
                latest changes into your working copy.</para>
-->
              <para>Die Datei wurde im Arbeitsverzeichnis nicht
                geändert, jedoch im Projektarchiv. Die Datei sollte
                aktualisiert werden, damit sie bezüglich der letzten
                öffentlichen Revision aktuell ist. Ein <command>svn
                commit</command> der Datei würde nichts machen, und
                ein <command>svn update</command> der Datei würde die
                letzten Änderungen in Ihre Arbeitskopie
                einbringen.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
<!--
            <term>Locally changed, and out of date</term>
-->
            <term>Lokal geändert und veraltet</term>

            <listitem>
<!--
              <para>The file has been changed both in the working
                directory and in the repository.  An <command>svn
                commit</command> of the file will fail with an
                <quote>out-of-date</quote> error.  The file should be
                updated first; an <command>svn update</command> command
                will attempt to merge the public changes with the local
                changes.  If Subversion can't complete the merge in a
                plausible way automatically, it leaves it to the user to
                resolve the conflict.</para>
-->
              <para>Die Datei wurde sowohl im Arbeitsverzeichnis als
                auch im Projektarchiv geändert. Ein <command>svn
                commit</command> der Datei würde mit einem
                <quote>out-of-date</quote> Fehler abbrechen. Die Datei
                sollte erst aktualisiert werden; ein <command>svn
                update</command> Befehl würde versuchen, die
                öffentlichen mit den lokalen Änderungen
                zusammenzuführen.  Wenn Subversion diese
                Zusammenführung nicht plausibel automatisch
                durchführen kann, wird die Auflösung des Konflikts dem
                Benutzer überlassen.</para>
            </listitem>
          </varlistentry>
        </variablelist>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.basic.in-action.wc-funcdamentals">
<!--
        <title>Fundamental working copy interactions</title>
-->
        <title>Grundlegende Interaktionen der Arbeitskopie</title>

<!--
        <para>A typical Subversion repository often holds the files (or
          source code) for several projects; usually, each project is a
          subdirectory in the repository's filesystem tree.  In this
          arrangement, a user's working copy will usually correspond to
          a particular subtree of the repository.</para>
-->
        <para>Oft enthält ein typisches Subversion-Projektarchiv die
          Dateien (oder den Quelltext) für verschiedene Projekte; für
          gewöhnlich ist jedes Projekt ein Unterverzeichnis im
          Dateisystembaum des Projektarchivs.  Bei dieser Anordnung
          entspricht die Arbeitskopie eines Benutzers gewöhnlich einem
          bestimmten Unterverzeichnis des Projektarchivs.</para>

<!--
        <para>For example, suppose you have a repository that contains
          two software projects, <literal>paint</literal> and
          <literal>calc</literal>.  Each project lives in its own
          top-level subdirectory, as shown in <xref
          linkend="svn.basic.in-action.wc.dia-1"/>.</para>
-->
        <para>Nehmen wir zum Beispiel an, Sie haben ein Projektarchiv, das
          zwei Software-Projekte beinhaltet, <literal>paint</literal> und
          <literal>calc</literal>.  Jedes Projekt ist in einem eigenen
          Hauptverzeichnis abgelegt, wie in <xref
          linkend="svn.basic.in-action.wc.dia-1"/> dargestellt.</para>

        <figure id="svn.basic.in-action.wc.dia-1">
<!--
          <title>The repository's filesystem</title>
-->
          <title>Das Dateisystem des Projektarchivs</title>
          <graphic fileref="images/ch02dia6.png"/>
        </figure>

<!--
        <indexterm>
          <primary>svn</primary>
          <secondary>subcommands</secondary>
          <tertiary>checkout</tertiary>
        </indexterm>
        <indexterm>
          <primary>working copy</primary>
          <secondary>creation</secondary>
        </indexterm>
        <indexterm>
          <primary>checkout</primary>
          <see>working copy, creation</see>
        </indexterm>

        <para>To get a working copy, you must <firstterm>check
          out</firstterm> some subtree of the repository.  (The term
          <emphasis>check out</emphasis> may sound like it has something to do
          with locking or reserving resources, but it doesn't; it simply
          creates a working copy of the project for you.)  For example,
          if you check out <filename>/calc</filename>, you will get a
          working copy like this:</para>
-->
        <indexterm>
          <primary>svn</primary>
          <secondary>Unterbefehle</secondary>
          <tertiary>checkout</tertiary>
        </indexterm>
        <indexterm>
          <primary>Arbeitskopie</primary>
          <secondary>Erstellung</secondary>
        </indexterm>
        <indexterm>
          <primary>checkout</primary>
          <see>Arbeitskopie, Erstellung</see>
        </indexterm>

        <para>Um eine Arbeitskopie zu erhalten, muss zunächst irgendein
          Teilbaum des Projektarchivs <firstterm>ausgecheckt</firstterm>
          werden (check out).  (Der Begriff <emphasis>check
          out</emphasis> hört sich an, als habe es etwas mit dem
          Sperren oder Reservieren von Ressourcen zu tun, hat es aber
          nicht; es erzeugt lediglich eine Arbeitskopie des Projektes
          für Sie.) Wenn Sie zum Beispiel <filename>/calc</filename>
          auschecken, bekommen Sie eine Arbeitskopie wie diese:</para>

<!--
        <informalexample>
          <screen>
$ svn checkout http://svn.example.com/repos/calc
A    calc/Makefile
A    calc/integer.c
A    calc/button.c
Checked out revision 56.

$ ls -A calc
Makefile  button.c integer.c .svn/
</screen>
        </informalexample>
-->
        <informalexample>
          <screen>
$ svn checkout http://svn.example.com/repos/calc
A    calc/Makefile
A    calc/integer.c
A    calc/button.c
Ausgecheckt, Revision 56.

$ ls -A calc
Makefile  button.c integer.c .svn/
</screen>
        </informalexample>

<!--
        <para>The list of letter <literal>A</literal>s in the left
          margin indicates that Subversion is adding a number of items
          to your working copy.  You now have a personal copy of the
          repository's <filename>/calc</filename> directory, with one
          additional entry&mdash;<filename>.svn</filename>&mdash;which
          holds the extra information needed by Subversion, as mentioned
          earlier.</para>
-->
        <para>Die Liste der <literal>A</literal>s am linken Rand zeigt
          an, dass Subversion Ihrer Arbeitskopie eine Anzahl von
          Objekten hinzufügt (Add).  Sie haben nun eine persönliche
          Kopie des Verzeichnisses <filename>/calc</filename> im
          Projektarchiv, mit einem zusätzlichen Eintrag &ndash;
          <filename>.svn</filename> &ndash; das, wie bereits
          erwähnt, die besonderen Informationen enthält, die Subversion
          benötigt.</para>

<!--
        <para>Suppose you make changes to <filename>button.c</filename>.
          Since the <filename>.svn</filename> directory remembers the
          file's original modification date and contents, Subversion can
          tell that you've changed the file.  However, Subversion does
          not make your changes public until you explicitly tell it to.
          The act of publishing your changes is more commonly known as
          <firstterm>committing</firstterm> (or <firstterm>checking
          in</firstterm>) changes to the repository.</para>
-->
        <para>Angenommen, Sie nehmen Änderungen an
          <filename>button.c</filename> vor. Da sich das Verzeichnis
          <filename>.svn</filename> den ursprünglichen
          Änderungszeitpunkt und den Inhalt der Datei merkt, kann
          Subversion erkennen, dass Sie die Datei verändert haben.
          Trotzdem veröffentlicht Subversion Ihre Änderungen solange
          nicht, bis Sie es ausdrücklich hierzu auffordern. Der Vorgang
          des Veröffentlichens von Änderungen über das Projektarchiv ist
          gemeinhin bekannter als <firstterm>commit</firstterm> (oder
          <firstterm>check in</firstterm>).</para>

<!--
        <indexterm>
          <primary>svn</primary>
          <secondary>subcommands</secondary>
          <tertiary>commit</tertiary>
        </indexterm>
        <indexterm>
          <primary>committing</primary>
          <see>working copy, commit</see>
        </indexterm>
        <indexterm>
          <primary>working copy</primary>
          <secondary>commit</secondary>
        </indexterm>

        <para>To publish your changes to others, you can use
          Subversion's <command>svn commit</command> command:</para>
-->
        <indexterm>
          <primary>svn</primary>
          <secondary>Unterbefehle</secondary>
          <tertiary>commit</tertiary>
        </indexterm>
        <indexterm>
          <primary>Übertragen</primary>
          <see>Arbeitskopie, commit</see>
        </indexterm>
        <indexterm>
          <primary>Arbeitskopie</primary>
          <secondary>commit</secondary>
        </indexterm>

        <para>Um Ihre Änderungen anderen gegenüber zu veröffentlichen,
          können Sie den Subversion-Befehl <command>svn commit</command>
          verwenden:</para>

<!--
        <informalexample>
          <screen>
$ svn commit button.c -m "Fixed a typo in button.c."
Sending        button.c
Transmitting file data .
Committed revision 57.
</screen>
        </informalexample>
-->
        <informalexample>
          <screen>
$ svn commit button.c -m "Tippfehler in button.c korrigiert"
Sende          button.c
Übertrage Daten .
Revision 6 übertragen.
</screen>
        </informalexample>

<!--
        <para>Now your changes to <filename>button.c</filename> have
          been committed to the repository, with a note describing your
          change (namely, that you fixed a typo).  If another user
          checks out a working copy of <filename>/calc</filename>, she
          will see your changes in the latest version of the
          file.</para>
-->
        <para>Nun sind Ihre Änderungen an <filename>button.c</filename> dem
          Projektarchiv überstellt, mitsamt einer Notiz, die Ihre Änderung
          beschreibt (nämlich, dass Sie einen Tippfehler beseitigt
          haben). Wenn eine andere Benutzerin eine Arbeitskopie von
          <filename>/calc</filename> auscheckt, wird sie Ihre
          Änderungen in der letzten Version der Datei sehen
          können.</para>

<!--
        <para>Suppose you have a collaborator, Sally, who checked out a
          working copy of <filename>/calc</filename> at the same time
          you did.  When you commit your change to
          <filename>button.c</filename>, Sally's working copy is left
          unchanged; Subversion modifies working copies only at the
          user's request.</para>
-->
        <para>angenommen, Sie haben eine Mitarbeiterin, Sally, die eine
          Arbeitskopie von <filename>/calc</filename> gleichzeitig mit
          Ihnen ausgecheckt hat. Wenn Sie Ihre Änderung an
          <filename>button.c</filename> übertragen, bleibt Sallys
          Arbeitskopie unverändert; Subversion ändert Arbeitskopien nur
          auf Wunsch des Benutzers.</para>

<!--
        <indexterm>
          <primary>svn</primary>
          <secondary>subcommands</secondary>
          <tertiary>update</tertiary>
        </indexterm>
        <indexterm>
          <primary>updating</primary>
          <see>working copy, update</see>
        </indexterm>
        <indexterm>
          <primary>working copy</primary>
          <secondary>update</secondary>
        </indexterm>

        <para>To bring her project up to date, Sally can ask Subversion
          to <firstterm>update</firstterm> her working copy, by using
          the <command>svn update</command> command.  This will incorporate
          your changes into her working copy, as well as any others that
          have been committed since she checked it out.</para>
-->
        <indexterm>
          <primary>svn</primary>
          <secondary>Unterbefehle</secondary>
          <tertiary>update</tertiary>
        </indexterm>
        <indexterm>
          <primary>Aktualisierung</primary>
          <see>Arbeitskopie, update</see>
        </indexterm>
        <indexterm>
          <primary>Arbeitskopie</primary>
          <secondary>Aktualisierung</secondary>
        </indexterm>

        <para>Um ihr Projekt auf den neuesten Stand zu bringen, kann
          Sally Subversion dazu auffordern, ihre Arbeitskopie zu
          aktualisieren, indem sie den Befehl <command>svn update</command>
          verwendet. Das bringt sowohl Ihre als auch alle anderen
          Änderungen die übertragen wurden seit sie ausgecheckt hatte in
          ihre Arbeitskopie.</para>

<!--
        <informalexample>
          <screen>
$ pwd
/home/sally/calc

$ ls -A
Makefile button.c integer.c .svn/

$ svn update
U    button.c
Updated to revision 57.

</screen>
        </informalexample>
-->
        <informalexample>
      <screen>
$ pwd
/home/sally/calc

$ ls -A
Makefile button.c integer.c .svn/

$ svn update
U    button.c
Aktualisiert zu Revision 57.
</screen>
        </informalexample>

<!--
        <para>The output from the <command>svn update</command> command
          indicates that Subversion updated the contents of
          <filename>button.c</filename>.  Note that Sally didn't need to
          specify which files to update; Subversion uses the information
          in the <filename>.svn</filename> directory as well as further
          information in the repository, to decide which files need to
          be brought up to date.</para>
-->
        <para>Die Ausgabe des <command>svn update</command> Befehls
          zeigt, dass Subversion den Inhalt von
          <filename>button.c</filename> aktualisiert hat (Update).
          Beachten Sie, dass Sally nicht angeben musste, welche Dateien
          zu aktualisieren sind; Subversion benutzt die Informationen
          aus dem <filename>.svn</filename> Verzeichnis und
          darüber hinaus weitere Informationen im Projektarchiv, um zu
          entscheiden, welche Dateien auf den neuesten Stand gebracht
          werden müssen.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.basic.in-action.mixedrevs">
<!--
        <title>Mixed-revision working copies</title>
-->
        <title>Arbeitskopien mit gemischten Revisionen</title>

<!--
        <indexterm>
          <primary>working copy</primary>
          <secondary>mixed-revision</secondary>
        </indexterm>

        <para>As a general principle, Subversion tries to be as flexible
          as possible.  One special kind of flexibility is the ability
          to have a working copy containing files and directories with a
          mix of different working revision numbers.  Subversion working
          copies do not always correspond to any single revision in the
          repository; they may contain files from several different
          revisions.  For example, suppose you check out a working copy
          from a repository whose most recent revision is 4:</para>
-->
        <indexterm>
          <primary>Arbeitskopie</primary>
          <secondary>gemischte Revisionen</secondary>
        </indexterm>

        <para>Als allgemeingültiges Prinzip versucht Subversion, so
          flexibel wie möglich zu sein. Eine besondere Ausprägung der
          Flexibilität ist die Fähigkeit, eine Arbeitskopie bestehend
          aus Dateien und Verzeichnissen mit einer Mischung
          unterschiedlicher Revisionsnummern zu haben. Subversions
          Arbeitskopien entsprechen nicht jederzeit einer einzigen
          Revision des Projektarchivs; sie können Dateien aus mehreren
          unterschiedlichen Revisionen enthalten. Nehmen wir z.B. an,
          Sie checken sich eine Arbeitskopie einer Datei aus einem
          Projektarchiv aus, deren neueste Revision 4 ist:</para>

        <informalexample>
          <literallayout>
calc/
   Makefile:4
   integer.c:4
   button.c:4
</literallayout>
        </informalexample>

<!--
        <para>At the moment, this working directory corresponds exactly
          to revision 4 in the repository.  However, suppose you make a
          change to <filename>button.c</filename>, and commit that
          change.  Assuming no other commits have taken place, your
          commit will create revision 5 of the repository, and your
          working copy will now look like this:</para>
-->
        <para>In diesem Augenblick entspricht Ihre Arbeitskopie exakt
          der Revision im Projektarchiv. Sie machen jetzt allerdings eine
          Änderung an <filename>button.c</filename> und bringen diese
          Änderung mit einer Übertragung ins Projektarchiv. Angenommen, dass
          keine weiteren Übertragungen vorgenommen wurden, wird Ihre
          Übertragung die Revision 5 im Projektarchiv erzeugen, und Ihre
          Arbeitskopie sieht so aus:</para>

        <informalexample>
          <literallayout>
calc/
   Makefile:4
   integer.c:4
   button.c:5
</literallayout>
        </informalexample>

<!--
        <para>Suppose that, at this point, Sally commits a change to
          <filename>integer.c</filename>, creating revision 6.  If you
          use <command>svn update</command> to bring your working copy
          up to date, it will look like this:</para>
-->
        <para>Angenommen, zu diesem Zeitpunkt macht Sally eine Übertragung
          für eine Änderung an <filename>integer.c</filename> und
          erzeugt Revision 6. Wenn Sie <command>svn update</command>
          verwenden, um Ihre Arbeitskopie zu aktualisieren, sieht sie so
          aus:</para>

        <informalexample>
          <literallayout>
calc/
   Makefile:6
   integer.c:6
   button.c:6
</literallayout>
        </informalexample>

<!--
        <para>Sally's change to <filename>integer.c</filename> will
          appear in your working copy, and your change will still be
          present in <filename>button.c</filename>.  In this example,
          the text of <filename>Makefile</filename> is identical in
          revisions 4, 5, and 6, but Subversion will mark your working
          copy of <filename>Makefile</filename> with revision 6 to
          indicate that it is still current.  So, after you do a clean
          update at the top of your working copy, it will generally
          correspond to exactly one revision in the repository.</para>
-->
        <para>Sallys Änderung an <filename>integer.c</filename>
          erscheint in Ihrer Arbeitskopie, und Ihre Änderung ist immer
          noch in <filename>button.c</filename>.  In diesem Beispiel
          ist der Text von <filename>Makefile</filename> in den
          Revisionen 4, 5 und 6 identisch, jedoch markiert Subversion
          die Arbeitskopie von <filename>Makefile</filename> mit
          Revision 6, um zu zeigen, dass es noch aktuell ist. Wenn Sie
          also ein sauberes Update von der Wurzel Ihrer Arbeitskopie
          her machen, sollte sie im Allgemeinen genau einer Revision
          im Projektarchiv entsprechen.</para>

        <sect4 id="svn.basic.in-action.mixedrevs.update-commit">
<!--
          <title>Updates and commits are separate</title>
-->
          <title>Aktualisierungen und Übertragungen sind getrennt</title>

<!--
          <para>One of the fundamental rules of Subversion is that
            a <quote>push</quote> action does not cause
            a <quote>pull</quote> nor vice versa.  Just
            because you're ready to submit new changes to the repository
            doesn't mean you're ready to receive changes from other
            people.  And if you have new changes still in progress,
            <command>svn update</command> should gracefully merge
            repository changes into your own, rather than forcing you to
            publish them.</para>
-->
          <para>Eine der grundlegenden Regeln von Subversion ist, dass
            eine Aktion, die in das Projektarchiv schreibt keine
            Aktion zur Folge hat, die aus dem Projektarchiv liest und
            umgekehrt. Wenn Sie bereit sind, neue Änderungen an das
            Projektarchiv zu übergeben, heißt das noch lange nicht,
            dass Sie auch die Änderungen anderer haben möchten. Und
            wenn Sie noch an Änderungen arbeiten, sollte <command>svn
            update</command> elegant die Änderungen aus dem
            Projektarchiv mit Ihren Änderungen zusammenführen anstatt
            Sie dazu zu zwingen, Ihre Änderungen zu
            veröffentlichen.</para>

<!--
          <para>The main side effect of this rule is that it means a
            working copy has to do extra bookkeeping to track mixed
            revisions as well as be tolerant of the mixture.  It's made
            more complicated by the fact that directories themselves are
            versioned.</para>
-->
          <para>Der hauptsächliche Nebeneffekt dieser Regel ist, dass
            eine Arbeitskopie zusätzlich buchhalten muss, um sowohl
            gemischte Revisionen zu verfolgen als auch diese Mischung
            vertragen zu können. Die Tatsache, dass auch Verzeichnisse
            selbst versioniert sind, verkompliziert die Sache
            nur.</para>

<!--
          <para>For example, suppose you have a working copy entirely at
            revision 10.  You edit the
            file <filename>foo.html</filename> and then perform
            an <command>svn commit</command>, which creates revision 15
            in the repository.  After the commit succeeds, many new
            users would expect the working copy to be entirely at
            revision 15, but that's not the case!  Any number of changes
            might have happened in the repository between revisions 10
            and 15.  The client knows nothing of those changes in the
            repository, since you haven't yet run <command>svn
            update</command>, and <command>svn commit</command> doesn't
            pull down new changes.  If, on the other hand,
            <command>svn commit</command> were to automatically download
            the newest changes, it would be possible to set the
            entire working copy to revision 15&mdash;but then we'd be
            breaking the fundamental rule of <quote>push</quote>
            and <quote>pull</quote> remaining separate actions.
            Therefore, the only safe thing the Subversion client can do
            is mark the one
            file&mdash;<filename>foo.html</filename>&mdash;as being at
            revision 15.  The rest of the working copy remains at
            revision 10.  Only by running <command>svn update</command>
            can the latest changes be downloaded and the whole working
            copy be marked as revision 15.</para>
-->
          <para>Nehmen wir zum Beispiel an, Ihre Arbeitskopie besteht
            komplett aus Revision 10. Sie bearbeiten die Datei
            <filename>foo.html</filename> und führen ein <command>svn
            commit</command> aus, das die Revision 15 im Projektarchiv
            erzeugt. Nach der erfolgreichen Übertragung würden viele neue
            Benutzer erwarten, dass die gesamte Arbeitskopie auf
            Revision 15 stehe, was aber nicht der Fall ist! Alle
            möglichen Änderungen können sich zwischen Revision 10 und
            15 im Projektarchiv zugetragen haben. Der Client weiß
            nichts über diese Änderungen im Projektarchiv, da Sie noch
            nicht <command>svn update</command> aufgerufen haben, und
            <command>svn commit</command> zieht keine Änderungen
            herein.  Wenn andererseits <command>svn commit</command>
            automatisch Änderungen hereinziehen würde, könnte die
            gesamte Arbeitskopie auf Revision 15 gebracht werden
            &ndash; doch dann wäre die grundlegende Regel verletzt,
            dass Lesen und Schreiben getrennte Aktionen sind. Deshalb
            ist das einzig Sichere, das der Subversion-Client tun
            kann, die eine Datei &ndash; <filename>foo.html</filename>
            &ndash; als zur Revision 15 gehörig zu kennzeichnen. Der
            Rest der Arbeitskopie verbleibt bei Revision 10. Nur durch
            <command>svn update</command> können die neuesten
            Änderungen hereingezogen und die gesamte Arbeitskopie als
            Revision 15 gekennzeichnet werden.</para>

        </sect4>

        <sect4 id="svn.basic.in-action.mixedrevs.normal">
<!--
          <title>Mixed revisions are normal</title>
-->
          <title>Gemischte Revisionen sind normal</title>

<!--
          <para>The fact is, <emphasis>every time</emphasis> you run
            <command>svn commit</command> your working copy ends up
            with some mixture of revisions.  The things you just
            committed are marked as having larger working revisions than
            everything else.  After several commits (with no updates
            in between), your working copy will contain a whole mixture
            of revisions.  Even if you're the only person using the
            repository, you will still see this phenomenon.  To examine
            your mixture of working revisions, use the <command>svn
            status</command> command with the <option>- -verbose</option>
            (<option>-v</option>) option (see
            <xref linkend="svn.tour.cycle.examine.status"/> for more
            information).</para>
-->
          <para>Tatsache ist, dass <emphasis>jedes Mal</emphasis> wenn
            Sie <command>svn commit</command> aufgerufen haben, die
            Arbeitskopie aus irgendeiner Mischung von Revisionen
            besteht. Die Sachen, die Sie eben ins Projektarchiv gebracht
            haben, werden mit höheren Revisionsnummern gekennzeichnet
            als alles andere. Nach einigen Übertragungen (ohne
            zwischenzeitliche Updates) ist Ihre Arbeitskopie eine
            Riesenmischung von Revisionen. Selbst wenn Sie die einzige
            Person sind, die das Projektarchiv benutzt, werden sie dieses
            Phänomen bemerken. Um Ihre Mischung aus Arbeitsrevisionen
            untersuchen zu können, verwenden Sie den Befehl <command>svn
            status</command> mit der Option <option>--verbose</option>
            (<option>-v</option>; siehe
            <xref linkend="svn.tour.cycle.examine.status"/> für
            weitergehende Informationen).</para>

<!--
          <para>Often, new users are completely unaware that their
            working copy contains mixed revisions.  This can be
            confusing, because many client commands are sensitive to the
            working revision of the item they're examining.  For
            example, the <command>svn log</command> command is used to
            display the history of changes to a file or directory (see
            <xref linkend="svn.tour.history.log"/>).  When the user
            invokes this command on a working copy object, he expects
            to see the entire history of the object.  But if the
            object's working revision is quite old (often because
            <command>svn update</command> hasn't been run in a long
            time), the history of the <emphasis>older</emphasis>
            version of the object is shown.</para>
-->
          <para>Oft ist neuen Benutzern überhaupt nicht bewusst, das
            ihre Arbeitskopie gemischte Revisionen beinhaltet. Das kann
            zur Verwirrung führen, weil viele Client-Programme
            empfindlich auf die Revision des Objektes reagieren, das sie
            untersuchen. Beispielsweise wird der <command>svn
              log</command>-Befehl verwendet, um die Historie der
            Änderungen einer Datei oder eines Verzeichnisses
            darzustellen (siehe <xref linkend="svn.tour.history.log"/>).
            Wenn der Benutzer diesen Befehl auf ein Objekt in der
            Arbeitskopie anwendet, erwartet er, die gesamte Historie des
            Objektes zu sehen. Wenn jedoch die Arbeitsrevision des
            Objektes ziemlich alt ist (oftmals weil lange Zeit kein
            <command>svn update</command> aufgerufen wurde), wird die
            Historie der <emphasis>älteren</emphasis> Version des
            Objekts angezeigt.</para>

        </sect4>

        <sect4 id="svn.basic.in-action.mixedrevs.useful">
<!--
          <title>Mixed revisions are useful</title>
-->
          <title>Gemischte Revisionen sind nützlich</title>

<!--
          <para>If your project is sufficiently complex, you'll discover
            that it's sometimes nice to
            forcibly <firstterm>backdate</firstterm> (or update to a
            revision older than the one you already have) portions of
            your working copy to an earlier revision; you'll learn how
            to do that in <xref linkend="svn.tour"/>.  Perhaps you'd
            like to test an earlier version of a submodule contained in
            a subdirectory, or perhaps you'd like to figure out when a
            bug first came into existence in a specific file.  This is
            the <quote>time machine</quote> aspect of a version control
            system&mdash;the feature that allows you to move any
            portion of your working copy forward and backward in
            history.</para>
-->
          <para>Wenn Ihr Projekt hinreichend komplex ist, werden Sie
            entdecken, dass es manchmal ganz nett sein kann, Teile
            Ihrer Arbeitskopie <firstterm>zurückzudatieren</firstterm>
            (oder auf eine ältere Version als die vorliegende zu
            aktualisieren); wie das gemacht wird, wird in
            <xref linkend="svn.tour"/> gezeigt.  Vielleicht möchten
            Sie eine ältere Version eines Teilmoduls in einem
            Unterverzeichnis testen, oder Sie möchten herausbekommen,
            wann ein Fehler das erste Mal in einer Datei auftauchte.
            Dies ist der <quote>Zeitmaschinen</quote>-Aspekt eines
            Versionskontrollsystems &ndash; die Eigenschaft, die es
            ermöglicht, irgendeinen Teil Ihrer Arbeitskopie zeitlich
            nach vorne oder nach hinten zu verschieben.</para>

        </sect4>

        <sect4 id="svn.basic.in-action.mixedrevs.limits">
<!--
          <title>Mixed revisions have limitations</title>
-->
          <title>Gemischte Revisionen haben ihre Grenzen</title>

<!--
          <para>However you make use of mixed revisions in your working
            copy, there are limitations to this flexibility.</para>
-->
          <para>Wie auch immer Sie gemischte Revisionen in Ihrer
            Arbeitskopie verwenden, diese Flexibilität hat ihre
            Grenzen.</para>

<!--
          <para>First, you cannot commit the deletion of a file or
            directory that isn't fully up to date.  If a newer version
            of the item exists in the repository, your attempt to delete
            will be rejected to prevent you from accidentally
            destroying changes you've not yet seen.</para>
-->
          <para>Erstens kann die Löschung einer Datei oder eines
            Verzeichnisses nicht an das Projektarchiv übergeben werden,
            wenn die Datei oder das Verzeichnis nicht ganz aktuell ist.
            Falls eine neuere Version im Projektarchiv existiert, wird Ihr
            Löschversuch abgelehnt, um zu vermeiden, dass Sie
            versehentlich Änderungen löschen, die Sie noch nicht gesehen
            haben.</para>

<!--
          <para>Second, you cannot commit a metadata change to a
            directory unless it's fully up to date.  You'll learn about
            attaching <quote>properties</quote> to items in <xref
            linkend="svn.advanced"/>.  A directory's working revision
            defines a specific set of entries and properties, and thus
            committing a property change to an out-of-date directory may
            destroy properties you've not yet seen.</para>
-->
          <para>Zweitens können Sie keine Änderungen an Metadaten eines
            Verzeichnisses an das Projektarchiv übergeben, wenn das
            Verzeichnis nicht ganz aktuell ist.  In
            <xref linkend="svn.advanced"/> werden Sie lernen, wie man
            <quote>Eigenschaften</quote> an Objekte hängt. Die
            Arbeitskopie eines Verzeichnisses definiert eine bestimmte
            Menge von Einträgen und Eigenschaften, so dass eine
            Eigenschafts-Änderung an einem veralteten Verzeichnis
            Eigenschaften zerstören kann, die Sie noch nicht gesehen
            haben.</para>

           <!-- ### TODO: In Subversion 1.7, you cannot merge into a
                ### mixed-rev working copy by default -->

        </sect4>
      </sect3>
    </sect2>
  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.basic.summary">
<!--
    <title>Summary</title>
-->
    <title>Zusammenfassung</title>
    
<!--
    <para>We covered a number of fundamental Subversion concepts in
      this chapter:</para>
-->
    <para>In diesem Kapitel haben wir eine Anzahl fundamentaler
      Konzepte von Subversion behandelt:</para>

    <itemizedlist>
      <listitem>
<!--
        <para>We introduced the notions of the central repository,
          the client working copy, and the array of repository
          revision trees.</para>
-->
        <para>Wir haben die Begriffe zentrales Projektarchiv,
          Arbeitskopie und Reihe von Revisionsbäumen des Projektarchivs
          eingeführt.</para>
      </listitem>

      <listitem>
<!--
        <para>We saw some simple examples of how two collaborators
          can use Subversion to publish and receive changes from one
          another, using the <quote>copy-modify-merge</quote>
          model.</para>
-->
        <para>Wir haben einige einfache Beispiele gesehen, wie zwei
          Mitarbeiter Subversion verwenden können, um gegenseitig
          Änderungen auszutauschen, indem das
          <quote>kopieren-verändern-zusammenführen</quote>-Modell
          benutzt wird.</para>
      </listitem>

      <listitem>
<!--
        <para>We talked a bit about the way Subversion tracks and
          manages information in a working copy.</para>
-->
        <para>Wir haben ein wenig darüber geredet, wie Subversion
          Informationen in einer Arbeitskopie verfolgt und
          verwaltet.</para>
      </listitem>

    </itemizedlist>

<!--
    <para>At this point, you should have a good idea of how Subversion
      works in the most general sense.  Armed with this knowledge, you
      should now be ready to move into the next chapter, which is a
      detailed tour of Subversion's commands and features.</para>
-->
    <para>An dieser Stelle sollten Sie eine gute Vorstellung haben,
      wie Subversion ganz allgemein arbeitet. Mit diesem Kenntnisstand
      sollten Sie in der Lage sein, das nächste Kapitel anzugehen,
      das ein detaillierter Rundgang durch die Befehle und
      Eigenschaften von Subversion ist.</para>

  </sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
