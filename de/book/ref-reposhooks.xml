<!-- -*- sgml -*- -->

<reference id="svn.ref.reposhooks">
<!--
  <title>Subversion Repository Hook Reference</title>
-->
  <title>Subversion Projektarchiv-Hook-Referenz</title>

  <partintro>

<!--
    <para>Subversion repositories provide a number of event hooks
      which are essentially opportunities for administrators to extend
      Subversion's functionality at key moments of key operations.
      Repository hooks are implemented as programs executed by
      Subversion itself at those key moments&mdash;before and after a
      commit, before and after a user locks a file, and so on.</para>
-->
    <para>Subversion Projektarchive stellen eine Anzahl von
      Ereignis-Hooks zur Verfügung, die im Wesentlichen Gelegenheiten
      für Administratoren sind, um die Funktionalität von Subversion
      zu Schlüsselzeitpunkten von Schlüsseloperationen zu erweitern.
      Projektarchiv-Hooks werden als Programme implementiert, die von
      Subversion selbst zu diesen Schlüsselzeitpunkten ausgeführt
      werden &ndash; vor und nach einer Übergabe, vor oder nach dem
      Anlegen einer Sperre, usw.</para>

<!--
    <para>For each hook it provides, Subversion will attempt to
      execute the program of that hook's name which is found in
      the <filename>hooks/</filename> subdirectory of the repository's
      on-disk directory structure.  For example, on a Unix system, the
      start-commit hook script would be installed at
      <filename><replaceable>REPOS_PATH</replaceable>/hooks/start-commit</filename>,
      where it could be a binary executable program, a shell script, a
      Python program, etc.  On a Windows system, the program would be
      installed in the same location, but would be
      named <filename>START-COMMIT.EXE</filename>
      or <filename>START-COMMIT.BAT</filename> instead of
      simply <filename>start-commit</filename>.</para>
-->
    <para>Für jeden zur Verfügung gestellten Hook versucht Subversion,
      das gleichnamige Programm aus dem Unterverzeichnis
      <filename>hooks/</filename> der Verzeichnisstruktur des
      Projektarchivs auszuführen. Beispielsweise würde der Hook, der
      zu Beginn einer Übergabe aufgerufern wird (start-commit) als
      binäres, ausführbares Programm, ein Shell-Script,
      Python-Programm usw. unter
      <filename><replaceable>REPOS_PATH</replaceable>/hooks/start-commit</filename>
      installiert werden. Auf einem Windows-System würde das Programm
      am gleichen Ort installiert, allerdings unter dem Namen
      <filename>START-COMMIT.EXE</filename> oder
      <filename>START-COMMIT.BAT</filename> statt einfach
      <filename>start-commit</filename>.</para>

<!--
    <para>This reference guide describes the various hooks which
      Subversion offers to administrators, detailing when the hook is
      invoked, its input parameters, and how its behavior affects the
      Subversion workflow.</para>
-->
    <para>Diese Referenz bwschreibt die verschiedenen Hooks, die
      Subversion Administratoren anbietet, wobei beschrieben wird,
      wann der Hook aufgerufen wird, wie seine Eingabeparameter sind
      und wie sein Verhalten den Arbeitsablauf von Subversion
      beeinflusst.</para>

  </partintro>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.start-commit">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>Hook-Scripte</primary>
      <secondary>start-commit</secondary>
    </indexterm>

    <refnamediv>
      <refname>start-commit</refname>
<!--
      <refpurpose>Notification of the beginning of a commit.</refpurpose>
-->
      <refpurpose>Ankündigung des Beginns einer Übergabe.
      </refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>start-commit
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>USER</replaceable>
        <replaceable>CAPABILITIES</replaceable>
        <replaceable>TXN-NAME</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Description</title>
-->
      <title>Beschreibung</title>

<!--
      <para>The start-commit hook is run immediately after the
        commit transaction is created and its initial properties
        set.  It is typically used as an early termination
        mechanism, avoiding what could be a lengthy commit process
        which would eventually fail at a later phase anyway due to a
        user's lack of commit privileges or some other commit
        metadata validation failure.</para>
-->
      <para>Der Hook start-commit wird unmittelbar nach Erstellung der
        Übergabe-Transaktion mit ihren gesetzten Eigenschaften ausgeführt.
        Er wird üblicherweise als ein früher Abbruchmechanismus
        verwendet, der einen eventuell längeren Übergabeprozess
        vermeidet, der in einer späteren Phase ohnehin scheitern
        würde, weil ein Anwender nicht die nötigen Rechte hat oder
        irgendwelche anderen Metadaten für die Übergabe nicht
        stimmen.</para>

<!--
      <para>If the start-commit hook program returns a nonzero exit
        value, the commit process is stopped, the commit transaction
        is destroyed, and anything printed to
        <filename>stderr</filename> is marshalled back to the
        client.</para>
-->
      <para>Falls der Hook start-commit einen Rückgabewert ungleich
        Null zurückgibt, wird der Übergabeprozess gestoppt, die
        Übergabetransaktion zerstört, und alles, was nach
        <filename>stderr</filename> ausgegeben wird, wird zurück zum
        Client umgeleitet.</para>

<!--
      <para>The start-commit hook is not a suitable place to
        evaluate the substance of a particular commit, as it is
        invoked before any file or directory change information has
        been transmitted.  Use the pre-commit hook script (which is
        described in <xref linkend="svn.ref.reposhooks.pre-commit"
        /> elsewhere in this reference) for that purpose.</para>
-->
      <para>Der Hook start-commit ist kein passender Ort, um den
        Inhalt einer bestimmten übergabe auszuwerten, da er
        aufgerufern wird, bevor irgendeine Information über die
        Änderung einer Datei oder eines Verzeichnisses übertragen
        wurde. Verwenden Sie zu diesem Zweck das Hook0Script
        pre-commit (welches in
        <xref linkend="svn.ref.reposhooks.pre-commit" /> an einer
        anderen Stelle dieser Referenz beschrieben wird).</para>

      <note>
<!--
        <para>Prior to Subversion 1.8, the Subversion invoked the
          start-commit hook <emphasis>before</emphasis> creating the
          commit transaction.  Failure of the script resulted in that
          transaction not being created at all.  This was changed in
          Subversion 1.8, though, to allow implementations of the
          start-commit hook access to the transaction's properties,
          which can include (among other things) the revision log
          associated with the commit.</para>
      </note>
-->
        <para>Vor Subversion 1.8 rief Subversion den Hook
          start-commit <emphasis>vor</emphasis> der Erstellung der
          Übergabetransaktion auf. Das Scheitern des Scriptes führte
          dazu, dass überhaupt keine Transaktion erstellt wurde. In
          Subversion 1.8 wurde das jedoch geändert, um
          Implementierungen des Hooks start-commit Zugriff auf die
          Eigenschaften der Transaktion zu ermöglichen, die (neben
          anderen Dingen) das zu der Übergabe gehörige
          Revisionsprotokoll beinhalten können.</para>
      </note>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input Parameter(s)</title>
-->
      <title>Eingabeparameter</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Die Kommandozeilenparameter, die an das Hook-Programm
        übergeben werden, sind in der gegebenen Reihenfolge:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>Projektarchiv-Pfad</para>
        </listitem>
        <listitem>
<!--
          <para>Authenticated username attempting the commit</para>
-->
          <para>Authentifizierter Name des Benutzers, der die
            Übergabe versucht</para>
        </listitem>
        <listitem>
<!--
          <para>Colon-separated list of
            capabilities that a client passes to the server,
            including <literal>depth</literal>,
            <literal>mergeinfo</literal>, and
            <literal>log-revprops</literal> (new in Subversion 1.5)</para>
-->
          <para>Eine durch Doppelpunkte getrennte Liste von
            Fähigkeiten, die der Client an den Server übergibt; dazu
            gehören <literal>depth</literal>,
            <literal>mergeinfo</literal> und
            <literal>log-revprops</literal> (neu in Subversion 1.5)
          </para>
        </listitem>
        <listitem>
<!--
          <para>Commit transaction name (new in Subversion 1.8)</para>
-->
          <para>Name der Übergabetransaktion (neu in Subversion 1.8)</para>
        </listitem>
      </orderedlist>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Übliche Verwendung</title>

<!--
      <para>Access control (e.g., temporarily lock out commits for
        some reason).</para>
-->
      <para>Zugriffskontrolle (d.h., für das vorübergehende Sperren
        von Übergaben aus bestimmten Gründen).</para>

<!--
      <para>A means to allow access only from clients that have
        certain capabilities.</para>
-->
      <para>Eine Methode, um den Zugriff nur Clients mit bestimmten
        Fähigkeiten zu ermöglichen.</para>
    </refsect1>

  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.pre-commit">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>Hook-Scripte</primary>
      <secondary>pre-commit</secondary>
    </indexterm>

    <refnamediv>
      <refname>pre-commit</refname>
<!--
      <refpurpose>Notification just prior to commit completion.</refpurpose>
-->
      <refpurpose>Ankündigung kurz vor Abschluss der Übergabe.
      </refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>pre-commit
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>TXN-NAME</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Description</title>
-->
      <title>Beschreibung</title>

<!--
      <para>The <literal>pre-commit</literal> hook is run just
        before a commit transaction is promoted to a new revision.
        Typically, this hook is used to protect against commits that
        are disallowed due to content or location (e.g., your
        site might require that all commits to a certain branch
        include a ticket number from the bug tracker, or that the
        incoming log message is nonempty).</para>
-->
      <para>Der Hook <literal>pre-commit</literal> wird ausgeführt,
        kurz bevor eine Übergabetransaktion zu einer neuen Revision
        wird. Üblicherweise wird dieser Hook dazu verwendet, um
        Übergaben abzuwenden, die aufgrund ihres Inhalts oder des
        Ortes nicht zulässig sind (z.B., könnte Ihr Standort
        verlangen, dass alle Übergaben auf einen bestimmten Zweig
        eine Ticketnummer des Fehlerverfolgungssystems beinhalten,
        oder dass die Protokollnachricht nicht leer ist).</para>

<!--
      <para>If the <literal>pre-commit</literal> hook program
        returns a nonzero exit value, the commit is aborted, the
        commit transaction is removed, and anything printed to
        <filename>stderr</filename> is marshalled back to the client.</para>
-->
      <para>Falls das Hook-Programm <literal>pre-commit</literal>
        einen Rückgabewert ungleich Null zurückgibt, wird die
        Übergabe abgebrochen, die Übergabetransaktion entfernt und
        alles, was nach <filename>stderr</filename> ausgegeben wird,
        zum Client umgeleitet.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input parameter(s)</title>
-->
      <title>Eingabeparameter</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Die Kommandozeilenparameter, die an das Hook-Programm
        übergeben werden, sind in der gegebenen Reihenfolge:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>Projektarchiv-Pfad</para>
        </listitem>
        <listitem>
<!--
          <para>Commit transaction name</para>
-->
          <para>Name der Übergabetransaktion</para>
        </listitem>
      </orderedlist>

<!--
      <para>Additionally, Subversion passes any lock tokens provided
        by the committing client to the hook script via standard
        input.  When present, these are formatted as a single line
        containing the string <literal>LOCK-TOKENS:</literal>,
        followed by additional lines&mdash;one per lock
        token&mdash;which contain the lock token information.  Each
        lock token information line consists of the URI-escaped
        repository filesystem path associated with the lock,
        followed by the pipe (<literal>|</literal>) separator
        character, and finally the lock token string.</para>
-->
      <para>Darüber hinaus leitet Subversion alle vom übertragenden
        Client eingereichten Sperrmarken über die Standard-Eingabe
        an das Hook-Skript. Falls vorhanden, werden diese als eine
        Zeile formatiert, die die Zeichenkette
        <literal>LOCK-TOKENS:</literal> beinhaltet, gefolgt von
        zusätzlichen Zeilen, eine pro Sperrmarke, die die
        Informationen zur Sperrmarke enthält. Jede Zeile mit
        Sperrmarken-Informationen besteht aus dem mit der Sperre
        verbundenen, URI-maskierten Projektarchiv-Pfad, gefolgt vom
        senkrechten Strich (<literal>|</literal>) als Trennzeichen
        und schließlich der Zeichenkette der Sperrmarke.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Übliche Verwendung</title>
<!--
      <para>Change validation and control</para>
-->
      <para>Validierung und Kontrolle von Änderungen</para>
    </refsect1>

  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.post-commit">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>Hook-Scripte</primary>
      <secondary>post-commit</secondary>
    </indexterm>

    <refnamediv>
      <refname>post-commit</refname>
<!--
      <refpurpose>Notification of a successful commit.</refpurpose>
-->
      <refpurpose>Ankündigung einer erfolgreichen Übergabe.
      </refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>post-commit
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>REVISION</replaceable>
        <replaceable>TXN-NAME</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Description</title>
-->
      <title>Beschreibung</title>

<!--
      <para>The <literal>post-commit</literal> hook is run after the
        transaction is committed and a new revision is created.  Most
        people use this hook to send out descriptive emails about
        the commit or to notify some other tool (such as an issue
        tracker) that a commit has happened.  Some configurations
        also use this hook to trigger backup processes.</para>
-->
      <para>Der Hook <literal>post-commit</literal> wird ausgeführt,
        nachdem die Transaktion abgeschlossen wurde und eine neue
        Revision erzeugt worden ist. Die meisten Leute verwenden
        diesen Hook, um E-Mails zu versenden, die diese Übergabe
        beschreiben oder um irgendein Werkzeug von der Übergabe in
        Kenntnis zu setzen (etwa ein Fehlerverfolgungssystem).
        Manche Konfigurationen verwenden diesen Hook auch für
        Sicherungsprozesse.</para>

<!--
      <para>If the <literal>post-commit</literal> hook returns a
        nonzero exit status, the commit <emphasis>will
        not</emphasis> be aborted since it has already
        completed.  However, anything that the hook printed
        to <filename>stderr</filename> will be marshalled back to the
        client, making it easier to diagnose hook failures.</para>
-->
      <para>Falls der Hook <literal>post-commit</literal> einen
        Rückgabewert ungleich Null zurückliefert, wird die Übergabe
        <emphasis>nicht</emphasis> abgebrochen, da sie bereits
        abgeschlossen ist. Trotzdem wird alles, was der Hook über
        <filename>stderr</filename> ausgibt, zum Client
        umgeleitet, um die Fehlersuche zu erleichtern.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input parameter(s)</title>
-->
      <title>Eingabeparameter</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Die Kommandozeilenparameter, die an das Hook-Programm
        übergeben werden, sind in der gegebenen Reihenfolge:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>Projektarchiv-Pfad</para>
        </listitem>
        <listitem>
<!--
          <para>Revision number created by the commit</para>
-->
          <para>Die durch die Übergabe erzeugte Revisionsnummer
          </para>
        </listitem>
        <listitem>
<!--
          <para>Name of the transaction that has become the revision triggering
            the post-commit hook.</para>
-->
          <para>Name der Transaktion, die die den Post-Commit-Hook
            auslösende Revision geworden ist.</para>
        </listitem>
      </orderedlist>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Übliche Verwendung</title>
<!--
      <para>Commit notification; tool integration</para>
-->
      <para>Übergabebenachrichtigung; Werkzeugintegration</para>
    </refsect1>

  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.pre-revprop-change">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>Hook-Scripte</primary>
      <secondary>pre-revprop-change</secondary>
    </indexterm>

    <refnamediv>
      <refname>pre-revprop-change</refname>
<!--
      <refpurpose>Notification of a revision property change
        attempt.</refpurpose>
-->
      <refpurpose>Ankündigung des Versuchs einer Änderung eines
        Revisions-Eigenschaften.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>pre-revprop-change
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>REVISION</replaceable>
        <replaceable>USER</replaceable>
        <replaceable>PROPNAME</replaceable>
        <replaceable>ACTION</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Description</title>
-->
      <title>Beschreibung</title>

<!--
      <para>The <literal>pre-revprop-change</literal> hook is run
        immediately prior to the modification of a revision property
        when performed outside the scope of a normal commit.  Unlike
        the other hooks, the default state of this one is to deny
        the proposed action.  The hook must actually exist and
        return a zero exit value before a revision property
        modification can happen.</para>
-->
      <para>Der Hook <literal>pre-revprop-change</literal> wird
        unmittelbar vor der Änderung einer Revisions-Eigenschaft
        außerhalb einer gewöhnlichen Übergabe ausgeführt. Anders
        als bei den anderen Hooks ist das Standardvorgehen dieses
        Hooks, die beabsichtigte Aktion zu verhindern. Der Hook muss
        wirklich vorhanden sein und einen Rückgabewert von Null
        zurückgeben, bevor eine Änderung einer Revisions-Eigenschaft
        stattfinden kann.</para>

<!--
      <para>If the <literal>pre-revprop-change</literal> hook doesn't
        exist, isn't executable, or returns a nonzero exit value, no
        change to the property will be made, and anything printed
        to <filename>stderr</filename> is marshalled back to the
        client.</para>
-->
      <para>Falls der Hook <literal>pre-revprop-change</literal>
        nicht vorhanden ist, nicht ausführbar ist oder einen
        Rückgabewert ungleich Null liefert, wird keine Änderung an der
        Eigenschaft durchgeführt, und alles, was über
        <filename>stderr</filename> ausgegeben wird, zurück zum
        Client umgeleitet.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input parameter(s)</title>
-->
      <title>Eingabeparameter</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Die Kommandozeilenparameter, die an das Hook-Programm
        übergeben werden, sind in der gegebenen Reihenfolge:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>Projektarchiv-Pfad</para>
        </listitem>
        <listitem>
<!--
          <para>Revision whose property is about to be modified</para>
-->
          <para>Revision, deren Eigenschaft geändert werden soll</para>
        </listitem>
        <listitem>
<!--
          <para>Authenticated username attempting the property change</para>
-->
          <para>Authentifizierter Name des Benutzers, der die
            Änderung an der Eigenschaft vornehmen will</para>
        </listitem>
        <listitem>
<!--
          <para>Name of the property changed</para>
-->
          <para>Name der geänderten Eigenschaft</para>
        </listitem>
        <listitem>
<!--
          <para>Change description: <literal>A</literal> (added),
            <literal>D</literal> (deleted), or <literal>M</literal>
            (modified)</para>
-->
          <para>Beschreibung der Änderung: <literal>A</literal>
            (hinzugefügt), <literal>D</literal> (gelöscht) oder
            <literal>M</literal> (geändert)</para>
        </listitem>
      </orderedlist>

<!--
      <para>Additionally, Subversion passes the intended new value
         of the property to the hook program via standard
         input.</para>
-->
      <para>Darüber hinaus übergibt Subversion den beabsichtigten
        neuen Wert der Eigenschaft über Standardeingabe an das
        Hook-Programm.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Übliche Verwendung</title>
<!--
      <para>Access control; change validation and control</para>
-->
      <para>Zugriffskontrolle; Validierung und Kontrolle von
        Änderungen</para>
    </refsect1>

  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.post-revprop-change">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>Hook-Scripte</primary>
      <secondary>post-revprop-change</secondary>
    </indexterm>

    <refnamediv>
      <refname>post-revprop-change</refname>
<!--
      <refpurpose>Notification of a successful revision property 
        change.</refpurpose>
-->
      <refpurpose>Ankündigung einer erfolgreichen Änderung einer
        Revisions-Eigenschaft.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>post-revprop-change
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>REVISION</replaceable>
        <replaceable>USER</replaceable>
        <replaceable>PROPNAME</replaceable>
        <replaceable>ACTION</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Description</title>
-->
      <title>Beschreibung</title>

<!--
      <para>The <literal>post-revprop-change</literal> hook is run
        immediately after the modification of a revision property
        when performed outside the scope of a normal commit.  As you can
        derive from the description of its counterpart, the
        <literal>pre-revprop-change</literal> hook, this hook will
        not run at all unless
        the <literal>pre-revprop-change</literal> hook is
        implemented.  It is typically used to send email
        notification of the property change.</para>
-->
      <para>Der Hook <literal>post-revprop-change</literal> wird
        unmittelbar nach der Änderung einer Revisions-Eigenschaft
        außerhalb einer normalen Übergabe ausgeführt. Wie Sie aus
        der Beschreibung seines Gegenstücks, dem Hook
        <literal>pre-revprop-change</literal>, ableiten können,
        wird dieser Hook ohne einen implementierten Hook
        <literal>pre-revprop-change</literal> überhaupt nicht
        ausgeführt. Er wird gewöhnlich verwendet, um
        Benachrichtigungen über die Eigenschafts-Änderung per E-Mail zu
        versenden.</para>

<!--
      <para>If the <literal>post-revprop-change</literal> hook returns a
        nonzero exit status, the change <emphasis>will
        not</emphasis> be aborted since it has already
        completed.  However, anything that the hook printed
        to <filename>stderr</filename> will be marshalled back to the
        client, making it easier to diagnose hook failures.</para>
-->
      <para>Falls der Hook <literal>post-revprop-change</literal>
        einen Rückgabewert ungleich Null liefert, wird die Änderung
        <emphasis>nicht</emphasis> abgebrochen, da sie bereits
        abgeschlossen ist. Allerdings wird alles, was der Hook über
        <filename>stderr</filename> ausgibt, zum Client umgeleitet,
        um die Fehlersuche zu erleichtern.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input parameter(s)</title>
-->
      <title>Eingabeparameter</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Die Kommandozeilenparameter, die an das Hook-Programm
        übergeben werden, sind in der gegebenen Reihenfolge:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>Projektarchiv-Pfad</para>
        </listitem>
        <listitem>
<!--
          <para>Revision whose property was modified</para>
-->
          <para>Revision, deren Eigenschaft geändert wurde</para>
        </listitem>
        <listitem>
<!--
          <para>Authenticated username of the person making the change</para>
-->
          <para>Authentifizierter Name des Benutzers, der die
            Änderung vorgenommen hat</para>
        </listitem>
        <listitem>
<!--
          <para>Name of the property changed</para>
-->
          <para>Name der geänderten Eigenschaft</para>
        </listitem>
        <listitem>
<!--
          <para>Change description: <literal>A</literal> (added),
            <literal>D</literal> (deleted), or <literal>M</literal>
            (modified)</para>
-->
          <para>Beschreibung der Änderung: <literal>A</literal>
            (hinzugefügt), <literal>D</literal> (gelöscht), oder
            <literal>M</literal> (geändert)</para>
        </listitem>
      </orderedlist>

<!--
      <para>Additionally, Subversion passes to the hook program, via
        standard input, the previous value of the property.</para>
-->
      <para>Darüberhinaus übergibt Subversion den beabsichtigten
        neuen Wert der Eigenschaft über Standardeingabe an das
        Hook-Programm.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Übliche Verwendung</title>
<!--
      <para>Property change notification</para>
-->
      <para>Benachrichtigung über Eigenschafts-Änderung</para>
    </refsect1>

  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.pre-lock">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>Hook-Scripte</primary>
      <secondary>pre-lock</secondary>
    </indexterm>

    <refnamediv>
      <refname>pre-lock</refname>
<!--
      <refpurpose>Notification of a path lock attempt.</refpurpose>
-->
      <refpurpose>Ankündigung des Versuchs einer Pfadsperrung.
      </refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>pre-lock
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>PATH</replaceable>
        <replaceable>USER</replaceable>
        <replaceable>COMMENT</replaceable>
        <replaceable>STEAL</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Description</title>
-->
      <title>Beschreibung</title>

<!--
      <para>The <literal>pre-lock</literal> hook runs whenever
        someone attempts to lock a path.  It can be used to prevent
        locks altogether or to create a more complex policy
        specifying exactly which users are allowed to lock
        particular paths.  If the hook notices a preexisting lock,
        it can also decide whether a user is allowed
        to <quote>steal</quote> the existing lock.</para>
-->
      <para>Der Hook <literal>pre-lock</literal> wird ausgeführt,
        sobald jemand versucht, einen Pfad zu sperren. Er kann
        verwendet werden, um Sperren ganz zu verhindern oder eine
        kompliziertere Vorgehensweise festzulegen, bei der genau
        spezifiziert wird, welche Benutzer bestimmte Pfade sperren
        dürfen. Falls der Hook eine bereits bestehende Sperre
        bemerkt, kann er auch entscheiden, ob der Benutzer die
        bestehende Sperre <quote>stehlen</quote> darf.</para>

<!--
      <para>If the <literal>pre-lock</literal> hook program returns
        a nonzero exit value, the lock action is aborted and
        anything printed to <filename>stderr</filename> is
        marshalled back to the client.</para>
-->
      <para>Falls das Hook-Programm <literal>pre-lock</literal>
        einen Rückgabewert ungleich Null liefert, wird der
        Sperrvorgang abgebrochen und alles, was über
        <filename>stderr</filename> ausgegeben wird, zum Client
        umgeleitet.</para>

<!--
      <para>The hook program may optionally dictate the lock token
        which will be assigned to the lock by printing the desired
        lock token to standard output.  Because of this,
        implementations of this hook should carefully avoid
        unexpected output sent to standard output.</para>
-->
      <para>Das Hook-Programm darf optional die Sperrmarke
        bestimmen, die der Sperre zugewiesen wird, indem die
        gewünschte Sperrmarke zur Standard-Ausgabe geschickt wird.
        Daher sollten Implementierungen dieses Hooks sorgfältig
        darauf achten, keine unerwarteten Ausgaben an die
        Standard-Ausgabe zu schicken.</para>

      <warning>
<!--
        <para>If the <literal>pre-lock</literal> script takes
          advantage of lock token dictation feature, the
          responsibility of generating a <emphasis>unique</emphasis>
          lock token falls to the script itself.  Failure to
          generate unique lock tokens may result in
          undefined&mdash;and very likely,
          undesired&mdash;behavior.</para>
-->
        <para>Falls das <literal>pre-lock</literal>-Skript von der
          Möglichkeit der Bestimmung der Sperrmarke Gebrauch macht,
          liegt die Verantwortung zur Erzeugung einer
          <emphasis>eindeutigen</emphasis> Sperrmarke beim Skript
          selbst. Die Erstellung einer nicht eindeutigen Sperrmarke
          kann zu undefinierten &ndash; und sehr wahrscheinlich
          unerwünschten &ndash; Verhalten führen.</para>
      </warning>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input parameter(s)</title>
-->
      <title>Eingabeparameter</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Die Kommandozeilenparameter, die an das Hook-Programm
        übergeben werden, sind in der gegebenen Reihenfolge:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>Projektarchiv-Pfad</para>
        </listitem>
        <listitem>
<!--
          <para>Versioned path that is to be locked</para>
-->
          <para>Versionierter Pfad, der gesperrt werden soll</para>
        </listitem>
        <listitem>
<!--
          <para>Authenticated username of the person attempting the 
            lock</para>
-->
          <para>Authentifizierter Name des Benutzers, der sperren
            möchte</para>
        </listitem>
        <listitem>
<!--
          <para>Comment provided when the lock was created</para>
-->
          <para>Kommentar bei Erstellung der Sperre</para>
        </listitem>
        <listitem>
<!--
          <para><literal>1</literal> if the user is attempting to
            steal an existing lock; <literal>0</literal>
            otherwise</para>
-->
          <para><literal>1</literal> falls der Anwender versucht,
            eine bestehende Sperre zu stehlen, sonst
            <literal>0</literal></para>
        </listitem>
      </orderedlist>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Übliche Verwendung</title>
<!--
      <para>Access control</para>
-->
      <para>Zugriffskontrolle</para>
    </refsect1>

  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.post-lock">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>Hook-Scripte</primary>
      <secondary>post-lock</secondary>
    </indexterm>

    <refnamediv>
      <refname>post-lock</refname>
<!--
      <refpurpose>Notification of a successful path lock.</refpurpose>
-->
      <refpurpose>Ankündigung einer erfolgreichen Pfadsperrung.
      </refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>post-lock
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>USER</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Description</title>
-->
      <title>Beschreibung</title>

<!--
      <para>The <literal>post-lock</literal> hook runs after one or
        more paths have been locked.  It is typically used to send
        email notification of the lock event.</para>
-->
      <para>Der Hook <literal>post-lock</literal> wird ausgeführt,
        nachdem ein oder mehrere Pfade gesperrt worden sind. Er wird
        üblicherweise verwendet, um Benachrichtigungen über die
        Sperre per E-Mail zu versenden.</para>

<!--
      <para>If the <literal>post-lock</literal> hook returns a
        nonzero exit status, the lock <emphasis>will
        not</emphasis> be aborted since it has already
        completed.  However, anything that the hook printed
        to <filename>stderr</filename> will be marshalled back to the
        client, making it easier to diagnose hook failures.</para>
-->
      <para>Falls der Hook <literal>post-lock</literal> einen
        Rückgabewert ungleich Null liefert, wird die Sperre
        <emphasis>nicht</emphasis> abgebrochen, da sie bereits
        besteht. Allerdings wird alles, was der Hook über
        <filename>stderr</filename> ausgibt, zum Client umgeleitet,
        um die Fehlersuche zu erleichtern.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input parameter(s)</title>
-->
      <title>Eingabeparameter</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Die Kommandozeilenparameter, die an das Hook-Programm
        übergeben werden, sind in der gegebenen Reihenfolge:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>Projektarchiv-Pfad</para>
        </listitem>
        <listitem>
<!--
          <para>Authenticated username of the person who locked the 
            paths</para>
-->
          <para>Authentifizierter Name des Benutzers, der die Pfade
            gesperrt hat</para>
        </listitem>
      </orderedlist>

<!--
      <para>Additionally, the list of paths locked is passed to the
        hook program via standard input, one path per line.</para>
-->
      <para>Darüber hinaus übergibt Subversion die Liste der
        gesperrten Pfade über Standardeingabe an das
        Hook-Programm.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Übliche Verwendung</title>
<!--
      <para>Lock notification</para>
-->
      <para>Sperrbenachrichtigung</para>
    </refsect1>

  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.pre-unlock">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>Hook-Scripte</primary>
      <secondary>pre-unlock</secondary>
    </indexterm>

    <refnamediv>
      <refname>pre-unlock</refname>
<!--
      <refpurpose>Notification of a path unlock attempt.</refpurpose>
-->
      <refpurpose>Ankündigung der Aufhebung einer Pfadsperre.
      </refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>pre-unlock
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>PATH</replaceable>
        <replaceable>USER</replaceable>
        <replaceable>TOKEN</replaceable>
        <replaceable>BREAK-UNLOCK</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Description</title>
-->
      <title>Beschreibung</title>

<!--
      <para>The <literal>pre-unlock</literal> hook runs whenever
        someone attempts to remove a lock on a file.  It can be used
        to create policies that specify which users are allowed to
        unlock particular paths.  It's particularly important for
        determining policies about lock breakage.  If user A locks a
        file, is user B allowed to break the lock?  What if the lock
        is more than a week old?  These sorts of things can be
        decided and enforced by the hook.</para>
-->
      <para>Der Hook <literal>pre-unlock</literal> wird immer dann
        ausgeführt, wenn jemand versucht, eine Dateisperre
        aufzuheben. Er kann verwendet werden, um Vorgehensweisen
        festzulegen, die es Benutzern erlauben, bestimmte Pfade zu
        entsperren. Er ist besonders wichtig, um Strategien
        festzulegen, wenn es darum geht, Sperren aufzubrechen. Falls
        Benutzer A eine Datei sperrt, soll dann Benutzer B diese
        Sperre aufbrechen dürfen? Was ist, wenn die Sperre älter als
        eine Woche ist? Diese Dinge können von diesem Hook
        entschieden und durchgesetzt werden.</para>

<!--
      <para>If the <literal>pre-unlock</literal> hook program
        returns a nonzero exit value, the unlock action is aborted
        and anything printed to <filename>stderr</filename> is marshalled back to the
        client.</para>
-->
      <para>Falls das Hook-Programm <literal>pre-unlock</literal>
        einen Rückgabewert ungleich Null liefert, wird die Aufhebung
        der Sperre abgebrochen, und alles, was über
        <filename>stderr</filename> ausgegeben wird, zum Client
        umgeleitet.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input parameter(s)</title>
-->
      <title>Eingabeparameter</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Die Kommandozeilenparameter, die an das Hook-Programm
        übergeben werden, sind in der gegebenen Reihenfolge:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>Projektarchiv-Pfad</para>
        </listitem>
        <listitem>
<!--
          <para>Versioned path which is to be unlocked</para>
-->
          <para>Versionierter Pfad, dessen Sperre aufgehoben werden
            soll</para>
        </listitem>
        <listitem>
<!--
          <para>Authenticated username of the person attempting the 
            unlock</para>
-->
          <para>Authentifizierter Name des Benutzers, der die Sperre
            aufheben will</para>
        </listitem>
        <listitem>
<!--
          <para>Lock token associated with the lock which is to be
            removed</para>
-->
          <para>Die mit der aufzuhebenden Sperre verbundene
            Sperrmarke</para>
        </listitem>
        <listitem>
<!--
          <para><literal>1</literal> if the user is attempting to
            break the lock; <literal>0</literal> otherwise</para>
-->
          <para><literal>1</literal> falls der Anwender versucht,
            die Entsperrung einer bestehende Sperre zu erzwingen,
            sonst <literal>0</literal></para>
        </listitem>
      </orderedlist>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Übliche Verwendung</title>
<!--
      <para>Access control</para>
-->
      <para>Zugriffskontrolle</para>
    </refsect1>

  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.post-unlock">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>Hook-Scripts</primary>
      <secondary>post-unlock</secondary>
    </indexterm>

    <refnamediv>
      <refname>post-unlock</refname>
<!--
      <refpurpose>Notification of a successful path unlock.</refpurpose>
-->
      <refpurpose>Ankündigung einer erfolgreichen Aufhebung einer
        Pfadsperre.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>post-unlock
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>USER</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Description</title>
-->
      <title>Beschreibung</title>

<!--
      <para>The <literal>post-unlock</literal> hook runs after one
        or more paths have been unlocked.  It is typically used to
        send email notification of the unlock event.</para>
-->
      <para>Der Hook <literal>post-unlock</literal> wird ausgeführt,
        nachdem ein oder mehrere Pfade entsperrt worden sind. Er
        wird üblicherweise verwendet, um Benachrichtigungen über die
        Aufhebung der Sperre per E-Mail zu versenden.</para>

<!--
      <para>If the <literal>post-unlock</literal> hook returns a
        nonzero exit status, the unlock <emphasis>will
        not</emphasis> be aborted since it has already
        completed.  However, anything that the hook printed
        to <filename>stderr</filename> will be marshalled back to the
        client, making it easier to diagnose hook failures.</para>
-->
      <para>Falls der Hook <literal>post-unlock</literal> einen
        Rückgabewert ungleich Null liefert, wird die Aufhebung der
        Sperre <emphasis>nicht</emphasis> abgebrochen, da sie
        bereits aufgehoben ist. Allerdings wird alles, was der Hook
        über <filename>stderr</filename> ausgibt, zum Client
        umgeleitet, um die Fehlersuche zu erleichtern.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input parameter(s)</title>
-->
      <title>Eingabeparameter</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Die Kommandozeilenparameter, die an das Hook-Programm
        übergeben werden, sind in der gegebenen Reihenfolge:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>Projektarchiv-Pfad</para>
        </listitem>
        <listitem>
<!--
          <para>Authenticated username of the person who unlocked the 
            paths</para>
-->
          <para>Authentifizierter Name der Person, die die
            Pfadsperre aufgehoben hat</para>
        </listitem>
      </orderedlist>

<!--
      <para>Additionally, the list of paths unlocked is passed to the
        hook program via standard input, one path per line.</para>
-->
      <para>Darüber hinaus übergibt Subversion die Liste der
        entsperrten Pfade über Standardeingabe an das
        Hook-Programm.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Übliche Verwendung</title>
<!--
      <para>Unlock notification</para>
-->
      <para>Benachrichtigung über die Aufhebung von Sperren</para>
    </refsect1>

  </refentry>
</reference>

<!--
local variables: 
sgml-parent-document: ("book.xml" "reference")
end:
-->
