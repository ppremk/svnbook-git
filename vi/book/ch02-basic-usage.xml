<!-- -*- sgml -*- -->

<chapter id="svn.tour">
<!--   <title>Basic Usage</title> -->
  <title>Cách Sử Dụng Cơ Bản</title>

<!--
  <para>Theory is useful, but its application is just plain fun.
    Let's move now into the details of using Subversion.  By the time
    you reach the end of this chapter, you will be able to perform all
    the tasks you need to use Subversion in a normal day's work.
    You'll start with getting your files into Subversion, followed by
    an initial checkout of your code.  We'll then walk you through
    making changes and examining those changes.  You'll also see how
    to bring changes made by others into your working copy, examine
    them, and work through any conflicts that might arise.</para>
-->
  <para>Lý thiết là hữu ích, nhưng việc ứng dụng chúng cũng sẽ rất thú vị. Hãy bắt đầu sử dụng Subversion. Khi bạn hoàn thành chương này, bạn sẽ có khả năng thực hiện tất cả những thao tác mà bạn cần để sử dụng Subversion trong công việc thông thường hàng ngày. Bạn bắt đầu bằng việc đưa những tập tin vào Subversion thông qua thao tác kiểm xuất lần đầu mã nguồn của bạn. Chúng tôi tiếp đó sẽ hướng dẫn bạn thực hiện và kiểm tra những thay đổi đó. Bạn cũng sẽ được biết làm cách nào để mang những thay đổi được thực hiện bởi những người khác vào bản sao làm việc của bạn, kiểm tra chúng và làm việc với những xung đột có thể xuất hiện.</para>

<!--
  <para>This chapter will not provide exhaustive coverage
    of all of Subversion's commands&mdash;rather, it's a conversational
    introduction to the most common Subversion tasks that you'll
    encounter.  This chapter assumes that you've read and understood
    <xref linkend="svn.basic"/> and are familiar with the general
    model of Subversion.  For a complete reference of all commands,
    see <xref linkend="svn.ref.svn"/>.</para>
-->
  <para>Chương này sẽ không cung cấp bao quát đầy đủ tất cả những lệnh Subversion&mdash;thay vào đó, nó là một giới thiệu theo dạng đàm thoại cho đa số những thao tác Subversion thông thường mà bạn sẽ gặp phải. Chương này giả sử rằng bạn đã đọc và hiểu <xref linkend="svn.basic"/> và bạn quen thuộc với những mô hình của Subversion. Để tham khảo toàn bộ các lệnh, xem <xref linkend="svn.ref.svn"/>.</para>

<!--
  <para>Also, this chapter assumes that the reader is seeking
    information about how to interact in a basic fashion with an
    existing Subversion repository.  No repository means no working
    copy; no working copy means not much of interest in this chapter.
    There are many Internet sites which offer free or inexpensive
    Subversion repository hosting services.  Or, if you'd prefer to
    set up and administer your own repositories, check out
    <xref linkend="svn.reposadmin"/>.  But don't expect the
    examples in this chapter to work without the user having access
    to a Subversion repository.</para>
-->
  <para>Ngoài ra, chương này cũng giả định rằng độc giả đang tìm kiếm thông tin về việc tương tác đơn giản với một kho lưu trữ đã có sẵn. Không kho lưu trữ đồng nghĩa với việc không có bản sao làm việc; không bản sao làm việc thì sẽ không có nhiều thú vị cho chương này. Có nhiều địa chỉ trên Interner cung cấp miễn phí hoặc với chi phí thấp dịch vụ lưu trữ Subversion. Hoặc nếu bạn thích thiết lập và quản trị kho lưu trữ riêng của bạn, tham khảo <xref linkend="svn.reposadmin"/>. Nhưng đừng mong đợi rằng những ví dụ trong chương này sẽ hoạt động mà người sử dụng không có quyền truy cập vào kho lưu trữ Subversion.</para>

<!--
  <para>Finally, any Subversion operation that contacts the repository
    over a network may potentially require that the user authenticate.
    For the sake of simplicity, our examples throughout this chapter
    avoid demonstrating and discussing authentication.  Be aware that
    if you hope to apply the knowledge herein to an existing,
    real-world Subversion instance, you'll probably be forced to
    provide at least a username and password to the server.  See
    <xref linkend="svn.serverconfig.netmodel.creds"/> for a detailed
    description of Subversion's handling of authentication and client
    credentials.</para>
-->
  <para>Cuối cùng, bất kỳ hoạt động Subversion nào mà tiếp xúc với các kho lưu trữ trên một mạng lưới nhiều khả năng sẽ yêu cầu người dùng xác thực. Để đơn giản, những ví dụ xuyên suốt chương này tránh thể hiện và bàn luận về xác thực. Nên biết rằng nếu bạn áp dụng kiến thức ở đây vào một phiên bản Subversion có sẵn, bạn chắc chắn sẽ được yêu cầu cung cấp tối thiểu tên đăng nhập và mật khẩu. Xem mô tả chi tiết tại <xref linkend="svn.serverconfig.netmodel.creds"/> về việc Subversion quản lý xác thực và thông tin khách hàng.</para>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.help">
<!--     <title>Help!</title> -->
    <title>Trợ Giúp!</title>

<!--
    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>help</tertiary>
    </indexterm>
-->
    <indexterm>
      <primary>svn</primary>
      <secondary>lệnh phụ</secondary>
      <tertiary>trợ giúp</tertiary>
    </indexterm>

<!--
    <para>It goes without saying that this book exists to be a source
      of information and assistance for Subversion users new and old.
      Conveniently, though, the Subversion command-line is
      self-documenting, alleviating the need to grab a book off the
      shelf (wooden, virtual, or otherwise).  The <command>svn
      help</command> command is your gateway to that built-in
      documentation:</para>
-->
    <para>Không cần phải nói rằng cuốn sách này là nguồn thông tin và trợ giúp cho cả người sử dụng Subversion cũ và mới. Một cách tiện lợi, dòng lệnh Subversion tự bản thân nó là tài liệu, giảm bớt sự cần thiết của việc lấy một cuốn sách từ trên kệ (gỗ, ảo hay gì đó khác). Lệnh <command>svn help</command> là cửa ngỏ vào tài liệu được xây dựng bên trong đó:</para>

    <informalexample>
      <screen>
$ svn help
usage: svn &lt;subcommand&gt; [options] [args]
Subversion command-line client, version 1.8.13.
Type 'svn help &lt;subcommand&gt;' for help on a specific subcommand.
Type 'svn --version' to see the program version and RA modules
  or 'svn --version --quiet' to see just the version number.

Most subcommands take file and/or directory arguments, recursing
on the directories.  If no arguments are supplied to such a
command, it recurses on the current directory (inclusive) by default.

Available subcommands:
   add
   blame (praise, annotate, ann)
   cat
&hellip;
</screen>
    </informalexample>

<!--
    <para>As described in the previous output, you can ask for help on
      a particular subcommand by running <userinput>svn help
      <replaceable>SUBCOMMAND</replaceable></userinput>.  Subversion
      will respond with the full usage message for that subcommand,
      including its syntax, options, and behavior:</para>
-->
    <para>Như được mô tả trong kết quả câu lệnh bên trên, bạn có thể yêu cầu giúp đỡ cho một lệnh phụ cụ thể bằng cách thực thi lệnh <userinput>svn help <replaceable>SUBCOMMAND</replaceable></userinput>. Subversion sẽ phản hồi với thông tin sử dụng đầy đủ cho lệnh phụ đó, bao gồm cú pháp, tuỳ chọn và hành vi:</para>

    <informalexample>
      <screen>
$ svn help help
help (?, h): Describe the usage of this program or its subcommands.
usage: help [SUBCOMMAND...]

Global options:
  --username ARG           : specify a username ARG
  --password ARG           : specify a password ARG
&hellip;
</screen>
    </informalexample>

    <sidebar>
<!--       <title>Options and Switches and Flags, Oh My!</title> -->
      <title>Tuỳ chọn, Khoá và Cờ</title>
        
      <indexterm>
        <primary>svn</primary>
        <secondary>tuỳ chọn</secondary>
      </indexterm>

<!--
      <para>The Subversion command-line client has numerous command
        modifiers.  Some folks refer to such things
        as <quote>switches</quote> or <quote>flags</quote>&mdash;in
        this book, we'll call them <quote>options</quote>.  You'll
        find the options supported by a given <command>svn</command>
        subcommand, plus a set of options which are globally supported
        by all subcommands, listed near the bottom of the built-in
        usage message for that subcommand.</para>
-->
      <para>Ứng dụng khách Subversion giao-diện-dòng-lệnh có nhiều bổ lệnh. Một vài người đề cập tới như là <quote>khoá</quote> hoặc <quote>cờ</quote>&mdash;trong cuốn sách này, chúng tôi gọi là <quote>tuỳ chọn</quote>. Bạn sẽ tìm thấy những tuỳ chọn được hỗ trợ bởi từng lệnh phụ <command>svn</command> riêng lẻ, thêm vào đó là một tập những tuỳ chọn mà được hỗ trợ toàn cục bởi tất cả các lệnh phụ, được liệt kê gần bên dưới cùng của thông tin sử dụng đi kèm với lệnh phụ đó.</para>

<!--
		
		
      <para>Subversion's options have two distinct forms:  short
        options are a single hyphen followed by a single letter, and
        long options consist of two hyphens followed by several
        letters and hyphens (e.g., <literal>-s</literal>
        and <literal>- -this-is-a-long-option</literal>, respectively).
        Every option has at least one long format.  Some, such as
        the <option>- -changelist</option> option, feature an
        abbreviated long-format alias (<option>- -cl</option>, in this
        case).  Only certain options&mdash;generally the most-used
        ones&mdash;have an additional short format.  To maintain
        clarity in this book, we usually use the long form in code
        examples, but when describing options, if there's a short
        form, we'll provide the long form (to improve clarity) and the
        short form (to make it easier to remember).  Use the form
        you're more comfortable with when executing your own
        Subversion commands.</para>
-->
      <para>Tuỳ chọn Subversion có hai dạng tách biệt: tuỳ chọn ngắn là một dấu gạch ngang nối tiếp bởi một ký tự đơn, và tuỳ chọn dài bao gồm hai dấu gạch ngang nối tiếp bởi nhiều ký tự hoặc dấu gạch ngang (ví dụ, <literal>-s</literal> và <literal>--đây-là-tuỳ-chọn-dài</literal>, tương ứng). Mỗi tuỳ chọn có tối thiểu một định dạng tuỳ chọn dài. Một vài, như là tuỳ chọn <option>--changelist</option>, có bí danh viết tắt của tuỳ chọn dài (trong trường hợp này là <option>--cl</option>). Chỉ những tuỳ chọn cụ thể&mdash;thường là những cái được sử dụng nhiều nhất&mdash;có thêm định dạng tuỳ chọn ngắn. Để duy trì tính rõ ràng trong cuốn sách này, chúng tôi thường sử dụng dạng tuỳ chọn dài trong mã lệnh ví dụ, tuy nhiên khi mô tả những tuỳ chọn, nếu có tuỳ chọn ngắn, chúng tôi sẽ cung cấp dạng tuỳ chọn dài (để nâng cao tính rõ ràng) và dạng tuỳ chọn ngắn (để làm cho dễ nhớ). Sử dụng dạng mà bạn thấy phù hợp khi thực thi lệnh Subversion của riêng bạn.</para>

    </sidebar>

<!--
    <para>Many Unix-based distributions of Subversion include manual
      pages of the sort that can be invoked using
      the <command>man</command> program, but those tend to carry only
      pointers to other sources of real help, such as the project's
      website and to the website which hosts this book.  Also, several
      companies offer Subversion help and support, too, usually via a
      mixture of web-based discussion forums and fee-based consulting.
      And of course, the Internet holds a decade's worth of
      Subversion-related discussions just begging to be located by
      your favorite search engine.  Subversion help is never too far
      away.</para>
-->
    <para>Nhiều bản phân phối của Subversion dành cho các nền tảng dựa-trên-Unix tích hợp trang hướng dẫn sử dụng cuả những lệnh mà có thể được triệu gọi với chương trình <command>man</command>, nhưng những thành phần này có xu hướng chỉ trả về tham khảo tới những nguồn trợ giúp thực khác, ví dụ như website của dự án và tới website mà lưu trữ cuốn sách này. Ngoài ra cũng có rất nhiều công ty cung cấp hướng dẫn và hỗ trợ Subversion, thông thường là thông qua hình thức pha trộn giữa diễn đàn thảo luận dạng web và tư vấn có trả phí. Và dĩ nhiên, Internet lưu giữ giá trị của một thập kỷ các cuộc thảo luận liên quan đến Subversion có sẵn để được định vị bởi công cụ tìm kiếm của bạn. Trợ giúp Subversion luôn ở trong tầm tay của bạn.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.importing">
<!--     <title>Getting Data into Your Repository</title> -->
    <title>Đưa Dữ Liệu Vào Trong Kho Lưu Trữ Của Bạn</title>

<!--
    <para>You can get new files into your Subversion
      repository in two ways: <command>svn import</command> and <command>svn
      add</command>.  We'll discuss <command>svn import</command> now
      and will discuss <command>svn add</command> later in this
      chapter when we review a typical day with Subversion.</para>
-->
    <para>Bạn có thể đưa tập tin mới vào trong kho lưu trữ của bạn theo hai cách: <command>svn import</command> và <command>svn add</command>. Chúng ta sẽ thảo luận bây giờ <command>svn import</command> và sẽ thảo luận <command>svn add</command> sau trong chương này khi chúng ta xem lại một ngày tiêu biểu với Subversion.</para>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.importing.import">
<!--       <title>Importing Files and Directories</title> -->
      <title>Nhập tập tin và thư mục</title>

<!--
      <indexterm>
        <primary>svn</primary>
        <secondary>subcommands</secondary>
        <tertiary>import</tertiary>
      </indexterm>
-->
      <indexterm>
        <primary>svn</primary>
        <secondary>lệnh phụ</secondary>
        <tertiary>nhập</tertiary>
      </indexterm>

<!--
      <para>The <command>svn import</command> command is a quick way to
        copy an unversioned tree of files into a repository, creating
        intermediate directories as necessary.  <command>svn
        import</command> doesn't require a working copy, and your files
        are immediately committed to the repository.  You typically
        use this when you have an existing tree of files that you want to
        begin tracking in your Subversion repository.  For example:</para>
-->
      <para>Lệnh <command>svn import</command> là một cách để sao chép nhanh một cây chưa đánh phiên bản của những tập tin, tạo nên những thư mục trung gian cần thiết. Lệnh <command>svn import</command> không đòi hỏi phải có bản sao làm việc và những tập tin của bạn được chuyển giao ngay tức thì vào trong kho lưu trữ. Thông thường bạn hay sử dụng lệnh này khi bạn đã có sẵn một cây của những tập tin mà bạn muốn bắt đầu theo dõi trong kho lưu trữ của bạn. Ví dụ:</para>

      <informalexample>
        <screen>
$ svn import /path/to/mytree \
             http://svn.example.com/svn/repo/some/project \
             -m "Initial import"
Adding         mytree/foo.c
Adding         mytree/bar.c
Adding         mytree/subdir
Adding         mytree/subdir/quux.h

Committed revision 1.
$
</screen>
      </informalexample>

<!--
      <para>The previous example copied the contents of the local
        directory <filename>mytree</filename> into the directory
        <filename>some/project</filename> in the repository.  Note
        that you didn't have to create that new directory
        first&mdash;<command>svn import</command> does that for you.
        Immediately after the commit, you can see your data in the
        repository:</para>
-->
      <para>Ví dụ trên sao chép nội dung của thư mục cục bộ <filename>mytree</filename> vào trong thư mục <filename>some/project</filename> trên kho lưu trữ. Nhớ rằng bạn không cần phải tạo thư mục này trước&mdash;lệnh <command>svn import</command> thực hiện việc đó cho bạn. Ngay sau quá trình chuyển giao, bạn có thể thấy dữ liệu của bạn trong kho lưu trữ:</para>

      <informalexample>
        <screen>
$ svn list http://svn.example.com/svn/repo/some/project
bar.c
foo.c
subdir/
$
</screen>
      </informalexample>

<!--
      <para>Note that after the import is finished, the original local
        directory is <emphasis>not</emphasis> converted into a working
        copy.  To begin working on that data in a versioned fashion,
        you still need to create a fresh working copy of that
        tree.</para>
-->
      <para>Lưu ý rằng sau khi quá trình nhập kết thúc, thư mục cục bộ ban đầu <emphasis>không</emphasis> được chuyển thành bản sao làm việc. Để bắt đầu làm việc với dữ liệu đó theo dạng đã đánh phiên bản, bạn cần phải tạo một bản sao làm việc mới cho cây đó.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.importing.layout">
<!--       <title>Recommended Repository Layout</title> -->
      <title>Khuyến nghị cách bố trí kho lưu trữ</title>

<!--
      <para>Subversion provides the ultimate flexibility in terms of
        how you arrange your data.  Because it simply versions
        directories and files, and because it ascribes no particular
        meaning to any of those objects, you may arrange the data in
        your repository in any way that you choose.  Unfortunately,
        this flexibility also means that it's easy to find
        yourself <quote>lost without a roadmap</quote> as you attempt
        to navigate different Subversion repositories which may carry
        completely different and unpredictable arrangements of the
        data within them.</para>
-->
      <para>Subversion rất linh hoạt trong việc cung cấp những cách bạn sắp xếp dữ liệu. Bởi vì nó chỉ đơn giản là các phiên bản thư mục và tập tin, và bởi vì nó không gán một ý nghĩa đặc biệt nào vào những đối tượng này, bạn có thể sắp xếp dữ liệu trong kho lưu trữ của bạn theo bất kỳ cách nào bạn chọn. Không may, tính linh hoạt này cũng có nghĩa là bạn sẽ hay gặp phải tình huống <quote>lạc đường mà không có bản đồ</quote> khi bạn duyệt thông tin những kho lưu trữ khác nhau với mỗi kho có bộ dữ liệu hoàn toàn khác nhau và được sắp xếp theo một cách không biết trước được.</para>

<!--
      <para>
        <indexterm>
          <primary>trunk</primary>
        </indexterm>
        <indexterm>
          <primary>tags</primary>
        </indexterm>
        <indexterm>
          <primary>branches</primary>
        </indexterm>
        <indexterm>
          <primary>project root</primary>
        </indexterm>To counteract this confusion, we recommend that
        you follow a repository layout convention (established long
        ago, in the nascency of the Subversion project itself) in
        which a handful of strategically named Subversion repository
        directories convey valuable meaning about the data they hold.
        Most projects have a recognizable <quote>main line</quote>,
        or <firstterm>trunk</firstterm>, of development;
        some <firstterm>branches</firstterm>, which are divergent
        copies of development lines; and
        some <firstterm>tags</firstterm>, which are named, stable
        snapshots of a particular line of development.  So we first
        recommend that each project have a
        recognizable <firstterm>project root</firstterm> in the
        repository, a directory under which all of the versioned
        information for that project&mdash;and only that
        project&mdash;lives.  Secondly, we suggest that each project
        root contain a <filename>trunk</filename> subdirectory for the
        main development line, a
        <filename>branches</filename> subdirectory in which specific
        branches (or collections of branches) will be created, and
        a <filename>tags</filename> subdirectory in which specific
        tags (or collections of tags) will be created.  Of course, if
        a repository houses only a single project, the root of the
        repository can serve as the project root, too.</para>
-->
      <para>
        <indexterm>
          <primary>thân (trunk)</primary>
        </indexterm>
        <indexterm>
          <primary>thẻ (tags)</primary>
        </indexterm>
        <indexterm>
          <primary>nhánh (branches)</primary>
        </indexterm>
        <indexterm>
          <primary>gốc dự án</primary>
        </indexterm>Để hạn chế sự nhầm lẫn này, chúng tôi khuyến nghị bạn nên theo cách bố trí kho lưu trữ quy ước (đã được thiết lập từ lâu, từ lúc khởi đầu của dự án Subversion) mà một số ít những thư mục kho lưu trữ Subversion được đặt tên theo cách có thể chuyển tải được thông tin có giá trị về dữ liệu mà chúng đang lưu trữ. Đa số các dự án chứa <quote>phần chính</quote> dễ nhận biết của quá trình phát triển, <firstterm>thân (trunk)</firstterm>; một vài <firstterm>nhánh (branches)</firstterm>, là những bản sao khác nhau của dự án; và vài <firstterm>thẻ (tags)</firstterm>, mà được đặt tên, chứa những bản sao lưu  của một nhánh cụ thể đã ổn định. Vì vậy trước tiên chúng tôi đề nghị rằng mỗi dự án nên có một <firstterm>gốc dự án</firstterm> trong kho lưu trữ, là thư mục mà trong đó tất cả những thông tin phiên bản của dự án được chứa&mdash;và chỉ dự án này&mdash;. Thứ hai, chúng tôi đề nghị mỗi gốc dự án chứa một thư mục con <filename>trunk</filename> dành cho nhánh phát triển chính, một thư mục con <filename>branches</filename> chứa những nhánh cụ thể (hoặc những tập các nhánh) mà sẽ được tạo, và một thư mục con <filename>tags</filename> chứa những thẻ cụ thể (hoặc những tập các thẻ) mà sẽ được tạo. Dĩ nhiên nếu kho lưu trữ chỉ chứa một dự án đơn thì gốc của kho cũng có thể coi như là gốc của dự án.</para>

<!--       <para>Here are some examples:</para> -->
      <para>Dưới đây là một vài ví dụ:</para>

      <informalexample>
        <screen>
$ svn list file:///var/svn/single-project-repo
trunk/
branches/
tags/
$ svn list file:///var/svn/multi-project-repo
project-A/
project-B/
$ svn list file:///var/svn/multi-project-repo/project-A
trunk/
branches/
tags/
$
</screen>
      </informalexample>

<!--
      <para>We talk much more about tags and branches in
        <xref linkend="svn.branchmerge"/>.  For details and some
        advice on how to set up repositories when you have multiple
        projects, see <xref linkend="svn.branchmerge.maint.layout"/>.
        Finally, we discuss project roots more in
        <xref linkend="svn.reposadmin.projects.chooselayout"/>.</para>
-->
      <para>Chúng tôi đề cập rất nhiều về thẻ và nhánh ở tại <xref linkend="svn.branchmerge"/>. Để xem thông tin chi tiết về việc làm cách nào thiết lập những kho lưu trữ khi bạn có nhiều dự án, xem ở <xref linkend="svn.branchmerge.maint.layout"/>. Cuối cùng, chúng tôi thảo luận chi tiết về gốc dự án trong <xref linkend="svn.reposadmin.projects.chooselayout"/>.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.importing.naming">
<!--       <title>What's In a Name?</title> -->
      <title>Tên gọi nói lên điều gì?</title>

<!--
      <para>Subversion tries hard not to limit the type of data you
        can place under version control.  The contents of files and
        property values are stored and transmitted as binary data, and
        <xref linkend="svn.advanced.props.special.mime-type"/>
        tells you how to give Subversion a hint that
        <quote>textual</quote> operations don't make sense for a
        particular file.  There are a few places, however, where
        Subversion places restrictions on information it
        stores.</para>
-->
      <para>Subversion không giới hạn loại dữ liệu mà bạn có thể đưa vào kiểm soát phiên bản. Nội dung của các tập tin và những giá trị thuộc tính được lưu trữ và truyền theo dạng dữ liệu nhị phân, và <xref linkend="svn.advanced.props.special.mime-type"/> cho bạn biết làm cách nào để thông báo cho Subversion những thao tác <quote>văn bản</quote> là không phù hợp cho một loại tập tin cụ thể. Tuy nhiên, có một vài nơi mà Subversion thiết lập giới hạn về thông tin mà nó lưu trữ.</para>

<!--
      <para>Subversion internally handles certain bits of
        data&mdash;for example, property names, pathnames, and log
        messages&mdash;as UTF-8-encoded Unicode.  This is not to say
        that all your interactions with Subversion must involve UTF-8,
        though.  As a general rule, Subversion clients will gracefully
        and transparently handle conversions between UTF-8 and the
        encoding system in use on your computer, if such a conversion
        can meaningfully be done (which is the case for most common
        encodings in use today).</para>
-->

     <!-- ### TODO: Need to find a better way to translate the sentence "if such a conversion
        can meaningfully be done (which is the case for most common
        encodings in use today)" ### -->

      <para>Subversion về mặt nội bộ xử lý những bit dữ liệu nhất định&mdash;ví dụ, tên thuộc tính, đường dẫn và thông báo nhật ký&mdash;theo định dạng Unicode UTF-8. Tuy nhiên, đây không phải là khẳng định rằng tất cả các tương tác của bạn với Subversion phải liên quan đến TF-8. Như một quy tắc chung, ứng dụng khách Subversion sẽ xử lý việc chuyển đổi giữa UTF-8 và hệ thống mã hóa đang được sử dụng trong máy tính của bạn một cách nhẹ nhàng và hoàn toàn ẩn bên dưới nếu cần thiết (đây là cách mà đa số những hệ thống mã hóa hiện nay sử dụng).</para>

<!--
      <para>In WebDAV exchanges and older versions of some of
        Subversion's administrative files, paths are used as XML
        attribute values, and property names in XML tag names.  This
        means that pathnames can contain only legal XML (1.0)
        characters, and properties are further limited to ASCII
        characters.  Subversion also prohibits <literal>TAB</literal>,
        <literal>CR</literal>, and <literal>LF</literal> characters in
        path names to prevent paths from being broken up in diffs or
        in the output of commands such as <command>svn log</command>
        or <command>svn status</command>.</para>
-->
      <para>Trong chuyển đổi dùng WebDAV và trong những phiên bản cũ của một vài tập tin quản trị của Subversion, đường dẫn được sử dụng như những giá trị thuộc tính XML và tên thuộc tính được chứa trong tên thẻ XML. Điều này có nghĩa rằng đường dẫn chỉ có thể chứa những ký tự XML (1.0) hợp lệ và những thuộc tính được giới hạn trong những ký tự ASCII. Subversion cũng không cho phép những ký tự <literal>TAB</literal>, <literal>CR</literal> và <literal>LF</literal> trong đường dẫn để ngăn ngừa tình huống đường dẫn bị sai trong lệnh <command>diff</command> và trong kết quả trả về của những lệnh như <command>svn log</command> hoặc <command>svn status</command>.</para>

<!--
      <para>While it may seem like a lot to remember, in practice
        these limitations are rarely a problem.  As long as your
        locale settings are compatible with UTF-8 and you don't use
        control characters in path names, you should have no trouble
        communicating with Subversion.  The command-line client adds
        an extra bit of help&mdash;to create
        <quote>legally correct</quote> versions for internal
        use it will automatically escape illegal
        path characters as needed in URLs that you type.</para>
-->
      <para>Mặc dù có vẻ như có rất nhiều thứ để ghi nhớ, trên thực tế những giới hạn này rất ít khi là vấn đề. Miễn là các thiết lập cục bộ của bạn tương thích với UTF-8 và bạn không dùng ký tự điều khiển trong đường dẫn của bạn, bạn sẽ không gặp vấn đề khi giao tiếp với Subversion. Ứng dụng khách Subversion giao-diện-dòng-lệnh thêm một bit phụ để hỗ trợ&mdash;để tạo một phiên bản <quote>hợp lệ</quote> sử dụng nội bộ nó sẽ tự động loại bỏ những ký tự đường dẫn không hợp lệ khi cần thiết trong URL mà bạn nhập.</para>

      <warning>
<!--
        <para>Of course, when it comes to choosing valid path names,
          Subversion isn't the only limiting factor.  Teams using
          multiple operating systems need to consider the limitations
          placed on path names by those operating systems, too.  For
          example, while Windows disallows the use of colon characters
          in file names, a user on a Linux system can very easily add
          such a file to version control, resulting in a dataset that
          can no longer be checked out on Windows.  Adding multiple
          files to a directory whose names differ only in their letter
          casing will likewise cause problems for users checking out
          working copies onto case-insensitive filesystems.  So, some
          broad awareness of the various limitations introduced by
          different operating systems and filesystems, then, is
          recommended.</para>
-->
        <para>Trong vấn đề lựa chọn đường dẫn hợp lệ, Subversion không phải là một nhân tố duy nhất. Những nhóm làm việc sử dụng nhiều hệ điều hành khác nhau cũng cần phải cân nhắc đến giới hạn trên đường dẫn bởi những hệ điều hành này. Ví dụ, trong khi Windows không cho phép dấu hai chấm trong tên tập tin, người sử dụng Subversion trên Linux có thể dễ dàng thêm tập tin này vào kiểm soát phiên bản, kết quả là tập dữ liệu đó không thể được kiểm xuất trên Windows. Việc thêm nhiều tập tin vào trong một thư mục mà tên chỉ khác nhau trong những ký tự hoa/thường cũng sẽ gây ra những vấn đề cho những người sử dụng trên những hệ thống có phân biệt hoa-thường. Vì vậy, việc nhận thức rộng rãi về những hạn chế trên những hệ điều hành khác nhau, hệ thống tập tin khác nhau là cần thiết.</para>
      </warning>

    </sect2>
  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.initial">
<!--     <title>Creating a Working Copy</title> -->
    <title>Tạo Bản Sao Làm Việc</title>

<!--
    <para>
      <indexterm>
        <primary>svn</primary>
        <secondary>subcommands</secondary>
        <tertiary>checkout</tertiary>
      </indexterm>Most of the time, you will start using a Subversion
      repository by performing a <firstterm>checkout</firstterm> of
      your project.  Checking out a directory from a repository
      creates a working copy of that directory on your local machine.
      Unless otherwise specified, this copy contains the youngest
      (that is, most recently created or modified) versions of the
      directory and its children found in the Subversion
      repository:</para>
-->
    <para>
      <indexterm>
        <primary>svn</primary>
        <secondary>lệnh phụ</secondary>
        <tertiary>kiểm xuất</tertiary>
      </indexterm>Đa số trường hợp, bạn bắt đầu làm việc với kho lưu trữ Subversion bằng việc <firstterm>kiểm xuất</firstterm> dự án của bạn. Kiểm xuất một thư mục từ kho lưu trữ sẽ tạo một bản sao làm việc của thư mục đó trên máy trạm của bạn. Nếu không có chỉ định gì khác, bản sao đó sẽ chứa phiên bản mới nhất (mới được tạo hoặc chỉnh sửa gần đây nhất) của thư mục và con của nó mà được tìm thấy trên kho lưu trữ Subversion:</para>

    <informalexample>
      <screen>
$ svn checkout http://svn.example.com/svn/repo/trunk
A    trunk/README
A    trunk/INSTALL
A    trunk/src/main.c
A    trunk/src/header.h
&hellip;
Checked out revision 8810.
$
</screen>
    </informalexample>

<!--
    <para>Although the preceding example checks out the trunk
      directory, you can just as easily check out a deeper
      subdirectory of a repository by specifying that subdirectory's
      URL as the checkout URL:</para>
-->
    <para>Mặc dù ví dụ vừa rồi kiểm xuất thư mục "trunk", bạn có thể dễ dàng kiểm xuất một nhánh con ở mức sâu hơn của kho lưu trữ bằng cách khai báo URL của thư mục con đó như là URL kiểm xuất:</para>

    <informalexample>
      <screen>
$ svn checkout http://svn.example.com/svn/repo/trunk/src
A    src/main.c
A    src/header.h
A    src/lib/helpers.c
&hellip;
Checked out revision 8810.
$
</screen>
    </informalexample>

    <!--<para>Since Subversion uses a copy-modify-merge model instead of
      lock-modify-unlock (see <xref linkend="svn.basic.vsn-models"/>),
      you can immediately make changes to the files and directories in
      your working copy.  Your working copy is just like any other
      collection of files and directories on your system.  You can
      edit the files inside it, rename it, even delete the entire
      working copy and forget about it.</para>-->
	  
    <para>Bởi vì Subversion áp dụng mô hình sao chép-sửa đổi-hợp nhất thay vì mô hình khoá-sửa đổi-mở khoá (xem <xref linkend="svn.basic.vsn-models"/>), bạn có thể thay đổi trên tập tin và thư mục trong bản sao làm việc của bạn ngay tức thì. Bản sao làm việc của bạn cũng tương tự như những tập các tập tin và thư mục khác trên hệ thống của bạn. Bạn có thể hiệu chỉnh những tập tin, đổi tên, thậm chí là xóa toàn bộ bản sao làm việc và quên nó.</para>

    <warning>
      <para>Mặc dù bản sao làm việc của bạn <quote>cũng tương tự như những tập các tập tin và thư mục khác trên hệ thống của bạn,</quote> bạn có thể xóa tập tin tùy ý, nhưng bạn phải thông báo cho Subversion về <emphasis>mọi thứ khác</emphasis> mà bạn thực hiện. Ví dụ, nếu bạn muốn sao chép hoặc di chuyển một mục trong một bản sao làm việc, bạn phải dùng lệnh <command>svn copy</command>  hoặc <command>svn move</command> chứ không phải lệnh sao chép và di chuyển của hệ điều hành bạn đang sử dụng. Chúng ta sẽ bàn về những lệnh này sau trong chương này.</para>
<!--
      <para>While your working copy is <quote>just like any other
        collection of files and directories on your system,</quote>
        you can edit files at will, but you must tell Subversion
        about <emphasis>everything else</emphasis> that you do.  For
        example, if you want to copy or move an item in a working
        copy, you should use <command>svn copy</command> or
        <command>svn move</command> instead of the copy and move
        commands provided by your operating system.  We'll talk more
        about them later in this chapter.</para>
-->
    </warning>

<!--
    <para>Unless you're ready to commit the addition of a new file or
      directory or changes to existing ones, there's no need to
      further notify the Subversion server that you've done
      anything.</para>
-->
    <para>Trừ khi bạn đã sẵn sàng để chuyển giao những tập tin hoặc thư mục mới hay là những thay đổi trên những mục hiện có, bạn không cần thiết phải thông báo cho máy chủ Subversion về những việc khác.</para>

    <sidebar>
<!--       <title>What Is This .svn Directory?</title> -->
      <title>Thư mục .svn gì vậy?</title>

<!--
      <para>The topmost directory of a working copy&mdash;and prior to
        version 1.7, every versioned subdirectory
        thereof&mdash;contains a special administrative subdirectory
        named <filename>.svn</filename>.  Usually, your operating
        system's directory listing commands won't show this
        subdirectory, but it is nevertheless an important directory.
        Whatever you do, don't delete or change anything in the
        administrative area!  Subversion uses that directory and its
        contents to manage your working copy.</para>
-->
      <para>Thư mục trên cùng của một bản sao làm việc chứa một thư mục quản trị con đặc biệt tên là <filename>.svn</filename>&mdash;ở những phiên bản trước 1.7, mỗi thư mục con chứa một thư mục .svn riêng&mdash;. Thông thường lệnh liệt kê nội dung thư mục trên hệ điều hành của bạn không hiển thị thư mục con này, tuy nhiên nó là một thư mục quan trọng. Bất cứ lý do nào, không xóa hoặc thực hiện bất kỳ việc thay đổi nào trong thư mục này! Subversion sử dụng thư mục này và nội dung của nó để quản trị bản sao làm việc của bạn.</para>
    </sidebar>

<!--
    <para>Notice that in the previous pair of examples, Subversion
      chose to create a working copy in a directory named for the
      final component of the checkout URL.  This occurs only as a
      convenience to the user when the checkout URL is the only bit of
      information provided to the <command>svn checkout</command>
      command.  Subversion's command-line client gives you additional
      flexibility, though, allowing you to optionally specify the
      local directory name that Subversion should use for the working
      copy it creates.  For example:</para>
-->
    <para>Chú ý rằng trong cặp ví dụ trước, Subversion tạo bản sao làm việc trên một thư mục với tên là phần cuối của URL kiểm xuất. Điều này như là một sự tiện lợi cho người sử dụng khi chỉ có URL kiểm xuất được cung cấp khi thực hiện lệnh <command>svn checkout</command>. Ứng dụng khách Subversion giao-diện-dòng-lệnh cũng cung cấp cho bạn một sự linh hoạt, đó là cho phép bạn tùy ý chỉ tên định thư mục cục bộ mà Subversion sẽ dùng cho việc tạo bản sao làm việc. Ví dụ:</para>

    <informalexample>
      <screen>
$ svn checkout http://svn.example.com/svn/repo/trunk my-working-copy
A    my-working-copy/README
A    my-working-copy/INSTALL
A    my-working-copy/src/main.c
A    my-working-copy/src/header.h
&hellip;
Checked out revision 8810.
$
</screen>
    </informalexample>

<!--
    <para>If the local directory you specify doesn't yet
      exist, that's okay&mdash;<command>svn checkout</command> will
      create it for you.</para>
-->
    <para>Nếu thư mục cục bộ bạn chỉ định chưa tồn tại, không thành vấn đề&mdash;lệnh <command>svn checkout</command> sẽ tạo thư mục đó cho bạn.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.cycle">
<!--     <title>Basic Work Cycle</title> -->
    <title>Chu Kỳ Làm Việc Cơ Bản</title>

<!--
    <para>Subversion has numerous features, options, bells, and
      whistles, but on a day-to-day basis, odds are that you will use
      only a few of them.  In this section, we'll run through the most
      common things that you might find yourself doing with Subversion
      in the course of a day's work.</para>
-->
      
    <para>Subversion có nhiều tính năng và tùy chọn, nhưng trên cơ sở hoạt động hàng ngày, chúng ta chỉ sử dụng một vài trong số chúng. Trong phần này, chúng ta sẽ đi xuyên xuốt những vấn đề phổ biến mà bạn sẽ gặp phải trong quá trình làm việc hàng ngày với Subversion.</para>

<!--     <para>The typical work cycle looks like this:</para> -->
    <para>Chu kỳ làm việc điển hình sẽ như thế này:</para>

    <orderedlist>
      <listitem>
<!--
        <para><emphasis>Update your working copy.</emphasis> This
          involves the use of the <command>svn update</command>
          command.</para>
-->
        <para><emphasis>Cập nhật bản sao làm việc của bạn.</emphasis> Thao tác này sẽ sử dụng lệnh <command>svn update</command>.</para>
      </listitem>
      <listitem>
<!--
        <para><emphasis>Make your changes.</emphasis> The most common
          changes that you'll make are edits to the contents of your
          existing files.  But sometimes you need to add, remove, copy
          and move files and directories&mdash;the <command>svn
          add</command>, <command>svn delete</command>, <command>svn
          copy</command>, and <command>svn move</command> commands
          handle those sorts of structural changes within the working
          copy.</para>
-->
        <para><emphasis>Thực hiện thay đổi của bạn.</emphasis> Thay đổi phổ biến nhất mà bạn sẽ thực hiện là hiệu chỉnh nội dung của những tập tin hiện có. Tuy nhiên đôi khi bạn cần thêm, xóa, sao chép hoặc di chuyển tập tin và thư mục&mdash;những lệnh <command>svn add</command>, <command>svn delete</command>, <command>svn copy</command>, và <command>svn move</command> xử lý những thao tác thay đổi cấu trúc này trên bản sao làm việc.</para>
      </listitem>
      <listitem>
<!--
        <para><emphasis>Review your changes.</emphasis>
          The <command>svn status</command> and <command>svn
          diff</command> commands are critical to reviewing the
          changes you've made in your working copy.</para>
-->
        <para><emphasis>Xem lại những thay đổi của bạn.</emphasis> Những lệnh quan trọng là <command>svn status</command> và <command>svn diff</command> được sử dụng để xem lại những thay đổi mà bạn đã thực hiện trên bản sao làm việc của bạn.</para>
      </listitem>
      <listitem>
<!--
        <para><emphasis>Fix your mistakes.</emphasis>  Nobody's
          perfect, so as you review your changes, you may spot
          something that's not quite right.  Sometimes the easiest way
          to fix a mistake is start all over again from scratch.
          The <command>svn revert</command> command restores a file
          or directory to its unmodified state.</para>
-->
        <para><emphasis>Chỉnh sửa những sai sót của bạn.</emphasis> Ai cũng có thể mắc sai sót, vì vậy khi bạn xem lại những thay đổi của bạn, bạn có thể sẽ tìm thấy một vài điểm không hoàn toàn chính xác. Đôi khi cách dễ nhất để sửa một sai sót là bắt đầu làm lại từ đầu. Lệnh <command>svn revert</command> phục hồi một tập tin hoặc thư mục trở về trạng thái chưa chỉnh sửa của nó.</para>
      </listitem>
      <listitem>
<!--
        <para><emphasis>Resolve any conflicts (merge others'
          changes).</emphasis>  In the time it takes you to make and
          review your changes, others might have made and published
          changes, too.  You'll want to integrate their changes into
          your working copy to avoid the potential out-of-dateness
          scenarios when you attempt to publish your own.  Again,
          the <command>svn update</command> command is the way to do
          this.  If this results in local conflicts, you'll need to
          resolve those using the <command>svn resolve</command>
          command.</para>
-->
        <para><emphasis>Giải quyết những xung đột (hợp nhất thay đổi của những người khác).</emphasis> Trong lúc bạn thực hiện việc thay đổi và xem lại những thay đổi của bạn, những người khác cũng có thể đã thực hiện và đã phát hành những thay đổi. Bạn sẽ muốn tích hợp những thay đổi của họ vào trong bản sao làm việc của bạn để tránh tình huống quá-hạn khi bạn cố thực hiện việc phát hành những thay đổi của riêng bạn. Một lần nữa, lệnh <command>svn update</command> được dùng cho việc này. Nếu việc này dẫn tới xung đột trên bản sao cục bộ của bạn, bạn cần phải giải quyết những xung đột này với lệnh <command>svn resolve</command>.</para>
      </listitem>
      <listitem>
<!--
        <para><emphasis>Publish (commit) your changes.</emphasis>
          The <command>svn commit</command> command transmits your
          changes to the repository where, if they are accepted, they
          create the newest versions of all the things you modified.
          Now others can see your work, too!</para>
-->
        <para><emphasis>Phát hành (chuyển giao) những thay đổi của bạn.</emphasis> Lệnh <command>svn commit</command> chuyển giao những thay đổi của bạn đến kho lưu trữ, nơi mà nếu những thay đổi này được chấp nhận sẽ tạo thành phiên bản mới nhất của tất cả những thay đổi bạn đã thực hiện. Lúc này, những người khác cũng có thể thấy những thay đổi của bạn!</para>
      </listitem>
    </orderedlist>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.update">
<!--       <title>Update Your Working Copy</title> -->
      <title>Cập nhật bản sao làm việc của bạn</title>

<!--
      <indexterm>
        <primary>svn</primary>
        <secondary>subcommands</secondary>
        <tertiary>update</tertiary>
      </indexterm>
-->
      <indexterm>
        <primary>svn</primary>
        <secondary>lệnh phụ</secondary>
        <tertiary>cập nhật</tertiary>
      </indexterm>

<!--
      <para>When working on a project that is being modified via
        multiple working copies, you'll want to update your working
        copy to receive any changes committed from other working
        copies since your last update.  These might be changes that
        other members of your project team have made, or they might
        simply be changes you've made yourself from a different
        computer.  To protect your data, Subversion won't
        allow you commit new changes to out-of-date files and
        directories, so it's best to have the latest versions
        of all your project's files and directories before making new
        changes of your own.</para>
-->
      <para>Khi làm việc trong một dự án mà những thay đổi đến từ nhiều bản sao làm việc khác nhau, bạn sẽ cần phải cập nhật bản sao làm việc của bạn để nhận mỗi thay đổi được chuyển giao từ những bản sao làm việc khác kể từ lần cập nhật cuối cùng của bạn. Đó có thể là những thay đổi mà những thành viên khác trong dự án thực hiện, hoặc có thể là những thay đổi của chính bạn từ một máy tính khác. Để bảo vệ dữ liệu của bạn, Subversion không cho phép bạn chuyển giao những thay đổi mới vào những tập tin và thư mục quá-hạn, vì vậy tốt nhất bạn nên có những tập tin và thư mục mới nhất trong dự án của bạn trước khi thực hiện những thay đổi của riêng bạn.</para>

<!--
      <para>Use <command>svn update</command> to bring your working
        copy into sync with the latest revision in the
        repository:</para>
-->
      <para>Sử dụng lệnh <command>svn update</command> để làm cho bản sao làm việc của bạn được đồng bộ với phiên bản mới nhất trên kho lưu trữ:</para>

      <informalexample>
        <screen>
$ svn update
Updating '.':
U    foo.c
U    bar.c
Updated to revision 2.
$
</screen>
      </informalexample>

<!--
      <para>In this case, it appears that someone committed
        modifications to both <filename>foo.c</filename>
        and <filename>bar.c</filename> since the last time you
        updated, and Subversion has updated your working copy to
        include those changes.</para>
-->
      <para>Trong tình huống này, ai đó đã chuyển giao những chỉnh sửa vào cả hai tập tin <filename>foo.c</filename> và <filename>bar.c</filename> kể từ lần cuối bạn cập nhật và Subversion vừa mới cập nhật bản sao làm việc của bạn để bao gồm những thay đổi này.</para>

<!--
      <para>When the server sends changes to your working copy via
        <command>svn update</command>, a letter code is displayed next
        to each item to let you know what actions Subversion performed
        to bring your working copy up to date.  To find out what these
        letters mean, run <userinput>svn help update</userinput> or
        see <xref linkend="svn.ref.svn.c.update"/> in
        <xref linkend="svn.ref.svn"/>.</para>
-->
      <para>Khi máy chủ gửi những thay đổi đến bản sao làm việc của bạn thông qua lệnh <command>svn update</command>, một mã ký tự được hiển thị sát bên tập tin để cho bạn biết rằng thao tác nào Subversion đã thực hiện để làm cho bản sao làm việc của bạn được cập nhật thông tin mới nhất. Để tìm hiểu những ký tự này có ý nghĩa gì, thực thi lệnh <userinput>svn help update</userinput> hoặc tham khảo <xref linkend="svn.ref.svn.c.update"/> trong <xref linkend="svn.ref.svn"/>.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.edit">
<!--       <title>Make Your Changes </title> -->
      <title>Thực hiện thay đổi của bạn</title>

<!--
      <para>
        <indexterm>
          <primary>file changes</primary>
        </indexterm>
        <indexterm>
          <primary>tree changes</primary>
        </indexterm>Now you can get to work and make changes in your
        working copy.  You can make two kinds of changes to your
        working copy: <firstterm>file changes</firstterm>
        and <firstterm>tree changes</firstterm>.  You don't need to
        tell Subversion that you intend to change a file; just make
        your changes using your text editor, word processor, graphics
        program, or whatever tool you would normally use.  Subversion
        automatically detects which files have been changed, and in
        addition, it handles binary files just as easily as it handles
        text files&mdash;and just as efficiently, too.  Tree changes
        are different, and involve changes to a directory's structure.
        Such changes include adding and removing files, renaming files
        or directories, and copying files or directories to new
        locations.  For tree changes, you use Subversion operations
        to <quote>schedule</quote> files and directories for removal,
        addition, copying, or moving.  These changes may take place
        immediately in your working copy, but no additions or removals
        will happen in the repository until you commit them.</para>
-->
      <para>
        <indexterm>
          <primary>những thay đổi tập tin</primary>
        </indexterm>
        <indexterm>
          <primary>những thay đổi trên cấu trúc cây</primary>
        </indexterm>Lúc này bạn có thể	bắt đầu làm việc và thực hiện những thay đổi trên bản sao làm việc của bạn. Bạn có thể thực hiện hai loại thay đổi trên bản sao làm việc của bạn: <firstterm>thay đổi tập tin</firstterm> và <firstterm>thay đổi trên cấu trúc cây</firstterm>. Bạn không cần thiết phải thông báo cho Subversion biết rằng bạn có ý định thay đổi một tập tin; chỉ việc thực hiện thay đổi của bạn với một trình soạn thảo văn bản, trình xử lý văn bản, chương trình đồ hoạ hoặc là bất kỳ công cụ nào mà bạn hay sử dụng. Subversion phát hiện một cách tự động những tập tin được thay đổi, ngoài ra nó xử lý những tập tin nhị phân cũng dễ dàng như khi xử lý tập tin văn bản&mdash;và cũng hiệu quả tương tự. Những thay đổi trên cấu trúc cây là khác biệt và bao gồm những thay đổi trên cấu trúc thư mục. Những thay đổi này bao gồm thêm vào và loại bỏ tập tin, thay đổi tên của tập tin hay thư mục, và sao chép tập tin và thư mục đến vị trí mới. Với những thay đổi trên cấu trúc cây, bạn sử dụng những thao tác Subversion để <quote>lên lịch</quote> việc xoá, thêm, sao chép, di chuyển những tập tin và thư mục. Những thay đổi này có hiệu lực tức thời trên bản sao làm việc của bạn, nhưng không có thay đổi thêm bớt nào xảy ra trên kho lưu trữ cho tới khi bạn thực hiện chuyển giao những thay đổi này.</para>

      <sidebar>
<!--         <title>Versioning Symbolic Links</title> -->
        <title>Định phiên bản liên kết ký hiệu (symlink)</title>

<!--
        <para>
          <indexterm>
            <primary>symlink</primary>
          </indexterm>
          <indexterm>
            <primary>symbolic link</primary>
            <see>symlink</see>
          </indexterm>On non-Windows platforms, Subversion is able to
          version files of the special type <firstterm>symbolic
          link</firstterm> (or <quote>symlink</quote>).  A symlink is
          a file that acts as a sort of transparent reference to some
          other object in the filesystem, allowing programs to read
          and write to those objects indirectly by performing
          operations on the symlink itself.</para>
-->
        <para>
          <indexterm>
            <primary>symlink</primary>
          </indexterm>
          <indexterm>
            <primary>liên kết ký hiệu</primary>
            <see>symlink</see>
          </indexterm>Trên những nền tảng khác Windows, Subversion có thể định phiên bản những tập tin thuộc loại đặc biệt <firstterm>liên kêt ký hiệu</firstterm> (hay <quote>symlink</quote>). Một symlink là một tập tin mà đóng vai trò như một tham chiếu ẩn hình đến một đối tượng khác trong hệ thống tập tin, cho phép những chương trình đọc và ghi vào những đối tượng này một cách gián tiếp bằng cách thực hiên những thao tác trên bản thân symlink.</para>

<!--
        <para>When a symlink is committed into a Subversion
          repository, Subversion remembers that the file was in fact a
          symlink, as well as the object to which the symlink
          <quote>points.</quote>  When that symlink is checked out to
          another working copy on a non-Windows system, Subversion
          reconstructs a real filesystem-level symbolic link from the
          versioned symlink.  But that doesn't in any way limit the
          usability of working copies on systems such as Windows that
          do not support symlinks.  On such systems, Subversion simply
          creates a regular text file whose contents are the path to
          which the original symlink pointed.  While that file
          can't be used as a symlink on a Windows system, it also
          won't prevent Windows users from performing their other
          Subversion-related activities.</para> 
-->
        <para>Khi một symlink được chuyển giao vào trong một kho lưu trữ Subversion, Subversion ghi nhớ rằng tập tin đó trên thực tế là một symlink, cũng như đối tượng mà symlink <quote>trỏ đến.</quote> Khi symlink đó được kiểm xuất đến một bản sao làm việc trên một hệ thống khác Windows, Subversion tạo lại một liên kết ký hiệu thực ở mức tập tin hệ thống từ symlink đã được định phiên bản. Tuy nhiên trên những hệ thống không hỗ trợ symlink như Windows thì điều này không giới hạn tính khả dụng của bản sao làm việc. Trên những hệ thống như vậy, Subversion đơn giản tạo một tập tin văn bản thông thường với nội dung là đường dẫn mà symlink ban đầu trỏ tới. Mặc dù tập tin này không thể sử dụng được trên Windows như là một symlink, nó không gây trở ngại cho người sử dụng Windows trong việc thực hiện những thao tác liên quan đến Subversion khác.</para> 
      </sidebar>

<!--
      <para>Here is an overview of the five Subversion subcommands
        that you'll use most often to make tree changes:</para>
-->
      <para>Dưới đây là tổng quan về năm lệnh phụ Subversion mà bạn sẽ sử dụng thường xuyên nhất để thực hiện việc thay đổi cây:</para>

      <variablelist>

        <varlistentry>
          <term><userinput>svn add FOO</userinput></term>
          <listitem>
<!--
            <indexterm>
              <primary>svn</primary>
              <secondary>subcommands</secondary>
              <tertiary>add</tertiary>
            </indexterm>
-->
            <indexterm>
              <primary>svn</primary>
              <secondary>lệnh phụ</secondary>
              <tertiary>add</tertiary>
            </indexterm>
<!--
            <para>Use this to schedule the file, directory, or
              symbolic link <filename>FOO</filename> to be added to
              the repository.  When you next
              commit, <filename>FOO</filename> will become a child of
              its parent directory.  Note that if
              <filename>FOO</filename> is a directory, everything
              underneath <filename>FOO</filename> will be scheduled
              for addition.  If you want only to add
              <filename>FOO</filename> itself, pass the
              <option>- -depth=empty</option> option.</para>              
-->
            <para>Sử dụng lệnh này để lên lịch cho việc thêm tập tin, thư mục hoặc symlink <filename>FOO</filename> vào kho lưu trữ. Trong lần chuyển giao tiếp theo, <filename>FOO</filename> sẽ trở thành một mục con của thư mục cha. Lưu ý rằng nếu <filename>FOO</filename> là một thư mục, tất cả mọi thứ bên trong <filename>FOO</filename> sẽ được lên lịch để thêm vào. Nếu bạn chỉ muốn thêm <filename>FOO</filename> vào, bạn cần thêm tuỳ chọn <option>--depth=empty</option>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><userinput>svn delete FOO</userinput></term>
          <listitem>
<!--
            <indexterm>
              <primary>svn</primary>
              <secondary>subcommands</secondary>
              <tertiary>delete</tertiary>
            </indexterm>
-->
            <indexterm>
              <primary>svn</primary>
              <secondary>lệnh phụ</secondary>
              <tertiary>delete</tertiary>
            </indexterm>
<!--
            <para>Use this to schedule the file, directory, or
              symbolic link <filename>FOO</filename> to be deleted
              from the repository.  If <filename>FOO</filename> is a
              file or link, it is immediately deleted from your
              working copy.  If <filename>FOO</filename> is a
              directory, it is not deleted, but Subversion schedules
              it for deletion.  When you commit your
              changes, <filename>FOO</filename> will be entirely
              removed from your working copy and the
              repository.<footnote><para>Of course, nothing is ever
              totally deleted from the repository&mdash;just from
              its <literal>HEAD</literal> revision.  You may continue
              to access the deleted item in previous revisions.
              Should you desire to resurrect the item so that it is
              again present in <literal>HEAD</literal>, see
              <xref linkend="svn.branchmerge.basicmerging.resurrect"
              />.</para></footnote></para>
-->
            <para>Sử dụng lệnh này để lên lịch cho việc xoá tập tin, thư mục hoặc symlink <filename>FOO</filename> khỏi kho lưu trữ. Nếu <filename>FOO</filename> là một tập tin hoặc liên kết, nó sẽ được xoá ngay tức thì khỏi bản sao làm việc của bạn. Nếu <filename>FOO</filename> là một thư mục, nó sẽ không bị xoá ngay nhưng Subversion sẽ lên lịch để xoá nó. Khi bạn chuyển giao những thay đổi của bạn, <filename>FOO</filename> sẽ được xoá bỏ hoàn toàn khỏi bản sao làm việc của bạn và khỏi kho lưu trữ.<footnote><para>Dĩ nhiên, không có gì bị xoá hoàn toàn khỏi kho lưu trữ&mdash;chỉ ở phiên bản <literal>HEAD</literal>. Bạn vẫn có thể tiếp tục truy cập vào mục đã bị xoá trong những phiên bản trước. Nếu bạn mong muốn phục hồi lại mục bị xoá để nó lại hiện diện trong <literal>HEAD</literal>, xem <xref linkend="svn.branchmerge.basicmerging.resurrect"
              />.</para></footnote></para>              
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><userinput>svn copy FOO BAR</userinput></term>
          <listitem>
<!--
            <indexterm>
              <primary>svn</primary>
              <secondary>subcommands</secondary>
              <tertiary>copy</tertiary>
            </indexterm>
-->
            <indexterm>
              <primary>svn</primary>
              <secondary>lệnh phụ</secondary>
              <tertiary>copy</tertiary>
            </indexterm>
<!--
            <para>Create a new item <filename>BAR</filename> as a
              duplicate of <filename>FOO</filename> and automatically
              schedule <filename>BAR</filename> for addition.  When
              <filename>BAR</filename> is added to the repository on
              the next commit, its copy history is recorded (as having
              originally come from <filename>FOO</filename>).
              <command>svn copy</command> does not create intermediate
              directories unless you pass the
              <option>- -parents</option> option.</para>
-->
            <para>Tạo mới một mục <filename>BAR</filename> như làm một bản nhân bản của <filename>FOO</filename> và tự động lên lịch để thêm <filename>BAR</filename>. Trong lần chuyển giao tiếo theo, <filename>BAR</filename> được thêm vào kho lưu trữ và lịch sử nhân bản của nó được ghi lại (được nhân bản từ <filename>FOO</filename>). Lệnh <command>svn copy</command> không tạo tức thì thư mục trừ khi bạn thêm tuỳ chọn <option>--parents</option>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><userinput>svn move FOO BAR</userinput></term>
          <listitem>
<!--
            <indexterm>
              <primary>svn</primary>
              <secondary>subcommands</secondary>
              <tertiary>move</tertiary>
            </indexterm>
-->
            <indexterm>
              <primary>svn</primary>
              <secondary>lệnh phụ</secondary>
              <tertiary>move</tertiary>
            </indexterm>
<!--
            <para>This command is exactly the same as running
              <userinput>svn copy FOO BAR; svn delete FOO</userinput>.
              That is, <filename>BAR</filename> is scheduled for
              addition as a copy of <filename>FOO</filename>, and
              <filename>FOO</filename> is scheduled for removal.
              <command>svn move</command> does not create intermediate
              directories unless you pass the
              <option>- -parents</option> option.</para>
-->
            <para>Lệnh này chính xác giống như thực thi những lệnh <userinput>svn copy FOO BAR; svn delete FOO</userinput>. Tập tin <filename>BAR</filename> được lên lịch để thêm vào như là một bản sao của <filename>FOO</filename> và <filename>FOO</filename> được lên lịch để xoá. Lệnh <command>svn move</command> không tạo tức thì những thư mục trừ khi bạn thêm tuỳ chọn <option>--parents</option>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><userinput>svn mkdir FOO</userinput></term>
          <listitem>
<!--
            <indexterm>
              <primary>svn</primary>
              <secondary>subcommands</secondary>
              <tertiary>mkdir</tertiary>
            </indexterm>
-->
            <indexterm>
              <primary>svn</primary>
              <secondary>lệnh phụ</secondary>
              <tertiary>mkdir</tertiary>
            </indexterm>
<!--
            <para>This command is exactly the same as running
              <userinput>mkdir FOO; svn add FOO</userinput>.  That is,
              a new directory named <filename>FOO</filename> is
              created and scheduled for addition.</para>
-->
            <para>Lệnh này chính xác giống như thực thi những lệnh <userinput>mkdir FOO; svn add FOO</userinput>. Một thư mục mới có tên <filename>FOO</filename> được tạo và được lên lịch để thêm vào.</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <sidebar>
<!--         <title>Changing the Repository Without a Working Copy</title> -->
        <title>Thay đổi kho lưu trữ mà không có bản sao làm việc</title>

<!--
        <para>Subversion <emphasis>does</emphasis> offer ways to
          immediately commit tree changes to the repository without an
          explicit commit action.  In particular, specific uses
          of <command>svn mkdir</command>, <command>svn
          copy</command>, <command>svn move</command>, and
          <command>svn delete</command> can operate directly on
          repository URLs as well as on working copy paths.  Of
          course, as previously mentioned, <command>svn
          import</command> always makes direct changes to the
          repository.  We discuss the ways to commit tree changes
          without a working copy in
          <xref linkend="svn.advanced.working-without-a-wc"/>.</para>
-->
        <para>Subversion <emphasis>cung cấp</emphasis> những cách để chuyển giao một cách tức thì vào kho lưu trữ những thay đổi trên cây mà không cần thực hiện thao tác chuyển giao. Một cách cụ thể, những lệnh <command>svn mkdir</command>, <command>svn copy</command>, <command>svn move</command> và <command>svn delete</command> có thể hoạt động trực tiếp với URL của kho lưu trữ cũng như với đường dẫn của bản sao làm việc. Hiển nhiên, như đã đề cập lệnh <command>svn import</command> luôn thực hiện việc thay đổi trực tiếp trên kho lưu trữ. Chúng ta sẽ thảo luận cách chuyển giao thay đổi trên cây mà không có bản sao làm việc ở <xref linkend="svn.advanced.working-without-a-wc"/>.</para>

<!--
        <para>There are pros and cons to performing URL-based
          operations.  One obvious advantage to doing so is speed:
          sometimes, checking out a working copy that you don't
          already have solely to perform some seemingly simple action
          is an overbearing cost.  A disadvantage is that you are
          generally limited to a single, or single type of, operation
          at a time when operating directly on URLs.  Finally, the
          primary advantage of a working copy is in its utility as a
          sort of <quote>staging area</quote> for changes.  You can
          make sure that the changes you are about to commit make
          sense in the larger scope of your project before committing
          them.  And, of course, these staged changes can be as
          complex or as a simple as they need to be, yet result in but
          a single new revision when committed.</para>
-->
        <para>Có những ưu và khuyết điểm khi thực hiện các hoạt động dựa trên URL. Một trong những lợi thế rõ ràng đó là tốc độ: đôi khi, việc kiểm xuất một bản sao làm việc mà bạn chưa có chỉ để duy nhất thực hiện một vài hành động đơn giản là một việc rất tốn thời gian. Điểm bất lợi đó là bạn chỉ có thể thực hiện lần lượt từng thao tác đơn lẻ hoặc từng loại thao tác đơn lẻ khi thao tác trực tiếp với URL. Cuối cùng, lợi ích chính của bản sao làm việc là ở việc nó như là một <quote>vùng trung gian</quote> cho những thay đổi. Bạn có thể chắc chắn những thay đổi mà bạn chuẩn bị chuyển giao là phù hợp trên phạm vi rộng hơn của dự án của bạn trước khi chuyển giao.</para>

      </sidebar>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.examine">
<!--       <title>Review Your Changes</title> -->
      <title>Xem lại thay đổi của bạn</title>

<!--
      <para>
        <indexterm>
          <primary>log message</primary>
        </indexterm>Once you've finished making changes, you need to commit
        them to the repository, but before you do so, it's usually a
        good idea to take a look at exactly what you've changed.  By
        examining your changes before you commit, you can compose a
        more accurate <firstterm>log message</firstterm> (a
        human-readable description of the committed changes stored
        alongside those changes in the repository).  You may also
        discover that you've inadvertently changed a file, and that
        you need to undo that change before committing.  Additionally,
        this is a good opportunity to review and scrutinize changes
        before publishing them.  You can see an overview of the
        changes you've made by using the <command>svn status</command>
        command, and you can dig into the details of those changes by
        using the <command>svn diff</command> command.</para>
-->
      <para>
        <indexterm>
          <primary>ghi chú nhật ký (log message)</primary>
        </indexterm>Một khi bạn đã hoàn thành việc thay đổi, bạn cần phải chuyển giao chúng vào kho lưu trữ, nhưng trước khi bạn thực hiện việc này, tốt nhất bạn nên xem lại chính xác những gì bạn đã thay đổi. Thông qua việc kiểm tra những thay đổi của bạn trước khi chuyển giao, bạn có thể soạn một <firstterm>thông điệp nhật ký</firstterm> chính xác (một mô tả dạng người-đọc-hiểu-được của những thay đổi mà được lưu trữ cùng với những thay đổi này trên kho lưu trữ). Bạn cũng có thể sẽ phát hiện ra rằng bạn đã thay đổi tập tin một cách vô tình và bạn cần phải hoàn tác thay đổi đó trước khi chuyển giao. Ngoài ra, đây là một cơ hội tốt để xem xét, rà soát những thay đổi trước khi xuất bản. Bạn sẽ có một cái nhìn tổng quan về những thay đổi bạn đã thực hiện với lệnh <command>svn status</command> và bạn có thể thâm nhập vào chi tiết của những thay đổi đó bằng cách dùng lệnh <command>svn diff</command>.</para>

      <sidebar>
<!--         <title>Look Ma! No Network!</title> -->
        <title>Ồ! Không cần kết nối mạng!</title>

<!--
        <para>You can use the commands <command>svn status</command>,
          <command>svn diff</command>, and <command>svn
          revert</command> without any network access even if your
          repository <emphasis>is</emphasis> across the network.  This
          makes it easy to manage and review your changes-in-progress
          when you are working offline or are otherwise unable to
          contact your repository over the network.</para>
-->
          
        <para>Bạn có thể dùng lệnh <command>svn status</command>, <command>svn diff</command> và <command>svn revert</command> mà không cần phải có kết nối mạng ngay cả khi kho lưu trữ của bạn <emphasis>ở</emphasis> trên mạng lưới. Điều này giúp bạn dễ dàng quản lý và xem lại những thay đổi đang-tiến-triển của bạn khi bạn làm việc ngoại tuyến hoặc là không thể kết nối với kho lưu trữ của bạn trên mạng lưới.</para>

<!--
        <para>
          <indexterm>
            <primary>text-base</primary>
          </indexterm>
          <indexterm>
            <primary>delta</primary>
          </indexterm>Subversion does this by keeping private caches
          of pristine, unmodified versions of each versioned file
          inside its working copy administrative area (or prior to
          version 1.7, potentially multiple administrative areas).
          This allows Subversion to report&mdash;and
          revert&mdash;local modifications to those
          files <emphasis>without network access</emphasis>.  This
          cache (called the
          <firstterm>text-base</firstterm>) also allows Subversion to
          send the user's local modifications during a commit to the
          server as a compressed <firstterm>delta</firstterm> (or
          <quote>difference</quote>) against the pristine version.
          Having this cache is a tremendous benefit&mdash;even if you
          have a fast Internet connection, it's generally much faster
          to send only a file's changes rather than the whole file to
          the server.</para>
-->
          
        <para>
          <indexterm>
            <primary>text-base</primary>
          </indexterm>
          <indexterm>
            <primary>delta</primary>
          </indexterm>Subversion thực hiện điều này bằng cách lưu giữ bộ nhớ cache riêng của những phiên bản nguyên sơ, chưa thay đổi của mỗi tập tin được định phiên bản bên trong vùng quản trị của bản sao làm việc (với các phiên bản từ 1.7 trở về trước, sẽ có nhiều vùng quản trị). Điều này cho phép Subversion báo cáo&mdash;và phục hồi lại&mdash;những thay đổi cục bộ trở lại những tập tin này <emphasis>mà không cần có kết nối mạng</emphasis>. Bộ nhớ cache này (gọi là <firstterm>text-base</firstterm>) cũng cho phép Subversion gửi những thay đổi cục bộ của người sử dụng khi chuyển giao đến máy chủ dưới dạng <firstterm>delta</firstterm> (hay là <quote>phần khác biệt</quote>) so với bản nguyên sơ. Sử dụng bộ nhớ cache này là một lợi ích to lớn&mdash;ngay cả khi bạn có kết nối internet tốc độ cao, thông thường nó vẫn nhanh hơn rất nhiều khi chỉ gửi phần được thay đổi của tập tin thay vì gửi toàn bộ tập tin đến máy chủ.</para>

      </sidebar>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.examine.status">
<!--         <title>See an overview of your changes</title> -->
        <title>Xem tổng quan về những thay đổi của bạn</title>

<!--
        <indexterm>
          <primary>svn</primary>
          <secondary>subcommands</secondary>
          <tertiary>status</tertiary>
        </indexterm>
-->
        <indexterm>
          <primary>svn</primary>
          <secondary>lệnh phụ</secondary>
          <tertiary>trạng thái</tertiary>
        </indexterm>

<!--
        <para>To get an overview of your changes, use the
          <command>svn status</command> command.  You'll probably use
          <command>svn status</command> more than any other Subversion
          command.</para>
-->
        <para>Để xem tổng quan về những thay đổi của bạn, sử dụng lệnh <command>svn status</command>. Bạn chắc chắn sẽ sử dụng lệnh <command>svn status</command> nhiều hơn những lệnh Subversion khác.</para>

        <tip>
<!--
          <para>Because the <command>cvs status</command> command's
            output was so noisy, and because <command>cvs
            update</command> not only performs an update, but also
            reports the status of your local changes, most CVS users
            have grown accustomed to using <command>cvs
            update</command> to report their changes.  In Subversion,
            the update and status reporting facilities are completely
            separate.  See
            <xref linkend="svn.forcvs.status-vs-update"/> for more
            details.</para>
-->
          <para>Vì kết quả của lệnh <command>cvs status</command> rất lộn xộn và bởi vì lệnh <command>cvs update</command> không chỉ thực hiện việc cập nhật mà còn báo cáo trạng thái của những thay đổi cục bộ của bạn, hầu hết người dùng CVS đã trở nên quen thuộc với việc sử dụng lệnh <command>cvs update</command> để báo cáo về những thay đổi của họ. Trong Subversion, cập nhật và thông báo tình trạng là hoàn toàn tách biệt nhau. Xem <xref linkend="svn.forcvs.status-vs-update"/> để nắm thông tin chi tiết.</para>
        </tip>

<!--
        <para>If you run <userinput>svn status</userinput> at the top
          of your working copy with no additional arguments, it will
          detect and report all file and tree changes you've
          made.</para>
-->
        <para>Nếu bạn thực thi lệnh <userinput>svn status</userinput> ngay trên bản sao làm việc của bạn mà không có thêm tham số nào, nó sẽ phát hiện và báo cáo tất cả những thay đổi trên tập tin và trên cây mà bạn đã thực hiện.</para>

        <informalexample>
          <screen>
$ svn status
?       scratch.c
A       stuff/loot
A       stuff/loot/new.c
D       stuff/old.c
M       bar.c
$
</screen>
        </informalexample>

<!--
        <para>In its default output mode, <command>svn
          status</command> prints seven columns of characters,
          followed by several whitespace characters, followed by a
          file or directory name.  The first column tells the status
          of a file or directory and/or its contents.  Some of the
          most common codes that <command>svn status</command>
          displays are:</para>
-->
        <para>Ở chế độ đầu ra mặc định, lệnh <command>svn status</command> xuất ra nhiều cột những ký tự, được tiếp nối bởi nhiều ký tự trống, tiếp theo đó là tên tập tin hoặc thư mục. Cột đầu tiên thông báo về trạng thái của một tập tin hoặc thư mục và/hoặc nội dung của nó. Một trong những mã mà <command>svn status</command> thường hiển thị đó là:</para>

        <variablelist>

          <varlistentry>
            <term><computeroutput>?      item</computeroutput></term>
            <listitem>
<!--
              <para>The file, directory, or symbolic link
                <filename>item</filename> is not under version
                control.</para>
-->
              <para>Tập tin, thư mục hoặc liên kết ký hiệu <filename>item</filename> chưa được đưa vào kiểm soát phiên bản.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>A      item</computeroutput></term>
            <listitem>
<!--
              <para>The file, directory, or symbolic link
                <filename>item</filename> has been scheduled for
                addition into the repository.</para>
-->
              <para>Tập tin, thư mục hoặc liên kết ký hiệu <filename>item</filename> đã được lên lịch để thêm vào kho lưu trữ.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>C      item</computeroutput></term>
            <listitem>
<!--
              <para>The file <filename>item</filename> is in a state
                of conflict.  That is, changes received from the
                server during an update overlap with local changes
                that you have in your working copy (and weren't
                resolved during the update).  You must resolve this
                conflict before committing your changes to the
                repository.</para>
-->
              <para>Tập tin <filename>item</filename> đang ở trạng thái xung đột. Những thay đổi được nhận từ máy chủ trong quá trình cập nhật chồng chéo với những thay đổi cục bộ mà bạn thực hiện trong bản sao làm việc của bạn (và đã không được giải quyết khi cập nhật). Bạn cần phải giải quyết xung đột này trước khi chuyển giao những thay đổi của bạn vào kho lưu trữ.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>D      item</computeroutput></term>
            <listitem>
<!--
              <para>The file, directory, or symbolic link
                <filename>item</filename> has been scheduled for
                deletion from the repository.</para>
-->
              <para>Tập tin, thư mục hoặc liên kết ký hiệu <filename>item</filename> đã được lên lịch để xoá khỏi kho lưu trữ.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>M      item</computeroutput></term>
            <listitem>
<!--
              <para>The contents of the file <filename>item</filename>
                have been modified.</para>
-->
              <para>Nội dung của tập tin <filename>item</filename> đã được sửa đổi.</para>
            </listitem>
          </varlistentry>

        </variablelist>

<!--
        <para>If you pass a specific path to <command>svn
          status</command>, you get information about that item
          alone:</para>
-->
        <para>Nếu bạn truyền một đường dẫn cụ thể vào lệnh <command>svn status</command>, bạn sẽ lấy thông tin chỉ riêng về mục đó:</para>

        <informalexample>
          <screen>
$ svn status stuff/fish.c
D       stuff/fish.c
</screen>
        </informalexample>

<!--
        <para><command>svn status</command> also has a
          <option>- -verbose</option> (<option>-v</option>) option,
          which will show you the status of <emphasis>every</emphasis>
          item in your working copy, even if it has not been
          changed:</para>
-->
        <para>Lệnh <command>svn status</command> cũng có tuỳ chọn <option>--verbose</option> (<option>-v</option>) mà sẽ hiển thị cho bạn trạng thái của <emphasis>mọi</emphasis> mục trong bản sao làm việc của bạn ngay cả khi nó không được thay đổi:</para>

        <informalexample>
          <screen>
$ svn status -v
M               44        23    sally     README
                44        30    sally     INSTALL
M               44        20    harry     bar.c
                44        18    ira       stuff
                44        35    harry     stuff/trout.c
D               44        19    ira       stuff/fish.c
                44        21    sally     stuff/things
A                0         ?     ?        stuff/things/bloo.h
                44        36    harry     stuff/things/gloo.c
</screen>
        </informalexample>

<!--
        <para>This is the <quote>long form</quote> output of
          <command>svn status</command>.  The letters in the first
          column mean the same as before, but the second column shows
          the working revision of the item.  The third and fourth
          columns show the revision in which the item last changed,
          and who changed it.</para>
-->
        <para>Đây là đầu ra <quote>dạng đầy đủ</quote> của lệnh <command>svn status</command>. Ký tự đầu tiên trong cột đầu tiên có cùng ý nghĩa như đã đề cập, tuy nhiên cột thứ hai lại hiển thị phiên bản đang làm việc của mục. Cột thứ ba và thứ tự hiển thị phiên bản mà mục được thay đổi lần cuối và ai là người đã thay đổi.</para>

<!--
        <para>None of the prior invocations to <command>svn
          status</command> contact the repository&mdash;they merely
          report what is known about the working copy items based on
          the records stored in the working copy administrative area
          and on the timestamps and contents of modified files.  But
          sometimes it is useful to see which of the items in your
          working copy have been modified in the repository since the
          last time you updated your working copy.  For
          this, <command>svn status</command> offers the
          <option>- -show-updates</option> (<option>-u</option>)
          option, which contacts the repository and adds information
          about items that are out of date:</para>
-->
        <para>Không có lời gọi lệnh <command>svn status</command> nào trong số các lời gọi bên trên có kết nối với kho lưu trữ&mdash;những lệnh này chỉ đơn thuần báo cáo những gì được biết về các mục bản sao làm việc dựa trên các hồ sơ lưu trữ trong khu vực quản trị của bản sao làm việc và dựa vào nhãn thời gian và nội dung của những tập tin được sửa đổi. Nhưng đôi khi nó sẽ hữu dụng khi biết mục nào trong bản sao làm việc của bạn được sửa đổi trên kho lưu trữ kể từ lần cuối bạn cập nhật kho lưu trữ của bạn. Cho yêu cầu này, lệnh <command>svn status</command> cung cấp tuỳ chọn <option>--show-updates</option> (<option>-u</option>) mà sẽ kết nối với kho lưu trữ và hiển thị thông tin về các mục quá hạn:</para>

        <informalexample>
          <screen>
$ svn status -u -v
M      *        44        23    sally     README
M               44        20    harry     bar.c
       *        44        35    harry     stuff/trout.c
D               44        19    ira       stuff/fish.c
A                0         ?     ?        stuff/things/bloo.h
Status against revision:   46
</screen>
        </informalexample>

<!--
        <para>Notice in the previous example the two asterisks: if you
          were to run <userinput>svn update</userinput> at this point,
          you would receive changes to <filename>README</filename>
          and <filename>trout.c</filename>.  This tells you some very
          useful information&mdash;because one of those items is also
          one that you have locally modified (the
          file <filename>README</filename>), you'll need to update and
          get the server's changes for that file before you commit, or
          the repository will reject your commit for being out of
          date.  We discuss this in more detail later.</para>
-->
        <para>Lưu ý về hai dấu sao trong ví dụ trên: nếu bạn thực thi lệnh <userinput>svn update</userinput> ở thời điểm đó, bạn sẽ nhận được những thay đổi trên <filename>README</filename> và <filename>trout.c</filename>. Điều này cho bạn biết một vài thông tin rất hữu ích&mdash;bởi vì một trong các mục đó cũng là mục mà bạn đã thay đổi trên bản sao cục bộ của bạn (tập tin <filename>README</filename>), bạn cần phải cập nhật và lấy những thay đổi của tập tin này trên máy chủ trước khi bạn chuyển giao để tránh tình huống kho lưu trữ từ chối chuyển giao của bạn với lý do quá hạn. Chúng ta sẽ bàn về vấn đề này chi tiết sau.</para>

<!--
        <para><command>svn status</command> can display much more
          information about the files and directories in your working
          copy than we've shown here&mdash;for an exhaustive
          description of <command>svn status</command> and its output,
          run <userinput>svn help status</userinput> or see
          <xref linkend="svn.ref.svn.c.status"/> in
          <xref linkend="svn.ref.svn"/>.</para>
-->
        <para>Lệnh <command>svn status</command> có thể hiển thị nhiều thông tin hơn nữa về những tập tin và thư mục trong bản sao làm việc của bạn so với những thông tin được trình bày ở đây&mdash;để xem thông tin mô tả đầy đủ của lệnh <command>svn status</command> và kết quả của nó, thực thi lệnh <userinput>svn help status</userinput> hoặc tham khảo <xref linkend="svn.ref.svn.c.status"/> trong <xref linkend="svn.ref.svn"/>.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.examine.diff">
<!--         <title>Examine the details of your local modifications</title> -->
        <title>Kiểm tra chi tiết những thay đổi trên bản sao cục bộ của bạn</title>

<!--
        <para>
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>diff</tertiary>
          </indexterm>

            <primary>differences</primary>
            <secondary>unified diff</secondary>
          </indexterm>Another way to examine your changes is with the
          <command>svn diff</command> command, which displays
          differences in file content.  When you run <userinput>svn
          diff</userinput> at the top of your working copy with no
          arguments, Subversion will print the changes you've made to
          human-readable files in your working copy.  It displays
          those changes in <firstterm>unified diff</firstterm> format,
          a format which describes changes as <quote>hunks</quote>
          (or <quote>snippets</quote>) of a file's content where each
          line of text is prefixed with a single-character code: a
          space, which means the line was unchanged; a minus sign
          (<literal>-</literal>), which means the line was removed
          from the file; or a plus sign (<literal>+</literal>), which
          means the line was added to the file.  In the context
          of <command>svn diff</command>, those minus-sign- and
          plus-sign-prefixed lines show how the lines looked before
          and after your modifications, respectively.</para>
-->
          
        <para>
          <indexterm>
            <primary>svn</primary>
            <secondary>lệnh phụ</secondary>
            <tertiary>diff</tertiary>
          </indexterm>
          <indexterm>
            <primary>những khác biệt</primary>
            <secondary>unified diff</secondary>
          </indexterm>Một cách khác để kiểm tra những thay đổi của bạn là dùng lệnh <command>svn diff</command> mà sẽ hiển thị những khác biệt trong nội dung tập tin. Khi bạn thực thi lệnh <userinput>svn diff</userinput> không có tham số nào trên bản sao làm việc của bạn, Subversion sẽ hiển thị những thay đổi bạn thực hiện trên những tập tin người-đọc-hiểu-được trên bản sao làm việc của bạn. Nó hiển thị những thay đổi này theo định dạng <firstterm>unified diff</firstterm>, là một định dạng mô tả những thay đổi như những <quote>phần nhỏ</quote> (hoặc <quote>đoạn trích</quote>) của nội dung tập tin mà mỗi dòng văn bản được đánh tiếp đầu ngữ với một mã ký-tự-đơn: một khoảng trống, có nghĩa là dòng không thay đổi; dấu trừ (<literal>-</literal>), có nghĩa là dòng đã bị xoá khỏi tập tin; dấu cộng (<literal>+</literal>), có nghĩa là dòng đã được thêm vào tập tin. Trong ngữ cảnh của lệnh <command>svn diff</command>, những tiếp đầu ngữ dấu-cộng và dấu-trừ cho thấy những dòng như thế nào trước và sau khi bạn thực hiện thay đổi của bạn.</para>

     <!-- ### TODO: to find the right words in Vietnamese for these items later: "unified diff", "hunks" and "snippets" ### -->

<!--         <para>Here's an example:</para> -->
        <para>Đây là một ví dụ:</para>

        <informalexample>
          <screen>
$ svn diff
Index: bar.c
===================================================================
--- bar.c	(revision 3)
+++ bar.c	(working copy)
@@ -1,7 +1,12 @@
+#include &lt;sys/types.h&gt;
+#include &lt;sys/stat.h&gt;
+#include &lt;unistd.h&gt;
+
+#include &lt;stdio.h&gt;

 int main(void) {
-  printf("Sixty-four slices of American Cheese...\n");
+  printf("Sixty-five slices of American Cheese...\n");
 return 0;
 }

Index: README
===================================================================
--- README	(revision 3)
+++ README	(working copy)
@@ -193,3 +193,4 @@
+Note to self:  pick up laundry.

Index: stuff/fish.c
===================================================================
--- stuff/fish.c	(revision 1)
+++ stuff/fish.c	(working copy)
-Welcome to the file known as 'fish'.
-Information on fish will be here soon.

Index: stuff/things/bloo.h
===================================================================
--- stuff/things/bloo.h	(revision 8)
+++ stuff/things/bloo.h	(working copy)
+Here is a new file to describe
+things about bloo.
</screen>
        </informalexample>

<!--
        <para>
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>patch</tertiary>
          </indexterm>
          <indexterm>
            <primary>patches</primary>
          </indexterm>
          <indexterm>
            <primary>patch file</primary>
            <see>patches</see>
          </indexterm>The <command>svn diff</command> command produces this
          output by comparing your working files against its pristine
          text-base.  Files scheduled for addition are displayed as
          files in which every line was added; files scheduled for
          deletion are displayed as if every line was removed from
          those files.  The output from <command>svn diff</command> is
          somewhat compatible with the <command>patch</command>
          program&mdash;more so with the <command>svn patch</command>
          subcommand introduced in Subversion 1.7.  Patch processing
          commands such as these read and apply <firstterm>patch
          files</firstterm> (or <quote>patches</quote>), which are
          files that describe differences made to one or more files.
          Because of this, you can share the changes you've made in
          your working copy with someone else without first committing
          those changes by creating a patch file from the redirected
          output of <command>svn diff</command>:</para>
-->
        <para>
          <indexterm>
            <primary>svn</primary>
            <secondary>lệnh phụ</secondary>
            <tertiary>patch</tertiary>
          </indexterm>
          <indexterm>
            <primary>bản vá</primary>
          </indexterm>
          <indexterm>
            <primary>tập tin vá</primary>
            <see>bản vá</see>
          </indexterm>Lệnh <command>svn diff</command> kết xuất kết quả trên bằng cách so sánh tập tin làm việc của bạn với văn bản nguyên sơ của nó. Những tập tin được lên lịch để được thêm vào được trình bày theo kiểu tất cả các dòng được thêm vào; những tập tin được lên lịch để xoá được trình bày theo kiểu tất cả các dòng bị xoá khỏi tập tin. Kết quả của lệnh <command>svn diff</command> tương đối giống lệnh <command>patch</command>&mdash;Lệnh <command>svn patch</command> được giới thiệu trong Subversion 1.7 thực hiện được nhiều hơn. Lệnh thực thi bản vá như những lệnh này đọc và ghép <firstterm>tập tin vá</firstterm> (hoặc <quote>bản vá</quote>), là những tập tin mà mô tả sự khác biệt được thực hiện trên một hoặc nhiều tập tin. Vì vậy, bạn có thể chia sẽ những thay đổi mà bạn thực hiện trên bản sao làm việc của bạn với những người khác bằng cách tạo tập tin vá với kết quả của lệnh <command>svn diff</command> mà không cần phải chuyển giao những thay đổi này:</para>

        <informalexample>
          <screen>
$ svn diff &gt; patchfile
$
</screen>
        </informalexample>

<!--
        <para>Subversion uses its internal diff engine, which produces
          unified diff format, by default.  If you want diff output in
          a different format, specify an external diff program using
          <option>- -diff-cmd</option> and pass any additional flags
          that it needs via the <option>- -extensions</option>
          (<option>-x</option>) option.  For example, you might want
          Subversion to defer its difference calculation and display
          to the GNU <command>diff</command> program, asking that
          program to print local modifications made to the
          file <filename>foo.c</filename> in context diff format
          (another flavor of difference format) while ignoring changes
          made only to the case of the letters used in the file's
          contents:</para>
-->
        <para>Subversion sử dụng cơ chế so sánh bên trong của nó mà mặc nhiên tạo ra định dạng unified diff. Nếu bạn muốn kết quả của so sánh theo một định dạng khác, hãy chỉ định một chương trình so sánh bên ngoài với <option>--diff-cmd</option> và truyền thêm những tham số phụ cần thiết thông qua tuỳ chọn <option>--extensions</option> (<option>-x</option>). Ví dụ: bạn có thể muốn Subversion hoán lại việc tính toán và hiển thị khác biệt cho chương trình so sánh của GNU, yêu cầu chương trình này in các sửa đổi cục bộ được thực hiện trên tập tin <filename>foo.c</filename> theo định dạng so sánh (một định dạng khác của định dạng khác biệt) trong khi bỏ qua các thay đổi chữ hoa-chữ thường trên các chữ cái được sử dụng trong tập tin:</para>

        <informalexample>
          <screen>
$ svn diff --diff-cmd /usr/bin/diff -x "-i" foo.c
&hellip;
$
</screen>
        </informalexample>

      </sect3>

    </sect2>


    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.revert">
<!--       <title>Fix Your Mistakes</title> -->
      <title>Sửa lỗi của bạn</title>

<!--
      <para>Suppose while viewing the output of <command>svn
        diff</command> you determine that all the changes you made to
        a particular file are mistakes.  Maybe you shouldn't have
        changed the file at all, or perhaps it would be easier to make
        different changes starting from scratch.  You could edit the
        file again and unmake all those changes.  You could try to
        find a copy of how the file looked before you changed it, and
        then copy its contents atop your modified version.  You
        could attempt to apply those changes to the file again in
        reverse using <userinput>svn patch - -reverse-diff</userinput>
        or using your operating system's <userinput>patch -R</userinput>.  
        And there are probably other approaches you could take.</para>
-->
      <para>Giả sử rằng khi xem kết quả của lệnh <command>svn diff</command> bạn nhận thấy rằng tất cả những thay đổi mà bạn thực hiện trên một tập tin là sai. Có lẽ bạn hoàn toàn không nên thay đổi gì trên tập tin, hoặc có lẽ nó sẽ dễ dàng hơn nếu thực hiện những điều chỉnh khác bắt đầu lại từ đầu. Bạn có thể hiệu chỉnh lại tập tin và huỷ tất cả những thay đổi đó. Bạn có thể tìm một bản sao của tập tin trước khi bạn thực hiện thay đổi và thay thế vào nội dung bạn đã điều chỉnh. Bạn cũng có thể áp đảo ngược lại những thay đổi này vào tập tin bằng cách dùng <userinput>svn patch --reverse-diff</userinput> hoặc bạn có thể dùng lệnh <userinput>patch -R</userinput> của hệ điều hành của bạn. Và còn có nhiều cách tiếp cận khác mà bạn có thể thử.</para>

      <indexterm>
        <primary>svn</primary>
<!--         <secondary>subcommands</secondary> -->
        <secondary>lệnh phụ</secondary>
        <tertiary>revert</tertiary>
      </indexterm>

<!--
      <para>Fortunately in Subversion, undoing your work and starting
        over from scratch doesn't require such acrobatics.  Just use
        the <command>svn revert</command> command:</para>
-->
      <para>Thật may mắn là với Subversion việc hoàn tác và bắt đầu hiệu chỉnh lại từ đầu không cần phải thực hiện những việc rối rắm như trên. Chỉ cần sử dụng lệnh <command>svn revert</command>:</para>

      <informalexample>
        <screen>
$ svn status README
M       README
$ svn revert README
Reverted 'README'
$ svn status README
$
</screen>
      </informalexample>

<!--
      <para>In this example, Subversion has reverted the file to its
        premodified state by overwriting it with the pristine version
        of the file cached in the text-base area.  But note that
        <command>svn revert</command> can undo
        <emphasis>any</emphasis> scheduled operation&mdash;for
        example, you might decide that you don't want to add a new
        file after all:</para>
-->
      <para>Trong ví dụ này, Subversion đảo ngược lại tập tin trở về trạng thái trước khi nó bị thay đổi bằng cách ghi đè với phiên bản nguyên sơ của tập tin. Tuy nhiên lưu ý rằng <command>svn revert</command> có thể hoàn tác <emphasis>bất kỳ</emphasis> những thao tác nào đã được lên lịch thực hiện&mdash;ví dụ, bạn có thể quyết định rằng cuối cùng thì bạn cũng không muốn thêm tập tin mới:</para>

      <informalexample>
        <screen>
$ svn status new-file.txt
?       new-file.txt
$ svn add new-file.txt
A         new-file.txt
$ svn revert new-file.txt
Reverted 'new-file.txt'
$ svn status new-file.txt
?       new-file.txt
$
</screen>
      </informalexample>

<!--
      <para>Or perhaps you mistakenly removed a file from version
        control:</para>
-->
      <para>Hoặc có lẽ bạn xoá nhầm một tập tin:</para>

      <informalexample>
        <screen>
$ svn status README
$ svn delete README
D         README
$ svn revert README
Reverted 'README'
$ svn status README
$
</screen>
      </informalexample>

<!--
      <para>The <command>svn revert</command> command offers salvation
        for imperfect people.  It can save you huge amounts of time
        and energy that would otherwise be spent manually unmaking
        changes or, worse, disposing of your working copy and checking
        out a fresh one just to have a clean slate to work with
        again.</para>
-->
      <para>Lệnh <command>svn revert</command> là cứu cánh cho những người lơ đểnh. Nó có thể tiết kiệm rất nhiều thời gian và năng lượng mà có thể được dùng để huỷ bỏ những thay đổi của bạn một cách thủ công, hoặc là tệ hơn, huỷ hoàn toàn bản sao làm việc của bạn và kiểm xuất lại một bản mới hoàn toàn chưa có thay đổi nào để bắt đầu làm việc lại từ đầu.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.resolve">
<!--       <title>Resolve Any Conflicts</title> -->
      <title>Giải quyết xung đột</title>

<!--
      <para>
        <indexterm>
          <primary>conflicts</primary>
          <secondary>resolution</secondary>
        </indexterm>We've already seen how <userinput>svn status
        -u</userinput> can predict conflicts, but dealing with those
        conflicts is still something that remains to be done.
        Conflicts can occur any time you attempt to merge or integrate
        (in a very general sense) changes from the repository into
        your working copy.  By now you know that <command>svn
        update</command> creates exactly that sort of
        scenario&mdash;that command's very purpose is to bring your
        working copy up to date with the repository by merging all the
        changes made since your last update into your working copy.
        So how does Subversion report these conflicts to you, and how
        do you deal with them?</para>
-->
      <para>
        <indexterm>
          <primary>xung đột</primary>
          <secondary>giải pháp</secondary>
        </indexterm>Chúng ta đã biết lệnh <userinput>svn status -u</userinput> có thể dự đoán xung đột như thế nào, tuy nhiên giải quyết những xung đột này là một việc khác cần phải được thực hiện. Xung đột có thể xuất hiện bất kỳ khi nào bạn thực hiện việc hợp nhất hoặc tích hợp những thay đổi từ kho lưu trữ vào trong bản sao làm việc của bạn. Bạn đã biết lệnh <command>svn update</command> tạo ra chính xác tình huống này&mdash;mục đích chính của lệnh này là làm cho bản sao làm việc của bạn được cập nhật với kho lưu trữ bằng cách hợp nhất tất cả những thay đổi vào bản sao làm việc của bạn kể từ lần cập nhật cuối cùng. Vậy Subversion thông báo cho bạn những xung đột đó như thế nào, và bạn sẽ đối phó với nó như thế nào?</para>

<!--
      <para>Suppose you run <userinput>svn update</userinput> and you
        see this sort of interesting output:</para>
-->
      <para>Giả sử bạn thực thi lệnh <userinput>svn update</userinput> và bạn có được kết quả thú vị bên dưới:</para>

      <informalexample>
        <screen>
$ svn update
Updating '.':
U    INSTALL
G    README
Conflict discovered in 'bar.c'.
Select: (p) postpone, (df) show diff, (e) edit file, (m) merge,
        (mc) my side of conflict, (tc) their side of conflict,
        (s) show all options:
        </screen>
      </informalexample>

      <para>Những mã <computeroutput>U</computeroutput> (viết tắt của <quote>Updated</quote>) và <computeroutput>G</computeroutput> (viết tắt của <quote>merGed</quote>) là những mục không cần bận tâm; những tập tin này tiếp nhận những thay đổi từ kho lưu trữ. Tập tin được đánh dấu <computeroutput>U</computeroutput> không có thay đổi cục bộ nào được thực hiện nhưng được cập nhật với những thay đổi từ kho lưu trữ. Tập tin được đánh dấu <computeroutput>G</computeroutput> có chứa những thay đổi cục bộ nhưng những thay đổi từ kho lưu trữ không bị chồng lấp với những thay đổi cục bộ này.</para>

<!--
      <para>It's the next few lines which are interesting.  First,
        Subversion reports to you that in its attempt to merge
        outstanding server changes into the
        file <filename>bar.c</filename>, it has detected that some of
        those changes clash with local modifications you've made to
        that file in your working copy but have not yet committed.
        Perhaps someone has changed the same line of text you also
        changed.  Whatever the reason, Subversion instantly flags this
        file as being in a state of conflict.  It then asks you what
        you want to do about the problem, allowing you to
        interactively choose an action to take toward resolving the
        conflict.  The most commonly used options are displayed, but
        you can see all of the options by
        typing <replaceable>s</replaceable>:</para>
-->
      <para>Điều thú vị xuất hiện ở những dòng tiếp theo. Trước hết, Subversion thông báo cho bạn biết rằng trong quá trình thực hiện việc hợp nhất những thay đổi nổi bật từ máy chủ vào tập tin <filename>bar.c</filename>, nó phát hiện ra rằng một vài thay đổi xung đột với những thay đổi cục bộ chưa được chuyển giao mà bạn đã thực hiện trên bản sao làm việc. Có lẽ ai đó đã thay đổi trên cùng một dòng mà bạn cũng thay đổi. Bất kể lý do nào, Subversion ngay lập tức đánh dấu tập tin này đang ở trạng thái xung đột. Tiếp theo nó sẽ hỏi bạn muốn làm gì với vấn đề mới được phát hiện, cho phép bạn chọn hành động tiếp theo để giải quyết xung đột. Những tuỳ chọn được sử dụng nhiều nhất sẽ được hiển thị nhưng bạn có thể xem tất cả các tuỳ chọn bằng cách nhập thêm <replaceable>s</replaceable>:</para>

      <informalexample>
        <screen>
&hellip;
Select: (p) postpone, (df) show diff, (e) edit file, (m) merge,
        (mc) my side of conflict, (tc) their side of conflict,
        (s) show all options: s

  (e)  - change merged file in an editor  [edit]
  (df) - show all changes made to merged file
  (r)  - accept merged version of file

  (dc) - show all conflicts (ignoring merged version)
  (mc) - accept my version for all conflicts (same)  [mine-conflict]
  (tc) - accept their version for all conflicts (same)  [theirs-conflict]

  (mf) - accept my version of entire file (even non-conflicts)  [mine-full]
  (tf) - accept their version of entire file (same)  [theirs-full]

  (m)  - use internal merge tool to resolve conflict
  (l)  - launch external tool to resolve conflict  [launch]
  (p)  - mark the conflict to be resolved later  [postpone]
  (q)  - postpone all remaining conflicts
  (s)  - show this list (also 'h', '?')
Words in square brackets are the corresponding --accept option arguments.

Select: (p) postpone, (df) show diff, (e) edit file, (m) merge,
        (mc) my side of conflict, (tc) their side of conflict,
        (s) show all options:
</screen>
      </informalexample>

<!--
      <para>Let's briefly review each of these options before we go
        into detail on what each option means.</para>
-->
      <para>Hãy xem lướt qua từng tuỳ chọn này trước khi chúng ta đi vào chi tiết mỗi tuỳ chọn có ý nghĩa như thế nào.</para>

      <variablelist>
        <varlistentry>
          <term><computeroutput>(e)  edit  [edit]</computeroutput></term>
          <listitem>
<!--
            <para>Open the file in conflict with your favorite editor,
              as set in the environment variable
              <literal>EDITOR</literal>.</para>
-->
            <para>Mở tập tin xung đột với trình soạn thảo yêu thích của bạn. Trình soạn thảo này được thiết lập trong biến môi trường <literal>EDITOR</literal>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>(df)  diff-full</computeroutput></term>
          <listitem>
<!--
            <para>Display the differences between the base revision
              and the conflicted file itself in unified diff format.</para>
-->
            <para>Hiển thị sự khác biệt giữa phiên bản base và tập tin xung đột theo dịnh dạng unified diff.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>(r)  resolved</computeroutput></term>
          <listitem>
<!--
            <para>After editing a file, tell
              <command>svn</command> that you've resolved the
              conflicts in the file and that it should accept the
              current contents&mdash;basically that you've
              <quote>resolved</quote> the conflict.</para>
-->
            <para>Sau khi cập nhật một tập tin, thông báo với <command>svn</command> rằng bạn đã giải quyết xung đột trong tập tin và nó cần chấp nội dung hiện tại&mdash;cơ bản là bạn đã <quote>giải quyết</quote> xong xung đột.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>(dc)  display-conflict</computeroutput></term>
          <listitem>
<!--
            <para>Display all conflicting regions of the file,
              ignoring changes which were successfully merged.</para>
-->
            <para>Hiển thị tất cả các vùng chứa nội dung xung đột của tập tin, bỏ qua những thay đổi mà đã được hợp nhất thành công.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>(mc)  mine-conflict  [mine-conflict]</computeroutput></term>
          <listitem>
<!--
            <para>Discard any newly received changes from the server
              which conflict with your local changes to the file under
              review.  However, accept and merge all non-conflicting
              changes received from the server for that file.</para>
-->
            <para>Huỷ bất kỳ những thay đổi nào mới nhận mà xung đột với những thay đổi cục bộ của bạn trên tập tin đang xem xét. Tuy nhiên, chấp nhật và hợp nhất tất cả những thay đổi không gặp xung đột từ máy chủ vào trong tập tin này.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>(tc)  theirs-conflict  [theirs-conflict]</computeroutput></term>
          <listitem>
<!--
            <para>Discard any local changes which conflict with
              incoming changes from the server for the file under
              review.  However, preserve all non-conflicting local
              changes to that file.</para>
-->
            <para>Huỷ bất kỳ thay đổi cục bộ nào mà xung đột với những thay đổi từ máy chủ trên tập tin đang xem xét. Tuy nhiên, giữ lại tất cả những thay đổi mà không có xung đột trên tập tin này.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>(mf)  mine-full  [mine-full]</computeroutput></term>
          <listitem>
<!--
            <para>Discard all newly received changes from the server
              for the file under review, but preserve all your local
              changes for that file.</para>
-->
            <para>Huỷ tất cả những thay đổi mới nhận từ máy chủ trên tập tin đang xem xét, nhưng giữ lại tất cả những thay đổi cục bộ của bạn trên tập tin này.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>(tf)  theirs-full  [theirs-full]</computeroutput></term>
          <listitem>
<!--
            <para>Discard all your local changes to the file under
              review and use only the newly received changes from the
              server for that file.</para>
-->
            <para>Huỷ tất cả những thay đổi cục bộ của bạn trên tập tin đang xem xét và chỉ sử dụng những thay đổi vừa nhận được từ máy chủ cho tập tin này.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>(m)  merge</computeroutput></term>
          <listitem>
<!--
            <para>Launch an internal file merge tool to perform the
              conflict resolution.  The option is available starting
              with Subversion 1.8.</para>
-->
            <para>Khởi động công cụ hợp nhất tập tin bên trong Subversion để thực hiện việc giải quyết xung đột. Tuỳ chọn này bắt đầu được cung cấp với Subversion 1.8.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>(l)  launch</computeroutput></term>
          <listitem>
<!--
            <para>Launch an external program to perform the conflict
              resolution.  This requires a bit of preparation
              beforehand.</para>
-->
            <para>Khởi động chương trình bên ngoài để thực hiện việc giải quyết xung đột. Điều này đòi hỏi một chút chuẩn bị trước.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>(p)  postpone  [postpone]</computeroutput></term>
          <listitem>
<!--
            <para>Leave the file in a conflicted state for you to
              resolve after your update is complete.</para>
-->
            <para>Giữ nguyên tập tin trong trạng thái xung đột để bạn có thể giải quyết sau khi quá trình cập nhật hoàn tất.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>(s)  show all</computeroutput></term>
          <listitem>
<!--
            <para>Show the list of all possible commands you can use
              in interactive conflict resolution.</para>
-->
            <para>Hiển thị danh sách tất cả các lệnh mà bạn có thể dùng để tương tác trong việc giải quyết xung đột.</para>
          </listitem>
        </varlistentry>

      </variablelist>

<!--
      <para>We'll cover these commands in more detail now, grouping
        them together by related functionality.</para>
-->
      <para>Chúng ta sẽ tìm hiểu những lệnh này chi tiết ngay bây giờ, nhóm chúng lại với nhau theo chức năng.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.diff">

<!--         <title>Viewing conflict differences interactively</title> -->
        <title>Xem những khác biệt trên xung đột một cách tương tác</title>

<!--
        <para>
          <indexterm>
            <primary>conflicts</primary>
            <secondary>reviewing</secondary>
          </indexterm>Before deciding how to attack a conflict
          interactively, odds are that you'd like to see exactly what
          is in conflict.  Two of the commands available at the
          interactive conflict resolution prompt can assist you here.
          The first is the <quote>diff-full</quote> command
          (<userinput>df</userinput>), which displays all the local
          modifications to the file in question plus any conflict
          regions:</para>
-->
        <para>
          <indexterm>
            <primary>xung đột</primary>
            <secondary>xem lại</secondary>
          </indexterm>Trước khi quyết định sẽ giải quyết xung đột như thế nào, thường là bạn sẽ muốn biết chính xác nguyên nhân của mỗi xung đột. Hai lệnh có sẵn ở dòng lệnh giải quyết xung đột tương tác có thể hỗ trợ bạn. Lệnh đầu tiên là <quote>diff-full</quote> (<userinput>df</userinput>) hiển thị tất cả những thay đổi cục bộ trên tập tin cộng với những vùng xung đột:</para>

        <informalexample>
          <screen>
&hellip;
Select: (p) postpone, (df) show diff, (e) edit file, (m) merge,
        (mc) my side of conflict, (tc) their side of conflict,
        (s) show all options: df
--- .svn/text-base/sandwich.txt.svn-base      Tue Dec 11 21:33:57 2007
+++ .svn/tmp/tempfile.32.tmp     Tue Dec 11 21:34:33 2007
@@ -1 +1,5 @@
-Just buy a sandwich.
+&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
+Go pick up a cheesesteak.
+=======
+Bring me a taco!
+&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r32
&hellip;
</screen>
        </informalexample>

<!--
        <para>The first line of the diff content shows the previous
          contents of the working copy (the <literal>BASE</literal>
          revision), the next content line is your change, and the
          last content line is the change that was just received from
          the server (<emphasis>usually</emphasis> the
          <literal>HEAD</literal> revision).</para>
-->
        <para>Dòng đầu tiên của phần nội dung khác biệt hiển thị nội dung trước đó của thư mục làm việc (phiên bản <literal>BASE</literal>), dòng tiếp theo là thay đổi của bạn và dòng cuối cùng là thay đổi mới được tiếp nhận từ máy chủ (<emphasis>thông thường</emphasis> là phiên bản <literal>HEAD</literal>).</para>

<!--
        <para>The second command is similar to the first, but
          the <quote>display-conflict</quote>
          (<userinput>dc</userinput>) command shows only the conflict
          regions, not all the changes made to the file.
          Additionally, this command uses a slightly different display
          format for the conflict regions which allows you to more
          easily compare the file's contents in those regions as they
          would appear in each of three states: original and unedited;
          with your local changes applied and the server's conflicting
          changes ignored; and with only the server's incoming changes
          applied and your local, conflicting changes reverted.</para>
-->
        <para>Lệnh thứ hai tương tự như lệnh đầu tiên, lệnh <quote>display-conflict</quote> (<userinput>dc</userinput>) chỉ hiển thị vùng xung đột chứ không phải toàn bộ những thay đổi được thực hiện trên tập tin. Thêm vào đó, lệnh này hiển thị vùng xung đột theo một định dạng hơi khác giúp bạn dễ dàng so sánh nội dung tập tin trên những vùng này bởi vì nó sẽ được hiển thị theo một trong ba trạng thái: gốc và không có chỉnh sửa; với những thay đổi cục bộ của bạn được áp vào và những xung đột từ máy chủ được bỏ qua; chỉ với những thay đổi từ máy chủ được áp vào và những thay đổi cục bộ, những thay đổi gây xung đột được đảo ngược.</para>

<!--
        <para>After reviewing the information provided by these
          commands, you're ready to move on to the next action.</para>
-->
        <para>Sau khi xem lại thông tin được cung cấp bởi những lệnh này, bạn đã sẵn sàng thực hiện hành động tiếp theo.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.resolve">

<!--         <title>Resolving conflict differences interactively</title> -->
        <title>Giải quyết xung đột một cách tương tác</title>

<!--
        <para>
          <indexterm>
            <primary>conflicts</primary>
            <secondary>resolution</secondary>
            <tertiary>interactive</tertiary>
          </indexterm>The main way to resolve conflicts interactively
          is to use an internal file merge tool.  The tool asks you
          what to do with each conflicting change and allows you to
          selectively merge and edit changes.  However, there are
          several other different ways to resolve conflicts
          interactively&mdash;two of them allow you to selectively
          merge and edit changes using external editors, the rest of
          which allow you to simply pick a version of the file and
          move along.  Internal merge tool combines all of the
          available ways to resolve conflicts.</para>
-->
        <para>
          <indexterm>
            <primary>xung đột</primary>
            <secondary>giải quyết</secondary>
            <tertiary>tương tác</tertiary>
          </indexterm>Cách chính để giải quyết xung đột một cách tương tác đó là sử dụng công cụ hợp nhất tập tin có sẵn bên trong. Công cụ này sẽ hỏi bạn thực hiện hành động gì với mỗi xung đột và cho phép bạn hợp nhất và chỉnh sửa những thay đổi một cách chọn lọc. Tuy nhiên, có nhiều cách khác để giải quyết xung đột một cách tương tác&mdash;hai trong số đó cho phép bạn hợp nhất và hiệu chỉnh những thay đổi sử dụng trình soạn thảo bên ngoài, phần còn lại đơn giản cho phép bạn lấy một phiên bản của tập tin và xử lý. Công cụ hợp nhất có sẵn bên trong kết hợp tất cả những cách có sẵn để giải quyết xung đột.</para>

<!--
        <para>You've already reviewed the conflicting changes, so it's
          now time to resolve the conflicts.  The first command that
          should help you is the <quote>merge</quote> command
          (<userinput>m</userinput>) which is available starting with
          Subversion 1.8.  The command displays the conflicting
          areas and allows you to choose from a number of options to
          resolve the conflicts area-by-area:
         </para>
-->
        <para>Bạn đã xem lại những thay đổi gây xung đột, giờ là thời điểm để giải quyết xung đột. Lệnh đầu tiên có thể hỗ trợ bạn là lệnh <quote>merge</quote> (<userinput>m</userinput>) mà có sẵn bắt đầu từ Subversion 1.8. Lệnh này hiển thị những vùng xung đột và cho phép bạn chọn nhiều tuỳ chọn để giải quyết xung đột từng vùng một.</para>

        <informalexample>
          <screen>
Select: (p) postpone, (df) show diff, (e) edit file, (m) merge,
        (mc) my side of conflict, (tc) their side of conflict,
        (s) show all options: m
Merging 'Makefile'.
Conflicting section found during merge:
(1) their version (at line 24)                  |(2) your version (at line 24)
------------------------------------------------+------------------------------------------------
top_builddir = /bar                             |top_builddir = /foo
------------------------------------------------+------------------------------------------------
Select: (1) use their version, (2) use your version,
        (12) their version first, then yours,
        (21) your version first, then theirs,
        (e1) edit their version and use the result,
        (e2) edit your version and use the result,
        (eb) edit both versions and use the result,
        (p) postpone this conflicting section leaving conflict markers,
        (a) abort file merge and return to main menu:
</screen>
        </informalexample>

<!--
        <para>As you can see, when you use the internal file merge tool,
          you can cycle through individual conflicting areas in the
          file and select various resolution options or postpone
          conflict resolution for selected conflicts.</para>
-->
        <para>Như bạn thấy, khi bạn sử dụng công cụ hợp nhất tập tin có sẵn, bạn có thể xoay vòng qua từng vùng xung đột riêng lẻ trên tập tin và chọn giải pháp hoặc là hoãn giải quyết xung đột cho một xung đột cụ thể nào đó.</para>


<!--
        <para>However, if you wish to use an external editor to choose some
          combination of your local
          changes, you can use the <quote>edit</quote> command
          (<userinput>e</userinput>) to manually edit the file with
          conflict markers in a text editor (configured per the
          instructions in <xref linkend="svn.advanced.externaleditors"
          />).  After you've edited the file, if you're satisfied with
          the changes you've made, you can tell Subversion that the
          edited file is no longer in conflict by using
          the <quote>resolved</quote> command
          (<literal>r</literal>).</para>
-->
        <para>Tuy nhiên, nếu bạn muốn sử dụng trình soạn thảo bên ngoài, bạn có thể sử dụng lệnh <quote>edit</quote> (<userinput>e</userinput>) để hiệu chỉnh tập tin một cách thủ công với một trình soạn thảo văn bản (được cấu hình theo hướng dẫn trong <xref linkend="svn.advanced.externaleditors"/>). Sau khi bạn hiệu chỉnh tập tin, nếu bạn hài lòng với những hiệu chỉnh của bạn, bạn có thể thông báo cho Subversion biết rằng tập tin được hiệu chỉnh đã không còn chứa xung đột bằng cách sử dụng lệnh <quote>resolved</quote> (<literal>r</literal>).</para>


<!--
        <para>Regardless of what your local Unix snob will likely tell
          you, editing the file by hand in your favorite text editor
          is a somewhat low-tech way of remedying conflicts (see
          <xref linkend="svn.tour.cycle.resolve.byhand" /> for a
          walkthrough).  For this reason, Subversion provides
          the <quote>launch</quote> resolution command
          (<userinput>l</userinput>) to fire up a fancy graphical
          merge tool instead (see
          <xref linkend="svn.advanced.externaldifftools.merge"
          />).</para>
-->
        <para>Hiệu chỉnh một tập tin thủ công với trình soạn thảo yêu thích của bạn là một cách hơi công-nghệ-thấp trong việc khác phục xung đột (xem hướng dẫn ở <xref linkend="svn.tour.cycle.resolve.byhand" />). Vì lý do đó Subversion cung cấp lệnh <quote>launch</quote> (<userinput>l</userinput>) để kích hoạt một công cụ hợp nhất đồ hoạ thú vị (xem <xref linkend="svn.advanced.externaldifftools.merge"/>).</para>

<!--
        <para>There is also a pair of compromise options
          available.  The <quote>mine-conflict</quote>
          (<userinput>mc</userinput>)
          and <quote>theirs-conflict</quote>
          (<userinput>tc</userinput>) commands instruct Subversion to
          select your local changes or the server's incoming changes,
          respectively, as the <quote>winner</quote> for all conflicts
          in the file.  But, unlike the <quote>mine-full</quote>
          and <quote>theirs-full</quote> commands, these commands
          preserve both your local changes and changes received from
          the server in regions of the file where no conflict was
          detected.</para>
-->
        <para>Ngoài ra còn có một vài lựa chọn có sẵn. Lệnh <quote>mine-conflict</quote> (<userinput>mc</userinput>) và <quote>theirs-conflict</quote> (<userinput>tc</userinput>) hướng dẫn Subversion chọn những thay đổi cục bộ hoặc những thay đổi từ máy chủ một cách riêng biệt như là <quote>người chiến thắng</quote> của tất cả những xung đột trên tập tin. Nhưng không giống lệnh <quote>mine-full</quote> và <quote>theirs-full</quote>, những lệnh này giữ lại cả những thay đổi của bạn lẫn những thay đổi ở máy chủ trên những vùng không có xung đột được phát hiện trên tập tin.</para>
          

<!--
        <para>Finally, if you decide that you don't need to merge any changes,
          but just want to accept one version of the file or the
          other, you can either choose your changes (a.k.a.
          <quote>mine</quote>) by using the <quote>mine-full</quote>
          command (<userinput>mf</userinput>) or choose theirs by using the
          <quote>theirs-full</quote> command
          (<userinput>tf</userinput>).</para>
-->
        <para>Cuối cùng, nếu bạn quyết định rằng bạn không cần hợp nhất những thay đổi mà chỉ muốn chấp nhận một trong những phiên bản của tập tin, bạn có thể hoặc là chọn những thay đổi của bạn (còn được biết là <quote>mine</quote>) bằng cách dùng lệnh <quote>mine-full</quote> (<userinput>mf</userinput>) hoặc là chọn những thay đổi từ máy chủ bằng cách sử dụng lệnh <quote>theirs-full</quote> (<userinput>tf</userinput>).</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.pending">

<!--         <title>Postponing conflict resolution</title> -->
        <title>Hoãn giải quyết xung đột</title>

<!--
        <para>
          <indexterm>
            <primary>conflicts</primary>
            <secondary>resolution</secondary>
            <tertiary>postponing</tertiary>
          </indexterm>This may sound like an appropriate section for avoiding
          marital disagreements, but it's actually still about
          Subversion, so read on.  If you're doing an update and
          encounter a conflict that you're not prepared to review or
          resolve, you can type <userinput>p</userinput> to postpone
          resolving a conflict on a file-by-file basis when you run
          <userinput>svn update</userinput>.  If you know in advance
          that you don't want to resolve any conflicts interactively,
          you can pass the <option>- -non-interactive</option> option
          to <command>svn update</command>, and any file in conflict
          will be marked with a <computeroutput>C</computeroutput>
          automatically.</para>
-->
        <para>
          <indexterm>
            <primary>xung đột</primary>
            <secondary>giải quyết</secondary>
            <tertiary>hoãn</tertiary>
          </indexterm>Dường như đây là một phần phù hợp cho việc tránh những bất đồng, nhưng thực tế thì đây vẫn đang là về Subversion, nên hãy tiếp tục. Nếu bạn đang thực hiện việc cập nhật và bạn gặp một xung đột mà bạn chưa chuẩn bị để xem hoặc giải quyết, bạn có thể nhập <userinput>p</userinput> để hoãn việc giải quyết xung đột trên từng tập tin khi bạn thực thi lệnh <userinput>svn update</userinput>. Nếu bạn không muốn giải quyết những xung đột một cách tương tác, bạn có thể truyền thêm tham số <option>--non-interactive</option> vào lệnh <command>svn update</command> và bất kỳ tập tin nào có chứa xung đột sẽ được đánh dấu <computeroutput>C</computeroutput> một cách tự động.</para>

<!--
        <para>Beginning with Subversion 1.8, an internal file merge
          tool allows you to postpone conflict resolution for certain
          conflicts, but resolve other confilcts.  Therefore, you can
          postpone conflict resolution area-by-area, not just on
          file-to-file basis.</para>
-->
        <para>Bắt đầu từ Subversion 	1.8, công cụ hợp nhất tập tin có sẵn bên trong cho phép bạn tạm hoãn giải quyết một xung đột cụ thể và tập trung vào giải quyết những xung đột khác. Vì vậy, bạn có thể hoãn giải quyết xung đột theo-từng-vùng chứ không phải chỉ theo-từng-tập-tin.</para>

<!--
        <para>The <computeroutput>C</computeroutput>
          (for <quote>Conflicted</quote>) means that the changes from the
          server overlapped with your own, and now you have to
          manually choose between them after the update has completed.
          When you postpone a conflict resolution,
          <command>svn</command> typically does three things to assist
          you in noticing and resolving that conflict:</para>
-->
        <para>Mục <computeroutput>C</computeroutput> (đại diện cho <quote>Conflicted</quote>) có nghĩa là thay đổi từ phía máy chủ trùng lấp với thay đổi của riêng bạn và lúc này bạn cần phải lựa chọn giữa những thay đổi này một cách thủ công sau khi việc cập nhật hoàn thành. Khi bạn tạm hoãn giải quyết một xung đột, lệnh <command>svn</command> thông thường thực hiện ba thao tác trong việc hỗ trợ bạn lưu ý và giải quyết xung đột đó:</para>

        <itemizedlist>

<!--
          <indexterm>
            <primary>conflicts</primary>
            <secondary>conflict markers</secondary>
          </indexterm>
-->
          <indexterm>
            <primary>xung đột</primary>
            <secondary>dấu hiệu xung đột</secondary>
          </indexterm>

          <listitem>
<!--
            <para>Subversion prints a <computeroutput>C</computeroutput>
              during the update and remembers that the file is in a
              state of conflict.</para>
-->
            <para>Subversion xuất kết quả <computeroutput>C</computeroutput> trong quá trình cập nhật và ghi nhớ rằng tập tin đang trong tình trạng xung đột.</para>
          </listitem>

          <listitem>
<!--
            <para>If Subversion considers the file to be mergeable, it
              places <firstterm>conflict
              markers</firstterm>&mdash;special strings of text that
              delimit the <quote>sides</quote> of the
              conflict&mdash;into the file to visibly demonstrate the
              overlapping areas.  (Subversion uses the
              <literal>svn:mime-type</literal> property to decide whether a
              file is capable of contextual, line-based merging.  See
              <xref linkend="svn.advanced.props.special.mime-type"/>
              to learn more.)</para>
-->
            <para>Subversion cân nhắc nếu tập tin có thể hợp nhất được, nó sẽ đặt một <firstterm>dấu hiệu xung đột</firstterm>&mdash;là một chuỗi văn bản đặc biệt đặt giới hạn cho <quote>các khía cạnh</quote> của xung đột&mdash;vào trong tập tin để biểu diễn một cách trực quan vùng trùng lấp. (Subversion sử dụng thuộc tính <literal>svn:mime-type</literal> để quyết định liệu một tập tin có thể được hợp nhất theo ngữ cảnh, hợp nhất dựa-trên-dòng).</para>
          </listitem>

          <listitem>
<!--
            <para>For every conflicted file, Subversion places three
              extra unversioned files in your working copy:</para>
-->
            <para>Với mỗi tập tin xung đột, Subversion đặt thêm ba tập tin không đánh phiên bản vào trong bản sao làm việc của bạn:</para>

            <variablelist>

              <varlistentry>
                <term><filename>filename.mine</filename></term>
                <listitem>
<!--
                  <para>This is the file as it existed in your working
                    copy before you began the update process.  It
                    contains any local modifications you had made to
                    the file up to that point.  (If Subversion
                    considers the file to be unmergeable,
                    the <filename>.mine</filename> file isn't created,
                    since it would be identical to the working
                    file.)</para>
-->
                  <para>Đây là tập tin tồn tại trong bản sao làm việc của bạn trước khi bạn bắt đầu tiến trình cập nhật. Nó bao gồm bất kỳ một thay đổi cục bộ nào mà bạn thực hiện trên tập tin cho tới thời điểm đó. (Subversion xem xét nếu tập tin này là không thể hợp nhất được thì tập tin <filename>.mine</filename> sẽ không được tạo ra)</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><filename>filename.r<replaceable>OLDREV</replaceable>
                      </filename></term>
                <listitem>
<!--
                  <para>This is the file as it existed in the
                    <literal>BASE</literal> revision&mdash;that is,
                    the unmodified revision of the file in your
                    working copy <emphasis>before</emphasis> you began
                    the update process&mdash;where
                    <replaceable>OLDREV</replaceable> is that base
                    revision number.</para>
-->
                  <para>Tập tin này tồn tại trong phiên bản <literal>BASE</literal>&mdash;là phiên bản chưa chỉnh sửa của tập tin trong bản sao làm việc của bạn&mdash;trong đó <replaceable>OLDREV</replaceable> là số phiên bản base.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><filename>filename.r<replaceable>NEWREV</replaceable>
                      </filename></term>
                <listitem>
<!--
                  <para>This is the file that your Subversion client
                    just received from the server via the update of
                    your working copy, where
                    <replaceable>NEWREV</replaceable> corresponds to
                    the revision number to which you were updating
                    (<literal>HEAD</literal>, unless otherwise
                    requested).</para>
-->
                  <para>Đây là tập tin mà ứng dụng khách Subversion mới nhận được từ máy chủ thông qua quá trình cập nhật bản sao làm việc của bạn, với <replaceable>NEWREV</replaceable> tương đồng với số phiên bản mà bạn đang cập nhật (là <literal>HEAD</literal> nếu không có yêu cầu phiên bản nào khác).</para>
                </listitem>
              </varlistentry>

            </variablelist>
          </listitem>

        </itemizedlist>

<!--
        <para>For example, Sally makes changes to the file
          <filename>sandwich.txt</filename>, but does not yet commit
          those changes.  Meanwhile, Harry commits changes to that
          same file.  Sally updates her working copy before committing
          and she gets a conflict, which she postpones:</para>
-->
        <para>Ví dụ, Sally thực hiện thay đổi tập tin <filename>sandwich.txt</filename> nhưng cô ấy chưa chuyển giao những thay đổi. Trong khi đó, Harry chuyển giao thay đổi của anh ấy trên cùng tập tin này. Sally sau đó cập nhật bản sao làm việc của cô ấy trước khi chuyển giao và cô ấy gặp tình huống xung đột, cô ấy tạm hoãn xung đột này:</para>

        <informalexample>
          <screen>
$ svn update
Updating '.':
Conflict discovered in 'sandwich.txt'.
Select: (p) postpone, (df) show diff, (e) edit file, (m) merge,
        (mc) my side of conflict, (tc) their side of conflict,
        (s) show all options: p
C    sandwich.txt
Updated to revision 2.
Summary of conflicts:
  Text conflicts: 1
$ ls -1
sandwich.txt
sandwich.txt.mine
sandwich.txt.r1
sandwich.txt.r2
</screen>
        </informalexample>

<!--
        <para>At this point, Subversion will <emphasis>not</emphasis>
          allow Sally to commit the file
          <filename>sandwich.txt</filename> until the three temporary
          files are removed:</para>
-->
        <para>Tại thời điểm này, Subversion sẽ <emphasis>không</emphasis> cho phép Sally chuyển giao tập tin <filename>sandwich.txt</filename> cho đến khi ba tập tin tạm được loại bỏ:</para>

        <informalexample>
          <screen>
$ svn commit -m "Add a few more things"
svn: E155015: Commit failed (details follow):
svn: E155015: Aborting commit: '/home/sally/svn-work/sandwich.txt' remains in conflict
</screen>
        </informalexample>

<!--
        <para>If you've postponed a conflict, you need to resolve the
          conflict before Subversion will allow you to commit your
          changes.  You'll do this with the <command>svn
          resolve</command> command.  This command accepts
          the <option>- -accept</option> option, which allows you
          specify your desired approach for resolving the conflict.
          Prior to Subversion 1.8, the <command>svn resolve</command>
          <emphasis>required</emphasis> the use of this option.
          Subversion now allows you to run the <command>svn
          resolve</command> command without that option.  When you do
          so, Subversion cranks up its interactive conflict resolution
          mechanism, which you can read about (if you haven't done so
          already) in the previous section,
          <xref linkend="svn.tour.cycle.resolve.resolve" />.  We'll
          take the opportunity in this section, though, to discuss
          the use of the <option>- -accept</option> option for
          conflict resolution.</para>
-->
        <para>Nếu bạn hoãn một xung đột, bạn cần phải giải quyết xung đột đó trước khi Subversion cho phép bạn chuyển giao những thay đổi. Bạn thực hiện việc này với lệnh <command>svn resolve</command>. Lệnh này chấp nhận tham số <option>--accept</option> mà cho phép bạn chỉ định cách tiếp cận của bạn để giải quyết xung đột. Trước phiên bản Subversion 1.8, lệnh <command>svn resolve</command> <emphasis>yêu cầu</emphasis> phải có tuỳ chọn này. Subversion từ phiên bản 1.8 cho phép bạn thực thi lệnh <command>svn resolve</command> mà không cần phải có tham số này. Khi bạn thực thi lệnh này như vậy, Subversion khuấy động cơ chế giải quyết xung đột tương tác của nó, bạn có thể đọc về cơ chế này ở trong phần kế trước, <xref linkend="svn.tour.cycle.resolve.resolve" />. Chúng tôi sẽ tận dụng cơ hội này để thảo luận về tuỳ chọn <option>--accept</option> trong việc giải quyết xung đột.</para>

<!--
        <para>The <option>- -accept</option> option to the <command>svn
          resolve</command> command instructs Subversion to use one of
          its pre-packaged approaches to conflict resolution.  If
          you want Subversion to resolve the conflict using the
          version of the file that you last checked out before making
          your edits, use <option>- -accept=base</option>.  If you'd
          prefer instead to keep the version that contains only your
          edits, use <option>- -accept=mine-full</option>.  You can also
          select the version that your most recent update pulled from
          the server (discarding your edits entirely)&mdash;that's
          done using <option>- -accept=theirs-full</option>.  There
          are other <quote>canned</quote> resolution types, too.  See
          <xref linkend="svn.ref.svn.sw.accept" /> in
          <xref linkend="svn.ref.svn" /> for details.</para>
-->
        <para>Tuỳ chọn <option>--accept</option> của lệnh <command>svn resolve</command> chỉ thị Subversion sử dụng một trong những cách tiếp cận đã được đóng gói sẵn. Nếu bạn muốn Subversion giải quyết xung đột bằng cách sử dụng phiên bản của tập tin mà bạn kiểm xuất lần cuối trước khi bạn hiệu chỉnh, sử dụng <option>--accept=base</option>. Nếu bạn thích giữ lại phiên bản mà chỉ chứa những thay đổi của bạn, sử dụng <option>--accept=mine-full</option>. Bạn cũng có thể chọn phiên bản mà những cập nhật mới nhất của bạn được lấy về từ máy chủ (huỷ bỏ toàn bộ những chỉnh sửa của bạn)&mdash;sử dụng <option>--accept=theirs-full</option>. Ngoài ra cũng còn có những loại giải pháp <quote>được đóng gói sẵn</quote> khác. Xem chi tiết tại <xref linkend="svn.ref.svn.sw.accept" /> trên <xref linkend="svn.ref.svn" />.</para>

<!--
        <para>You aren't limited strictly to all-or-nothing options.
          If you want to pick and choose from your changes and the
          changes that your update fetched from the server, you can
          manually repair the working file, fixing up the conflicted
          text <quote>by hand</quote> (by examining and editing the
          conflict markers within the file), then tell Subversion to
          resolve the conflict by keeping the working file in its
          current state by running <command>svn resolve</command> with
          the <option>- -accept=working</option> option.</para>
-->
        <para>Bạn không bị giới hạn một cách cứng nhắc vào những tuỳ chọn tất-cả-hoặc-không-có-gì. Nếu bạn muốn chọn lọc từ những thay đổi của bạn và những thay đổi mà bạn lấy về từ máy chủ, bạn có thể chỉnh sửa tập tin đang làm việc một cách thủ công, sửa chữa phần văn bản xung đột <quote>bằng tay</quote> (bằng cách xem xét và hiệu chỉnh dấu hiệu xung đột bên trong tập tin) và thông báo cho Subversion giải quyết xung đột bằng cách giữ nguyên hiện trạng của tập tin đang làm việc bằng lệnh <command>svn resolve</command> với tuỳ chọn <option>--accept=working</option>.</para>

<!--
        <para><command>svn resolve</command> removes the three
          temporary files and accepts the version of the file that you
          specified.  After the command completes
          successfully&mdash;and assuming you didn't interactively
          choose to postpone resolution, of course&mdash;Subversion no
          longer considers the file to be in a state of
          conflict:</para>
-->
        <para>Lệnh <command>svn resolve</command> loại bỏ ba tập tin tạm và chấp nhận phiên bản của tập tin mà bạn chỉ định. Sau khi lệnh được thực hiện thành công&mdash;và giả sử rằng bạn không chọn để hoãn giải quyết một cách tương tác&mdash;Subversion không còn xem tập tin là ở trong tình trạng xung đột nữa:</para>

        <informalexample>
          <screen>
$ svn resolve --accept working sandwich.txt
Resolved conflicted state of 'sandwich.txt'
</screen>
        </informalexample>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.byhand">
<!--         <title>Manual conflict resolution</title> -->
        <title>Giải quyết xung đột theo cách thủ công</title>

<!--
        <para>
          <indexterm>
            <primary>conflicts</primary>
            <secondary>resolution</secondary>
            <tertiary>manual</tertiary>
          </indexterm>Manually resolving conflicts can be quite intimidating the
          first time you attempt it, but with a little practice, it
          can become as easy as falling off a bike.</para>
-->
        <para>
          <indexterm>
            <primary>xung đột</primary>
            <secondary>giải pháp</secondary>
            <tertiary>thủ công</tertiary>
          </indexterm>Giải quyết xung đột một cách thủ công có thể khá khó khăn khi bạn thử nó lần đầu tiên, tuy nhiên chỉ cần luyện tập không nhiều, nó trở nên dễ như là dừng xe đạp.</para>

<!--
        <para>Here's an example.  Due to a miscommunication, you and
          Sally, your collaborator, both edit the file
          <filename>sandwich.txt</filename> at the same time.  Sally
          commits her changes, and when you go to update your working
          copy, you get a conflict and you're going to have to edit
          <filename>sandwich.txt</filename> to resolve the conflict.
          First, let's take a look at the file:</para>
-->
        <para>Đây là một ví dụ. Vì lý do hiểu nhầm, bạn và Sally, cả hai cùng hiệu chỉnh tập tin <filename>sandwich.txt</filename> tại cùng một thời điểm. Sally chuyển giao những thay đổi của cô ấy và khi bạn cập nhật bản sao làm việc, bạn gặp phải xung đột và bạn cần phải hiệu chỉnh tập tin <filename>sandwich.txt</filename> để giải quyết xung đột. Trước hết, hãy xem qua tập tin:</para>

        <informalexample>
          <screen>
$ cat sandwich.txt
Top piece of bread
Mayonnaise
Lettuce
Tomato
Provolone
&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Salami
Mortadella
Prosciutto
=======
Sauerkraut
Grilled Chicken
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
Creole Mustard
Bottom piece of bread
</screen>
        </informalexample>

<!--
        <para>The strings of less-than signs, equals signs, and
          greater-than signs are conflict markers and are not part of
          the actual data in conflict.  You generally want to ensure
          that those are removed from the file before your next
          commit.  The text between the first two sets of markers is
          composed of the changes you made in the conflicting
          area:</para>
-->
        <para>Những chuỗi ký tự dấu nhỏ hơn, dấu bằng và dấu lớn hơn là những dấu hiệu xung đột và chúng không phải là một phần của dữ liệu thực đang trong xung đột. Bạn cần phải chắc chắn rằng những chuỗi này bị loại khỏi tập tin trước khi bạn chuyển giao. Phần văn bản ở giữa hai vùng dấu hiệu xung đột đầu tiên chứa những thay đổi mà bạn thực hiện:</para>

        <informalexample>
          <screen>
&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Salami
Mortadella
Prosciutto
=======
</screen>
        </informalexample>

<!--
        <para>The text between the second and third sets of conflict
          markers is the text from Sally's commit:</para>
-->
        <para>Phần văn bản ở giữa vùng đánh dấu xung đột thứ hai và vùng thứ ba là phần văn bản mà Sally chuyển giao:</para>


        <informalexample>
          <screen>
=======
Sauerkraut
Grilled Chicken
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
</screen>
        </informalexample>

<!--
        <para>Usually you won't want to just delete the conflict
          markers and Sally's changes&mdash;she's going to be awfully
          surprised when the sandwich arrives and it's not what she
          wanted.  This is where you pick up the phone or walk across
          the office and explain to Sally that you can't get
          sauerkraut from an Italian deli.<footnote><para>And if you
          ask them for it, they may very well ride you out of town on
          a rail.</para></footnote>  Once you've agreed on the changes
          you will commit, edit your file and remove the conflict
          markers:</para>
-->
        <para>Thông thường bạn sẽ không muốn xoá hoàn toàn những dấu hiệu xung đột và cả những thay đổi của Sally&mdash;cô ấy sẽ cực kỳ ngạc nhiên khi miếng sandwich đến và nó không phải là những gì cô ấy muốn. Đây là lúc mà bạn nhấc điện thoại hoặc đi bộ qua văn phòng và giải thích với Sally. Khi bạn đã hài lòng với những thay đổi mà bạn sẽ chuyển giao, hiệu chỉnh tập tin của bạn và xoá bỏ những dấu hiệu xung đột:</para>

        <informalexample>
          <screen>
Top piece of bread
Mayonnaise
Lettuce
Tomato
Provolone
Salami
Mortadella
Prosciutto
Creole Mustard
Bottom piece of bread
</screen>
        </informalexample>

<!--
        <para>Now use <command>svn resolve</command>, and you're
          ready to commit your changes:</para>
-->
        <para>Bây giờ sử dụng lệnh <command>svn resolve</command> và bạn đã sẵn sàng để chuyển giao những thay đổi của bạn:</para>

        <informalexample>
          <screen>
$ svn resolve --accept working sandwich.txt
Resolved conflicted state of 'sandwich.txt'
$ svn commit -m "Go ahead and use my sandwich, discarding Sally's edits."
</screen>
        </informalexample>

<!--
        <para>Naturally, you want to be careful that when using
          <command>svn resolve</command> you don't tell Subversion
          that you've resolved a conflict when you truly haven't.
          Once the temporary files are removed, Subversion will let
          you commit the file even if it still contains conflict
          markers.</para>
-->
        <para>Đương nhiên, bạn cần phải cẩn thận không sử dụng lệnh <command>svn resolve</command> để thông báo cho Subversion biết rằng bạn đã giải quyết một xung đột trong khi bạn thực tế chưa giải quyết xung đột đó. Ngay khi những tập tin tạm được xoá bỏ, Subversion sẽ cho phép bạn chuyển giao tập tin ngay cả khi nó vẫn còn chứa những dấu hiệu xung đột.</para>

<!--
        <para>If you ever get confused while editing the conflicted
          file, you can always consult the three files that Subversion
          creates for you in your working copy&mdash;including your
          file as it was before you updated.  You can even use a
          third-party interactive merging tool to examine those three
          files.</para>
-->
        <para>Trong khi hiệu chỉnh tập tin xung đột, bạn có thể tham khảo ba tập tin mà Subversion tạo cho bạn trong bản sao làm việc&mdash;bao gồm cả tập tin của bạn ở trạng thái trước khi bạn cập nhật. Bạn cũng có thể sử dụng công cụ hợp nhất tương tác của bên-thứ-ba để xem xét những tập tin này.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.theirsfull">
<!--
        <title>Discarding your changes in favor of a newly fetched
          revision</title>
-->
        <title>Huỷ bỏ những thay đổi của bạn và sử dụng phiên bản mới được lấy về</title>
  
<!--
        <para>
          <indexterm>
            <primary>conflicts</primary>
            <secondary>resolution</secondary>
            <tertiary>discarding local changes</tertiary>
          </indexterm>If you get a conflict and decide that you want
          to throw out your changes, you can run <userinput>svn
          resolve - -accept theirs-full
          <replaceable>CONFLICTED-PATH</replaceable></userinput> and
          Subversion will discard your edits and remove the temporary
          files:</para>
-->
        <para>
          <indexterm>
            <primary>xung đột</primary>
            <secondary>giải pháp</secondary>
            <tertiary>huỷ bỏ những thay đổi cục bộ</tertiary>
          </indexterm>Nếu bạn gặp một xung đột và bạn quyết định rằng bạn muốn loại bỏ những thay đổi của bạn, bạn có thể thực thi lệnh <userinput>svn resolve --accept theirs-full <replaceable>CONFLICTED-PATH</replaceable></userinput>, Subversion sẽ loại bỏ những thay đổi của bạn và xoá bỏ những tập tin tạm:</para>

        <informalexample>
         <screen>
$ svn update
Updating '.':
Conflict discovered in 'sandwich.txt'.
Select: (p) postpone, (df) show diff, (e) edit file, (m) merge,
        (mc) my side of conflict, (tc) their side of conflict,
        (s) show all options: p
C    sandwich.txt
Updated to revision 2.
Summary of conflicts:
  Text conflicts: 1
$ ls sandwich.*
sandwich.txt  sandwich.txt.mine  sandwich.txt.r2  sandwich.txt.r1
$ svn resolve --accept theirs-full sandwich.txt
Resolved conflicted state of 'sandwich.txt'
$
</screen>
       </informalexample>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.revert">
<!--         <title>Punting: using svn revert</title> -->
        <title>Đánh cược: sử dụng svn revert</title>

<!--
        <para>
          <indexterm>
            <primary>conflicts</primary>
            <secondary>resolution</secondary>
            <tertiary>discarding local changes</tertiary>
          </indexterm>If you decide that you want to throw out your changes
          and start your edits again (whether this occurs after a
          conflict or anytime), just revert your changes:</para>
-->
        <para>
          <indexterm>
            <primary>xung đột</primary>
            <secondary>giải pháp</secondary>
            <tertiary>huỷ bỏ những thay đổi cục bộ</tertiary>
          </indexterm>Nếu bạn quyết định rằng bạn không muốn giữ lại những thay đổi của bạn và bắt đầu lại việc chỉnh sửa (ngay sau khi một xung đột xuất hiện hoặc bất kỳ lúc nào), chỉ cần đảo ngược lại những thay đổi của bạn:</para>

        <informalexample>
          <screen>
$ svn revert sandwich.txt
Reverted 'sandwich.txt'
$ ls sandwich.*
sandwich.txt
$
</screen>
        </informalexample>

<!--
        <para>Note that when you revert a conflicted file, you don't
          have to use <command>svn resolve</command>.</para>
-->
        <para>Lưu ý rằng khi bạn đảo ngược một tập tin xung đột, bạn không cần phải sử dụng lệnh <command>svn resolve</command>.</para>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.commit">
<!--       <title>Commit Your Changes</title> -->
      <title>Chuyển giao những thay đổi của bạn</title>

<!--
      <para>Finally!  Your edits are finished, you've merged all
        changes from the server, and you're ready to commit your
        changes to the repository.</para>
-->
      <para>Cuối cùng! Việc hiệu chỉnh của bạn đã hoàn tất, bạn đã hợp nhất tất cả những thay đổi từ máy chủ và bạn đã sẵn sàng để chuyển giao những thay đổi của bạn vào kho lưu trữ.</para>

<!--
      <para>The <command>svn commit</command> command sends all of
        your changes to the repository.  When you commit a change, you
        need to supply a log message describing your change.  Your log
        message will be attached to the new revision you create.  If
        your log message is brief, you may wish to supply it on the
        command line using the <option>- -message</option>
        (<option>-m</option>) option:</para>
-->
      <para>Lệnh <command>svn commit</command> gửi tất cả những thay đổi của bạn vào kho lưu trữ. Khi bạn chuyển giao một thay đổi, bạn cần cung cấp một ghi chú nhật ký mô tả những thay đổi của bạn. Ghi chú nhật ký của bạn sẽ được đính kèm vào trong phiên bản mà bạn mới tạo. Nếu ghi chú của bạn ngắn gọn, bạn có thể cung cấp nó trên dòng lệnh dùng tuỳ chọn <option>--message</option> (<option>-m</option>):</para>

      <informalexample>
        <screen>
$ svn commit -m "Corrected number of cheese slices."
Sending        sandwich.txt
Transmitting file data .
Committed revision 3.
</screen>
      </informalexample>

<!--
      <para>However, if you've been composing your log message in some
        other text file as you work, you may want to tell Subversion
        to get the message from that file by passing its filename as
        the value of the <option>- -file</option> (<option>-F</option>)
        option:</para>
-->
      <para>Tuy nhiên, nếu bạn soạn nhật ký ghi chú trong một tập tin văn bản khác, bạn có thể thông báo cho Subversion lấy nội dung ghi chú trong tập tin đó bằng cách truyền tên tập tin vào tham số <option>--file</option> (<option>-F</option>):</para>

      <informalexample>
        <screen>
$ svn commit -F logmsg
Sending        sandwich.txt
Transmitting file data .
Committed revision 4.
</screen>
      </informalexample>

<!--
      <para>If you fail to specify either the
        <option>- -message</option> (<option>-m</option>)
        or <option>- -file</option> (<option>-F</option>) option,
        Subversion will automatically launch your favorite editor (see
        the information on <literal>editor-cmd</literal> in
        <xref linkend="svn.advanced.confarea.opts.config"/>) for
        composing a log message.</para>
-->
      <para>Nếu bạn không chỉ rõ tuỳ chọn <option>--message</option> (<option>-m</option>) hoặc <option>--file</option> (<option>-F</option>), Subversion sẽ tự động khởi động trình soạn thảo văn bản yêu thích của bạn (xem thông tin <literal>editor-cmd</literal> trong <xref linkend="svn.advanced.confarea.opts.config"/>) để soạn ghi chú nhật ký.</para>

      <tip>
<!--
        <para>If you're in your editor writing a commit message and
          decide that you want to cancel your commit, you can just
          quit your editor without saving changes.  If you've already
          saved your commit message, simply delete all the text, save
          again, and then abort:</para>
-->
        <para>Nếu bạn đang soạn thảo một ghi chú chuyển giao với trình soạn thảo của bạn và bạn quyết định huỷ việc chuyển giao, bạn chỉ việc thoát khỏi trình soạn thảo mà không lưu lại những thay đổi. Nếu bạn đã lưu ghi chú chuyển giao, chỉ việc đơn giản xoá tất cả phần văn bản, lưu lại và huỷ:</para>

        <informalexample>
          <screen>
$ svn commit
Waiting for Emacs...Done

Log message unchanged or not specified
(a)bort, (c)ontinue, (e)dit
a
$
</screen>
        </informalexample>
      </tip>

<!--
      <para>The repository doesn't know or care whether your changes make
        any sense as a whole; it checks only to make sure nobody
        else has changed any of the same files that you did when you
        weren't looking.  If somebody <emphasis>has</emphasis> done
        that, the entire commit will fail with a message informing you
        that one or more of your files are out of date:</para>
-->
      <para>Kho lưu trữ không biết hoặc không quan tâm liệu những thay đổi của bạn có ý nghĩa như thế nào; nó chỉ kiểm tra để chắc chắn rằng không có ai khác thay đổi trên cùng một tập tin. Nếu có ai đó <emphasis>thực hiện thay đổi</emphasis>, toàn bộ việc chuyển giao sẽ thất bại với một thông báo báo cho bạn biết rằng một hoặc nhiều tập tin của bạn quá hạn:</para>

      <informalexample>
        <screen>
$ svn commit -m "Add another rule"
Sending        rules.txt
Transmitting file data .
svn: E155011: Commit failed (details follow):
svn: E155011: File '/home/sally/svn-work/sandwich.txt' is out of date
&hellip;
</screen>
      </informalexample>

<!--
      <para>(The exact wording of this error message depends on the
        network protocol and server you're using, but the idea is the
        same in all cases.)</para>
-->
      <para>(Câu từ chính xác của thông báo lỗi này tuỳ thuộc vào giao thức mạng và máy chủ mà bạn đang sử dụng, tuy nhiên ý tưởng chung là như nhau trong tất cả các trường hợp.)</para>

<!--
      <para>At this point, you need to run <userinput>svn
        update</userinput>, deal with any merges or conflicts that
        result, and attempt your commit again.</para>
-->
      <para>Tại điểm này, bạn cần thực thi lệnh <userinput>svn update</userinput>, giải quyết bất kỳ sự hợp nhất hay xung đột nào và thực hiện lại việc chuyển giao.</para>

<!--
      <para>That covers the basic work cycle for using Subversion.
        Subversion offers many other features that you can use
        to manage your repository and working copy, but most of your
        day-to-day use of Subversion will involve only the commands
        that we've discussed so far in this chapter.  We will,
        however, cover a few more commands that you'll use fairly
        often.</para>
-->
      <para>Trên đây bao gồm chu trình làm việc cơ bản để sử dụng Subversion. Subversion cung cấp nhiều tính năng khác mà bạn có thể sử dụng để quản lý kho lưu trữ và bản sao làm việc của bạn, tuy nhiên đa số những ứng dụng thường-nhật của Subversion sẽ chỉ bao gồm những lệnh mà cho đến nay chúng tôi đã thảo luận. Tuy nhiên, chúng tôi sẽ bàn thêm một số lệnh mà bạn sẽ sử dụng khá thường xuyên.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.history">
<!--     <title>Examining History</title> -->
    <title>Xem Xét Lịch Sử</title>    

<!--
    <para>Your Subversion repository is like a time machine.  It keeps
      a record of every change ever committed and allows you to
      explore this history by examining previous versions of files and
      directories as well as the metadata that accompanies them.  With
      a single Subversion command, you can check out the repository
      (or restore an existing working copy) exactly as it was at any
      date or revision number in the past.  However, sometimes you
      just want to <emphasis>peer into</emphasis> the past instead of
      <emphasis>going into</emphasis> it.</para>
-->
    <para>Kho lưu trữ Subversion của bạn giống như một cỗ máy thời gian. Nó lưu giữ một bản ghi của mỗi thay đổi đã được chuyển giao và cho phép bạn khám phá lịch sử này bằng cách xem xét phiên bản trước đó của những tập tin và thư mục cũng như các siêu dữ liệu đi kèm với chúng. Với một lệnh Subversion đơn giản, bạn có thể kiểm xuất kho lưu trữ (hoặc là phục hồi một bản sao làm việc đã tồn tại) trở về tình trạng y như nó ở một ngày tháng cụ thể hoặc một số phiên bản cụ thể trong quá khứ. Tuy nhiên, đôi khi bạn chỉ muốn <emphasis>nhìn vào</emphasis> quá khứ thay vì <emphasis>đi vào</emphasis> trong nó.</para>

<!--
    <para>Several commands can provide you with historical data from
      the repository:</para>
-->
    <para>Rất nhiều lệnh có thể cung cấp cho bạn dữ liệu lịch sử từ kho lưu trữ:</para>

      <variablelist>

        <varlistentry>
          <term><command>svn diff</command></term>
          <listitem>
<!--             <para>Shows line-level details of a particular change</para> -->
            <para>Hiển thị chi tiết theo từng dòng của một thay đổi cụ thể</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn log</command></term>
          <listitem>
<!--
            <para>Shows you broad information: log messages with date
              and author information attached to revisions and which
              paths changed in each revision</para>
-->
            <para>Hiển thị nhiều thông tin: ghi chú nhật ký với ngày tháng, thông tin tác giả đi kèm phiên bản và những đường dẫn nào được thay đổi trong mỗi phiên bản</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn cat</command></term>
          <listitem>
<!--
            <para>Retrieves a file as it existed in a particular
              revision number and displays it on your screen</para>
-->
            <para>Lấy về một tập tin từ một phiên bản cụ thể và hiển thị nó trên màn hình của bạn</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn annotate</command></term>
          <listitem>
<!--
            <para>Retrieves a human-readable file as it existed in a
              particular revision number, displaying its contents in a
              tabular form with last-changed information attributed to
              each line of the file.</para>
-->
            <para>Lấy về một tập tin người-đọc-hiểu-được từ một phiên bản cụ thể và hiển thị nội dung của nó theo dạng bảng với thông tin được thay đổi cuối cùng đại diện cho mỗi dòng của tập tin.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn list</command></term>
          <listitem>
<!--
            <para>Displays the files in a directory for any given
              revision</para>
-->
            <para>Hiển thị những tập tin trong một thư mục của một phiên bản cụ thể</para>
          </listitem>
        </varlistentry>

      </variablelist>


    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.diff">
<!--       <title>Examining the Details of Historical Changes</title> -->
      <title>Xem chi tiết những thay đổi trong lịch sử</title>

<!--
      <para>We've already seen <command>svn diff</command>
        before&mdash;it displays file differences in unified diff
        format; we used it to show the local modifications made to
        our working copy before committing to the repository.</para>
-->
      <para>Chúng ta đã xem qua lệnh <command>svn diff</command>&mdash;nó hiển thị những khác biệt trên tập tin theo định dạng unified diff; chúng ta sử dụng nó để hiển thị những thay đổi cục bộ được thực hiện trên bản sao làm việc trước khi chuyển giao đến kho lưu trữ.</para>

<!--
      <para>In fact, it turns out that there are
        <emphasis>three</emphasis> distinct uses of <command>svn
        diff</command>:</para>
-->
      <para>Trên thực tế, nó chỉ ra rằng có <emphasis>ba</emphasis> dạng sử dụng khác biệt của lệnh <command>svn diff</command>:</para>

      <itemizedlist>

        <listitem>
<!--           <para>Examining local changes</para> -->
          <para>Xem xét những thay đổi cục bộ</para>
        </listitem>

        <listitem>
<!--           <para>Comparing your working copy to the repository</para> -->
          <para>So sánh bản sao làm việc của bạn với kho lưu trữ</para>
        </listitem>

        <listitem>
<!--           <para>Comparing repository revisions</para> -->
          <para>So sánh những phiên bản trên kho lưu trữ</para>
        </listitem>

      </itemizedlist>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.diff.local">
<!--         <title>Examining local changes</title> -->
        <title>Xem xét những thay đổi cục bộ</title>

<!--
        <para>As we've seen, invoking <userinput>svn diff</userinput> with
          no options will compare your working files to the cached
          <quote>pristine</quote> copies in
          the <filename>.svn</filename> area:</para>
-->
        <para>Như chúng ta đã thấy, gọi lệnh <userinput>svn diff</userinput> mà không có tham số sẽ so sánh những tập tin đang làm việc của bạn với bản sao <quote>nguyên sơ</quote> được lưu trữ trong vùng <filename>.svn</filename>:</para>

        <informalexample>
          <screen>
$ svn diff
Index: rules.txt
===================================================================
--- rules.txt	(revision 3)
+++ rules.txt	(working copy)
@@ -1,4 +1,5 @@
 Be kind to others
 Freedom = Responsibility
 Everything in moderation
-Chew with your mouth open
+Chew with your mouth closed
+Listen when others are speaking
$
</screen>
        </informalexample>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.diff.wcrepos">
<!--         <title>Comparing working copy to repository</title> -->
        <title>So sánh bản sao làm việc với kho lưu trữ</title>

<!--
        <para>If a single <option>- -revision</option>
          (<option>-r</option>) number is passed, your
          working copy is compared to the specified revision in the
          repository:</para>
-->
        <para>Nếu một số phiên bản được truyền <option>--revision</option> (<option>-r</option>), bản sao làm việc của bạn được so sánh với một phiên bản cụ thể trong kho lưu trữ:</para>

        <informalexample>
          <screen>
$ svn diff -r 3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt	(revision 3)
+++ rules.txt	(working copy)
@@ -1,4 +1,5 @@
 Be kind to others
 Freedom = Responsibility
 Everything in moderation
-Chew with your mouth open
+Chew with your mouth closed
+Listen when others are speaking
$
</screen>
        </informalexample>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.diff.reposrepos">
<!--         <title>Comparing repository revisions</title> -->
        <title>So sánh những phiên bản trên kho lưu trữ</title>

<!--
        <para>If two revision numbers, separated by a colon, are
          passed via <option>- -revision</option>
          (<option>-r</option>), the two revisions are directly
          compared:</para>
-->
        <para>Nếu hai số phiên bản, được phân cách bằng dấu hai chấm, được truyền vào tham số <option>--revision</option> (<option>-r</option>) thì hai phiên bản này sẽ được so sánh trực tiếp:</para>

        <informalexample>
          <screen>
$ svn diff -r 2:3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt	(revision 2)
+++ rules.txt	(revision 3)
@@ -1,4 +1,4 @@
 Be kind to others
-Freedom = Chocolate Ice Cream
+Freedom = Responsibility
 Everything in moderation
 Chew with your mouth open
$
</screen>
        </informalexample>

<!--
        <para>A more convenient way of comparing one revision to the
          previous revision is to use the <option>- -change</option>
          (<option>-c</option>) option:</para>
-->
        <para>Một cách tiện hơn để so sánh một phiên bản với phiên bản trước đó là sử dụng tuỳ chọn <option>--change</option> (<option>-c</option>):</para>

        <informalexample>
          <screen>
$ svn diff -c 3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt	(revision 2)
+++ rules.txt	(revision 3)
@@ -1,4 +1,4 @@
 Be kind to others
-Freedom = Chocolate Ice Cream
+Freedom = Responsibility
 Everything in moderation
 Chew with your mouth open
$
</screen>
        </informalexample>

<!--
        <para>Lastly, you can compare repository revisions even when
          you don't have a working copy on your local machine, just by
          including the appropriate URL on the command line:</para>
-->
        <para>Cuối cùng, bạn có thể so sánh những phiên bản kho lưu trữ ngay cả khi bạn không có một bản sao làm việc trên máy trạm của bạn bằng cách cung cấp thêm URL thích hợp vào dòng lệnh:</para>

        <informalexample>
          <screen>
$ svn diff -c 5 http://svn.example.com/repos/example/trunk/text/rules.txt
&hellip;
$
</screen>
        </informalexample>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.log">
<!--       <title>Generating a List of Historical Changes</title> -->
      <title>Tạo một danh sách các thay đổi lịch sử</title>

<!--
      <para>To find information about the history of a file or
        directory, use the <command>svn log</command>
        command.  <command>svn log</command> will provide you with a
        record of who made changes to a file or directory, at what
        revision it changed, the time and date of that revision,
        and&mdash;if it was provided&mdash;the log message that accompanied
        the commit:</para>
-->
      <para>Để tìm thông tin lịch sử của một tập tin hoặc thư mục, sử dụng lệnh <command>svn log</command>. Lệnh này cung cấp cho bạn bản ghi với thông tin ai là người đã thực hiện thay đổi trên tập tin hoặc thư mục, ở phiên bản nào, ngày và giờ của phiên bản đó và&mdash;nếu nó được cung cấp&mdash;ghi chú nhật ký đi kèm với chuyển giao:</para>

      <informalexample>
        <screen>
$ svn log
------------------------------------------------------------------------
r3 | sally | 2008-05-15 23:09:28 -0500 (Thu, 15 May 2008) | 1 line

Added include lines and corrected # of cheese slices.
------------------------------------------------------------------------
r2 | harry | 2008-05-14 18:43:15 -0500 (Wed, 14 May 2008) | 1 line

Added main() methods.
------------------------------------------------------------------------
r1 | sally | 2008-05-10 19:50:31 -0500 (Sat, 10 May 2008) | 1 line

Initial import
------------------------------------------------------------------------
</screen>
      </informalexample>

<!--
      <para>Note that the log messages are printed in
        <emphasis>reverse chronological order</emphasis> by default.
        If you wish to see a different range of revisions in a
        particular order or just a single revision, pass the
        <option>- -revision</option> (<option>-r</option>)
        option:</para>
-->
      <para>Lưu ý rằng ghi chú nhật ký mặc nhiên được in <emphasis>đảo ngược theo trình tự thời gian</emphasis>. Nếu bạn muốn xem một khoảng các phiên bản khác theo một trình tự cụ thể hoặc là chỉ một phiên bản, bạn truyền thêm tham số <option>--revision</option> (<option>-r</option>):</para>

      <table id="svn.tour.history.log.tbl-1">
<!--         <title>Common log requests</title> -->
        <title>Một vài lệnh log thông dụng</title>
        <tgroup cols="2">
          <thead>
<!--
            <row>
              <entry>Command</entry>
              <entry>Description</entry>
            </row>
-->
            <row>
              <entry>Lệnh</entry>
              <entry>Mô tả</entry>
            </row>
          </thead>
          <tbody>
<!--
            <row>
              <entry><userinput>svn log -r 5:19</userinput></entry>
              <entry>Display logs for revisions 5 through 19 in
                chronological order</entry>
            </row>
            <row>
              <entry><userinput>svn log -r 19:5</userinput></entry>
              <entry>Display logs for revisions 5 through 19 in
                reverse chronological order</entry>
            </row>
            <row>
              <entry><userinput>svn log -r 8</userinput></entry>
              <entry>Display logs for revision 8 only</entry>
            </row>
-->
            <row>
              <entry><userinput>svn log -r 5:19</userinput></entry>
              <entry>Hiển thị nhật ký theo trình tự thời gian cho các phiên bản từ 5 đến 19</entry>
            </row>
            <row>
              <entry><userinput>svn log -r 19:5</userinput></entry>
              <entry>Hiển thị nhật ký theo trình tự thời gian đảo ngược cho các phiên bản từ 5 đến 19</entry>
            </row>
            <row>
              <entry><userinput>svn log -r 8</userinput></entry>
              <entry>Hiển thị nhật ký chỉ cho phiên bản 8</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

<!--
      <para>You can also examine the log history of a single file or
        directory.  For example:</para>
-->
      <para>Bạn cũng có thể xem lịch sử nhật ký của một tập tin hoặc thư mục riêng lẻ. Ví dụ:</para>

      <informalexample>
        <screen>
$ svn log foo.c
&hellip;
$ svn log http://foo.com/svn/trunk/code/foo.c
&hellip;
</screen>
      </informalexample>

<!--
      <para>These will display log messages <emphasis>only</emphasis>
        for those revisions in which the named file (or directory)
        changed.</para>
-->
      <para>Những thông báo này sẽ <emphasis>chỉ</emphasis> hiển thị cho những phiên bản mà tập tin (hoặc thư mục) với tên được cung cấp có sự thay đổi.</para>

      <sidebar>

<!--
        <title>Why Does svn log Not Show Me What I
          Just Committed?</title>
-->
        <title>Vì sao svn log không hiển thị những gì tôi vừa chuyển giao?</title>

<!--
        <para>If you make a commit and immediately type <userinput>svn
          log</userinput> with no arguments, you may notice that your
          most recent commit doesn't show up in the list of log
          messages.  This is due to a combination of the behavior of
          <command>svn commit</command> and the default behavior of
          <command>svn log</command>.  First, when you commit changes
          to the repository, <command>svn</command> bumps only the
          revision of files (and directories) that it commits, so
          usually the parent directory remains at the older revision
          (See
          <xref linkend="svn.basic.in-action.mixedrevs.update-commit"/>
          for an explanation of why).  <command>svn log</command> then
          defaults to fetching the history of the directory at its
          current revision, and thus you don't see the newly committed
          changes.  The solution here is to either update your working
          copy or explicitly provide a revision number to <command>svn
          log</command> by using the <option>- -revision</option>
          (<option>-r</option>) option.</para>
-->
        <para>Nếu bạn thực hiện chuyển giao và ngay lúc đó nhập lệnh <userinput>svn log</userinput> không kèm tham số nào, bạn có thể nhận thấy rằng chuyển giao mới nhất của bạn không hiển thị trong danh sách ghi chú nhật ký. Điều này là do sự kết hợp hành vi của lệnh <command>svn commit</command> và hành vi mặc nhiên của lệnh <command>svn log</command>. Trước hết, khi bạn chuyển giao những thay đổi tới kho lưu trữ, <command>svn</command> chỉ đẩy lên phiên bản của những tập tin (và thư mục) mà nó chuyển giao, vì vậy thông thường thư mục cha giữ nguyên ở phiên bản cũ hơn (Xem giải thích ở <xref linkend="svn.basic.in-action.mixedrevs.update-commit"/>). Lệnh <command>svn log</command> sau đó mặc định lấy thông tin lịch sử của thư mục ở phiên bản hiện tại, và vì vậy bạn không nhìn thấy được những thay đổi vừa được chuyển giao. Giải pháp ở đây là hoặc bạn cập nhật bản sao làm việc của bạn hoặc cung cấp một cách cụ thể số phiên bản cho lệnh <command>svn log</command> với tham số <option>--revision</option> (<option>-r</option>).</para>

      </sidebar>

<!--
      <para>If you want even more information about a file or
        directory, <command>svn log</command> also takes a
        <option>- -verbose</option> (<option>-v</option>) option.
        Because Subversion allows you to move and copy files and
        directories, it is important to be able to track path changes
        in the filesystem.  So, in verbose mode, <command>svn
        log</command> will include a list of changed paths in a
        revision in its output:</para>
-->
      <para>Nếu bạn muốn nhiều thông tin hơn nữa về tập tin và thư mục, lệnh <command>svn log</command> cũng có một tuỳ chọn <option>--verbose</option> (<option>-v</option>). Bởi vì Subversion cho phép bạn di chuyển và sao chép những tập tin và thư mục nên theo dõi việc thay đổi đường dẫn trong hệ thống tập tin là điều quan trọng. Vì vậy trong chế độ verbose, lệnh <command>svn log</command> sẽ bao gồm trong kết quả của nó một danh sách của những đường dẫn bị thay đổi trong phiên bản:</para>

      <informalexample>
        <screen>
$ svn log -r 8 -v
------------------------------------------------------------------------
r8 | sally | 2008-05-21 13:19:25 -0500 (Wed, 21 May 2008) | 1 line
Changed paths:
   M /trunk/code/foo.c
   M /trunk/code/bar.h
   A /trunk/code/doc/README

Frozzled the sub-space winch.

------------------------------------------------------------------------
</screen>
      </informalexample>

<!--
      <para><command>svn log</command> also takes
        a <option>- -quiet</option> (<option>-q</option>) option, which
        suppresses the body of the log message.  When combined
        with <option>- -verbose</option> (<option>-v</option>), it
        gives just the names of the changed files.</para>
-->
      <para>Lệnh <command>svn log</command> cũng có một tham số <option>--quiet</option> (<option>-q</option>) mà cắt bỏ phần thân của ghi chú nhật ký. Khi kết hợp với <option>--verbose</option> (<option>-v</option>) thì nó chỉ cung cấp cho bạn tên của những tập tin bị thay đổi.</para>

      <sidebar>
<!--
        <title>Why Does svn log Give Me an Empty
          Response?</title>
-->
        <title>Tại sao svn log hiển thị kết quả trống?</title>

<!--
        <para>After working with Subversion for a bit, most users will
          come across something like this:</para>
-->
        <para>Sau một thời gian làm việc với Subversion, đa số người sử dụng sẽ trải qua một tình huống như thế này:</para>

        <informalexample>
          <screen>
$ svn log -r 2
------------------------------------------------------------------------
$
</screen>
        </informalexample>

<!--
        <para>At first glance, this seems like an error.  But recall
          that while revisions are repository-wide, <command>svn
          log</command> operates on a path in the repository.  If you
          supply no path, Subversion uses the current working
          directory as the default target.  As a result, if you're
          operating in a subdirectory of your working copy and attempt
          to see the log of a revision in which neither that directory
          nor any of its children was changed, Subversion will show you
          an empty log.  If you want to see what changed in that
          revision, try pointing <command>svn log</command> directly at
          the topmost URL of your repository, as in <userinput>svn log
          -r 2 ^/</userinput>.</para>
-->
        <para>Thoạt nhìn, đây dường như là một lỗi. Nhưng nhớ lại rằng trong khi những phiên bản có phạm vi trên toàn kho lưu trữ, lệnh <command>svn log</command> chỉ thực thi trên một đường dẫn trên kho. Nếu bạn không cung cấp đường dẫn, Subversion sẽ mặc định dùng thư mục làm việc hiện tại. Kết quả là, nếu bạn đang thao tác trên một thư mục con của bảo sao làm việc và cố gắng xem nhật ký của phiên bản mà cả thư mục đó và bất kỳ một thư mục con nào của nó đều không có thay đổi, Subversion sẽ hiển thị một kết quả rỗng. Nếu bạn muốn xem những thay đổi trên phiên bản này, hãy trỏ <command>svn log</command> trực tiếp đến lớp URL trên cùng của kho lưu trữ của bạn như trong <userinput>svn log -r 2 ^/</userinput>.</para>

      </sidebar>

<!--
      <para>As of Subversion 1.7, users of the Subversion command-line
        can also take advantage of a special output mode
        for <command>svn log</command> which integrates a difference
        report such as is generated by the <command>svn diff</command>
        command we introduced earlier.  When you invoke <command>svn
        log</command> with the <option>- -diff</option> option,
        Subversion will append to each revision log chunk in the log
        report a <command>diff</command>-style difference report.
        This is a very convenient way to see both the high-level, semantic
        changes and the line-based modifications of a revision all at
        the same time!</para>
-->
      <para>Kể từ Subversion 1.7, người sử dụng giao diện dòng lệnh Subversion còn có thể tận dụng lợi thế của một chế độ xuất kết quả đặc biệt cho lệnh <command>svn log</command> mà tích hợp một báo cáo dạng khác tương tự như báo cáo được kết xuất bởi lệnh <command>svn diff</command> chúng tôi đã giới thiệu trước đây. Khi bạn thực thi lệnh <command>svn log</command> với tham số <option>--diff</option>, Subversion sẽ chèn vào mỗi khối nhật ký trong báo cáo nhật ký một báo cáo khác theo-kiểu-<command>diff</command>. Đây là một cách rất tiện lợi để xem được cả hai dạng thay đổi mức-cao, thay đổi ngữ nghĩa và theo dạng dựa-trên-dòng của một phiên bản ở cùng một thời điểm!</para>

<!--
      <para>Beginning with Subversion 1.8, <command>svn log</command>
        accepts <option>- -search</option> and <option>- -search-and</option>
        options.  The options allow you to filter the output of
        <command>svn log</command> based on the search pattern you
        supply.  When using these options, a log message is shown
        only if a revision's author, date, log message text, or list
        of changed paths, matches the search pattern.</para>
-->
      <para>Bắt đầu với Subversion 1.8, lệnh <command>svn log</command> chấp nhận tham số <option>--search</option> và <option>--search-and</option>. Những tuỳ chọn này cho phép bạn lọc kết quả của lệnh <command>svn log</command> dựa trên mẫu tìm kiếm bạn cung cấp. Khi sử dụng những tuỳ chọn này, ghi chú nhật ký chỉ xuất hiện nếu tác giả phiên bản, ngày tháng, văn bản ghi chú nhật ký hoặc danh sách những đường dẫn thay đổi khớp với mẫu tìm kiếm.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.browsing">
<!--       <title>Browsing the Repository</title> -->
      <title>Duyệt kho lưu trữ</title>

<!--
      <para>Using <command>svn cat</command> and <command>svn
        list</command>, you can view various revisions of files and
        directories without changing the working revision of your
        working copy.  In fact, you don't even need a working copy to
        use either one.</para>
-->
      <para>Sử dụng lệnh <command>svn cat</command> và <command>svn list</command>, bạn có thể xem nhiều phiên bản của những tập tin và thư mục mà không cần phải thay đổi phiên bản làm việc của bản sao làm việc của bạn. Trên thực tế, để có thể sử dụng hai lệnh này bạn không cần phải có một bản sao làm việc.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.browsing.cat">
<!--         <title>Displaying file contents</title> -->
        <title>Hiển thị nội dung tập tin</title>

<!--
        <para>If you want to examine an earlier version of a file and
          not necessarily the differences between two files, you can use
          <command>svn cat</command>:</para>
-->
        <para>Nếu bạn muốn xem xét một phiên bản trước đó của tập tin và không cần thiết phải xem sự khác biệt giữa hai tập tin thì bạn có thể dùng lệnh <command>svn cat</command>:</para>

        <informalexample>
          <screen>
$ svn cat -r 2 rules.txt
Be kind to others
Freedom = Chocolate Ice Cream
Everything in moderation
Chew with your mouth open
$
</screen>
        </informalexample>

<!--
        <para>You can also redirect the output directly into a
          file:</para>
-->
        <para>Bạn cũng có thể chuyển kết quả trực tiếp vào một tập tin:</para>

        <informalexample>
          <screen>
$ svn cat -r 2 rules.txt &gt; rules.txt.v2
$
</screen>
        </informalexample>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.browsing.annotate">
<!--         <title>Displaying line-by-line change attribution</title> -->
        <title>Hiển thị thuộc tính thay đổi theo-từng-dòng</title>

<!--
        <para>Very similar to the <command>svn cat</command> command
          we discussed in the previous section is the <command>svn
          annotate</command> command.  This command also displays the
          contents of a versioned file, but it does so using a tabular
          format.  Each line of output shows not only a line of the
          file's content but also the username, the revision number
          and (optionally) the datestamp of the revision in which that
          line was last modified.</para>
-->
        <para>Lệnh <command>svn annotate</command> rất giống với lệnh <command>svn cat</command> mà chúng ta đã thảo luận trong phần trước. Lệnh này cũng hiển thị nội dung của tập tin được đánh phiên bản nhưng nó hiển thị theo dạng bảng. Mỗi dòng kết quả không phải chỉ là dòng chứa nội dung tập tin mà còn chứa tên đăng nhập, số phiên bản và dấu ngày tháng của phiên bản mà dòng này lần cuối được chỉnh sửa.</para>

<!--
        <para>When used with a working copy file target, <command>svn
          annotate</command> will by default show line-by-line
          attribution of the file as it currently appears in the
          working copy.</para>
-->
        <para>Khi được sử dụng với một tập tin trên bản sao làm việc, lệnh <command>svn annotate</command> sẽ mặc nhiên hiển thị thuộc tính theo-từng-dòng của tập tin như nó đang được xuất hiện trên bảo sao làm việc.</para>

        <informalexample>
          <screen>
$ svn annotate rules.txt
     1      harry Be kind to others
     3      sally Freedom = Responsibility
     1      harry Everything in moderation
     -          - Chew with your mouth closed
     -          - Listen when others are speaking
</screen>
        </informalexample>

<!--
        <para>Notice that for some lines, there is no attribution
          provided.  In this case, that's because those lines have
          been modified in the working copy's version of the file.  In
          this way, <command>svn annotate</command> becomes another
          way for you to see which lines in the file you have
          changed.  You can use the <literal>BASE</literal> revision
          keyword (see <xref linkend="svn.tour.revs.keywords" />) to
          instead see the unmodified form of the file as it resides
          in your working copy.</para>
-->
        <para>Lưu ý rằng có một số dòng không có thuộc tính. Trường hợp này là bởi vì những dòng này được chỉnh sửa trong phiên bản thuộc bản sao làm việc của tập tin. Trong trường hợp này, <command>svn annotate</command> là một phương tiện khác giúp bạn biết được những dòng nào trên tập tin mà bạn đã thay đổi. Bạn có thể sử dụng thêm từ khoá phiên bản <literal>BASE</literal> (xem <xref linkend="svn.tour.revs.keywords" />) để chỉ xem dạng chưa chỉnh sửa của tập tin bởi vì nó đang tồn tại trong bản sao làm việc của bạn.</para>

        <informalexample>
          <screen>
$ svn annotate rules.txt@BASE
     1      harry Be kind to others
     3      sally Freedom = Responsibility
     1      harry Everything in moderation
     1      harry Chew with your mouth open
</screen>
        </informalexample>

<!--
        <para>The <option>- -verbose (-v)</option> option causes
          <command>svn annotate</command> to also include on each line
          the datestamp associated with that line's reported revision
          number.  (This adds a significant amount of width to each
          line of ouput, so we'll skip the demonstration here.)</para>
-->
        <para>Tuỳ chọn <option>--verbose (-v)</option> cũng yêu cầu <command>svn annotate</command> xuất thêm trên mỗi dòng thông tin ngày tháng liên quan đến số phiên bản của dòng đó. (Việc này sẽ làm cho độ rộng của mỗi dòng kết quả lớn hơn rất nhiều, vì vậy chúng tôi bỏ qua phần ví dụ ở đây.)</para>

<!--
        <para>As with <command>svn cat</command>, you can also
          ask <command>svn annotate</command> to display previous
          versions of the file.  This can be a handy trick when, after
          finding out who most recently modified a particular line of
          interest in the file, you then wish to see who modified the
          same line prior to that.</para>
-->
        <para>Tương tự lệnh <command>svn cat</command>, bạn cũng có thể dùng lệnh <command>svn annotate</command> để hiển thị những phiên bản trước đó của tập tin. Nó là một thủ thuật hữu dụng trong tình huống sau khi đã biết ai là người cuối cùng chỉnh sửa một dòng cụ thể trên tập tin, bạn tiếp theo có thể muốn biết ai đã điều chỉnh cũng dòng đó trước đó nữa.</para>

        <informalexample>
          <screen>
$ svn blame rules.txt -r 2
     1      harry Be kind to others
     1      harry Freedom = Chocolate Ice Cream
     1      harry Everything in moderation
     1      harry Chew with your mouth open
</screen>
        </informalexample>

<!--
        <para>Unlike the <command>svn cat</command> command, the
          functionality of <command>svn annotate</command> is tied
          heavily to the idea of <quote>lines</quote> of text in a
          human-readable file.  As such, if you attempt to run the
          command on a file that Subversion has determined is
          <emphasis>not</emphasis> human-readable (per the file's
          <literal>svn:mime-type</literal> property&mdash;see <xref
          linkend="svn.advanced.props.special.mime-type" /> for
          details), you'll get an error message.</para>
-->
        <para>Không giống lệnh <command>svn cat</command>, hoạt động của lệnh <command>svn annotate</command> được gắn chặt với khái niệm <quote>dòng</quote> văn bản trên một tập tin dạng người-đọc-hiểu-được. Như vậy, nếu bạn cố thực thi lệnh này với một tập tin mà Subversion đã xác định <emphasis>không</emphasis> phải là dạng người-đọc-hiểu-được (dựa trên thuộc tính <literal>svn:mime-type</literal>&mdash;xem chi tiết ở <xref linkend="svn.advanced.props.special.mime-type" />), bạn sẽ nhận được thông báo lỗi.</para>

        <informalexample>
          <screen>
$ svn annotate images/logo.png
Skipping binary file (use --force to treat as text): 'images/logo.png'
$
</screen>
        </informalexample>

<!--
        <para>As revealed in the error message, you can use
          the <option>- -force</option> option to disable this check
          and proceed with the annotation as if the file's contents
          are, in fact, human-readable and line-based.  Naturally, if
          you force Subversion to try to perform line-based annotation
          on a nontextual file, you'll get what you asked for: a
          screenful of nonsense.</para>
-->
        <para>Như được gợi ý trong thông báo lỗi, bạn có thể sử dụng tuỳ chọn <option>--force</option> để vô hiệu hóa việc kiểm tra này và tiếp tục thực hiện lệnh annotate với giả định rằng nội dung tập tin là dựa-trên-dòng và theo dạng người-đọc-hiểu-được. Một cách tự nhiên, nếu bạn ép Subversion thực hiện lệnh annotate trên một tập tin không phải văn bản, bạn sẽ nhận được kết quả không mong muốn: một màn hình đầy thông tin vô nghĩa.</para>

        <informalexample>
          <screen>
$ svn annotate images/logo.png --force
     6      harry \211PNG
     6      harry ^Z
     6      harry 
     7      harry \274\361\MI\300\365\353^X\300&hellip;
</screen>
        </informalexample>

        <tip>
          <!--<para>Depending on your mood at the time you execute this
            command and your reasons for doing so, you may find
            yourself typing <userinput>svn blame &hellip;</userinput>
            or <userinput>svn praise &hellip;</userinput> instead of
            using the canonical <command>svn annotate</command>
            command form.  That's okay&mdash;the Subversion developers
            anticipated as much, so those particular command aliases
            work, too!</para>-->
			<para>Tùy thuộc vào tâm trạng của bạn ở thời điểm bạn thực thi lệnh này và tùy thuộc vào mục đích của bạn, bạn có thể nhập <userinput>svn blame &hellip;</userinput> hoặc <userinput>svn praise &hellip;</userinput> thay vì dùng dạng chính tắc <command>svn annotate</command> của lệnh này. Việc này ổn&mdash;những nhà phát triển Subversion đã dự đoán trước, những biệt danh này cũng sử dụng được!</para>
        </tip>

        <!--<para>Finally, as with many of Subversion's informational
          commands, you can also reference files in your <command>svn
          annotate</command> command invocations by their repository
          URLs, allowing access to this information even when you
          don't have ready access to a working copy.</para>-->
		<para>Cuối cùng, như với những lệnh dạng tra cứu thông tin, bạn có thể tham chiếu đến tập tin trong việc thực thi lệnh <command>svn annotate</command> với URL trỏ đến kho lưu trữ của những tập tin này, cho phép truy cập vào thông tin ngay cả khi bạn không có bản sao làm việc.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.browsing.list">
        <!-- <title>Listing versioned directories</title> -->
		<title>Liệt kê danh sách những thư mục được định phiên bản</title>

        <!-- <para>The <command>svn list</command> command shows you what -->
          <!-- files are in a repository directory without actually -->
          <!-- downloading the files to your local machine:</para> -->
		<para>Lệnh <command>svn list</command> hiển thị những tập tin trong một thư mục trên kho lưu trữ mà không cần phải tải những tập tin này về máy trạm của bạn:</para>

        <informalexample>
          <screen>
$ svn list http://svn.example.com/repo/project
README
branches/
tags/
trunk/
</screen>
        </informalexample>

        <!--<para>If you want a more detailed listing, pass the
          <option>- -verbose</option> (<option>-v</option>) flag to get
          output like this:</para>-->
		<para>Nếu bạn muốn một danh sách chi tiết hơn, truyền tham số <option>--verbose</option> (<option>-v</option>) để nhận kết quả như sau:</para>

        <informalexample>
          <screen>
$ svn list -v http://svn.example.com/repo/project
  23351 sally                 Feb 05 13:26 ./
  20620 harry            1084 Jul 13  2006 README
  23339 harry                 Feb 04 01:40 branches/
  23198 harry                 Jan 23 17:17 tags/
  23351 sally                 Feb 05 13:26 trunk/
</screen>
        </informalexample>

        <!--<para>The columns tell you the revision at which the file or
          directory was last modified, the user who modified it, the size
          if it is a file, the datep it was last modified, and the item's
          name.</para>-->
		<para>Những cột này cung cấp cho bạn thông tin về phiên bản mà tập tin hoặc thư mục lần cuối được thay đổi, người thực hiện việc chỉnh sửa, kích thước nếu đó là tập tin, ngày tháng mà nó được chỉnh sửa và tên của nó.</para>

        <warning>
          <!--<para>The <userinput>svn list</userinput> command with no
            arguments defaults to the <emphasis>repository
            URL</emphasis> of the current working
            directory, <emphasis>not</emphasis> the local working copy
            directory.  After all, if you want a listing of your local
            directory, you could use just plain
            <command>ls</command> (or any reasonable non-Unixy
            equivalent).</para>-->
			<para>Lệnh <userinput>svn list</userinput> không có tham số có đích mặc nhiên là <emphasis>URL kho lưu trữ</emphasis> của thư mục làm việc chứ <emphasis>không phải</emphasis> thư mục của bản sao làm việc cục bộ. Cuối cùng, nếu bạn muốn xem danh sách những tập tin trên thư mục cục bộ của bạn, bạn có thể sử dụng lệnh <command>ls</command> (hoặc bất kỳ lệnh phù hợp nào đó trên hệ điều hành của bạn).</para>
        </warning>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.snapshots">
      <!-- <title>Fetching Older Repository Snapshots</title> -->
	  <title>Lấy lại những phiên bản cũ trên kho lưu trữ</title>

      <!--<para>In addition to all of the previous commands, you can use
        the <option>- -revision</option> (<option>-r</option>) option
        with <command>svn update</command> to take an entire working
        copy <quote>back in time</quote>:<footnote><para>See?  We told
        you that Subversion was a time
        machine.</para></footnote></para>-->
	  <para>Ngoài những lệnh này, bạn có thể sử dụng lệnh <command>svn update</command> với tham số <option>--revision</option> (<option>-r</option>) để cập nhật lại toàn bộ bản sao làm việc <quote>quay lại thời gian</quote>:<footnote><para>Thấy không? Chúng tôi đã nói rằng Subversion là một cỗ máy thời gian.</para></footnote></para>

      <informalexample>
        <screen>
# Make the current directory look like it did in r1729.
$ svn update -r 1729
Updating '.':
&hellip;
$
</screen>
      </informalexample>

      <tip>
        <!--<para>Many Subversion newcomers attempt to use the preceding
          <command>svn update</command> example to <quote>undo</quote>
          committed changes, but this won't work as you can't commit
          changes that you obtain from backdating a working copy if
          the changed files have newer revisions.  See <xref
          linkend="svn.branchmerge.basicmerging.resurrect"/> for a
          description of how to <quote>undo</quote> a commit.</para>-->
		<para>Rất nhiều người mới sử dụng Subversion cố thực thi mẫu lệnh <command>svn update</command> bên trên để <quote>hoàn tác</quote> những thay đổi đã chuyển giao, nhưng việc này không phù hợp vì bạn không thể chuyển giao những thay đổi mà bạn thực hiện trên một bản sao làm việc không hiện dịch nếu tập tin được thay đổi có phiên bản mới hơn. Xem <xref
          linkend="svn.branchmerge.basicmerging.resurrect"/> để nắm được cách <quote>hoàn tác</quote> một chuyển giao.</para>
      </tip>

      <!--<para>If you'd prefer to create a whole new working copy from an
        older snapshot, you can do so by modifying the typical
        <command>svn checkout</command> command.  As with <command>svn
        update</command>, you can provide
        the <option>- -revision</option> (<option>-r</option>) option.
        But for reasons that we cover in
        <xref linkend="svn.advanced.pegrevs" />, you might instead want
        to specify the target revision as part of Subversion's
        expanded URL syntax.</para>-->
	  <para>Nếu bạn muốn tạo một bản sao làm việc hoàn toàn mới từ một phiên bản cũ, bạn có thể thực hiện được bằng cách điều chỉnh lệnh <command>svn checkout</command>, tương tự như với lệnh <command>svn
        update</command> bạn có thể cung cấp thêm tham số <option>--revision</option> (<option>-r</option>). Tuy nhiên với những lý do mà chúng tôi đề cập ở <xref linkend="svn.advanced.pegrevs" />, bạn có thể chỉ định phiên bản mong muốn như một phần của cú pháp URL mở rộng của Subversion.</para>

      <informalexample>
        <screen>
# Checkout the trunk from r1729.
$ svn checkout http://svn.example.com/svn/repo/trunk@1729 trunk-1729
&hellip;
# Checkout the current trunk as it looked in r1729.
$ svn checkout http://svn.example.com/svn/repo/trunk -r 1729 trunk-1729
&hellip;
$
</screen>
      </informalexample>

      <!--<para>Lastly, if you're building a release and wish to bundle up
        your versioned files and directories, you can use <command>svn
        export</command> to create a local copy of all or part of your
        repository without any <filename>.svn</filename>
        administrative directories included.  The basic syntax of this
        subcommand is identical to that of <command>svn
        checkout</command>:</para>-->
	  <para>Cuối cùng, nếu bạn đang chuẩn bị một bản phát hành và muốn đóng gói những tập tin và thư mục đã được đánh phiên bản, bạn có thể dùng lệnh <command>svn export</command> để tạo một bản sao cục bộ của toàn bộ hoặc một phần kho lưu trữ của bạn mà không có bất kỳ thư mục quản trị <filename>.svn</filename> nào đi kèm. Cú pháp cơ bản của lệnh con này tương đồng với lệnh <command>svn checkout</command>:</para>

      <informalexample>
        <screen>
# Export the trunk from the latest revision.
$ svn export http://svn.example.com/svn/repo/trunk trunk-export
&hellip;
# Export the trunk from r1729.
$ svn export http://svn.example.com/svn/repo/trunk@1729 trunk-1729
&hellip;
# Export the current trunk as it looked in r1729. 
$ svn export http://svn.example.com/svn/repo/trunk -r 1729 trunk-1729
&hellip;
$
</screen>
      </informalexample>

    </sect2>

  </sect1>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.cleanup">
    <!-- <title>Sometimes You Just Need to Clean Up</title> -->
	<title>Đôi Khi Bạn Chỉ Cần Dọn Dẹp</title>

    <para>Chúng tôi đã trình bày những thao tác thường nhật mà bạn thường sử dụng với Subversion, chúng ta sẽ xem lại một vài thao tác quản trị liên quan tới bản sao làm việc của bạn.</para>


    <!-- =============================================================== -->
    <sect2 id="svn.tour.cleanup.disposal">
      <!-- <title>Disposing of a Working Copy</title> -->
	  <title>Hủy bỏ bản sao làm việc</title>

      <!-- <para>Subversion doesn't track either the state or the existence of -->
        <!-- working copies on the server, so there's no server overhead to -->
        <!-- keeping working copies around.  Likewise, there's no need to -->
        <!-- let the server know that you're going to delete a working -->
        <!-- copy.</para> -->
	  <para>Subversion không theo dõi trạng thái hoặc sự tồn tại của bản sao làm việc trên máy chủ, vì vậy sẽ không ảnh hưởng gì đến máy chủ trong việc duy trì bản sao làm việc. Tương tự như vậy, không cần thiết phải thông báo cho máy chủ biết bạn sẽ xóa một bản sao làm việc.</para>

      <!-- <para>If you're likely to use a working copy again, there's -->
        <!-- nothing wrong with just leaving it on disk until you're ready -->
        <!-- to use it again, at which point all it takes is an -->
        <!-- <command>svn update</command> to bring it up to date and ready -->
        <!-- for use.</para> -->
	  <para>Nếu có khả năng bạn sẽ sử dụng bản sao làm việc một lần nữa, bạn có thể giữ nguyên nó trên đĩa cho đến khi bạn sử dụng nó lại, chỉ việc thực thi lệnh <command>svn update</command> để cập nhật bản sao làm việc và sẵn sàng sử dụng.</para>

      <!-- <para>However, if you're definitely not going to use a working -->
        <!-- copy again, you can safely delete the entire thing using -->
        <!-- whatever directory removal capabilities your operating system -->
        <!-- offers.  We recommend that before you do so you -->
        <!-- run <userinput>svn status</userinput> and review any files -->
        <!-- listed in its output that are prefixed with a -->
        <!-- <literal>?</literal> to make certain that they're not of -->
        <!-- importance.</para> -->
	  <para>Tuy nhiên, nếu bạn chắc chắn sẽ không sử dụng một bản sao làm việc một lần nữa, bạn có thể tùy ý xóa toàn bộ với bất kỳ phương thức xóa thư mục nào mà hệ điều hành của bạn cung cấp. Chúng tôi khuyến nghị rằng trước khi thực hiện như vậy bạn nên thực thi lệnh <userinput>svn status</userinput> và xem lại bất kỳ tập tin nào được liệt kê trong danh sách kết xuất mà có dấu <literal>?</literal> phía trước để chắc chắn rằng nó có quan trọng hay không.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cleanup.interruption">
      <!-- <title>Recovering from an Interruption</title> -->
	  <title>Phục hồi từ gián đoạn</title>

      <!-- <para>When Subversion modifies your working copy&mdash;either -->
        <!-- your files or its own administrative state&mdash;it tries to do -->
        <!-- so as safely as possible.  Before changing the working copy, -->
        <!-- Subversion logs its intentions in a private <quote>to-do -->
        <!-- list</quote>, of sorts.  Next, it performs those actions to -->
        <!-- effect the desired change, holding a lock on the relevant part -->
        <!-- of the working copy while it works.  This prevents other -->
        <!-- Subversion clients from accessing the working copy mid-change. -->
        <!-- Finally, Subversion releases its lock and cleans up its -->
        <!-- private to-do list.  Architecturally, this is similar to a -->
        <!-- journaled filesystem.  If a Subversion operation is -->
        <!-- interrupted (e.g, if the process is killed or if the machine -->
        <!-- crashes), the private to-do list remains on disk.  This allows -->
        <!-- Subversion to return to that list later to complete any -->
        <!-- unfinished operations and return your working copy to a -->
        <!-- consistent state.</para> -->
	  <para>Khi Subversion điều chỉnh bản sao làm việc của bạn&mdash;hoặc là những tập tin của bạn hoặc là vùng quản trị của chính nó&mdash;nó sẽ cố gắng thực hiện như sau càng an toàn càng tốt. Trước khi thay đổi bản sao làm việc, Subversion ghi lại những ý định của nó trong một <quote>danh sách công-việc-phải-làm</quote> riêng. Tiếp theo, nó thực hiện những thao tác này để thi hành những thay đổi mong muốn, khóa phần có liên quan trên bản sao làm việc trong khi nó làm việc. Điều này ngăn những ứng dụng khách Subversion khác truy cập vào bản sao làm việc đang thay đổi. Cuối cùng, Subversion nhả khóa và dọn dẹp danh sách công-việc-phải-làm riêng của nó. Về mặt kiến trúc, điều này tương tự với hệ thống tập tin journal. Nếu một thao tác Subversion bị ngắt (ví dụ: nếu tiến trình bị tắt hoặc máy gặp sự cố), danh sách công-việc-phải-làm riêng vẫn còn tồn tại trên đĩa. Điều này cho phép Subversion quay trở lại với danh sách này sau đó để hoàn thành bất kỳ thao tác đang dang dỡ nào và trả lại trạng thái nhất quán cho bản sao làm việc.</para>

      <!-- <para>This is exactly what <command>svn cleanup</command> does: -->
        <!-- it searches your working copy and runs any leftover to-do -->
        <!-- items, removing working copy locks as it completes those -->
        <!-- operations.  If Subversion ever tells you that some part of -->
        <!-- your working copy is <quote>locked,</quote> run <command>svn -->
        <!-- cleanup</command> to remedy the problem.  The <command>svn -->
        <!-- status</command> command will inform you about administrative -->
        <!-- locks in the working copy, too, by displaying -->
        <!-- an <literal>L</literal> next to those locked paths:</para> -->
	  <para>Đây chính xác là điều mà <command>svn cleanup</command> thực hiện: nó tìm kiếm trong bản sao làm việc của bạn và thực thi bất kỳ mục công-việc-phải-làm nào còn sót, gở khóa bản sao làm việc ngay khi nó hoàn thành những thao tác này. Nếu có khi nào đó Subversion thông báo với bạn rằng phần nào đó của bản sao làm việc của bạn bị <quote>khóa,</quote> thực thi lệnh <command>svn cleanup</command> để khắc phục vấn đề. Lệnh <command>svn status</command> cũng sẽ thông báo cho bạn về việc khóa vùng quản trị trên bản sao làm việc của bạn bằng cách hiển thị chữ <literal>L</literal> kế bên những đường dẫn bị khóa này:</para>

      <informalexample>
        <screen>
$ svn status
  L     somedir
M       somedir/foo.c
$ svn cleanup
$ svn status
M       somedir/foo.c
</screen>
      </informalexample>

      <!-- <para>Don't confuse these working copy administrative locks with -->
        <!-- the user-managed locks that Subversion users create when using -->
        <!-- the lock-modify-unlock model of concurrent version control; -->
        <!-- see the sidebar -->
        <!-- <xref linkend="svn.advanced.locking.meanings"/> for -->
        <!-- clarification.</para> -->
	  <para>Đừng nhầm lẫn việc khóa vùng quản trị của bản sao làm việc với khóa do người dùng tạo mà người sử dụng Subversion tạo ra khi sử dụng mô hình khoá-sửa đổi-mở khoá của hệ thống kiểm soát phiên bản đồng thời; xem thông tin <xref linkend="svn.advanced.locking.meanings"/> để làm rõ thêm.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.treeconflicts">
    <!-- <title>Dealing with Structural Conflicts</title> -->
	<title>Xử Lý Xung Đột Về Cấu Trúc</title>
      
    <!-- <para>So far, we have only talked about conflicts at the level of -->
      <!-- file content.  When you and your collaborators make overlapping -->
      <!-- changes within the same file, Subversion forces you to merge -->
      <!-- those changes before you can commit.<footnote><para>Well, -->
      <!-- you <emphasis>could</emphasis> mark files containing conflict -->
      <!-- markers as resolved and commit them, if you really wanted to. -->
      <!-- But this is rarely done in practice.</para></footnote></para> -->
	<para>Cho đến nay, chúng ta chỉ thảo luận về xung đột ở mức nội dung tập tin. Khi bạn và đồng nghiệp của bạn thực hiện việc thay đổi chồng lấn trên cùng một tập tin, Subversion yêu cầu bạn phải hợp nhất những thay đổi này trước khi bạn có thể chuyển giao. <footnote><para>Nếu thật sự cần thiết, bạn <emphasis>có thể</emphasis> đánh dấu những tập tin chứa dấu hiện xung đột như là đã được giải quyết xung đột và chuyển giao những tập tin này. Nhưng điều này hiếm khi được thực hiện trên thực tế.</para></footnote></para>
        
    <!-- <para> -->
      <!-- <indexterm> -->
        <!-- <primary>tree conflicts</primary> -->
      <!-- </indexterm> -->
      <!-- <indexterm> -->
        <!-- <primary>conflicts</primary> -->
        <!-- <secondary>tree</secondary> -->
        <!-- <see>tree conflicts</see> -->
      <!-- </indexterm>But what happens if your collaborators move or -->
      <!-- delete a file that you are still working on?  Maybe there was a -->
      <!-- miscommunication, and one person thinks the file should be -->
      <!-- deleted, while another person still wants to commit changes to -->
      <!-- the file.  Or maybe your collaborators did some refactoring, -->
      <!-- renaming files and moving around directories in the process.  If -->
      <!-- you were still working on these files, those modifications may -->
      <!-- need to be applied to the files at their new location.  Such -->
      <!-- conflicts manifest themselves at the directory tree structure -->
      <!-- level rather than at the file content level, and are known -->
      <!-- as <firstterm>tree conflicts</firstterm>.</para> -->
	<para>
      <indexterm>
		<primary>xung đột cấu trúc cây</primary>
      </indexterm>
      <indexterm>
        <primary>xung đột</primary>
        <secondary>cây</secondary>
        <see>xung đột cấu trúc cây</see>
      </indexterm>Nhưng điều gì sẽ xảy ra nếu đồng nghiệp của bạn di chuyển hoặc xóa một tập tin mà bạn vẫn đang làm việc? Có thể đó là do hiểu nhầm và một người nào đó nghĩ rằng tập tin cần phải được xóa bỏ, trong khi người khác vẫn cần phải chuyển giao những thay đổi vào tập tin. Hoặc là những đồng nghiệp của bạn đã thực hiện vài việc sắp xếp lại, đổi tên tập tin và di chuyển những thư mục. Nếu bạn vẫn đang làm việc trên những tập tin này, những điều chỉnh này có thể cần phải được áp vào những tập tin này ở vị trí mới. Những xung đột này thể hiện ở mức cấu trúc cây thư mục chứ không phải ở mức nội dung tập tin và được biết đến như là <firstterm>xung đột cấu trúc cây</firstterm>.</para>

    <sidebar>
      <!-- <title>Tree conflicts prior to Subversion 1.6</title> -->
	  <title>Xung đột cấu trúc cây trước phiên bản Subversion 1.6</title>

<!--
      <para>Prior to Subversion 1.6, tree conflicts could yield rather
        unexpected results.  For example, if a file was locally
        modified, but had been renamed in the repository,
        running <command>svn update</command> would make Subversion
        carry out the following steps:</para>
-->
      <para>Trước phiên bản Subversion 1.6, xung đột cấu trúc cây có thể mang lại những kết quả khá bất ngờ. Ví dụ, nếu một tập tin đã được điều chỉnh ở máy trạm, nhưng cũng được đổi tên trên kho lưu trữ, việc thực thi lệnh <command>svn update</command> sẽ làm cho Subversion thực hiện những bước sau:</para>

      <itemizedlist>
<!--
        <listitem><para>Check the file to be renamed for local
          modifications.</para></listitem>
-->
        <listitem><para>Kiểm tra các tập tin sẽ được đổi tên cho các sửa đổi cục bộ.</para></listitem>

<!--
        <listitem><para>Delete the file at its old location, and if it
          had local modifications, keep an on-disk copy of the file at
          the old location.  This on-disk copy now appears as an
          unversioned file in the working copy.</para></listitem>
-->
      <listitem><para>Xoá tập tin ở vị trí cũ và nếu nó có những thay đổi cục bộ, giữ bản sao trên-đĩa của tập tin ở vị trí cũ. Bản sao trên-đĩa lúc này xuất hiện như một tập tin chưa đánh phiên phản trên bản sao làm việc.</para></listitem>

<!--
        <listitem><para>Add the file, as it exists in the repository,
          at its new location.</para></listitem>
-->
        <listitem><para>Thêm tập tin, như nó tồn tại trên kho lưu trữ ở vị trí mới của nó.</para></listitem>
      </itemizedlist>

<!--
      <para>When this situation arises, there is the possibility that
        the user makes a commit without realizing that local
        modifications have been left in a now-unversioned file in the
        working copy, and have not reached the repository.  This gets
        more and more likely (and tedious) if the number of files
        affected by this problem is large.</para>
-->
      <para>Khi tình huống này xuất hiện, có khả năng rằng người sử dụng thực hiện việc chuyển giao mà không nhận ra rằng những thay đổi cục bộ hiện đang trong tập tin chưa được đánh phiên bản trên bản sao làm việc và không tiếp cận được với kho lưu trữ. Điều này càng có nhiều khả năng xảy ra nếu số lượng những tập tin bị ảnh hưởng bởi vấn đề này lớn.</para>

<!--
      <para>Since Subversion 1.6, this and other similar situations
        are flagged as conflicts in the working copy.</para>
-->
      <para>Kể từ phiên bản Subversion 1.6, vấn đề này và những tình huống tương tự được xem như xung đột trong bản sao làm việc.</para>

    </sidebar>

<!--
    <para>As with textual conflicts, tree conflicts prevent a commit
      from being made from the conflicted state, giving the user the
      opportunity to examine the state of the working copy for
      potential problems arising from the tree conflict, and resolving
      any such problems before committing.</para>
-->
    <para>Tương tự như với xung đột văn bản, xung đột cấu trúc cây ngăn cản việc thực hiện chuyển giao, người sử dụng có cơ hội để xem xét trạng thái của bản sao làm việc cho những vấn đề tiềm ẩn có thể xuất hiện từ xung đột cấu trúc cây và giải quyết những xung đột này trước khi chuyển giao.</para>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.treeconflicts.example">
<!--       <title>An Example Tree Conflict</title> -->
      <title>Một ví dụ xung đột cấu trúc cây</title>

<!--
      <para>Suppose a software project you were working on currently
        looked like this:</para>
-->
      <para>Giả sử một dự án phần mềm bạn đang tham gia hiện như thế này:</para>

      <informalexample>
        <screen>
$ svn list -Rv svn://svn.example.com/trunk/
     13 harry                 Sep 06 10:34 ./
     13 harry              27 Sep 06 10:34 COPYING
     13 harry              41 Sep 06 10:32 Makefile
     13 harry              53 Sep 06 10:34 README
     13 harry                 Sep 06 10:32 code/
     13 harry              54 Sep 06 10:32 code/bar.c
     13 harry             130 Sep 06 10:32 code/foo.c
$
</screen>
      </informalexample>

<!--
      <para>Later, in revision 14, your collaborator Harry renames the file
        <filename>bar.c</filename> to <filename>baz.c</filename>.
        Unfortunately, you don't realize this yet.  As it turns out,
        you are busy in your working copy composing a different set of
        changes, some of which also involve modifications
        to <filename>bar.c</filename>:</para>
-->
      <para>Sau đó, trong phiên bản 14, đồng nghiệp Harry của bạn đổi tên tập tin <filename>bar.c</filename> thành <filename>baz.c</filename>. Không may là bạn không biết về điều này. Bạn đang bận rộn với bản sao làm việc của bạn với một tập những thay đổi khác, một vài trong số đó cũng bao gồm việc chỉnh sửa trên tập tin <filename>bar.c</filename>:</para>

      <informalexample>
        <screen>
$ svn diff
Index: code/foo.c
===================================================================
--- code/foo.c	(revision 13)
+++ code/foo.c	(working copy)
@@ -3,5 +3,5 @@
 int main(int argc, char *argv[])
 {
     printf("I don't like being moved around!\n%s", bar());
-    return 0;
+    return 1;
 }
Index: code/bar.c
===================================================================
--- code/bar.c	(revision 13)
+++ code/bar.c	(working copy)
@@ -1,4 +1,4 @@
 const char *bar(void)
 {
-    return "Me neither!\n";
+    return "Well, I do like being moved around!\n";
 }
$
</screen>
      </informalexample>

<!--
      <para>You first realize that someone else has
        changed <filename>bar.c</filename> when your own commit
        attempt fails:</para>
-->
      <para>Lần đầu tiên bạn nhận thấy rằng ai đó đã thay đổi <filename>bar.c</filename> khi việc cố gắng chuyển giao của bạn không thành công:</para>

      <informalexample>
        <screen>
$ svn commit -m "Small fixes"
Sending        code/bar.c
Transmitting file data .
svn: E155011: Commit failed (details follow):
svn: E155011: File '/home/svn/project/code/bar.c' is out of date
svn: E160013: File not found: transaction '14-e', path '/code/bar.c'
$
</screen>
      </informalexample>
<!-- XXX: That error message should be cleaned up! -->

<!--
      <para>At this point, you need to run <command>svn update</command>.
        Besides bringing our working copy up to date so that you can
        see Harry's changes, this also flags a tree conflict so you
        have the opportunity to evaluate and properly resolve it.</para>
-->
      <para>Tại thời điểm này, bạn cần thực thi lệnh <command>svn update</command>. Bên cạnh việc cập nhật bản sao làm việc của bạn để bạn có thể thấy những thay đổi của Harry, việc này còn đánh dấu một xung đột cấu trúc cây và bạn có cơ hội để đánh giá và giải quyết nó.</para>

      <informalexample>
        <screen>
$ svn update
Updating '.':
   C code/bar.c
A    code/baz.c
U    Makefile
Updated to revision 14.
Summary of conflicts:
  Tree conflicts: 1
$
</screen>
      </informalexample>

<!--
      <para>In its output, <command>svn update</command> signifies tree
        conflicts using a capital C in the fourth output column.
        <command>svn status</command> reveals additional details of the
        conflict:</para>
-->
      <para>Trong kết quả lệnh, lệnh <command>svn update</command> đánh dấu xung đột cấu trúc cây bằng cách dùng một ký tự hoa C trong cột kết xuất thứ tư. Lệnh <command>svn status</command> bộc lộ thêm chi tiết của xung đột:</para>

      <informalexample>
        <screen>
$ svn status
M       code/foo.c
A  +  C code/bar.c
      >   local edit, incoming delete upon update
Summary of conflicts:
  Tree conflicts: 1
$
</screen>
      </informalexample>

<!--
      <para>Note how <filename>bar.c</filename> is automatically
        scheduled for re-addition in your working copy, which
        simplifies things in case you want to keep the file.</para>
-->
      <para>Lưu ý việc tập tin <filename>bar.c</filename> được tự động lên lịch cho việc tái-bổ-sung trong bản sao làm việc của bạn, giúp đơn giản hoá nhiều việc trong trường hợp bạn muốn giữ lại tập tin.</para>

<!--
      <para>Because a move in Subversion is implemented as a copy
        operation followed by a delete operation, and these two
        operations cannot be easily related to one another during an
        update, all Subversion can warn you about is an incoming
        delete operation on a locally modified file.  This delete
        operation <emphasis>may</emphasis> be part of a move, or it
        could be a genuine delete operation.  Determining exactly what
        semantic change was made to the repository is
        important&mdash;you want to know just how your own edits fit
        into the overall trajectory of the project.  So read log
        messages, talk to your collaborators, study the line-based
        differences&mdash;do whatever you must do&mdash;to determine
        your best course of action.</para>
-->
      <para>Bởi vì việc di chuyển trong Subversion được thực hiện như là một thao tác sao chép được nối tiếp bởi một thao tác xoá, hai thao tác này không dễ để có liên hệ qua lại trong quá trình cập nhật, tất cả điều mà Subversion có thể cảnh báo bạn đó là thao tác xoá sắp xảy ra trên tập tin được chỉnh sửa cục bộ. Thao tác xoá này <emphasis>có thể</emphasis> là một phần của việc di chuyển hoặc nó có thể là một thao tác xoá chính hiệu. Xác định chính xác thay đổi ngữ nghĩa nào được thực hiện trên kho lưu trữ là việc quan trọng&mdash;bạn muốn biết thay đổi của bạn khớp với quỹ đạo tổng thể của dự án như thế nào. Hãy đọc ghi chú nhật ký, nói chuyện với người cộng tác của bạn, nghiên cứu sự khác biệt trên từng dòng&mdash;làm tất cả những gì mà bạn cần làm&mdash;để xác định hành động phù hợp nhất của bạn.</para>

<!--
      <para>In this case, Harry's commit log message tells you what
        you need to know.</para>
-->
      <para>Trong trường hợp này, ghi chú nhật ký chuyển giao của Harry thông báo cho bạn biết những điều bạn cần biết.</para>

      <informalexample>
        <screen>
$ svn log -r14 ^/trunk
------------------------------------------------------------------------
r14 | harry | 2011-09-06 10:38:17 -0400 (Tue, 06 Sep 2011) | 1 line
Changed paths:
   M /Makefile
   D /code/bar.c
   A /code/baz.c (from /code/bar.c:13)

Rename bar.c to baz.c, and adjust Makefile accordingly.
------------------------------------------------------------------------
$
</screen>
      </informalexample>

<!--
      <para><command>svn info</command> shows the URLs of the items
        involved in the conflict.  The <emphasis>left</emphasis> URL
        shows the source of the local side of the conflict, while
        the <emphasis>right</emphasis> URL shows the source of the
        incoming side of the conflict.  These URLs indicate where you
        should start searching the repository's history for the change
        which conflicts with your local change.</para>
-->
      <para>Lệnh <command>svn info</command> hiển thị URL của những mục có liên quan trong xung đột. Phần URL <emphasis>bên trái</emphasis> hiển thị nguồn gốc của xung đột ở phía cục bộ, trong khi phần URL <emphasis>bên phải</emphasis> hiển thị nguồn gốc của xung đột của phần mới lấy về. Những URL này cho bạn biết bạn nên bắt đầu tìm kiếm trong lịch sử của kho lưu trữ thay đổi mà gây ra xung đột với thay đổi cục bộ của bạn.</para>

      <informalexample>
        <screen>
$ svn info code/bar.c
Path: code/bar.c
Name: bar.c
URL: http://svn.example.com/svn/repo/trunk/code/bar.c
&hellip;
Tree conflict: local edit, incoming delete upon update
  Source  left: (file) ^/trunk/code/bar.c@4
  Source right: (none) ^/trunk/code/bar.c@5

$
</screen>
      </informalexample>

<!--
      <para><filename>bar.c</filename> is now said to be the victim of
        a tree conflict.  It cannot be committed until the conflict is
        resolved:</para>
-->
      <para>Tập tin <filename>bar.c</filename> bây giờ được cho là nạn nhân của xung đột cấu trúc cây. Nó không thể được chuyển giao cho tới khi xung đột được giải quyết:</para>

      <informalexample>
        <screen>
$ svn commit -m "Small fixes" 
svn: E155015: Commit failed (details follow):
svn: E155015: Aborting commit: '/home/svn/project/code/bar.c' remains in confl
ict
$
</screen>
      </informalexample>

<!--
      <para>To resolve this conflict, you must either agree or
        disagree with the move that Harry made.</para>
-->
      <para>Để giải quyết xung đột này, bạn cần phải hoặc là đồng ý hoặc là không đồng ý với những di chuyển mà Harry đã thực hiện.</para>

<!--
      <para>If you agree with the move, your <filename>bar.c</filename>
        is superfluous.  You'll want to delete it and mark the tree
        conflict as resolved.  But wait:  you made changes to that
        file!  Before deleting <filename>bar.c</filename>, you need to
        decide if the changes you made to it need to be applied
        elsewhere, for example to the new <filename>baz.c</filename>
        file where all of <filename>bar.c</filename>'s code now lives.
        Let's assume that your changes do need to <quote>follow the
        move</quote>.  Subversion isn't smart enough to do this work
        for you<footnote><para>In some cases, Subversion 1.5 and 1.6
        <emphasis>would</emphasis> actually handle this for you, but
        this somewhat hit-or-miss functionality was removed in
        Subversion 1.7.</para></footnote>, so you need to migrate your
        changes manually.</para>
-->
      <para>Nếu bạn đồng ý với việc di chuyển, tập tin <filename>bar.c</filename> của bạn lúc này trở nên vô dụng. Bạn sẽ muốn xóa nó và đánh dấu xung đột cấu trúc cây như đã giải quyết. Nhưng chờ đã: bạn đã thực hiện thay đổi trên tập tin này! Trước khi xoá <filename>bar.c</filename>, bạn cần phải quyết định rằng những thay đổi bạn đã thực hiện trên tập tin này có cần được sử dụng ở đâu đó khác không, ví dụ áp vào tập tin <filename>baz.c</filename> là nơi mà toàn bộ mã của tập tin <filename>bar.c</filename> sẽ được chuyển vào. Giả sử rằng thay đổi của bạn cần phải <quote>theo luồng</quote>. Subversion không đủ thông minh để thực hiện việc này giúp bạn. <footnote><para>Trong vài trường hợp, Subversion 1.5 và 1.6 <emphasis>sẽ</emphasis> thực sự xử lý việc này cho bạn, nhưng chức năng có phần trúng-hoặc-trượt này đã bị loại bỏ trong Subversion 1.7</para></footnote>, vì vậy bạn cần phải thực hiện việc chuyển đổi trên những thay đổi của bạn một cách thủ công.</para>

<!--
      <para>In our example, you could manually re-make your change
        to <filename>bar.c</filename> pretty easily&mdash;it was,
        after all, a single-line change.  That's not always the case,
        though, so we'll show a more scalable approach.  We'll first
        use <command>svn diff</command> to create a patch file.  Then
        we'll edit the headers of that patch file to point to the new
        name of our renamed file.  Finally, we re-apply the modified
        patch to our working copy.</para>
-->
      <para>Trong ví dụ của chúng ta, bạn có thể tái tạo lại thay đổi của bạn một cách thủ công trên tập tin <filename>bar.c</filename> rất dễ dàng&mdash;nó chỉ là thay đổi trên-một-dòng. Tuy nhiên, không phải lúc nào cũng là trường hợp này, vì vậy chúng tôi sẽ chỉ ra cách tiếp cận có thể mở rộng hơn. Trước tiên chúng ta dùng lệnh <command>svn diff</command> để tạo một tập tin vá. Sau đó chúng ta điều chỉnh phần nhãn đầu (header) của tập tin này để trỏ tới tên mới của tập tin đã đổi tên. Cuối cùng, chúng ta áp-lại tập tin vá đã điều chỉnh vào bản sao làm việc của chúng ta.</para>

      <informalexample>
        <screen>
$ svn diff code/bar.c > PATCHFILE
$ cat PATCHFILE
Index: code/bar.c
===================================================================
--- code/bar.c	(revision 14)
+++ code/bar.c	(working copy)
@@ -1,4 +1,4 @@
 const char *bar(void)
 {
-    return "Me neither!\n";
+    return "Well, I do like being moved around!\n";
 }
$ ### Edit PATCHFILE to refer to code/baz.c instead of code/bar.c
$ cat PATCHFILE
Index: code/baz.c
===================================================================
--- code/baz.c	(revision 14)
+++ code/baz.c	(working copy)
@@ -1,4 +1,4 @@
 const char *bar(void)
 {
-    return "Me neither!\n";
+    return "Well, I do like being moved around!\n";
 }
$ svn patch PATCHFILE
U         code/baz.c
$
</screen>
      </informalexample>

<!--
      <para>Now that the changes you originally made
        to <filename>bar.c</filename> have been successfully
        reproduced in <filename>baz.c</filename>, you can
        delete <filename>bar.c</filename> and resolve the conflict,
        instructing the resolution logic to accept what is currently
        in the working copy as the desired result.</para>
-->
      <para>Như vậy là những thay đổi bạn thực hiện ban đầu trên <filename>bar.c</filename> đã được sao chép vào <filename>baz.c</filename>, bạn có thể xoá tập tin <filename>bar.c</filename> và giải quyết xung đột, hướng lôgic giải quyết để chấp nhận những gì đang có trong bản sao làm việc như là kết quả mong muốn.</para>

      <informalexample>
        <screen>
$ svn delete --force code/bar.c
D         code/bar.c
$ svn resolve --accept=working code/bar.c
Resolved conflicted state of 'code/bar.c'
$ svn status
M       code/foo.c
M       code/baz.c
$ svn diff
Index: code/foo.c
===================================================================
--- code/foo.c  (revision 14)
+++ code/foo.c  (working copy)
@@ -3,5 +3,5 @@
 int main(int argc, char *argv[])
 {
     printf("I don't like being moved around!\n%s", bar());
-    return 0;
+    return 1;
 }
Index: code/baz.c
===================================================================
--- code/baz.c  (revision 14)
+++ code/baz.c  (working copy)
@@ -1,4 +1,4 @@
 const char *bar(void)
 {
-    return "Me neither!\n";
+    return "Well, I do like being moved around!\n";
 }
$
</screen>
      </informalexample>

<!--
      <para>But what if you do not agree with the move?  Well, in that
        case, you can delete <filename>baz.c</filename> instead, after
        making sure any changes made to it after it was renamed are
        either preserved or not worth keeping.  (Do not forget to also
        revert the changes Harry made to <filename>Makefile</filename>.)
        Since <filename>bar.c</filename> is already scheduled for
        re-addition, there is nothing else left to do, and the
        conflict can be marked resolved:</para>
-->
      <para>Nhưng sẽ như thế nào nếu bạn không đồng ý với việc di chuyển? Trong trường hợp này, bạn có thể xoá tập tin <filename>baz.c</filename> sau khi đã chắc chắn rằng bất kỳ những thay đổi nào được thực hiện trên nó sau khi nó được đổi tên đã được lưu giữ lại hoặc là nó không đáng để lưu giữ. (Lưu ý không quên hoàn lại những thay đổi Harry đã thực hiện trên <filename>Makefile</filename>.) Bởi vì <filename>bar.c</filename> đã được lên lịch để lại thêm vào kho nên không còn việc gì cần phải làm nữa và xung đột được đánh dấu như đã được giải quyết:</para>

      <informalexample>
        <screen>
$ svn delete --force code/baz.c
D         code/baz.c
$ svn resolve --accept=working code/bar.c
Resolved conflicted state of 'code/bar.c'
$ svn status
M       code/foo.c
A  +    code/bar.c
D       code/baz.c
M       Makefile
$ svn diff
Index: code/foo.c
===================================================================
--- code/foo.c	(revision 14)
+++ code/foo.c	(working copy)
@@ -3,5 +3,5 @@
 int main(int argc, char *argv[])
 {
     printf("I don't like being moved around!\n%s", bar());
-    return 0;
+    return 1;
 }
Index: code/bar.c
===================================================================
--- code/bar.c	(revision 14)
+++ code/bar.c	(working copy)
@@ -1,4 +1,4 @@
 const char *bar(void)
 {
-    return "Me neither!\n";
+    return "Well, I do like being moved around!\n";
 }
Index: code/baz.c
===================================================================
--- code/baz.c	(revision 14)
+++ code/baz.c	(working copy)
@@ -1,4 +0,0 @@
-const char *bar(void)
-{
-    return "Me neither!\n";
-}
Index: Makefile
===================================================================
--- Makefile	(revision 14)
+++ Makefile	(working copy)
@@ -1,2 +1,2 @@
 foo: 
-	$(CC) -o $@ code/foo.c code/baz.c
+	$(CC) -o $@ code/foo.c code/bar.c
</screen>
      </informalexample>

<!--
      <para>You've now resolved your first tree conflict!  You can
        commit your changes and tell Harry during tea break about all
        the extra work he caused for you.</para>
-->
      <para>Bây giờ bạn đã giải quyết xung đột cấu trúc cây đầu tiên! Bạn có thể chuyển giao những thay đổi của bạn và báo cho Harry về tất cả những việc phát sinh mà anh ấy đã gây ra cho bạn.</para>

    </sect2>
  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.summary">
<!--     <title>Summary</title> -->
    <title>Tóm Lược</title>

<!--
      <para>Now we've covered most of the Subversion client commands.
        Notable exceptions are those dealing with branching and
        merging (see <xref linkend="svn.branchmerge"/>) and properties (see
        <xref linkend="svn.advanced.props"/>).  However, you may want to
        take a moment to skim through <xref linkend="svn.ref.svn"/> to
        get an idea of all the different commands that Subversion
        has&mdash;and how you can use them to make your work
        easier.</para>
-->
      <para>Chúng ta đã xem qua đa số những lệnh trên ứng dụng khách Subversion. Những ngoại lệ nổi bật là liên quan đến rẻ nhánh, hợp nhất (xem <xref linkend="svn.branchmerge"/>) và thuộc tính (xem <xref linkend="svn.advanced.props"/>). Tuy nhiên, bạn có thể muốn dành chút thời gian xem lướt qua <xref linkend="svn.ref.svn"/> để có khái niệm về tất cả những lệnh mà Subversion có&mdash;và làm cách nào bạn có thể sử dụng chúng để làm cho công việc của bạn dễ dàng hơn.</para>

  </sect1>

</chapter>

<!--
local variables:
sgml-parent-document: ("book.xml" "chapter")
end:
-->
