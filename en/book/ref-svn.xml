<!-- -*- sgml -*- -->

<reference id="svn.ref.svn">
  <title>svn Reference&mdash;Subversion Command-Line Client</title>
    
  <partintro>
    <para><command>svn</command> is the official command-line client
      of Subversion.  Its functionality is offered via a collection of
      task-specific subcommands, most of which accept a number of
      options for fine-grained control of the program's
      behavior.</para>

    <para>When using the <command>svn</command> program, subcommands
      and other non-option arguments must appear in a specified order
      on the command line.  Options, on the other hand, may appear
      anywhere on the command line (after the program name, of
      course), and in general, their order is irrelevant.  For
      example, all of the following are valid ways to use <command>svn
      status</command>, and are interpreted in exactly the same
      way:</para>

    <informalexample>
      <screen>
$ svn -vq status myfile
$ svn status -v -q myfile
$ svn -q status -v myfile
$ svn status -vq myfile
$ svn status myfile -qv
</screen>
    </informalexample>

    <para>The following sections describe each of the various
      subcommands and options provided by the <command>svn</command>
      command-line client program, including some examples of each
      subcommand's typical uses.</para>

    <para>While Subversion has different options for its
      subcommands, all options exist in a single
      namespace&mdash;that is, each option is guaranteed to mean the
      roughly same thing regardless of the subcommand you use it
      with.  For example, <option>--verbose</option>
      (<option>-v</option>) always means <quote>verbose
      output,</quote> regardless of the subcommand you use it
      with.</para>

    <para>The <command>svn</command> command-line client usually
      exits quickly with an error if you pass it an option which
      does not apply to the specified subcommand.  But as of
      Subversion 1.5, several of the options which apply to
      all&mdash;or nearly all&mdash;of the subcommands have been
      deemed acceptable by all subcommands, even if they have no
      effect on some of them.  (This change was made primarily to
      improve the client's ability to called from custom wrapping
      scripts.)  These options appear grouped together in the
      command-line client's usage messages as global options, as can
      be seen in the following bit of output:</para>

    <informalexample>
      <screen>
$ svn help upgrade
upgrade: Upgrade the metadata storage format for a working copy.
usage: upgrade [WCPATH...]

  Local modifications are preserved.

Valid options:
  -q [--quiet]             : print nothing, or only summary information

Global options:
  --username ARG           : specify a username ARG
  --password ARG           : specify a password ARG
  --no-auth-cache          : do not cache authentication tokens
  --non-interactive        : do no interactive prompting
  --trust-server-cert      : accept SSL server certificates from unknown
                             certificate authorities without prompting (but only
                             with '--non-interactive')
  --config-dir ARG         : read user configuration files from directory ARG
  --config-option ARG      : set user configuration option in the format:
                                 FILE:SECTION:OPTION=[VALUE]
                             For example:
                                 servers:global:http-library=serf
$
</screen>
    </informalexample>

    <para><command>svn</command> subcommands recognize the following
      options:</para>
      
    <variablelist id="svn.ref.svn.sw">
      <title>svn Options</title>
      
      <varlistentry id="svn.ref.svn.sw.accept">
        <term><option>--accept</option> <replaceable>ACTION</replaceable></term>
        <listitem>
          <para>Specifies an action for automatic conflict
            resolution, disabling the interactive prompts which ask
            the user how to handle each conflict as it is noticed.
            Though which of the specific actions are applicable
            differs depending on which subcommand is in use,
            Subversion supports the following long (and short)
            values for <replaceable>ACTION</replaceable>:</para>
          <variablelist>
            <varlistentry>
              <term><literal>postpone</literal>
                (<literal>p</literal>)</term>
              <listitem>
                <para>Take no resolution action at all and instead
                  allow the conflicts to be recorded for future
                  resolution.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><literal>edit</literal>
                (<literal>e</literal>)</term>
              <listitem>
                <para>Open each conflicted file in a text editor for
                  manual resolution of line-based conflicts.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><literal>launch</literal>
                (<literal>l</literal>)</term>
              <listitem>
                <para>Launch an interactive merge conflict
                  resolution tool for each conflicted file.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><literal>base</literal></term>
              <listitem>
                <para>Choose the file that was the (unmodified)
                  <literal>BASE</literal> revision before you tried
                  to integrate changes from the server into
                  your working copy.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><literal>working</literal></term>
              <listitem>
                <para>Assuming that you've manually handled the
                  conflict resolution, choose the version of the file
                  as it currently stands in your working copy.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><literal>mine-full</literal>
                (<literal>mf</literal>)</term>
              <listitem>
                <para>Resolve conflicted files by preserving all
                  local modifications and discarding all changes
                  fetched from the server during the operation which
                  caused the conflict.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><literal>theirs-full</literal>
                (<literal>tf</literal>)</term>
              <listitem>
                <para>Resolve conflicted files by discarding all
                  local modifications and integrating all changes
                  fetched from the server during the operation which
                  caused the conflict.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><literal>mine-conflict</literal>
                (<literal>mc</literal>)</term>
              <listitem>
                <para>Resolve conflicted files by preferring local
                  modifications over the changes fetched from the
                  server in conflicting regions of each file's
                  content.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><literal>theirs-conflict</literal>
                (<literal>tc</literal>)</term>
              <listitem>
                <para>Resolve conflicted files by preferring the
                  changes fetched from the server over local
                  modifications in conflicting regions of each file's
                  content.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>Consult the output of <command>svn help
            <replaceable>SUBCOMMAND</replaceable></command> to see
            exactly which actions are supported by the specific
            subcommand of interest.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.allow_mixed_revisions">
        <term><option>--allow-mixed-revisions</option></term>
        <listitem>
          <para>Disables the verification&mdash;performed by default
            by <command>svn merge</command> as of Subversion
            1.7&mdash;that the target of a merge operation and all
            of its children are at a uniform revision.  While
            merging into a single-revision working copy target is
            the recommended best practice, this option may be used
            to permit merges into mixed-revision working copies as
            necessary.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.auto_props">
        <term><option>--auto-props</option></term>
        <listitem>
          <para>Enables automatic property assignment (per runtime
            configuration rules), overriding the
            <literal>enable-auto-props</literal> runtime
            configuration directive.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.change">
        <term><option>--change</option> (<option>-c</option>) <replaceable>ARG</replaceable></term>
        <listitem>
          <para>Perform the requested operation using a specific
            <quote>change</quote>.  Generally speaking, this option
            is syntactic sugar for <userinput>-r
            <replaceable>ARG-1</replaceable>:<replaceable>ARG</replaceable></userinput>.
            Some subcommands permit a comma-separated list of
            revision number arguments (e.g., <userinput>-c
            <replaceable>ARG1</replaceable>,<replaceable>ARG2</replaceable>,<replaceable>ARG3</replaceable></userinput>).
            Alternatively, you can provide two arguments separated
            by a dash (as
            in <userinput>-c <replaceable>ARG1</replaceable>-<replaceable>ARG2</replaceable></userinput>)
            to identify the range of revisions
            between <replaceable>ARG1</replaceable>
            and <replaceable>ARG2</replaceable>, inclusive.
            Finally, if the revision argument is negated, the
            implied revision range is reversed: <userinput>-c
            -45</userinput> is equivalent to <userinput>-r
            45:44</userinput>.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.changelist">
        <term><option>--changelist</option> (<option>--cl</option>) <replaceable>ARG</replaceable></term>
        <listitem>
          <para>Instructs Subversion to operate only on members of the changelist named
            <replaceable>ARG</replaceable>.  You can use this option
            multiple times to specify sets of changelists.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.config_dir">
        <term><option>--config-dir</option> <replaceable>DIR</replaceable></term>
        <listitem>
          <para>Instructs Subversion to read configuration
            information from the specified directory instead of the
            default location (<filename>.subversion</filename> in
            the user's home directory).</para>

          <note>
            <para>This option is accepted by
              all <command>svn</command> subcommands.</para>
          </note>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.config_option">
        <term><option>--config-option</option> <replaceable>CONFSPEC</replaceable></term>
        <listitem>
          <para>Sets, for the duration of the command, the value of
            a runtime configuration
            option.  <replaceable>CONFSPEC</replaceable> is a string
            which specifies the configuration option namespace, name
            and value that you'd like to assign, formatted as
            <replaceable>FILE</replaceable>:<replaceable>SECTION</replaceable>:<replaceable>OPTION</replaceable>=[<replaceable>VALUE</replaceable>].
            In this syntax, <replaceable>FILE</replaceable>
            and <replaceable>SECTION</replaceable> are the runtime
            configuration file (either <literal>config</literal>
            or <literal>servers</literal>) and the section thereof,
            respectively, which contain the option whose value you
            wish to change.  <replaceable>OPTION</replaceable> is,
            of course, the option itself,
            and <replaceable>VALUE</replaceable> the value (if any)
            you wish to assign to the option.  For example, to
            temporarily disable the use of the automatic property
            setting feature,
            use <option>--config-option=config:miscellany:enable-auto-props=no</option>.
            You can use this option multiple times to change
            multiple option values simultaneously.</para>

          <note>
            <para>This option is accepted by
              all <command>svn</command> subcommands.</para>
          </note>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.depth">
        <term><option>--depth</option> <replaceable>ARG</replaceable></term>
        <listitem>
          <para>Instructs Subversion to limit the scope of an
            operation to a particular tree
            depth.  <replaceable>ARG</replaceable> is one of
            <literal>empty</literal> (only the target
            itself), <literal>files</literal> (the target and any
            immediate file children thereof),
            <literal>immediates</literal> (the target and any
            immediate children thereof), or
            <literal>infinity</literal> (the target and all of its
            descendants&mdash;full recursion).</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.diff">
        <term><option>--diff</option></term>
        <listitem>
          <para>Enables a special output mode for <command>svn
            log</command> which includes a difference report (a
            la <command>svn diff</command>) as part of each
            revision's information.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.diff_cmd">
        <term><option>--diff-cmd</option> <replaceable>CMD</replaceable></term>
        <listitem>
          <para>Specifies an external program to use to show
            differences between files.  When <command>svn
            diff</command> is invoked without this option, it uses
            Subversion's internal differencing engine, which provides
            unified diffs by default.  If you want to use an
            external differencing program, use <option>--diff-cmd</option>.
            You can then pass options to the specified program using the
            <option>--extensions</option> (<option>-x</option>)
            option.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry id="svn.ref.svn.sw.diff3_cmd">
        <term><option>--diff3-cmd</option> <replaceable>CMD</replaceable></term>
        <listitem>
          <para>Specifies an external 3-way differencing program
            (used to merge line-based changes into files).</para>
        </listitem>
      </varlistentry>
    
      <varlistentry id="svn.ref.svn.sw.dry_run">
        <term><option>--dry-run</option></term>
        <listitem>
          <para>Goes through all the motions of running a command,
            but makes no actual changes&mdash;either on disk or in
            the repository.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry id="svn.ref.svn.sw.editor_cmd">
        <term><option>--editor-cmd</option> <replaceable>CMD</replaceable></term>
        <listitem>
          <para>Specifies an external program to use to edit a log message
            or a property value.  See the <literal>editor-cmd</literal>
            section in <xref linkend="svn.advanced.confarea.opts.config"/>
            for ways to specify a default editor.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry id="svn.ref.svn.sw.encoding">
        <term><option>--encoding</option> <replaceable>ENC</replaceable></term>
        <listitem>
          <para>Tells Subversion that your commit message is
            composed using the character encoding provided.  The
            default character encoding is derived from your
            operating system's native locale; use this option if
            your commit message is composed using any other
            encoding.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.extensions">
        <term><option>--extensions</option> (<option>-x</option>) <replaceable>ARG</replaceable></term>
        <listitem>
          <para>Specifies customizations which Subversion should
            make when performing difference calculations.  Valid
            extensions include:</para>
          <variablelist>
            <varlistentry>
              <term><option>--ignore-space-change</option> (<option>-b</option>)</term>
              <listitem>
                <para>Ignore changes in the amount of white space.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><option>--ignore-all-space</option> (<option>-w</option>)</term>
              <listitem>
                <para>Ignore all white space.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><option>--ignore-eol-style</option></term>
              <listitem>
                <para>Ignore changes in EOL (end-of-line) style.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><option>--show-c-function</option> (<option>-p</option>)</term>
              <listitem>
                <para>Show C function names in the diff output.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><option>--unified</option> (<option>-u</option>)</term>
              <listitem>
                <para>Show three lines of unified diff context.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>The default value of <replaceable>ARG</replaceable>
            is <literal>-u</literal>.  If you wish to pass multiple
            arguments, you must enclose all of them in quotes.</para>
          <para>Note that when Subversion is configured to invoke an
            external diff command, the value of
            the <option>--extension</option> (<option>-x</option>)
            option isn't restricted to the previously mentioned
            options, but may be <emphasis>any</emphasis> additional
            arguments which Subversion should pass to that command.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.file">
        <term><option>--file</option> (<option>-F</option>) <replaceable>FILENAME</replaceable></term>
        <listitem>
          <para>Uses the contents of the named file for the
            specified subcommand.  Different subcommands do
            different things with this content.  For example,
            <command>svn commit</command> uses the content as a
            commit log message, whereas <command>svn
            propset</command> uses it as a property value.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.force">
        <term><option>--force</option></term>
        <listitem>
          <para>Forces a particular command or operation to run.
            Subversion will prevent you from performing some
            operations in normal usage, but you can pass this option
            to tell Subversion <quote>I know what I'm doing as well
            as the possible repercussions of doing it, so let me at
            'em.</quote> This option is the programmatic equivalent
            of doing your own electrical work with the power
            on&mdash;if you don't know what you're doing, you're
            likely to get a nasty shock.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.force_log">
        <term><option>--force-log</option></term>
        <listitem>
          <para>Forces a suspicious parameter passed to the
            <option>--message</option> (<option>-m</option>) or
            <option>--file</option> (<option>-F</option>) option to
            be accepted as valid.  By default, Subversion will
            produce an error if parameters to these options look
            like they might instead be targets of the subcommand.
            For example, if you pass a versioned file's path to the
            <option>--file</option> (<option>-F</option>) option,
            Subversion will assume you've made a mistake, that the
            path was instead intended as the target of the
            operation, and that you simply failed to provide some
            other&mdash;unversioned&mdash;file as the source of your
            log message.  To assert your intent and override these
            types of errors, pass the <option>--force-log</option>
            option to subcommands that accept log messages.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.git">
        <term><option>--git</option></term>
        <listitem>
          <para>Enables a special output mode for <command>svn
            diff</command> designed for cross-compatibility with the
            popular Git distributed version control system.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.help">
        <term><option>--help</option> (<option>-h</option>, <option>-?</option>)</term>
        <listitem>
          <para>If used with one or more subcommands, shows the
            built-in help text for each.  If used alone, it displays
            the general client help text.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.ignore_ancestry">
        <term><option>--ignore-ancestry</option></term>
        <listitem>
          <para>Tells Subversion to ignore ancestry when calculating
            differences (rely on path contents alone).  Also disables
            <xref linkend="svn.branchmerge.basicmerging.mergetracking"/>
            when used with the <command>svn merge</command> subcommand.
        </para>
        </listitem>
      </varlistentry>
    
      <varlistentry id="svn.ref.svn.sw.ignore_externals">
        <term><option>--ignore-externals</option></term>
        <listitem>
          <para>Tells Subversion to ignore externals definitions and
            the external working copies managed by them.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry id="svn.ref.svn.sw.ignore_keywords">
        <term><option>--ignore-keywords</option></term>
        <listitem>
          <para>Disables keyword expansion.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.ignore_whitespace">
        <term><option>--ignore-whitespace</option></term>
        <listitem>
          <para>Instructs <command>svn patch</command> to ignore
            whitespace when attempting to identify patch
            context.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.incremental">
        <term><option>--incremental</option></term>
        <listitem>
          <para>Prints output in a format suitable for
            concatenation to prior similar output.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry id="svn.ref.svn.sw.internal_diff">
        <term><option>--internal-diff</option></term>
        <listitem>
          <para>Instructs Subversion to use its built-in
            differencing engine despite any external differencing
            mechanism that may be specified for use in the user's
            runtime configuration.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.keep_changelists">
        <term><option>--keep-changelists</option></term>
        <listitem>
          <para>Tells Subversion not to remove the changelist assigments
            from working copy items after committing.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry id="svn.ref.svn.sw.keep_local">
        <term><option>--keep-local</option></term>
        <listitem>
          <para>Keeps the local copy of a file or directory (used
            with the <command>svn delete</command> command).</para>
        </listitem>
      </varlistentry>
    
      <varlistentry id="svn.ref.svn.sw.limit">
        <term><option>--limit</option> (<option>-l</option>) <replaceable>NUM</replaceable></term>
        <listitem>
          <para>Shows only the first <replaceable>NUM</replaceable>
            log messages.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.message">
        <term><option>--message</option> (<option>-m</option>) <replaceable>MESSAGE</replaceable></term>
        <listitem>
          <para>Indicates that you will specify either a log message
            or a lock comment on the command line, following this
            option.  For example:</para>

          <informalexample>
            <screen>
$ svn commit -m "They don't make Sunday."
</screen>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.native_eol">
        <term><option>--native-eol</option> <replaceable>ARG</replaceable></term>
        <listitem>
          <para>Causes <command>svn export</command> to use a
            specific end-of-line sequence as if it was the native
            sequence for the client platform.
            <replaceable>ARG</replaceable> may be one
            of <literal>CR</literal>, <literal>LF</literal>,
            or <literal>CRLF</literal>.</para>
        </listitem>
      </varlistentry>
            
      <varlistentry id="svn.ref.svn.sw.new">
        <term><option>--new</option> <replaceable>ARG</replaceable></term>
        <listitem>
          <para>Uses <replaceable>ARG</replaceable> as the newer
            target (for use with <command>svn diff</command>).</para>
        </listitem>
      </varlistentry>
    
      <varlistentry id="svn.ref.svn.sw.no_auth_cache">
        <term><option>--no-auth-cache</option></term>
        <listitem>
          <para>Prevents caching of authentication information
            (e.g., username and password) in the Subversion runtime
            configuration directories.</para>

          <note>
            <para>This option is accepted by
              all <command>svn</command> subcommands.</para>
          </note>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.no_auto_props">
        <term><option>--no-auto-props</option></term>
        <listitem>
          <para>Disables automatic property setting, overriding the
            <literal>enable-auto-props</literal> runtime
            configuration directive.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.no_diff_deleted">
        <term><option>--no-diff-deleted</option></term>
      <listitem>
          <para>Prevents Subversion from printing differences for
            deleted files.  The default behavior when you remove a
            file is for <command>svn diff</command> to print the
            same differences that you would see if you had kept
            the file but removed all of its content.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.no_ignore">
        <term><option>--no-ignore</option></term>
        <listitem>
          <para>Shows files in the status listing or adds/imports files
            that would normally be omitted since they match a pattern
            in the <literal>global-ignores</literal> configuration
            option or the <literal>svn:ignore</literal> or
            <literal>svn:global-ignores</literal>properties.  See <xref
            linkend="svn.advanced.confarea.opts.config"/> and <xref
            linkend="svn.advanced.props.special.ignore"/> for more
            information.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.no_unlock">
        <term><option>--no-unlock</option></term>
        <listitem>
          <para>Tells Subversion not to automatically unlock files.
            (The default commit behavior is to unlock all files
            listed as part of the commit.)  See
            <xref linkend="svn.advanced.locking"/> for more
            information.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.non_interactive">
        <term><option>--non-interactive</option></term>
        <listitem>
          <para>Disables all interactive prompting.  Some examples
            of interactive prompting include requests for
            authentication credentials and conflict resolution
            decisions.  This is useful if you're running Subversion
            inside an automated script and it's more appropriate to
            have Subversion fail than to prompt for more
            information.</para>

          <note>
            <para>This option is accepted by
              all <command>svn</command> subcommands.</para>
          </note>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.non_recursive">
        <term><option>--non-recursive</option> (<option>-N</option>)</term>
        <listitem>
          <para><emphasis>Deprecated</emphasis>.  Stops a subcommand
            from recursing into subdirectories.  Most subcommands
            recurse by default, but some do not.  Users should avoid
            this option and use the more precise <option>--depth</option>
            option instead.  For most subcommands, specifying
            <option>--non-recursive</option> produces behavior which
            is the same as if you'd specified
            <option>--depth=files</option>, but there are exceptions:
            non-recursive <command>svn status</command> operates at the
            <literal>immediates</literal> depth, and the  non-recursive
            forms of <command>svn revert</command>,
            <command>svn add</command>, and <command>svn commit</command>
            operate at an <literal>empty</literal> depth.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.notice_ancestry">
        <term><option>--notice-ancestry</option></term>
        <listitem>
          <para>Pays attention to ancestry when calculating 
            differences.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.old">
        <term><option>--old</option> <replaceable>ARG</replaceable></term>
        <listitem>
          <para>Uses <replaceable>ARG</replaceable> as the older
            target (for use with <command>svn diff</command>).</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.parents">
        <term><option>--parents</option></term>
        <listitem>
          <para>Creates and adds nonexistent or nonversioned parent
            subdirectories to the working copy or repository as part
            of an operation.  This is useful for automatically
            creating multiple subdirectories where none currently
            exist.  If performed on a URL, all the directories will
            be created in a single commit.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.password">
        <term><option>--password</option> <replaceable>PASSWD</replaceable></term>
        <listitem>
          <para>Specifies the password to use when authenticating
            against a Subversion server.  If not provided, or if
            incorrect, Subversion will prompt you for this
            information as needed.</para>

          <note>
            <para>This option is accepted by
              all <command>svn</command> subcommands.</para>
          </note>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.quiet">
        <term><option>--quiet</option> (<option>-q</option>)</term>
        <listitem>
          <para>Requests that the client print only essential
            information while performing an operation.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.record_only">
        <term><option>--record-only</option></term>
        <listitem>
          <para>Enables a special mode of <command>svn
          merge</command> in which the specified merge operation is
          recorded in the local merge tracking information, but is
          not actually performed.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.recursive">
        <term><option>--recursive</option> (<option>-R</option>)</term>
        <listitem>
          <para>Makes a subcommand recurse into subdirectories.
            (Most subcommands recurse by default.)</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.reintegrate">
        <term><option>--reintegrate</option></term>
        <listitem>
          <para>Deprecated.  Used with the <command>svn merge</command>
            subcommand to merge changes from a feature branch back into
            the feature branch's ancestor branch.  Since Subversion 1.8
            the <command>svn merge</command> subcommand automatically
            detects this scenario and performs the appropriate merge.
            See
            <xref linkend="svn.branchmerge.basicmerging.reintegrate"/>
            for details.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.relocate">
        <term><option>--relocate</option></term>
        <listitem>
          <para>Deprecated.  When used with the <command>svn
            switch</command> subcommand, changes the location of the
            repository that your working copy references.  The
            preferred approach as of Subversion 1.7, however, is to
            use the <command>svn relocate</command> subcommand.  See
            <xref linkend="svn.ref.svn.c.relocate" /> for more
            details and an example.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.remove">
        <term><option>--remove</option></term>
        <listitem>
          <para>Used with <command>svn changelist</command> to
            disassociate&mdash;rather than associate (which is the
            default operation)&mdash;the target(s) from a
            changelist.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.reverse_diff">
        <term><option>--reverse-diff</option></term>
        <listitem>
          <para>Causes <command>svn patch</command> to interpret the
            input patch instructions in reverse&mdash;treating added
            lines as removed ones and vice-versa.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.revision">
        <term><option>--revision</option> (<option>-r</option>) <replaceable>REV</replaceable></term>
        <listitem>
          <para>Specifies a revision (or range of revisions) on with
            which to operate.  You can provide revision numbers,
            keywords, or dates (in curly braces) as arguments to the
            revision option.  If you wish to offer a range of
            revisions, you can provide two revisions separated by a
            colon.  For example:</para>

          <informalexample>
            <screen>
$ svn log -r 1729
$ svn log -r 1729:HEAD
$ svn log -r 1729:1744
$ svn log -r {2001-12-04}:{2002-02-17}
$ svn log -r 1729:{2002-02-17}
</screen>
          </informalexample>

          <para>See <xref linkend="svn.tour.revs.keywords"/> for more
            information.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.revprop">
        <term><option>--revprop</option></term>
        <listitem>
          <para>Operates on a revision property instead of a
            property specific to a file or directory.  This option
            requires that you also pass a revision with the
            <option>--revision</option> (<option>-r</option>)
            option.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.search">
        <term><option>--search</option> <replaceable>ARG</replaceable></term>
        <listitem>
          <para>Filters log messages to show only those that match
            the search pattern <replaceable>ARG</replaceable>.  Log
            messages are displayed only if the provided search
            pattern matches any of the author, date, log message
            text (unless <option>--quiet</option> is used), or, if
            the <option>--verbose</option> option is also provided,
            a changed path.  If multiple <option>--search</option>
            options are provided, a log message is shown if it
            matches any of the provided search patterns.  If
            <option>--limit</option> is used, it restricts the
            number of log messages searched, rather than
            restricting the output to a particular number of
            matching log messages.</para>

          <para>The search pattern may include "glob syntax"
            wildcards:</para>

          <variablelist>
            <varlistentry>
              <term>
                <literal>?</literal>
              </term>
              <listitem>
                <para>Matches any single character.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>*</literal>
              </term>
              <listitem>
                <para>Matches a sequence of arbitrary characters.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>[ABC]</literal>
              </term>
              <listitem>
                <para>Matches any of the characters listed inside the
                  brackets.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.search_and">
        <term><option>--search-and</option>
          <replaceable>ARG</replaceable></term>
        <listitem>
          <para>
            The option's argument is combined with the pattern from
            the previous <option>--search</option>
            or <option>--search-and</option> option on the command
            line.  Log message is shown only if it matches the
            combined search pattern.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.set_depth">
        <term><option>--set-depth</option> 
          <replaceable>ARG</replaceable></term>
        <listitem>
          <para>Sets the sticky depth on a directory in a working copy
            to one of <literal>exclude</literal>, <literal>empty</literal>,
            <literal>files</literal>, <literal>immediates</literal>,
            or <literal>infinity</literal>.  For detailed coverage
            of what these mean and how to use this option, see
            <xref linkend="svn.advanced.sparsedirs" />.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.show_copies_as_adds">
        <term><option>--show-copies-as-adds</option></term>
        <listitem>
          <para>Enables a special output mode for <command>svn
            diff</command> in which the content difference for a
            file created via a copy operation appears as it would
            for a brand new file (with each line therein appearing
            as an addition to an empty file) rather than as a delta
            against the original file from which the copy was
            created.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.show_inherited_props">
        <term><option>--show-inherited-props</option></term>
        <listitem>
          <para>Causes <command>svn propget</command> and <command>
            svn proplist</command> to display the versioned properties
            inherited by the target file or directory.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.show_revs">
        <term><option>--show-revs</option> <replaceable>ARG</replaceable></term>
        <listitem>
          <para>Used to make <command>svn mergeinfo</command>
            display certain classes of merge tracking
            information.  <replaceable>ARG</replaceable> may be
            either <literal>merged</literal>
            or <literal>eligible</literal>, indicating a desire to
            see revisions either already merged or eligible for future
            merge from the specified source URL, respectively.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.show_updates">
        <term><option>--show-updates</option> (<option>-u</option>)</term>
        <listitem>
          <para>Causes the client to display information about
            which files in your working copy are out of date.
            This doesn't actually update any of your
            files&mdash;it just shows you which files will be
            updated if you then use <command>svn update</command>.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.stop_on_copy">
        <term><option>--stop-on-copy</option></term>
        <listitem>
          <para>Causes a Subversion subcommand that traverses
            the history of a versioned resource to stop harvesting
            that historical information when a copy&mdash;that is, a
            location in history where that resource was copied from
            another location in the repository&mdash;is
            encountered.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.strict">
        <term><option>--strict</option></term>
        <listitem>
          <para>Causes Subversion to use strict semantics, a notion
            that is rather vague unless talking about specific
            subcommands (namely, <command>svn propget</command>).</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.strip">
        <term><option>--strip</option> <replaceable>NUM</replaceable></term>
        <listitem>
          <para>Used by <command>svn patch</command> to
            ignore <replaceable>NUM</replaceable> leading path
            components found on paths specified in the patch input
            file.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.summarize">
        <term><option>--summarize</option></term>
        <listitem>
          <para>Display only high-level summary notifications about
            the operation instead of its detailed output.</para>
        </listitem>
      </varlistentry>
       
      <varlistentry id="svn.ref.svn.sw.targets">
        <term><option>--targets</option> <replaceable>FILENAME</replaceable></term>
        <listitem>
          <para>Tells Subversion to read additional target paths for
            the operation from <replaceable>FILENAME</replaceable>.
            <replaceable>FILENAME</replaceable> should contain one
            path per line, with each path expected to use the same
            encoding and formatting that it would if you had
            specified it directly as an argument on the command
            line.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.trust_server_cert">
        <term><option>--trust-server-cert</option></term>
        <listitem>
          <para>When used with <option>--non-interactive</option>,
            instructs Subversion to accept SSL server certificates
            issued by unknown certificate authorities without first
            prompting the user.  For security's sake, you should use
            this option only when the integrity of the remote server
            and the network path between it and your client is known
            to be trustworthy.</para>

          <note>
            <para>This option is accepted by
              all <command>svn</command> subcommands.</para>
          </note>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.use_merge_history">
        <term><option>--use-merge-history</option> (<option>-g</option>)</term>
        <listitem>
          <para>Uses or displays additional information from merge
            history.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.username">
        <term><option>--username</option> <replaceable>NAME</replaceable></term>
        <listitem>
          <para>Specifies the username to use when authenticating
            against a Subversion server.  If not provided, or if
            incorrect, Subversion will prompt you for this
            information as needed.</para>

          <note>
            <para>This option is accepted by
              all <command>svn</command> subcommands.</para>
          </note>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.verbose">
        <term><option>--verbose</option> (<option>-v</option>)</term>
        <listitem>
          <para>Requests that the client print out as much
            information as it can while running any subcommand.
            This may result in Subversion printing out additional
            fields, detailed information about every file, or
            additional information regarding its actions.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.version">
        <term><option>--version</option></term>
        <listitem>
          <para>Prints the client version info.  This information
            includes not only the version number of the client, but
            also a listing of all repository access modules that the
            client can use to access a Subversion repository.
            With <option>--quiet</option> (<option>-q</option>) it
            prints only the version number in a compact form.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svn.sw.with_all_revprops">
        <term><option>--with-all-revprops</option></term>
        <listitem>
          <para>Used with the <option>--xml</option> option
          to <command>svn log</command>, instructs Subversion to
          retrieve and display all revision properties&mdash;the
          standard ones used internally by Subversion as well as any
          user-defined ones&mdash;in the log output.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.with_no_revprops">
        <term><option>--with-no-revprops</option></term>
        <listitem>
          <para>Used with the <option>--xml</option> option
          to <command>svn log</command>, instructs Subversion to
          omit all revision properties&mdash;including the standard
          log message, author, and revision datestamp&mdash;from the
          log output.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.with_revprop">
        <term><option>--with-revprop</option> <replaceable>ARG</replaceable></term>
        <listitem>
          <para>When used with any command that writes to the
            repository, sets the revision property, using the
            <replaceable>NAME=VALUE</replaceable> format,
            <replaceable>NAME</replaceable> to
            <replaceable>VALUE</replaceable>.  When used with
            <command>svn log</command> in <option>--xml</option> mode, this displays the value of
            <replaceable>ARG</replaceable> in the log output.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svn.sw.xml">
        <term><option>--xml</option></term>
        <listitem>
          <para>Prints output in XML format.  XML schemas for the
            output (in RELAX NG format) are maintained in
            the <filename>subversion/svn/schema/</filename>
            directory of the Subversion source tree.</para>
        </listitem>
      </varlistentry>
      
    </variablelist>
      
  </partintro>
    
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.add">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>add</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn add</refname>
      <refpurpose>Add files, directories, or symbolic links.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn add PATH...</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>
      
      <para>Schedule files, directories, or symbolic links in your
        working copy for addition to the repository.  They will be
        uploaded and added to the repository on your next commit.
        If you add something and change your mind before
        committing, you can unschedule the addition using
        <command>svn revert</command>.</para>
    </refsect1>
    
    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.auto_props" />
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.force" />
<xref linkend="svn.ref.svn.sw.no_auto_props" />
<xref linkend="svn.ref.svn.sw.no_ignore" />
<xref linkend="svn.ref.svn.sw.parents" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.targets" />
</screen>
      </informalexample>
    </refsect1>
    
    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>
      
      <para>To add a file to your working copy:</para>

      <informalexample>
        <screen>
$ svn add foo.c 
A         foo.c
</screen>
      </informalexample>

      <para>When adding a directory, the default behavior of
        <command>svn add</command> is to recurse:</para>

      <informalexample>
        <screen>
$ svn add testdir
A         testdir
A         testdir/a
A         testdir/b
A         testdir/c
A         testdir/d
</screen>
      </informalexample>

      <para>You can add a directory without adding its
        contents:</para>

      <informalexample>
        <screen>
$ svn add --depth=empty otherdir
A         otherdir
</screen>
      </informalexample>

      <para>Attempts to schedule the addition of an item which is
        already versioned will fail by default.  This behavior
        foils the most common scenario under which users attempt
        this: when trying to get to Subversion to recursively
        examine a versioned directory and add any unversioned
        items inside of it.  To override the default behavior and
        force Subversion to recurse into already-versioned
        directories, pass the <option>--force</option>
        option:</para>

      <informalexample>
        <screen>
$ svn add versioned-dir
svn: warning: W150002: '/home/cmpilato/projects/subversion/site' is already un\
der version control
$ svn add versioned-dir --force
A         versioned-dir/foo.c
A         versioned-dir/somedir/bar.c
A  (bin)  versioned-dir/otherdir/docs/baz.doc
&hellip;
</screen>
      </informalexample>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.blame">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>blame</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn blame (praise, annotate, ann)</refname>
      <refpurpose>Show author and revision information inline
        for the specified files or URLs.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn blame TARGET[@REV]...</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>
      
      <para>Show author and revision information inline for the
        specified files or URLs.  Each line of text is annotated
        at the beginning with the author (username) and the
        revision number for the last change to that line.</para>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.extensions" />
<xref linkend="svn.ref.svn.sw.force" />
<xref linkend="svn.ref.svn.sw.incremental" />
<xref linkend="svn.ref.svn.sw.revision" />
<xref linkend="svn.ref.svn.sw.use_merge_history" />
<xref linkend="svn.ref.svn.sw.verbose" />
<xref linkend="svn.ref.svn.sw.xml" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>If you want to see blame-annotated source for
        <filename>readme.txt</filename> in your test
        repository:</para>

      <informalexample>
        <screen>
$ svn blame http://svn.red-bean.com/repos/test/readme.txt
     3      sally This is a README file.
     5      harry Don't bother reading it.  The boss is a knucklehead.
     3      sally 
&hellip;
</screen>
      </informalexample>

      <para>Now, just because <command>svn blame</command> says
        that Harry last modified <filename>readme.txt</filename>
        in revision 5, understand that this subcommand is by
        default very picky about what constitutes a change.
        Before clubbing Harry over the head for what appears to be
        insubordination, first consider that perhaps the change he
        made to the file might have been only to its specific
        character content, not to its overall semantic meaning.
        Perhaps his changes were the result of blindly running a
        whitespace cleanup script on this file.  You might need
        to examine the specific differences and related log
        message to understand exactly what Harry did to this file
        in revision 5.</para>

      <informalexample>
        <screen>
$ svn log -c 5 http://svn.red-bean.com/repos/test/readme.txt
------------------------------------------------------------------------
r5 | harry | 2008-05-29 07:26:12 -0600 (Thu, 29 May 2008) | 1 line

Commit the results of 'double-space-after-period.sh'.

------------------------------------------------------------------------
$ svn diff -c 5 http://svn.red-bean.com/repos/test/readme.txt
Index: http://svn.red-bean.com/repos/test/readme.txt
===================================================================
--- http://svn.red-bean.com/repos/test/readme.txt	(revision 4)
+++ http://svn.red-bean.com/repos/test/readme.txt	(revision 5)
@@ -1,5 +1,5 @@
 This is a README file.
-Don't bother reading it. The boss is a knucklehead.
+Don't bother reading it.  The boss is a knucklehead.
  
 INSTRUCTIONS
 ============
$
</screen>
      </informalexample>

      <para>Sure enough, Harry only changed the whitespace in that
        line.  Fortunately, the <option>--extensions</option>
        (<option>-x</option>) option can help you better determine
        the last time that a <emphasis>meaningful</emphasis>
        change was made to a given line of text.  For example,
        here's how you can see the annotation information while
        disregarding mere whitespace changes:</para>

      <informalexample>
        <screen>
$ svn blame -x -b http://svn.red-bean.com/repos/test/readme.txt
     3      sally This is a README file.
     4       jess Don't bother reading it.  The boss is a knucklehead.
     3      sally 
&hellip;
</screen>
      </informalexample>

      <para>If you use the <option>--xml</option> option, you can
        get XML output describing the blame annotations, but not
        the contents of the lines themselves:</para>

      <informalexample>
        <screen>
$ svn blame --xml http://svn.red-bean.com/repos/test/readme.txt
&lt;?xml version="1.0"?&gt;
&lt;blame&gt;
&lt;target
   path="readme.txt"&gt;
&lt;entry
   line-number="1"&gt;
&lt;commit
   revision="3"&gt;
&lt;author&gt;sally&lt;/author&gt;
&lt;date&gt;2008-05-25T19:12:31.428953Z&lt;/date&gt;
&lt;/commit&gt;
&lt;/entry&gt;
&lt;entry
   line-number="2"&gt;
&lt;commit
   revision="5"&gt;
&lt;author&gt;harry&lt;/author&gt;
&lt;date&gt;2008-05-29T13:26:12.293121Z&lt;/date&gt;
&lt;/commit&gt;
&lt;/entry&gt;
&lt;entry
   line-number="3"&gt;
&hellip;
&lt;/entry&gt;
&lt;/target&gt;
&lt;/blame&gt;
$
</screen>
      </informalexample>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.cat">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>cat</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn cat</refname>
      <refpurpose>Output the contents of the specified files or
        URLs.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn cat TARGET[@REV]...</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>
      
      <para>Output the contents of the specified files or URLs.
        For listing the contents of directories, see <command>svn
        list</command> later in this chapter.</para>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.revision" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>If you want to view <filename>readme.txt</filename> in
        your repository without checking it out:</para>

      <informalexample>
        <screen>
$ svn cat http://svn.red-bean.com/repos/test/readme.txt
This is a README file.
Don't bother reading it.  The boss is a knucklehead.
 
INSTRUCTIONS
============

Step 1:  Do this.

Step 2:  Do that.
$
</screen>
      </informalexample>

      <para>You can view specific versions of files, too.</para>

      <informalexample>
        <screen>
$ svn cat -r 3 http://svn.red-bean.com/repos/test/readme.txt
This is a README file.
 
INSTRUCTIONS
============

Step 1:  Do this.

Step 2:  Do that.
$
</screen>
      </informalexample>

      <note>
        <para>You might develop a reflex action of
          using <command>svn cat</command> to view your working
          file contents.  But keep in mind that the default peg
          revision for <command>svn cat</command> when used on a
          working copy file target is <literal>BASE</literal>, the
          unmodified base revision of that file.  Don't be
          surprised when a simple <userinput>svn cat
          /path/to/file</userinput> invocation fails to display
          your local modifications to that file!</para>
      </note>

      <tip>
        <para>If your working copy is out of date (or you have
          local modifications) and you want to see the
          <literal>HEAD</literal> revision of a file in your
          working copy, use the <option>--revision</option>
          (<option>-r</option>) option:  <userinput>svn cat -r
          HEAD <replaceable>FILENAME</replaceable></userinput></para>
      </tip>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.changelist">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>changelist</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn changelist (cl)</refname>
      <refpurpose>Associate (or deassociate) local paths with a
        changelist.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>changelist CLNAME TARGET...</literal></para>
      <para><literal>changelist --remove TARGET...</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>
      
      <para>Used for dividing files in a working copy into a
        changelist (logical named grouping) in order to allow
        users to easily work on multiple file collections within a
        single working copy.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.changelist" />
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.recursive" />
<xref linkend="svn.ref.svn.sw.remove" />
<xref linkend="svn.ref.svn.sw.targets" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Example</title>

      <para>Edit three files, add them to a changelist, then
        commit only files in that changelist:</para>

      <informalexample>
        <screen>
$ svn changelist issue1729 foo.c bar.c baz.c
A [issue1729] foo.c
A [issue1729] bar.c
A [issue1729] baz.c
$ svn status
A       someotherfile.c
A       test/sometest.c

--- Changelist 'issue1729':
A       foo.c
A       bar.c
A       baz.c
$ svn commit --changelist issue1729 -m "Fixing Issue 1729."
Adding         bar.c
Adding         baz.c
Adding         foo.c
Transmitting file data ...
Committed revision 2.
$ svn status
A       someotherfile.c
A       test/sometest.c
$
</screen>
      </informalexample>

      <para>Note that in the previous example, only the files in
        changelist <literal>issue1729</literal> were
        committed.</para>
      
    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.checkout">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>checkout</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn checkout (co)</refname>
      <refpurpose>Check out a working copy from a repository.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn checkout URL[@REV]... [PATH]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>
      
      <para>Check out a working copy from a repository.  If
        <replaceable>PATH</replaceable> is omitted, the
        basename of the URL will be used as the destination.
        If multiple URLs are given, each will be checked out into a
        subdirectory of <replaceable>PATH</replaceable>, with the
        name of the subdirectory being the basename of the
        URL.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.force" />
<xref linkend="svn.ref.svn.sw.ignore_externals" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.revision" />
</screen>
      </informalexample>
    </refsect1>
    
    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Check out a working copy into a directory called
        <filename>mine</filename>:</para>

      <informalexample>
        <screen>
$ svn checkout file:///var/svn/repos/test mine
A    mine/a
A    mine/b
A    mine/c
A    mine/d
Checked out revision 20.
$ ls
mine
$
</screen>
      </informalexample>

      <para>Check out two different directories into two separate
        working copies:</para>

      <informalexample>
        <screen>
$ svn checkout file:///var/svn/repos/test \
               file:///var/svn/repos/quiz
A    test/a
A    test/b
A    test/c
A    test/d
Checked out revision 20.
A    quiz/l
A    quiz/m
Checked out revision 13.
$ ls
quiz  test
$
</screen>
      </informalexample>

      <para>Check out two different directories into two separate
        working copies, but place both into a directory called
        <filename>working-copies</filename>:</para>

      <informalexample>
        <screen>
$ svn checkout file:///var/svn/repos/test \
               file:///var/svn/repos/quiz \
               working-copies
A    working-copies/test/a
A    working-copies/test/b
A    working-copies/test/c
A    working-copies/test/d
Checked out revision 20.
A    working-copies/quiz/l
A    working-copies/quiz/m
Checked out revision 13.
$ ls
working-copies
</screen>
      </informalexample>

      <para>If you interrupt a checkout (or something else
        interrupts your checkout, such as loss of connectivity,
        etc.), you can restart it either by issuing the identical
        checkout command again or by updating the incomplete
        working copy:</para>

      <informalexample>
        <screen>
$ svn checkout file:///var/svn/repos/test mine
A    mine/a
A    mine/b
^C
svn: E200015: Caught signal
$ svn checkout file:///var/svn/repos/test mine
A    mine/c
^C
svn: E200015: Caught signal
$ svn update mine
Updating 'mine':
A    mine/d
Updated to revision 20.
$
</screen>
      </informalexample>

      <para>If you wish to check out some revision other than the
        most recent one, you can do so by providing the
        <option>--revision</option> (<option>-r</option>) option
        to the <command>svn checkout</command> command:</para>

      <informalexample>
        <screen>
$ svn checkout -r 2 file:///var/svn/repos/test mine
A    mine/a
Checked out revision 2.
$
</screen>
      </informalexample>

      <para>Prior to version 1.7, Subversion would complain by
        default if you try to check out a directory atop an
        existing directory which contains files or subdirectories
        that the checkout itself would have created.  Subversion
        1.7 handles this situation differently, allowing the
        checkout to proceed but marking any obstructing objects as
        tree conflicts.  Use the <option>--force</option> option
        to override this safeguard.  When you check out with
        the <option>--force</option> option, any unversioned file
        in the checkout target tree which ordinarily would
        obstruct the checkout will still become versioned, but
        Subversion will preserve its contents as-is.  If those
        contents differ from the repository file at that path
        (which was downloaded as part of the checkout), the file
        will appear to have local modifications&mdash;the changes
        required to transform the versioned file you checked out
        into the unversioned file you had before checking
        out&mdash;when the checkout completes.</para>

      <informalexample>
        <screen>
$ mkdir project
$ mkdir project/lib
$ touch project/lib/file.c
$ svn checkout file:///var/svn/repos/project/trunk project --force
E    project/lib
A    project/lib/subdir
E    project/lib/file.c
A    project/lib/anotherfile.c
A    project/include/header.h
Checked out revision 21.
$ svn status wc
M       project/lib/file.c
$ svn diff wc
Index: project/lib/file.c
===================================================================
--- project/lib/file.c	(revision 1)
+++ project/lib/file.c	(working copy)
@@ -3 +0,0 @@
-/* file.c: Code for acting file-ishly. */
-#include &lt;stdio.h&gt;
-/* Not feeling particularly creative today. */

$
</screen>
      </informalexample>

      <para>As in another other working copy, you have the choices
        typically available:  reverting some or all of those
        local <quote>modifications</quote>, committing them, or
        continuing to modify your working copy.</para>

      <para>This feature is especially useful for performing
        in-place imports of unversioned directory trees.  By first
        importing the tree into the repository, and then checking
        out new repository location atop the unversioned tree with
        the <option>--force</option> option, you effectively
        transform the unversioned tree into a working
        copy.</para>

      <informalexample>
        <screen>
$ svn mkdir -m "Create newproject project root." \
      file://var/svn/repos/newproject
$ svn import -m "Import initial newproject codebase." newproject \
      file://var/svn/repos/newproject/trunk
Adding         newproject/include
Adding         newproject/include/newproject.h
Adding         newproject/lib
Adding         newproject/lib/helpers.c
Adding         newproject/lib/base.c
Adding         newproject/notes
Adding         newproject/notes/README

Committed revision 22.
$ svn checkout file://`pwd`/repos-1.6/newproject/trunk newproject --force
E    newproject/include
E    newproject/include/newproject.h
E    newproject/lib
E    newproject/lib/helpers.c
E    newproject/lib/base.c
E    newproject/notes
E    newproject/notes/README
Checked out revision 2.
$ svn status newproject
$
</screen>
      </informalexample>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.cleanup">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>cleanup</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn cleanup</refname>
      <refpurpose>Recursively clean up the working copy</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn cleanup [PATH...]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>Recursively clean up the working copy, removing
        working copy locks and resuming unfinished operations.  If
        you ever get a <literal>working copy locked</literal>
        error, run this command to remove stale locks and get your
        working copy into a usable state again.</para>

      <para>If, for some reason, an <command>svn update</command>
        fails due to a problem running an external diff program
        (e.g., user input or network failure), pass the
        <option>--diff3-cmd</option> to allow the cleanup process
        to complete any required merging using your external diff
        program.  You can also specify any configuration directory
        with the <option>--config-dir</option> option, but you
        should need these options extremely infrequently.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.diff3_cmd" />
</screen>
      </informalexample>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Well, there's not much to the examples here, as
        <command>svn cleanup</command> generates no output.  If
        you pass no <replaceable>PATH</replaceable>, then
        <quote><filename>.</filename></quote> is used:</para>

      <informalexample>
        <screen>
$ svn cleanup
$ svn cleanup /var/svn/working-copy
</screen>
      </informalexample>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.commit">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>commit</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn commit (ci)</refname>
      <refpurpose>Send changes from your working copy to the repository.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn commit [PATH...]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>Send changes from your working copy to the repository.
        If you do not supply a log message with your commit by
        using either the <option>--file</option>
        (<option>-F</option>) or <option>--message</option>
        (<option>-m</option>) option,
        <command>svn</command> will launch your editor for you
        to compose a commit message.  See the
        <literal>editor-cmd</literal> list entry in <xref
        linkend="svn.advanced.confarea.opts.config"/>.</para>

      <para><command>svn commit</command> will send any lock
        tokens that it finds and will release locks on all
        <replaceable>PATH</replaceable>s committed (recursively)
        unless <option>--no-unlock</option> is passed.</para>

      <tip>
        <para>If you begin a commit and Subversion launches your
          editor to compose the commit message, you can still
          abort without committing your changes.  If you want to
          cancel your commit, just quit your editor without saving
          your commit message and Subversion will prompt you to
          either abort the commit, continue with no message, or
          edit the message again.</para>
      </tip>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.changelist" />
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.editor_cmd" />
<xref linkend="svn.ref.svn.sw.encoding" />
<xref linkend="svn.ref.svn.sw.file" />
<xref linkend="svn.ref.svn.sw.force_log" />
<xref linkend="svn.ref.svn.sw.keep_changelists" />
<xref linkend="svn.ref.svn.sw.message" />
<xref linkend="svn.ref.svn.sw.no_unlock" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.targets" />
<xref linkend="svn.ref.svn.sw.with_revprop" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Commit a simple modification to a file with the
        commit message on the command line and an implicit
        target of your current directory
        (<quote><filename>.</filename></quote>):</para>

      <informalexample>
        <screen>
$ svn commit -m "added howto section."
Sending        a
Transmitting file data .
Committed revision 3.
</screen>
      </informalexample>

      <para>Commit a modification to the file
        <filename>foo.c</filename> (explicitly specified on the
        command line) with the commit message in a file named
        <filename>msg</filename>:</para>

      <informalexample>
        <screen>
$ svn commit -F msg foo.c
Sending        foo.c
Transmitting file data .
Committed revision 5.
</screen>
      </informalexample>

      <para>If you want to use a file that's under version control
        for your commit message with <option>--file</option>
        (<option>-F</option>), you need to pass the
        <option>--force-log</option> option:</para>

      <informalexample>
        <screen>
$ svn commit -F file_under_vc.txt foo.c
svn: E205004: Log message file is a versioned file; use '--force-log' to override

$ svn commit --force-log -F file_under_vc.txt foo.c
Sending        foo.c
Transmitting file data .
Committed revision 6.
</screen>
      </informalexample>

      <para>To commit a file scheduled for deletion:</para>

      <informalexample>
        <screen>
$ svn commit -m "removed file 'c'."
Deleting       c

Committed revision 7.
</screen>
      </informalexample>
      
    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.copy">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>copy</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn copy (cp)</refname>
      <refpurpose>Copy a file or directory in a working copy or
        in the repository.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn copy SRC[@REV]... DST</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>
      
      <para>Copy one or more files in a working copy or in the
        repository. <replaceable>SRC</replaceable> and
        <replaceable>DST</replaceable> can each be either a
        working copy (WC) path or URL.  When copying multiple
        sources, add the copies as immediate children
        of <replaceable>DST</replaceable> (which, of course, must
        be a directory).</para>
        
        <variablelist>

          <varlistentry>
            <term>WC &rarr; WC</term>
            <listitem>
              <para>Copy and schedule an item for
                addition (with history).</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>WC &rarr; URL</term>
            <listitem>
              <para>Immediately commit a copy of WC to URL.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>URL &rarr; WC</term>
            <listitem>
              <para>Check out URL into WC and schedule it for
                addition.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>URL &rarr; URL</term>
            <listitem>
              <para>Complete server-side copy.  This is
                usually used to branch and tag.</para>
            </listitem>
          </varlistentry>

        </variablelist>

      <para>If no peg revision (i.e.,
        <replaceable>@REV</replaceable>) is supplied, by default
        the <literal>BASE</literal> revision will be used for
        files copied from the working copy, while the
        <literal>HEAD</literal> revision will be used for files
        copied from a URL.</para>

      <note>
        <para>You can only copy files within a single repository.
          Subversion does not support cross-repository copying.</para>
      </note>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.editor_cmd" />
<xref linkend="svn.ref.svn.sw.encoding" />
<xref linkend="svn.ref.svn.sw.file" />
<xref linkend="svn.ref.svn.sw.force_log" />
<xref linkend="svn.ref.svn.sw.ignore_externals" />
<xref linkend="svn.ref.svn.sw.message" />
<xref linkend="svn.ref.svn.sw.parents" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.revision" />
<xref linkend="svn.ref.svn.sw.with_revprop" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Copy an item within your working copy (this
        schedules the copy&mdash;nothing goes into the repository
        until you commit):</para>

      <informalexample>
        <screen>
$ svn copy foo.txt bar.txt
A         bar.txt
$ svn status
A  +    bar.txt
</screen>
      </informalexample>

      <para>Copy several files in a working copy into a
        subdirectory:</para>

      <informalexample>
        <screen>
$ svn copy bat.c baz.c qux.c src
A         src/bat.c
A         src/baz.c
A         src/qux.c
</screen>
      </informalexample>

      <para>Copy revision 8 of <filename>bat.c</filename> into your
        working copy under a different name:</para>

      <informalexample>
        <screen>
$ svn copy -r 8 bat.c ya-old-bat.c
A         ya-old-bat.c
</screen>
      </informalexample>

      <para>Copy an item in your working copy to a URL in the
        repository (this is an immediate commit, so you must supply a
        commit message):</para>

      <informalexample>
        <screen>
$ svn copy near.txt file:///var/svn/repos/test/far-away.txt -m "Remote copy."

Committed revision 8.
</screen>
      </informalexample>

      <para>Copy an item from the repository to your working
        copy (this just schedules the copy&mdash;nothing goes into the
        repository until you commit):</para>

      <informalexample>
        <screen>
$ svn copy file:///var/svn/repos/test/far-away -r 6 near-here
A         near-here
</screen>
      </informalexample>

      <tip>
        <para>This is the recommended way to resurrect a dead
          file in your repository!</para>
      </tip>

      <para>And finally, copy between two URLs:</para>

      <informalexample>
        <screen>
$ svn copy file:///var/svn/repos/test/far-away \
           file:///var/svn/repos/test/over-there -m "remote copy."

Committed revision 9.
</screen>
      </informalexample>

      <informalexample>
        <screen>
$ svn copy file:///var/svn/repos/test/trunk \
           file:///var/svn/repos/test/tags/0.6.32-prerelease -m "tag tree"

Committed revision 12.
</screen>
      </informalexample>

      <tip>
        <para>This is the easiest way to <quote>tag</quote> a
          revision in your repository&mdash;just <command>svn
          copy</command> that revision (usually
          <literal>HEAD</literal>) into your <filename>tags</filename> directory.</para>
      </tip>

      <para>And don't worry if you forgot to tag&mdash;you can
        always specify an older revision and tag anytime:</para>

      <informalexample>
        <screen>
$ svn copy -r 11 file:///var/svn/repos/test/trunk \
           file:///var/svn/repos/test/tags/0.6.32-prerelease \
           -m "Forgot to tag at rev 11"

Committed revision 13.
</screen>
      </informalexample>
    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.delete">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>delete</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn delete (del, remove, rm)</refname>
      <refpurpose>Delete an item from a working copy
        or the repository.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn delete PATH...</literal></para>
      <para><literal>svn delete URL...</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>Items specified by <replaceable>PATH</replaceable> are
        scheduled for deletion upon the next commit.  Files (and
        directories that have not been committed) are immediately
        removed from the working copy unless the
        <option>--keep-local</option> option is given.  The
        command will not remove any unversioned or modified items;
        use the <option>--force</option> option to override this
        behavior.</para>

      <para>Items specified by URL are deleted from
        the repository via an immediate commit.  Multiple URLs are
        committed atomically.</para>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.editor_cmd" />
<xref linkend="svn.ref.svn.sw.encoding" />
<xref linkend="svn.ref.svn.sw.file" />
<xref linkend="svn.ref.svn.sw.force" />
<xref linkend="svn.ref.svn.sw.force_log" />
<xref linkend="svn.ref.svn.sw.keep_local" />
<xref linkend="svn.ref.svn.sw.message" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.targets" />
<xref linkend="svn.ref.svn.sw.with_revprop" />
</screen>
      </informalexample>
    </refsect1>
    
    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Using <command>svn</command> to delete a file from
        your working copy deletes your local copy of the file, but
        it merely schedules the file to be deleted from the
        repository.  When you commit, the file is deleted in the
        repository.</para>

      <informalexample>
        <screen>
$ svn delete myfile
D         myfile

$ svn commit -m "Deleted file 'myfile'."
Deleting       myfile
Transmitting file data .
Committed revision 14.
</screen>
      </informalexample>

      <para>Deleting a URL, however, is immediate, so you have
        to supply a log message:</para>

      <informalexample>
        <screen>
$ svn delete -m "Deleting file 'yourfile'" \
             file:///var/svn/repos/test/yourfile

Committed revision 15.
</screen>
      </informalexample>

      <para>Here's an example of how to force deletion of a file
        that has local mods:</para>

      <informalexample>
        <screen>
$ svn delete over-there 
svn: E195006: Use --force to override this restriction (local modifications m\
ay be lost)
svn: E195006: '/home/sally/project/over-there' has local modifications -- com\
mit or revert them first
$ svn delete --force over-there 
D         over-there
$
</screen>
      </informalexample>

      <para>Use the <option>--keep-local</option> option to
        override the default <command>svn delete</command>
        behavior of also removing the target file that was
        scheduled for versioned deletion.  This is helpful when
        you realize that you've accidentally committed the
        addition of a file that you need to keep around in your
        working copy, but which shouldn't have been added to
        version control.</para>

      <informalexample>
        <screen>
$ svn delete --keep-local conf/program.conf
D         conf/program.conf

$ svn commit -m "Remove accidentally-added configuration file."
Deleting       conf/program.conf
Transmitting file data .
Committed revision 21.
$ svn status
?       conf/program.conf
$
</screen>
      </informalexample>

      <note>
        <para>The behavior of the <option>--keep-local</option>
          option does not propagate to other working copies which
          contain the items you've scheduled for deletion.  If you
          commit the deletion of those items they will remain in
          your working copy, but they will be deleted from other
          working copies which contain them when those working
          copies are then updated.</para>
      </note>
      
    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.diff">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>diff</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn diff (di)</refname>
      <refpurpose>This displays the differences between two revisions or paths.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>diff [-c M | -r N[:M]] [TARGET[@REV]...]</literal></para>
      <para><literal>diff [-r N[:M]] --old=OLD-TGT[@OLDREV] [--new=NEW-TGT[@NEWREV]] [PATH...]</literal></para>
      <para><literal>diff OLD-URL[@OLDREV] NEW-URL[@NEWREV]</literal></para>

    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>Display the differences between two paths.  You can
        use <command>svn diff</command> in the following ways:</para>

      <itemizedlist>

        <listitem>
          <para>Use just <command>svn diff</command> to display local
            modifications in a working copy.</para>
        </listitem>

        <listitem>
          <para>Display the changes made to
            <replaceable>TARGET</replaceable>s as they are seen in
            <replaceable>REV</replaceable> between two revisions.
            <replaceable>TARGET</replaceable>s may be all working copy
            paths or all <replaceable>URL</replaceable>s.  If
            <replaceable>TARGET</replaceable>s are working copy paths,
            <replaceable>N</replaceable> defaults to
            <literal>BASE</literal> and <replaceable>M</replaceable>
            to the working copy; if <replaceable>TARGET</replaceable>s
            are <replaceable>URL</replaceable>s,
            <replaceable>N</replaceable> must be specified and
            <replaceable>M</replaceable> defaults to
            <literal>HEAD</literal>.  The <literal>-c M</literal> option
            is equivalent to <literal>-r N:M</literal> where <literal>N =
            M-1</literal>.  Using <literal>-c -M</literal> does the
            reverse: <literal>-r M:N</literal> where <literal>N =
            M-1</literal>.</para>
        </listitem>

        <listitem>
          <para>Display the differences between
            <replaceable>OLD-TGT</replaceable> as it was seen in
            <replaceable>OLDREV</replaceable> and
            <replaceable>NEW-TGT</replaceable> as it was seen in
            <replaceable>NEWREV</replaceable>.
            <replaceable>PATH</replaceable>s, if given, are relative
            to <replaceable>OLD-TGT</replaceable> and
            <replaceable>NEW-TGT</replaceable> and restrict the output
            to differences for those paths.
            <replaceable>OLD-TGT</replaceable> and
            <replaceable>NEW-TGT</replaceable> may be working copy
            paths or <replaceable>URL[@REV]</replaceable>.
            <replaceable>NEW-TGT</replaceable> defaults to
            <replaceable>OLD-TGT</replaceable> if not specified.
            <literal>-r N</literal>
            makes <replaceable>OLDREV</replaceable> default to
            <literal>N</literal>; <literal>-r N:M</literal>
            makes <replaceable>OLDREV</replaceable> default to
            <replaceable>N</replaceable> and
            <replaceable>NEWREV</replaceable> default to
            <replaceable>M</replaceable>.</para>
        </listitem>

      </itemizedlist>

      <para><userinput>svn diff OLD-URL[@OLDREV]
        NEW-URL[@NEWREV]</userinput> is shorthand for <userinput>svn
        diff --old=OLD-URL[@OLDREV]
        --new=NEW-URL[@NEWREV].</userinput></para>

      <para><userinput>svn diff -r N:M URL</userinput> is shorthand
        for <userinput>svn diff -r N:M --old=URL
        --new=URL</userinput>.</para>

      <para><userinput>svn diff [-r N[:M]] URL1[@N]
        URL2[@M]</userinput> is shorthand for <userinput>svn diff [-r
        N[:M]] --old=URL1 --new=URL2</userinput>.</para>

      <para>If <replaceable>TARGET</replaceable> is a URL, then
        revs <literal>N</literal> and <literal>M</literal> can be
        given either via the
        <option>--revision</option> (<option>-r</option>) option
        or by using the
        <quote>@</quote> notation as described earlier.</para>

      <para>If <replaceable>TARGET</replaceable> is a working copy
        path, the default behavior (when no
        <option>--revision</option> (<option>-r</option>) option
        is provided) is to display the differences between the
        base and working copies
        of <replaceable>TARGET</replaceable>.  If a
        <option>--revision</option> (<option>-r</option>) option
        is specified in this scenario, though, it means:</para>

      <variablelist>

        <varlistentry>
          <term><option>--revision N:M</option></term>
          <listitem>
            <para>The server compares <replaceable>TARGET@N</replaceable>
              and <replaceable>TARGET@M</replaceable>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--revision N</option></term>
          <listitem>
            <para>The client compares
              <replaceable>TARGET@N</replaceable>
              against the working copy.</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>If the alternate syntax is used, the server compares
        <replaceable>URL1</replaceable> and
        <replaceable>URL2</replaceable> at revisions
        <replaceable>N</replaceable> and
        <replaceable>M</replaceable>, respectively.  If either
        <replaceable>N</replaceable> or
        <replaceable>M</replaceable> is omitted, a value of
        <literal>HEAD</literal> is assumed.</para>

      <para>By default, <command>svn diff</command> ignores the
        ancestry of files and merely compares the contents of the
        two files being compared.  If you use
        <option>--notice-ancestry</option>, the ancestry of the
        paths in question will be taken into consideration when
        comparing revisions (i.e., if you run <command>svn
        diff</command> on two files with identical contents but
        different ancestry, you will see the entire contents of
        the file as having been removed and added again).</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.change" />
<xref linkend="svn.ref.svn.sw.changelist" />
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.diff_cmd" />
<xref linkend="svn.ref.svn.sw.extensions" />
<xref linkend="svn.ref.svn.sw.force" />
<xref linkend="svn.ref.svn.sw.git" />
<xref linkend="svn.ref.svn.sw.internal_diff" />
<xref linkend="svn.ref.svn.sw.new" />
<xref linkend="svn.ref.svn.sw.no_diff_deleted" />
<xref linkend="svn.ref.svn.sw.notice_ancestry" />
<xref linkend="svn.ref.svn.sw.old" />
<xref linkend="svn.ref.svn.sw.revision" />
<xref linkend="svn.ref.svn.sw.show_copies_as_adds" />
<xref linkend="svn.ref.svn.sw.summarize" />
<xref linkend="svn.ref.svn.sw.xml" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Compare <literal>BASE</literal> and your working copy
        (one of the most popular uses of <command>svn
        diff</command>):</para>

      <informalexample>
        <screen>
$ svn diff COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 4404)
+++ COMMITTERS	(working copy)
&hellip;
</screen>
      </informalexample>

      <para>See what changed in the file
        <filename>COMMITTERS</filename> revision 9115:</para>

      <informalexample>
        <screen>
$ svn diff -c 9115 COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3900)
+++ COMMITTERS	(working copy)
&hellip;
</screen>
      </informalexample>


      <para>See how your working copy's modifications compare
        against an older revision:</para>

      <informalexample>
        <screen>
$ svn diff -r 3900 COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3900)
+++ COMMITTERS	(working copy)
&hellip;
</screen>
      </informalexample>

      <para>Compare revision 3000 to revision 3500 using <quote>@</quote>
        syntax:</para>

      <informalexample>
        <screen>
$ svn diff http://svn.collab.net/repos/svn/trunk/COMMITTERS@3000 \
           http://svn.collab.net/repos/svn/trunk/COMMITTERS@3500
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3000)
+++ COMMITTERS	(revision 3500)
&hellip;
</screen>
      </informalexample>

      <para>Compare revision 3000 to revision 3500 using range
        notation (pass only the one URL in this
        case):</para>

      <informalexample>
        <screen>
$ svn diff -r 3000:3500 http://svn.collab.net/repos/svn/trunk/COMMITTERS
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3000)
+++ COMMITTERS	(revision 3500)
&hellip;
</screen>
      </informalexample>


      <para>Compare revision 3000 to revision 3500 of all the files in
        <filename>trunk</filename> using range notation:</para>

      <informalexample>
        <screen>
$ svn diff -r 3000:3500 http://svn.collab.net/repos/svn/trunk
</screen>
      </informalexample>


      <para>Compare revision 3000 to revision 3500 of only three
        files in <filename>trunk</filename> using range
        notation:</para>

      <informalexample>
        <screen>
$ svn diff -r 3000:3500 --old http://svn.collab.net/repos/svn/trunk \
       COMMITTERS README HACKING
</screen>
      </informalexample>

      <para>If you have a working copy, you can obtain the
        differences without typing in the long URLs:</para>

      <informalexample>
        <screen>
$ svn diff -r 3000:3500 COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3000)
+++ COMMITTERS	(revision 3500)
&hellip;
</screen>
      </informalexample>

      <para>Use <option>--diff-cmd</option>
        <replaceable>CMD</replaceable> <option>--extensions</option>
        (<option>-x</option>) to pass arguments directly to the
        external diff program:</para>

      <informalexample>
        <screen>
$ svn diff --diff-cmd /usr/bin/diff -x "-i -b" COMMITTERS 
Index: COMMITTERS
===================================================================
0a1,2
&gt; This is a test
&gt; 
$
</screen>
      </informalexample>

      <para>Lastly, you can use the <option>--xml</option> option
        along with the <option>--summarize</option> option to view
        XML describing the changes that occurred between
        revisions, but not the contents of the diff itself:</para>

      <informalexample>
        <screen>
$ svn diff --summarize --xml http://svn.red-bean.com/repos/test@r2 \
           http://svn.red-bean.com/repos/test
&lt;?xml version="1.0"?&gt;
&lt;diff&gt;
&lt;paths&gt;
&lt;path
   props="none"
   kind="file"
   item="modified"&gt;http://svn.red-bean.com/repos/test/sandwich.txt&lt;/path&gt;
&lt;path
   props="none"
   kind="file"
   item="deleted"&gt;http://svn.red-bean.com/repos/test/burrito.txt&lt;/path&gt;
&lt;path
   props="none"
   kind="dir"
   item="added"&gt;http://svn.red-bean.com/repos/test/snacks&lt;/path&gt;
&lt;/paths&gt;
&lt;/diff&gt;
</screen>
      </informalexample>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.export">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>export</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn export</refname>
      <refpurpose>Export a clean directory tree.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn export [-r REV] URL[@PEGREV] [PATH]</literal></para>
      <para><literal>svn export [-r REV] PATH1[@PEGREV] [PATH2]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>The first form exports a clean directory tree from the
        repository specified by <replaceable>URL</replaceable>&mdash;at revision
        <replaceable>REV</replaceable> if it is given; otherwise,
        at <literal>HEAD</literal>, into
        <replaceable>PATH</replaceable>.  If
        <replaceable>PATH</replaceable> is omitted, the last
        component of the <replaceable>URL</replaceable> is used
        for the local directory name.</para>

      <para>The second form exports a clean directory tree from
        the working copy specified by
        <replaceable>PATH1</replaceable> into
        <replaceable>PATH2</replaceable>.  All local changes will
        be preserved, but files not under version control will not
        be copied.</para>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.force" />
<xref linkend="svn.ref.svn.sw.ignore_externals" />
<xref linkend="svn.ref.svn.sw.ignore_keywords" />
<xref linkend="svn.ref.svn.sw.native_eol" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.revision" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Export from your working copy (doesn't print every
        file and directory):</para>

      <informalexample>
        <screen>
$ svn export a-wc my-export
Export complete.
</screen>
      </informalexample>

      <para>Export directly from the repository (prints every
        file and directory):</para>

      <informalexample>
        <screen>
$ svn export file:///var/svn/repos my-export
A    my-export/test
A    my-export/quiz
&hellip;
Exported revision 15.
</screen>
      </informalexample>

      <para>When rolling operating-system-specific release
        packages, it can be useful to export a tree that uses a
        specific EOL character for line endings.  The
        <option>--native-eol</option> option will do this, but it
        affects only files that have <literal>svn:eol-style =
        native</literal> properties attached to them.  For
        example, to export a tree with all CRLF line endings
        (possibly for a Windows <filename>.zip</filename> file
        distribution):</para>

      <informalexample>
        <screen>
$ svn export file:///var/svn/repos my-export --native-eol CRLF
A    my-export/test
A    my-export/quiz
&hellip;
Exported revision 15.
</screen>
      </informalexample>

      <para>You can specify <literal>LR</literal>,
        <literal>CR</literal>, or <literal>CRLF</literal> as a
        line-ending type with the <option>--native-eol</option>
        option.</para>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.help">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>help</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn help (h, ?)</refname>
      <refpurpose>Help!</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn help [SUBCOMMAND...]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>This is your best friend when you're using
        Subversion and this book isn't within reach!</para>

    </refsect1>
    
    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>
      <para>None</para>
    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.import">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>import</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn import</refname>
      <refpurpose>Commit an unversioned file or tree into the 
        repository.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn import [PATH] URL</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>Recursively commit a copy of
        <replaceable>PATH</replaceable> to
        <replaceable>URL</replaceable>.  If
        <replaceable>PATH</replaceable> is omitted,
        <quote><filename>.</filename></quote> is assumed.  Parent
        directories are created in the repository as necessary.
        Unversionable items such as device files and pipes are
        ignored even if <option>--force</option> is
        specified.</para>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.auto_props" />
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.editor_cmd" />
<xref linkend="svn.ref.svn.sw.encoding" />
<xref linkend="svn.ref.svn.sw.file" />
<xref linkend="svn.ref.svn.sw.force" />
<xref linkend="svn.ref.svn.sw.force_log" />
<xref linkend="svn.ref.svn.sw.message" />
<xref linkend="svn.ref.svn.sw.no_auto_props" />
<xref linkend="svn.ref.svn.sw.no_ignore" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.with_revprop" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>This imports the local directory
        <filename>myproj</filename> into
        <filename>trunk/misc</filename> in your repository.  The
        directory <filename>trunk/misc</filename> need not exist
        before you import into it&mdash;<command>svn
        import</command> will recursively create directories for
        you.</para>

      <informalexample>
        <screen>
$ svn import -m "New import" myproj \
             http://svn.red-bean.com/repos/trunk/misc
Adding         myproj/sample.txt
&hellip;
Transmitting file data .........
Committed revision 16.
</screen>
      </informalexample>

      <para>Be aware that this will <emphasis>not</emphasis>
        create a directory named <filename>myproj</filename> in
        the repository.  If that's what you want, simply add
        <filename>myproj</filename> to the end of the URL:</para>

      <informalexample>
        <screen>
$ svn import -m "New import" myproj \
            http://svn.red-bean.com/repos/trunk/misc/myproj
Adding         myproj/sample.txt
&hellip;
Transmitting file data .........
Committed revision 16.
</screen>
      </informalexample>

      <para>After importing data, note that the original tree is
        <emphasis>not</emphasis> under version control.  To start
        working, you still need to <command>svn checkout</command>
        a fresh working copy of the tree.</para>
      
    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.info">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>info</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn info</refname>
      <refpurpose>Display information about a local or remote 
        item.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn info [TARGET[@REV]...]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>Print information about the working copy paths or URLs
        specified.  The information displayed for each path may
        include (as pertinent to the object at that path):</para>

      <itemizedlist>
        <listitem><para>information about the repository in which
          the object is versioned</para></listitem>
        <listitem><para>the most recent commit made to the
          specified version of the object</para></listitem>
        <listitem><para>any user-level locks held on the
          object</para></listitem>
        <listitem><para>local scheduling information (added,
          deleted, copied, etc.)</para></listitem>
        <listitem><para>local conflict information</para></listitem>
      </itemizedlist>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.changelist" />
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.incremental" />
<xref linkend="svn.ref.svn.sw.recursive" />
<xref linkend="svn.ref.svn.sw.revision" />
<xref linkend="svn.ref.svn.sw.targets" />
<xref linkend="svn.ref.svn.sw.xml" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para><command>svn info</command> will show you all the
        useful information that it has for items in your working
        copy.  It will show information for files:</para>

      <informalexample>
        <screen>
$ svn info foo.c
Path: foo.c
Name: foo.c
Working Copy Root Path: /home/sally/projects/test
URL: http://svn.red-bean.com/repos/test/foo.c
Repository Root: http://svn.red-bean.com/repos/test
Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25
Revision: 4417
Node Kind: file
Schedule: normal
Last Changed Author: sally
Last Changed Rev: 20
Last Changed Date: 2003-01-13 16:43:13 -0600 (Mon, 13 Jan 2003)
Text Last Updated: 2003-01-16 21:18:16 -0600 (Thu, 16 Jan 2003)
Properties Last Updated: 2003-01-13 21:50:19 -0600 (Mon, 13 Jan 2003)
Checksum: d6aeb60b0662ccceb6bce4bac344cb66
</screen>
      </informalexample>

      <para>It will also show information for directories:</para>

      <informalexample>
        <screen>
$ svn info vendors
Path: vendors
Working Copy Root Path: /home/sally/projects/test
URL: http://svn.red-bean.com/repos/test/vendors
Repository Root: http://svn.red-bean.com/repos/test
Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25
Revision: 19
Node Kind: directory
Schedule: normal
Last Changed Author: harry
Last Changed Rev: 19
Last Changed Date: 2003-01-16 23:21:19 -0600 (Thu, 16 Jan 2003)
Properties Last Updated: 2003-01-16 23:39:02 -0600 (Thu, 16 Jan 2003)
</screen>
      </informalexample>

       <para><command>svn info</command> also acts on URLs (also
         note that the file <filename>readme.doc</filename> in
         this example is locked, so lock information is also
         provided):</para>

       <informalexample>
         <screen>
$ svn info http://svn.red-bean.com/repos/test/readme.doc
Path: readme.doc
Name: readme.doc
URL: http://svn.red-bean.com/repos/test/readme.doc
Repository Root: http://svn.red-bean.com/repos/test
Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25
Revision: 1
Node Kind: file
Schedule: normal
Last Changed Author: sally
Last Changed Rev: 42
Last Changed Date: 2003-01-14 23:21:19 -0600 (Tue, 14 Jan 2003)
Lock Token: opaquelocktoken:14011d4b-54fb-0310-8541-dbd16bd471b2
Lock Owner: harry
Lock Created: 2003-01-15 17:35:12 -0600 (Wed, 15 Jan 2003)
Lock Comment (1 line):
My test lock comment
</screen>
       </informalexample>

       <para>Lastly, <command>svn info</command> output is
         available in XML format by passing
         the <option>--xml</option> option:</para>

       <informalexample>
         <screen>
$ svn info --xml http://svn.red-bean.com/repos/test
&lt;?xml version="1.0"?&gt;
&lt;info&gt;
&lt;entry
   kind="dir"
   path="."
   revision="1"&gt;
&lt;url&gt;http://svn.red-bean.com/repos/test&lt;/url&gt;
&lt;repository&gt;
&lt;root&gt;http://svn.red-bean.com/repos/test&lt;/root&gt;
&lt;uuid&gt;5e7d134a-54fb-0310-bd04-b611643e5c25&lt;/uuid&gt;
&lt;/repository&gt;
&lt;wc-info&gt;
&lt;schedule&gt;normal&lt;/schedule&gt;
&lt;depth&gt;infinity&lt;/depth&gt;
&lt;/wc-info&gt;
&lt;commit
   revision="1"&gt;
&lt;author&gt;sally&lt;/author&gt;
&lt;date&gt;2003-01-15T23:35:12.847647Z&lt;/date&gt;
&lt;/commit&gt;
&lt;/entry&gt;
&lt;/info&gt;
</screen>
       </informalexample>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.list">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>list</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn list (ls)</refname>
      <refpurpose>List directory entries in the repository.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn list [TARGET[@REV]...]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>List each <replaceable>TARGET</replaceable> file and
        the contents of each <replaceable>TARGET</replaceable>
        directory as they exist in the repository.  If
        <replaceable>TARGET</replaceable> is a working copy path,
        the corresponding repository URL will be used.</para>

      <para>The default <replaceable>TARGET</replaceable> is
        <quote><filename>.</filename></quote>, meaning the
        repository URL of the current working copy
        directory.</para>

      <para>With <option>--verbose</option>
        (<option>-v</option>), <command>svn list</command> shows
        the following fields for each item:</para>

      <itemizedlist>
        <listitem><para>Revision number of the last
          commit</para></listitem>

        <listitem><para>Author of the last commit</para></listitem>

        <listitem><para>If locked, the letter <quote>O</quote> (see the preceding section on <xref
          linkend="svn.ref.svn.c.info"/> for details).</para></listitem>

        <listitem><para>Size (in bytes)</para></listitem>

        <listitem><para>Date and time of the last
          commit</para></listitem>
      </itemizedlist>

      <para>With <option>--xml</option>, output is in XML format
        (with a header and an enclosing document element unless
        <option>--incremental</option> is also specified).  All of
        the information is present; the <option>--verbose</option>
        (<option>-v</option>) option is not accepted.</para>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.incremental" />
<xref linkend="svn.ref.svn.sw.recursive" />
<xref linkend="svn.ref.svn.sw.revision" />
<xref linkend="svn.ref.svn.sw.verbose" />
<xref linkend="svn.ref.svn.sw.xml" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para><command>svn list</command> is most useful if you
        want to see what files a repository has without
        downloading a working copy:</para>

      <informalexample>
        <screen>
$ svn list http://svn.red-bean.com/repos/test/support
README.txt
INSTALL
examples/
&hellip;
</screen>
      </informalexample>

      <para>You can pass the <option>--verbose</option>
        (<option>-v</option>) option for additional information,
        rather like the Unix command
        <command>ls -l</command>:</para>

      <informalexample>
        <screen>
$ svn list -v file:///var/svn/repos
     16 sally         28361 Jan 16 23:18 README.txt
     27 sally             0 Jan 18 15:27 INSTALL
     24 harry               Jan 18 11:27 examples/
</screen>
      </informalexample>

      <para>You can also get <command>svn list</command> output in
        XML format with the <option>--xml</option> option:</para>

      <informalexample>
        <screen>
$ svn list --xml http://svn.red-bean.com/repos/test
&lt;?xml version="1.0"?&gt;
&lt;lists&gt;
&lt;list
   path="http://svn.red-bean.com/repos/test"&gt;
&lt;entry
   kind="dir"&gt;
&lt;name&gt;examples&lt;/name&gt;
&lt;size&gt;0&lt;/size&gt;
&lt;commit
   revision="24"&gt;
&lt;author&gt;harry&lt;/author&gt;
&lt;date&gt;2008-01-18T06:35:53.048870Z&lt;/date&gt;
&lt;/commit&gt;
&lt;/entry&gt;
...
&lt;/list&gt;
&lt;/lists&gt;
</screen>
      </informalexample>

      <para>For further details, see the earlier section <xref
        linkend="svn.tour.history.browsing.list"/>.</para>

    </refsect1>
  </refentry>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.lock">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>lock</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn lock</refname> 
        <refpurpose>Lock working copy paths or URLs in the
          repository so that no other user can commit changes to
          them.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn lock TARGET...</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>Lock each <replaceable>TARGET</replaceable>.  If any
        <replaceable>TARGET</replaceable> is already locked by
        another user, print a warning and continue locking the
        rest of the <replaceable>TARGET</replaceable>s.  Use
        <option>--force</option> to steal a lock from another user
        or working copy.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.encoding" />
<xref linkend="svn.ref.svn.sw.file" />
<xref linkend="svn.ref.svn.sw.force" />
<xref linkend="svn.ref.svn.sw.force_log" />
<xref linkend="svn.ref.svn.sw.message" />
<xref linkend="svn.ref.svn.sw.targets" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Lock two files in your working copy:</para>

      <informalexample>
        <screen>
$ svn lock tree.jpg house.jpg
'tree.jpg' locked by user 'harry'.
'house.jpg' locked by user 'harry'.
</screen>
      </informalexample>

      <para>Lock a file in your working copy that is currently
        locked by another user:</para>

      <informalexample>
        <screen>
$ svn lock tree.jpg
svn: warning: W160035: Path '/tree.jpg is already locked by user 'sally' in fi
lesystem '/var/svn/repos/db'
$ svn lock --force tree.jpg
'tree.jpg' locked by user 'harry'.
</screen>
      </informalexample>

      <para>Lock a file without a working copy:</para>

      <informalexample>
        <screen>
$ svn lock http://svn.red-bean.com/repos/test/tree.jpg
'tree.jpg' locked by user 'harry'.
</screen>
      </informalexample>

      <para>For further details, see <xref
        linkend="svn.advanced.locking"/>.</para>

    </refsect1>
  </refentry>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.log">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>log</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn log</refname>
      <refpurpose>Display commit log messages.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn log [PATH]</literal></para>
      <para><literal>svn log URL[@REV] [PATH...]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>Shows log messages from the repository.
        If no arguments are supplied, <command>svn
        log</command> shows the log messages for all files and
        directories inside (and including) the current working
        directory of your working copy.  You can refine the
        results by specifying a path, one or more revisions, or
        any combination of the two.  The default revision range
        for a local path is <literal>BASE:1</literal>.</para>

      <para>If you specify a URL alone, it prints log
        messages for everything the URL contains.  If you
        add paths past the URL, only messages for those paths
        under that URL will be printed.  The default revision range
        for a URL is <literal>HEAD:1</literal>.</para>

      <para>With <option>--verbose</option>
        (<option>-v</option>), <command>svn log</command> will
        also print all affected paths with each log message.
        With <option>--quiet</option>
        (<option>-q</option>), <command>svn log</command> will not
        print the log message body itself, this is compatible
        with <option>--verbose</option>
        (<option>-v</option>).</para>

      <para>Each log message is printed just once, even if more
        than one of the affected paths for that revision were
        explicitly requested.  Logs follow copy history by
        default.  Use <option>--stop-on-copy</option> to disable
        this behavior, which can be useful for determining branch
        points.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.change" />
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.diff" />
<xref linkend="svn.ref.svn.sw.diff_cmd" />
<xref linkend="svn.ref.svn.sw.extensions" />
<xref linkend="svn.ref.svn.sw.incremental" />
<xref linkend="svn.ref.svn.sw.internal_diff" />
<xref linkend="svn.ref.svn.sw.limit" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.revision" />
<xref linkend="svn.ref.svn.sw.search" />
<xref linkend="svn.ref.svn.sw.search_and" />
<xref linkend="svn.ref.svn.sw.stop_on_copy" />
<xref linkend="svn.ref.svn.sw.targets" />
<xref linkend="svn.ref.svn.sw.use_merge_history" />
<xref linkend="svn.ref.svn.sw.verbose" />
<xref linkend="svn.ref.svn.sw.with_all_revprops" />
<xref linkend="svn.ref.svn.sw.with_no_revprops" />
<xref linkend="svn.ref.svn.sw.with_revprop" />
<xref linkend="svn.ref.svn.sw.xml" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>You can see the log messages for all the paths that
        changed in your working copy by running <userinput>svn
        log</userinput> from the top:</para>

      <informalexample>
        <screen>
$ svn log
------------------------------------------------------------------------
r20 | harry | 2003-01-17 22:56:19 -0600 (Fri, 17 Jan 2003) | 1 line

Tweak.
------------------------------------------------------------------------
r17 | sally | 2003-01-16 23:21:19 -0600 (Thu, 16 Jan 2003) | 2 lines
&hellip;
</screen>
      </informalexample>

      <para>Examine all log messages for a particular file in
        your working copy:</para>

      <informalexample>
        <screen>
$ svn log foo.c
------------------------------------------------------------------------
r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line

Added defines.
------------------------------------------------------------------------
r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines
&hellip;
</screen>
      </informalexample>

      <para>If you don't have a working copy handy, you can log
        a URL:</para>

      <informalexample>
        <screen>
$ svn log http://svn.red-bean.com/repos/test/foo.c
------------------------------------------------------------------------
r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line

Added defines.
------------------------------------------------------------------------
r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines
&hellip;
</screen>
      </informalexample>

      <para>If you want several distinct paths underneath the
        same URL, you can use the <literal>URL [PATH...]</literal>
        syntax:</para>

      <informalexample>
        <screen>
$ svn log http://svn.red-bean.com/repos/test/ foo.c bar.c
------------------------------------------------------------------------
r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line

Added defines.
------------------------------------------------------------------------
r31 | harry | 2003-01-10 12:25:08 -0600 (Fri, 10 Jan 2003) | 1 line

Added new file bar.c
------------------------------------------------------------------------
r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines
&hellip;
</screen>
      </informalexample>

      <para>The <option>--verbose</option> (<option>-v</option>)
        option causes <command>svn log</command> to include
        information about the paths that were changed in each
        displayed revision.  These paths appear, one path per line
        of output, with action codes that indicate what type of
        change was made to the path.</para>

      <informalexample>
        <screen>
$ svn log -v http://svn.red-bean.com/repos/test/ foo.c bar.c
------------------------------------------------------------------------
r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line
Changed paths:
   M /foo.c

Added defines.
------------------------------------------------------------------------
r31 | harry | 2003-01-10 12:25:08 -0600 (Fri, 10 Jan 2003) | 1 line
Changed paths:
   A /bar.c

Added new file bar.c
------------------------------------------------------------------------
r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines
&hellip;
</screen>
      </informalexample>

      <para><command>svn log</command> uses just a handful of action codes,
        and they are similar to the
        ones the <command>svn update</command>
        command uses:</para>

      <variablelist>
        <varlistentry>
          <term><literal>A</literal></term>
          <listitem><para>The item was added.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>D</literal></term>
          <listitem><para>The item was deleted.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>M</literal></term>
          <listitem><para>Properties or textual contents on the
            item were changed.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>R</literal></term>
          <listitem><para>The item was replaced by a different one
            at the same location.</para></listitem>
        </varlistentry>
      </variablelist>

      <para>In addition to the action codes which precede the
        changed paths, <command>svn log</command> with
        the <option>--verbose</option> (<option>-v</option>)
        option will note whether a path was added or replaced as
        the result of a copy operation.  It does so by
        printing <literal>(from
        <replaceable>COPY-FROM-PATH</replaceable>:<replaceable>COPY-FROM-REV</replaceable>)</literal>
        after such paths.</para>

      <para>When you're concatenating the results of multiple
        calls to the log command, you may want to use the
        <option>--incremental</option> option. <command>svn
        log</command> normally prints out a dashed line at the
        beginning of a log message, after each subsequent log
        message, and following the final log message.  If you
        ran <command>svn log</command> on a range of two
        revisions, you would get this:</para>

      <informalexample>
        <screen>
$ svn log -r 14:15
------------------------------------------------------------------------
r14 | &hellip;

------------------------------------------------------------------------
r15 | &hellip;

------------------------------------------------------------------------
</screen>
      </informalexample>

      <para>However, if you wanted to gather two nonsequential log
        messages into a file, you might do something like
        this:</para>

      <informalexample>
        <screen>
$ svn log -r 14 &gt; mylog
$ svn log -r 19 &gt;&gt; mylog
$ svn log -r 27 &gt;&gt; mylog
$ cat mylog
------------------------------------------------------------------------
r14 | &hellip;

------------------------------------------------------------------------
------------------------------------------------------------------------
r19 | &hellip;

------------------------------------------------------------------------
------------------------------------------------------------------------
r27 | &hellip;

------------------------------------------------------------------------
</screen>
      </informalexample>

      <para>You can avoid the clutter of the double dashed lines
        in your output by using the <option>--incremental</option>
        option:</para>

      <informalexample>
        <screen>
$ svn log --incremental -r 14 &gt; mylog
$ svn log --incremental -r 19 &gt;&gt; mylog
$ svn log --incremental -r 27 &gt;&gt; mylog
$ cat mylog
------------------------------------------------------------------------
r14 | &hellip;

------------------------------------------------------------------------
r19 | &hellip;

------------------------------------------------------------------------
r27 | &hellip;
</screen>
      </informalexample>

      <para>The <option>--incremental</option> option provides
        similar output control when using the
        <option>--xml</option> option:</para>

      <informalexample>
        <screen>
$ svn log --xml --incremental -r 1 sandwich.txt
&lt;logentry
   revision="1"&gt;
&lt;author&gt;harry&lt;/author&gt;
&lt;date&gt;2008-06-03T06:35:53.048870Z&lt;/date&gt;
&lt;msg&gt;Initial Import.&lt;/msg&gt;
&lt;/logentry&gt;
</screen>
      </informalexample>

      <tip>
        <para>Sometimes when you run <command>svn log</command> on
          a specific path and a specific revision, you see no log
          information output at all, as in the following:</para>

        <informalexample>
          <screen>
$ svn log -r 20 http://svn.red-bean.com/untouched.txt
------------------------------------------------------------------------
</screen>
        </informalexample>

        <para>That just means the path wasn't modified in that
          revision.  To get log information for that revision,
          either run the log operation against the repository's
          root URL, or specify a path that you happen to know was
          changed in that revision:</para>

        <informalexample>
          <screen>
$ svn log -r 20 touched.txt 
------------------------------------------------------------------------
r20 | sally | 2003-01-17 22:56:19 -0600 (Fri, 17 Jan 2003) | 1 line

Made a change.
------------------------------------------------------------------------
</screen>
        </informalexample>
      </tip>

      <para>Beginning with Subversion 1.7, users can take
        advantage of a special output mode which combines the
        information from <command>svn log</command> with what you
        would see when running <command>svn diff</command> on the
        same targets for each revision of the log.  Simply
        invoke <command>svn log</command> with
        the <option>--diff</option> option to trigger this output
        mode.</para>

      <informalexample>
        <screen>
$ svn log -r 20 touched.txt --diff
------------------------------------------------------------------------
r20 | sally | 2003-01-17 22:56:19 -0600 (Fri, 17 Jan 2003) | 1 line

Made a change.

Index: touched.txt
===================================================================
--- touched.txt	(revision 19)
+++ touched.txt	(revision 20)
@@ -1 +1,2 @@
 This is the file 'touched.txt'.
+We add such exciting text to files around here!
------------------------------------------------------------------------
$
</screen>
      </informalexample>

      <para>As with <command>svn diff</command>, you may also make
        use of many of the various options which control the way
        the difference is generated,
        including <option>--depth</option>, <option>--diff-cmd</option>,
        and <option>--extensions</option>
        (<option>-x</option>).</para>

      <para>
        Beginning with Subversion 1.8, users can filter <command>svn log</command>
        output using <option>--search</option> and <option>--search-and</option>
        options.  When using these options, a log message is shown only if a
        revision's author, date, log message text, or list of changed paths,
        matches a search pattern. Searching by changed patch requies
        <option>--verbose</option> option, otherwise <command>svn log</command>
        does not show changed paths therefore they can't be filtered.
      </para>
      <para>
        The search pattern may include "glob syntax"
        wildcards:
      </para>
      <variablelist>
        <varlistentry>
          <term>
            <literal>?</literal>
          </term>
          <listitem>
            <para>
              Matches any single character.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>*</literal>
          </term>
          <listitem>
            <para>
              Matches a sequence of arbitrary
              characters.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>[ABC]</literal>
          </term>
          <listitem>
            <para>
              Matches any of the characters listed inside the brackets.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        Using multiple <option>--search</option> parameters will show log messages
        that match the pattern specified at least in one of the options.  For example:
      </para>
      <informalexample>
<screen>
$ svn log --search sally --search harry https://svn.red-bean.com/repos/test
------------------------------------------------------------------------
r1701 | sally | 2011-10-12 22:35:30 -0600 (Wed, 12 Oct 2011) | 1 line

Add a reminder.
------------------------------------------------------------------------
r1564 | harry | 2011-10-09 22:35:30 -0600 (Sun, 09 Oct 2011) | 1 line

Merge r1560 to the 1.0.x branch.
------------------------------------------------------------------------
$
        </screen>
      </informalexample>
      <para>
        Using <option>--search</option> with <option>--search-and</option> options will show log messages
        that match the combined pattern from both options. For example:
      </para>
      <informalexample>
<screen>
$ svn log --verbose --search sally --search-and /foo/bar https://svn.red-bean.com/repos/test
------------------------------------------------------------------------
r1555 | sally | 2011-07-15 22:33:14 -0600 (Fri, 15 Jul 2011) | 1 line
Changed paths:
M /foo/bar/src.c

Typofix.
------------------------------------------------------------------------
r1530 | sally | 2011-07-13 07:24:11 -0600 (Wed, 13 Jul 2011) | 1 line
Changed paths:
M /foo/bar
M /foo/build

Fix up some svn:ignore properties.
------------------------------------------------------------------------
$
</screen>
      </informalexample>
      <tip>
        <para>
          <option>--search</option> and <option>--search-and</option>
          options does not actually perform a search.  They just filter
          the <command>svn log</command> output to display only log
          messages that match the specified pattern.  Therefore, if
          <option>--limit</option> is used, it restricts the number
          of log messages searched, rather than restricting the
          output to a particular number of matching log messages.
        </para>
      </tip>
    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.merge">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>merge</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn merge</refname>
      <refpurpose>Apply the differences between two sources to a
      working copy path.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn merge SOURCE[@REV] [TARGET_WCPATH]</literal></para>
      <para><literal>svn merge [-c M[,N...] | -r N:M ...] SOURCE[@REV] [TARGET_WCPATH]</literal></para>
      <para><literal>svn merge SOURCE1[@N] SOURCE2[@M] [TARGET_WCPATH]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>In all three forms
        <replaceable>TARGET_WCPATH</replaceable> is
        the working copy path that will receive the differences. If
        <replaceable>TARGET_WCPATH</replaceable> is omitted, the
        changes are applied to the current working directory,
        unless the sources have identical basenames that match a
        file within the current working directory.  In
        that case, the differences will be applied to that
        file.</para>

      <para>In the first two forms, <replaceable>SOURCE</replaceable>
        can be either a URL or a working copy path (in which case its
        corresponding URL is used). If the peg revision
        <replaceable>REV</replaceable> is not specified, then
        <literal>HEAD</literal> is assumed.  In the third form the
        same rules apply for
        <replaceable>SOURCE1</replaceable>,
        <replaceable>SOURCE2</replaceable>,
        <replaceable>M</replaceable>, and <replaceable>N</replaceable>
        with the only difference being that if either source is a
        working copy path, then the peg revisions
        <emphasis>must</emphasis> be explicitly stated.</para>

      <itemizedlist>
        <listitem>
          <para>Automatic Merges</para>
          <para>The first form is called an <quote>automatic
            merge</quote> and is used to perform <quote>sync</quote>
            and <quote>reintegrate</quote> merges.
            <quote>Sync</quote> merges merge eligible changes to a
            branch (<replaceable>TARGET_WCPATH</replaceable>) from
            the branch's ancestor branch
            (<replaceable>SOURCE</replaceable>).
            <quote>Eligible</quote> changes are defined as those that
            were not previously merged from
            (<replaceable>SOURCE</replaceable>) to
            (<replaceable>TARGET_WCPATH</replaceable>).  See
            <xref linkend="svn.branchmerge.basicmerging.stayinsync"/>.
            <quote>Reintegrate</quote> merges merge changes from a
            feature branch (<replaceable>SOURCE</replaceable>)
            back into the feature branch's ancestor branch
            (<replaceable>TARGET_WCPATH</replaceable>), see
            <xref linkend="svn.branchmerge.basicmerging.reintegrate"/>
            and
            <xref linkend="svn.branchmerge.commonpatterns.feature"/>.
            </para>
        </listitem>
        <listitem>
          <para>Cherrypick Merges</para>
          <para>The second form is called a <quote>cherry-pick</quote>
            merge and is used to merge an explicitly defined set of
            changes from one branch to another.
            <replaceable>SOURCE</replaceable> in revision
            <replaceable>REV</replaceable> is compared as it existed
            between revisions <replaceable>N</replaceable> and
            <replaceable>M</replaceable> for each revision range
            provided.  See
            <xref linkend="svn.branchmerge.cherrypicking"/> for more
            information.</para>
          <tip>
            <para>Multiple <literal>-c</literal> and/or
              <literal>-r</literal> instances may be specified, and
              mixing of forward and reverse ranges is allowed&mdash;
              the ranges are internally compacted to their minimum
              representation before merging begins (which may result
              in a no-op merge or conflicts that cause the merge to
              stop before merging all of the requested revisions).</para>
          </tip>
        </listitem>
        <listitem>
          <para>2-URL Merges</para>
          <para>In the third form, called a <quote>2-URL Merge</quote>,
            the difference between <replaceable>SOURCE1</replaceable>
            at revision <replaceable>N</replaceable> and
            <replaceable>SOURCE2</replaceable> at revision
            <replaceable>M</replaceable> is generated and applied to
            <replaceable>TARGET_WCPATH</replaceable>.  The revisions
            default to <literal>HEAD</literal> if omitted.</para>
        </listitem>
      </itemizedlist>

      <para>If
        <xref linkend="svn.branchmerge.basicmerging.mergetracking"/>
        is active, then Subversion will internally track metadata
        (i.e. the <literal>svn:mergeinfo</literal> property) about
        merge operations when the two merge sources are ancestrally
        related&mdash;if the first source is an ancestor of the
        second or vice versa&mdash;this is guaranteed to be the case
        when performing automatic merges.  Subversion will also take
        preexisting merge metadata on the working copy target into
        account when determining what revisions to merge and in an
        effort to avoid repeat merges and needless conflicts it may
        only merge a subset of the requested ranges.</para>

      <para>Unlike <command>svn diff</command>, the merge command
        takes the ancestry of a file into consideration when
        performing a merge operation. This is very important when
        you're merging changes from one branch into another and you've
        renamed a file on one branch but not the other.</para>

      <tip>
        <para>The <option>--ignore-ancestry</option> option will cause
        <xref linkend="svn.branchmerge.basicmerging.mergetracking"/>
        to be disabled and makes merge act like
        <command>svn diff</command>, ignoring the ancestry of files
        when merging.</para>
      </tip>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.accept" />
<xref linkend="svn.ref.svn.sw.allow_mixed_revisions" />
<xref linkend="svn.ref.svn.sw.change" />
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.diff3_cmd" />
<xref linkend="svn.ref.svn.sw.dry_run" />
<xref linkend="svn.ref.svn.sw.extensions" />
<xref linkend="svn.ref.svn.sw.force" />
<xref linkend="svn.ref.svn.sw.ignore_ancestry" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.record_only" />
<xref linkend="svn.ref.svn.sw.reintegrate" />
<xref linkend="svn.ref.svn.sw.revision" />
<xref linkend="svn.ref.svn.sw.verbose" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Reintegrate a branch back into the trunk&mdash;assuming
        that you have an up-to-date working copy of the trunk (the
        <option>--verbose</option> option prints additional
        information regarding what the merge is doing prior to
        actually applying any diff; useful in very large which
        might take a significant amount of time to complete):</para>

      <informalexample>
        <screen>
$ svn merge ^/branches/feature-branch-calc-enhancements trunk --verbose
checking branch relationship...
calculating automatic merge...
merging...
--- Merging r12 through r37 into 'trunk':
U    trunk/calc/brush.c
--- Recording mergeinfo for merge of r12 through r37 into 'trunk':
 U   trunk

$ # build, test, verify, ...

$ svn commit trunk -m "Reintegrate the calc enhancements back to trunk!"
Sending        trunk
Sending        trunk/calc/brush.c
Transmitting file data .
Committed revision 38.
</screen>
      </informalexample>
      
    <para>Cherry-pick merge a single change to a file:</para>

    <informalexample>
      <screen>
$ svn merge ^/trunk/calc/brush.c branches/1.x/calc/brush.c -c38
--- Merging r38 into 'branches/1.x/calc/brush.c':
U    branches/1.x/calc/brush.c
--- Recording mergeinfo for merge of r38 into 'branches/1.x/calc/brush.c':
 G   branches/1.x/calc/brush.c
</screen>
    </informalexample>

    <para>Merge the differences between two unrelated branches
      into a third branch:</para>

    <informalexample>
      <screen>
$ svn merge ^/vendor-drop/vendor-1.0 ^/vendor-drop/vendor-1.1 \
            trunk --ignore-ancestry
--- Merging differences between repository URLs into 'trunk':
U    trunk/draw/draw.py
</screen>
    </informalexample>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.mergeinfo">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>mergeinfo</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn mergeinfo</refname>
      <refpurpose>Query merge-related information.  See <xref
        linkend="svn.branchmerge.basicmerging.mergeinfo"/> for
        details.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn mergeinfo SOURCE_URL[@REV] [TARGET[@REV]]</literal></para>

    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>
      <para>Query information related to merges (or potential
        merges) between <replaceable>SOURCE-URL</replaceable> and
        <replaceable>TARGET</replaceable>.  If
        the <option>--show-revs</option> option is not provided,
        display a graphical representation of revisions which have
        been fully merged from <replaceable>SOURCE-URL</replaceable>
        to <replaceable>TARGET</replaceable>.  Otherwise, list
        either the <literal>merged</literal>
        or <literal>eligible</literal> revisions as specified by
        the <option>--show-revs</option> option.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.recursive" />
<xref linkend="svn.ref.svn.sw.revision" />
<xref linkend="svn.ref.svn.sw.show_revs" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Graphical summary of the merges from one branch to
        another:</para>

      <informalexample>
        <screen>
$ svn mergeinfo ^/trunk feature-branch
    youngest  last               repos.
    common    full     tip of    path of
    ancestor  merge    branch    branch

    11        16       33
    |         |        |
  -------| |------------         trunk
     \         \
      \         \
       --| |------------         feature-branch
                       |
                       33
</screen>
      </informalexample>

      <para>List the operative revisions merged from one branch to
        another:</para>

      <informalexample>
        <screen>
$ svn mergeinfo ^/trunk feature-branch --show-revs merged
r15
r16
</screen>
      </informalexample>

      <para>List the operative revisions eligible to be merged from
        one branch to another:</para>

      <informalexample>
        <screen>
$ svn mergeinfo ^/trunk feature-branch --show-revs eligible
r28
r30
</screen>
      </informalexample>

    </refsect1>
  </refentry>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.mkdir">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>mkdir</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn mkdir</refname>
      <refpurpose>Create a new directory under version control.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn mkdir PATH...</literal></para>
      <para><literal>svn mkdir URL...</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>Create a directory with a name given by the final
        component of the <replaceable>PATH</replaceable> or <replaceable>URL</replaceable>.
        A directory specified by a working copy
        <replaceable>PATH</replaceable> is scheduled for addition
        in the working copy.  A directory specified by a URL is
        created in the repository via an immediate commit.
        Multiple directory URLs are committed atomically.  In both
        cases, all the intermediate directories must already exist
        unless the <option>--parents</option> option is
        used.</para>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.editor_cmd" />
<xref linkend="svn.ref.svn.sw.encoding" />
<xref linkend="svn.ref.svn.sw.file" />
<xref linkend="svn.ref.svn.sw.force_log" />
<xref linkend="svn.ref.svn.sw.message" />
<xref linkend="svn.ref.svn.sw.parents" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.with_revprop" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Create a directory in your working copy:</para>

      <informalexample>
        <screen>
$ svn mkdir newdir
A         newdir
</screen>
      </informalexample>

      <para>Create one in the repository (this is an instant commit, so a
        log message is required):</para>

      <informalexample>
        <screen>
$ svn mkdir -m "Making a new dir." http://svn.red-bean.com/repos/newdir

Committed revision 26.
</screen>
      </informalexample>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.move">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>move</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn move (mv)</refname>
      <refpurpose>Move a file or directory.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn move SRC... DST</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>This command moves files or directories in your
        working copy or in the repository.</para>

      <tip>
        <para>This command is equivalent to an <command>svn
          copy</command> followed by <command>svn
          delete</command>.</para>
      </tip>

      <para>When moving multiple sources, they will be added as
        children of <replaceable>DST</replaceable>, which must be
        a directory.</para>

      <note>
        <para>Subversion does not support moving between working
          copies and URLs.  In addition, you can only move files
          within a single repository&mdash;Subversion does not
          support cross-repository moving.  Subversion supports
          the following types of moves within a single repository:</para>
      </note>

      <variablelist>

        <varlistentry>
          <term>WC &rarr; WC</term>
          <listitem>
            <para>Move and schedule a file or directory for
              addition (with history).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>URL &rarr; URL</term>
          <listitem>
            <para>Complete server-side rename.</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>When moving large trees you should be aware that the
        URL &rarr; URL moves are lighter than WC &rarr; WC moves. Moving
        nodes inside a working copy does more than just change directory
        listings (it will copy files, manage temporary files, and expand
        keywords) and may be significantly slower.</para>

      <para>Also bear in mind that a WC &rarr; WC move in a
        mixed-revision working copy may yield unexpected results
        (see <xref linkend="svn.basic.in-action.mixedrevs" />).</para>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.editor_cmd" />
<xref linkend="svn.ref.svn.sw.encoding" />
<xref linkend="svn.ref.svn.sw.file" />
<xref linkend="svn.ref.svn.sw.force" />
<xref linkend="svn.ref.svn.sw.force_log" />
<xref linkend="svn.ref.svn.sw.message" />
<xref linkend="svn.ref.svn.sw.parents" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.revision" />
<xref linkend="svn.ref.svn.sw.with_revprop" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Move a file in your working copy:</para>

      <informalexample>
        <screen>
$ svn move foo.c bar.c
A         bar.c
D         foo.c
</screen>
      </informalexample>

      <para>Move several files in your working copy into a
        subdirectory:</para>

      <informalexample>
        <screen>
$ svn move baz.c bat.c qux.c src
A         src/baz.c
D         baz.c
A         src/bat.c
D         bat.c
A         src/qux.c
D         qux.c
</screen>
      </informalexample>

      <para>Move a file in the repository (this is an immediate commit,
        so it requires a commit message):</para>

      <informalexample>
        <screen>
$ svn move -m "Move a file" http://svn.red-bean.com/repos/foo.c \
                            http://svn.red-bean.com/repos/bar.c

Committed revision 27.
</screen>
      </informalexample>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.patch">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>patch</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn patch</refname>
      <refpurpose>Apply changes represented in a unidiff patch to
        the working copy.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn patch PATCHFILE [WCPATH]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>This subcommand will apply changes described a
        unidiff-formatted patch
        file <replaceable>PATCHFILE</replaceable> to the working
        copy <replaceable>WCPATH</replaceable>.  As with most
        other working copy subcommands,
        if <replaceable>WCPATH</replaceable> is omitted, the
        changes are applied to the current working directory.  A
        unidiff patch suitable for application to a working copy
        can be produced with the <command>svn diff</command>
        command or third-party differencing tools.  Any
        non-unidiff content found in the patch file is
        ignored.</para>

      <para>Changes listed in the patch file will either be
        applied or rejected.  If a change does not match at its
        exact line offset, it may be applied earlier or later in
        the file if a match is found elsewhere for the surrounding
        lines of context provided by the patch.  A change may also
        be applied with <firstterm>fuzz</firstterm>&mdash;meaning,
        one or more lines of context are ignored when attempting
        to match the change location.  If no matching context can
        be found for a change, the change conflicts and will be
        written to a reject file which bears the extension
        <filename>.svnpatch.rej</filename>.</para>

      <para><command>svn patch</command> reports a status line for
        patched file or directory using letter codes, very similar
        to the way that <command>svn update</command> provides
        notification.  The letter codes have the following
        meanings:</para>

      <variablelist>

        <varlistentry>
          <term><literal>A</literal></term>
          <listitem>
            <para>Added</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>D</literal></term>
          <listitem>
            <para>Deleted</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>C</literal></term>
          <listitem>
            <para>Conflicted</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>G</literal></term>
          <listitem>
            <para>Merged</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>U</literal></term>
          <listitem>
            <para>Updated</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>Changes applied with an offset or fuzz are reported on
        lines starting with the '<literal>&gt;</literal>'
        symbol. You should review such changes carefully.</para>

      <para>If the patch removes all content from a file, that
        file is automatically scheduled for deletion.  Likewise,
        if the patch creates a new file, that file is
        automatically scheduled for addition.  Use <command>svn
        revert</command> to undo undesired deletions and
        additions.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.dry_run" />
<xref linkend="svn.ref.svn.sw.ignore_whitespace" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.reverse_diff" />
<xref linkend="svn.ref.svn.sw.strip" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Apply a simple patch file generated by
        the <command>svn diff</command> command.  Our patch file
        will create a new file, delete another file, and modify a
        third's contents and properties.  Here's the patch file
        itself (which we'll assume is creatively named
        <filename>PATCH</filename>):</para>

      <informalexample>
        <programlisting>
Index: deleted-file
===================================================================
--- deleted-file	(revision 3)
+++ deleted-file	(working copy)
@@ -1 +0,0 @@
-This file will be deleted.
Index: changed-file
===================================================================
--- changed-file	(revision 4)
+++ changed-file	(working copy)
@@ -1,6 +1,6 @@
 The letters in a line of text
 Could make your day much better.
 But expanded into paragraphs,
-I'd tell of kangaroos and calves
+I'd tell of monkeys and giraffes
 Until you were all smiles and laughs
 From my letter made of letters.

Property changes on: changed-file
___________________________________________________________________
Added: propname
## -0,0 +1 ##
+propvalue
Index: added-file
===================================================================
--- added-file	(revision 0)
+++ added-file	(working copy)
@@ -0,0 +1 @@
+This is an added file.
</programlisting>
      </informalexample>
      
      <para>We can apply the previous patch file to another
        working copy from our repository using <command>svn
        patch</command>, and verify that it did the right thing by
        using <command>svn diff</command>:</para>

      <informalexample>
        <screen>
$ cd /some/other/workingcopy
$ svn patch /path/to/PATCH
D         deleted-file
UU        changed-file
A         added-file
$ svn diff
Index: deleted-file
===================================================================
--- deleted-file	(revision 3)
+++ deleted-file	(working copy)
@@ -1 +0,0 @@
-This file will be deleted.
Index: changed-file
===================================================================
--- changed-file	(revision 4)
+++ changed-file	(working copy)
@@ -1,6 +1,6 @@
 The letters in a line of text
 Could make your day much better.
 But expanded into paragraphs,
-I'd tell of kangaroos and calves
+I'd tell of monkeys and giraffes
 Until you were all smiles and laughs
 From my letter made of letters.

Property changes on: changed-file
___________________________________________________________________
Added: propname
## -0,0 +1 ##
+propvalue
Index: added-file
===================================================================
--- added-file	(revision 0)
+++ added-file	(working copy)
@@ -0,0 +1 @@
+This is an added file.
$
</screen>             
      </informalexample>
    
      <para>Sometimes you might need Subversion to interpret a
        patch <quote>in reverse</quote>&mdash;where added things
        get treated as removed things, and vice-versa.  Use
        the <option>--reverse-diff</option> option for this
        purpose.  In the following example, we'll squirrel away
        a patch file which describes the changes in our working
        copy, and then use a reverse patch operation to undo those
        changes.</para>

      <informalexample>
        <screen>
$ svn status
M       foo.c
$ svn diff > PATCH
$ cat PATCH
Index: foo.c
===================================================================
--- foo.c	(revision 128)
+++ foo.c	(working copy)
@@ -1003,7 +1003,7 @@
     return ERROR_ON_THE_G_STRING;
 
   /* Do something in a loop. */
-  for (i = 0; i &lt; txns->nelts; i++)
+  for (i = 0; i &lt; txns->nelts; i--)
     {
       status = do_something(i);
       if (status)
$ svn patch --reverse-diff PATCH
U         foo.c
$ svn status
$
</screen>             
      </informalexample>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.propdel">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>propdel</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn propdel (pdel, pd)</refname>
      <refpurpose>Remove a property from an item.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn propdel PROPNAME [PATH...]</literal></para>
      <para><literal>svn propdel PROPNAME --revprop -r REV [TARGET]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>This removes properties from files, directories, or
        revisions.  The first form removes versioned properties in
        your working copy, and the second removes unversioned
        remote properties on a repository revision
        (<replaceable>TARGET</replaceable> determines only which
        repository to access).</para>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.changelist" />
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.recursive" />
<xref linkend="svn.ref.svn.sw.revision" />
<xref linkend="svn.ref.svn.sw.revprop" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Delete a property from a file in your working
        copy:</para>

      <informalexample>
        <screen>
$ svn propdel svn:mime-type some-script
property 'svn:mime-type' deleted from 'some-script'.
</screen>
      </informalexample>

      <para>Delete a revision property:</para>

      <informalexample>
        <screen>
$ svn propdel --revprop -r 26 release-date 
property 'release-date' deleted from repository revision '26'
</screen>
      </informalexample>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.propedit">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>propedit</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn propedit (pedit, pe)</refname>
      <refpurpose>Edit the property of one or more items under
        version control.  See <xref
        linkend="svn.ref.svn.c.propset"/> later in this chapter.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn propedit PROPNAME TARGET...</literal></para>
      <para><literal>svn propedit PROPNAME --revprop -r REV [TARGET]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>Edit one or more properties using your favorite
        editor.  The first form edits versioned properties in
        your working copy, and the second edits unversioned
        remote properties on a repository revision
        (<replaceable>TARGET</replaceable> determines only which
        repository to access).</para>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.editor_cmd" />
<xref linkend="svn.ref.svn.sw.encoding" />
<xref linkend="svn.ref.svn.sw.file" />
<xref linkend="svn.ref.svn.sw.force" />
<xref linkend="svn.ref.svn.sw.force_log" />
<xref linkend="svn.ref.svn.sw.message" />
<xref linkend="svn.ref.svn.sw.revision" />
<xref linkend="svn.ref.svn.sw.revprop" />
<xref linkend="svn.ref.svn.sw.with_revprop" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para><command>svn propedit</command> makes it easy to
        modify properties that have multiple values:</para>

      <informalexample>
        <screen>
$ svn propedit svn:keywords foo.c 

    # svn will open in your favorite text editor a temporary file
    # containing the current contents of the svn:keywords property.  You
    # can add multiple values to a property easily here by entering one
    # value per line.  When you save the temporary file and exit,
    # Subversion will re-read the temporary file and use its updated
    # contents as the new value of the property.

Set new value for property 'svn:keywords' on 'foo.c'
$
</screen>
      </informalexample>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.propget">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>propget</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn propget (pget, pg)</refname>
      <refpurpose>Print the value of a property.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn propget PROPNAME [TARGET[@REV]...]</literal></para>
      <para><literal>svn propget PROPNAME --revprop -r REV [URL]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>Print the value of a property on files,
        directories, or revisions.  The first form prints the
        versioned property of an item or items in your working
        copy, and the second prints unversioned remote
        properties on a repository revision.  See <xref
        linkend="svn.advanced.props"/> for more information on
        properties.</para>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.changelist" />
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.recursive" />
<xref linkend="svn.ref.svn.sw.revision" />
<xref linkend="svn.ref.svn.sw.revprop" />
<xref linkend="svn.ref.svn.sw.show_inherited_props" />
<xref linkend="svn.ref.svn.sw.strict" />
<xref linkend="svn.ref.svn.sw.verbose" />
<xref linkend="svn.ref.svn.sw.xml" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Examine a property of a file in your working
        copy:</para>

      <informalexample>
        <screen>
$ svn propget svn:keywords foo.c
Author
Date
Rev
</screen>
      </informalexample>

      <para>The same goes for a revision property:</para>

      <informalexample>
        <screen>
$ svn propget svn:log --revprop -r 20 
Began journal.
</screen>
      </informalexample>

      <para>For a more structured display of properties, use
        the <option>--verbose</option> (<option>-v</option>)
        option:</para>

      <informalexample>
        <screen>
$ svn propget svn:keywords foo.c --verbose
Properties on 'foo.c':
  svn:keywords
    Author
    Date
    Rev
</screen>
      </informalexample>

      <para>Examine the versioned properties inherited by a URL in
        your repository using the <option>--show-inherited-props
        </option> option:</para>

      <informalexample>
        <screen>
$ svn pg svn:global-ignores --verbose --show-inherited-props ^/branches/1.x
Inherited properties on 'http://svn.example.com/repos/branches/1.x',
from 'http://svn.example.com/repos':
  svn:global-ignores
    *.diff
    *.patch
</screen>
      </informalexample>

      <para>By default, <command>svn propget</command> will append
        a trailing end-of-line sequence to the property value it
        prints.  Most of the time, this is a desirable feature
        that has a positive effect on the printed output.  But
        there are times when you might wish to capture the precise
        property value, perhaps because that value is not textual
        in nature, but of some binary format (such as a JPEG
        thumbnail stored as a property value, for example).  To
        disable pretty-printing of property values, use
        the <option>--strict</option> option.</para>

      <para>Lastly, you can get <command>svn propget</command>
        output in XML format with the <option>--xml</option>
        option:</para>

      <informalexample>
        <screen>
$ svn propget --xml svn:ignore .
&lt;?xml version="1.0"?&gt;
&lt;properties&gt;
&lt;target
   path=""&gt;
&lt;property
   name="svn:ignore"&gt;*.o
&lt;/property&gt;
&lt;/target&gt;
&lt;/properties&gt;
</screen>
      </informalexample>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.proplist">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>proplist</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn proplist (plist, pl)</refname>
      <refpurpose>List all properties.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn proplist [TARGET[@REV]...]</literal></para>
      <para><literal>svn proplist --revprop -r REV [TARGET]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>List all properties on files, directories, or
        revisions.  The first form lists versioned properties in
        your working copy, and the second lists unversioned remote
        properties on a repository revision
        (<replaceable>TARGET</replaceable> determines only which
        repository to access).</para>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.changelist" />
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.recursive" />
<xref linkend="svn.ref.svn.sw.revision" />
<xref linkend="svn.ref.svn.sw.revprop" />
<xref linkend="svn.ref.svn.sw.show_inherited_props" />
<xref linkend="svn.ref.svn.sw.verbose" />
<xref linkend="svn.ref.svn.sw.xml" />
</screen>
      </informalexample>
    </refsect1>
    
    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>You can use <command>proplist</command> to see the properties on an
        item in your working copy:</para>

      <informalexample>
        <screen>
$ svn proplist foo.c
Properties on 'foo.c':
  svn:mime-type
  svn:keywords
  owner
</screen>
      </informalexample>

      <para>But with the <option>--verbose</option>
        (<option>-v</option>) flag, <command>svn
        proplist</command> is extremely handy as it also shows you
        the values for the properties:</para>

      <informalexample>
        <screen>
$ svn proplist -v foo.c
Properties on 'foo.c':
  svn:mime-type
    text/plain
  svn:keywords
    Author Date Rev
  owner
    sally
</screen>
      </informalexample>

      <para>List all the versioned properties inherited by a file in
        your working copy using the <option>--show-inherited-props
        </option> option:</para>

      <informalexample>
        <screen>
$ svn proplist --show-inherited-props foo.c
Inherited properties on 'foo.c',
from 'http://svn.example.com/repos':
  svn:auto-props
  svn:global-ignores
Inherited properties on 'foo.c',
from '/home/theob/svn/working-copies/baz-wc':
  svn:auto-props
</screen>
      </informalexample>

      <para>Lastly, you can get <command>svn proplist</command>
        output in XML format with the <option>--xml</option>
        option:</para>

      <informalexample>
        <screen>
$ svn proplist --xml 
&lt;?xml version="1.0"?&gt;
&lt;properties&gt;
&lt;target
   path="."&gt;
&lt;property
   name="svn:ignore"/&gt;
&lt;/target&gt;
&lt;/properties&gt;
</screen>
      </informalexample>
      
    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.propset">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>propset</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn propset (pset, ps)</refname>
      <refpurpose>Set <replaceable>PROPNAME</replaceable>
        to <replaceable>PROPVAL</replaceable> on files, directories,
        or revisions.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn propset PROPNAME [PROPVAL | -F VALFILE] PATH...</literal></para>
      <para><literal>svn propset PROPNAME --revprop -r REV [PROPVAL | -F VALFILE] [TARGET]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>Set <replaceable>PROPNAME</replaceable> to
        <replaceable>PROPVAL</replaceable> on files, directories,
        or revisions.  The first example creates a versioned, local
        property change in the working copy, and the second
        creates an unversioned, remote property change on a
        repository revision
        (<replaceable>TARGET</replaceable> determines only which
        repository to access).</para>

      <tip>
        <para>Subversion has a number of <quote>special</quote>
          properties that affect its behavior.  See <xref
          linkend="svn.advanced.props.ref"/> for details.</para>
      </tip>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.changelist" />
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.encoding" />
<xref linkend="svn.ref.svn.sw.file" />
<xref linkend="svn.ref.svn.sw.force" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.recursive" />
<xref linkend="svn.ref.svn.sw.revision" />
<xref linkend="svn.ref.svn.sw.revprop" />
<xref linkend="svn.ref.svn.sw.targets" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Set the MIME type for a file:</para>

      <informalexample>
        <screen>
$ svn propset svn:mime-type image/jpeg foo.jpg 
property 'svn:mime-type' set on 'foo.jpg'
</screen>
      </informalexample>

      <para>On a Unix system, if you want a file to have the
        executable permission set:</para>

      <informalexample>
        <screen>
$ svn propset svn:executable ON somescript
property 'svn:executable' set on 'somescript'
</screen>
      </informalexample>

      <para>Perhaps you have an internal policy to set certain
        properties for the benefit of your coworkers:</para>

      <informalexample>
        <screen>
$ svn propset owner sally foo.c
property 'owner' set on 'foo.c'
</screen>
      </informalexample>

      <para>If you made a mistake in a log message for a
        particular revision and want to change it, use
        <option>--revprop</option> and set <literal>svn:log</literal>
        to the new log message:</para>

      <informalexample>
        <screen>
$ svn propset --revprop -r 25 svn:log "Journaled about trip to New York."
property 'svn:log' set on repository revision '25'
</screen>
      </informalexample>

      <para>Or, if you don't have a working copy, you can
        provide a URL:</para>

      <informalexample>
        <screen>
$ svn propset --revprop -r 26 svn:log "Document nap." \
              http://svn.red-bean.com/repos
property 'svn:log' set on repository revision '25'
</screen>
      </informalexample>

      <para>Lastly, you can tell <command>propset</command> to take its input from
        a file.  You could even use this to set the contents of a
        property to something binary:</para>

      <informalexample>
        <screen>
$ svn propset owner-pic -F sally.jpg moo.c 
property 'owner-pic' set on 'moo.c'
</screen>
      </informalexample>

      <note>
        <para>By default, you cannot modify revision properties
          in a Subversion repository.  Your repository
          administrator must explicitly enable revision property
          modifications by creating a hook named
          <literal>pre-revprop-change</literal>.  See
          <xref linkend="svn.reposadmin.hooks" /> for more
          information on hook scripts.</para>
      </note>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.relocate">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>relocate</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn relocate</refname>
      <refpurpose>Relocate the working copy to point to a
        different repository root URL.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn relocate FROM-PREFIX TO-PREFIX [PATH...]</literal></para>
      <para><literal>svn relocate TO-URL [PATH]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>Sometimes an administrator might change the location
        (or apparent location, from the client's perspective) of a
        repository.  The content of the repository doesn't change,
        but the repository's root URL does.  The hostname may
        change because the repository is now being served from a
        different computer.  Or, perhaps the URL scheme changes
        because the repository is now being served via SSL
        (using <literal>https://</literal>) instead of over plain
        HTTP.  There are many different reasons for these types of
        repository relocations.  But ideally, a <quote>change of
        address</quote> for a repository shouldn't suddently cause
        all the working copies which point to that repository to
        become forever unusable.  And fortunately, that's not the
        case.  Rather than force users to check out a new working
        copy when a repository is relocated, Subversion provides
        the <command>svn relocate</command> command, which 
        <quote>rewrites</quote> the working copy's administrative
        metadata to refer to the new repository location.</para>

      <para>The first <command>svn relocate</command> syntax
        allows you to update one or more working copies by what
        essentially amounts to a find-and-replace within the
        repository root URLs recorded in those working copies.
        Subversion will replace the initial substring
        <replaceable>FROM-PREFIX</replaceable> with the
        string <replaceable>TO-PREFIX</replaceable> in those URLs.
        These initial URL substrings can be as long or as short as
        is necessary to differentiate between them.  Obviously, to
        use this syntax form, you need to know both the current
        root URL of the repository to which the working copy is
        pointing, and the new URL of that repository.
        (You can use <command>svn info</command> to determine
        the former.)</para>

      <para>The second syntax does not require that you know the
        current repository root URL with which the working copy is
        associated at all&mdash;only the new repository URL
        (<replaceable>TO-URL</replaceable>) to which it should be
        pointing.  In this syntax form, only one working copy may
        be relocated at a time.</para>

      <warning>
        <para>Users often get confused about the difference
          between <command>svn switch</command> and <command>svn
          relocate</command>.  Here's the rule of thumb:</para>
        
        <itemizedlist>
          <listitem>
            <para>If the working copy needs to reflect a new
              directory <emphasis>within</emphasis> the
              repository, use <command>svn
              switch</command>.</para>
          </listitem>
          <listitem>
            <para>If the working copy still reflects the
              same repository directory, but the location of the
              repository itself has changed, use <command>svn
              relocate</command>.</para>
          </listitem>
        </itemizedlist>
      </warning>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.ignore_externals" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Let's start with a working copy that reflects a local
        repository URL:</para>

      <informalexample>
        <screen>
$ svn info | grep URL:
URL: file:///var/svn/repos/trunk
$
</screen>
      </informalexample>

      <para>One day the administrator decides to rename the
        on-disk repository directory.  We missed the memo, so we
        see an error the next time we try to update our working
        copy.</para>

      <informalexample>
        <screen>
$ svn up
Updating '.':
svn: E180001: Unable to connect to a repository at URL 'file:///var/svn/repos/trunk'
</screen>
      </informalexample>

      <para>After cornering the administrator over by the vending
        machines, we learn about the repository being moved and
        are told the new URL.  Rather than checkout a new working
        copy, though, we simply ask Subversion to rewrite the
        working copy metadata to point to the new repository
        location.</para>

      <informalexample>
        <screen>
$ svn relocate file:///var/svn/new-repos/trunk
$
</screen>
      </informalexample>

      <para>Subversion doesn't tell us much about what it did, but
        hey&mdash;error-free operation is really all we need,
        right?  Our working copy is functional for online
        operations again.</para>

      <informalexample>
        <screen>
$ svn up
Updating '.':
A    lib/new.c
M    src/code.h
M    src/headers.h
&hellip;
</screen>
      </informalexample>

      <note>
        <para>Once again, this type of relocation
          affects <emphasis>working copy metadata only</emphasis>.
          It will not change your versioned or unversioned file
          contents, perform any version control operations (such
          as commits or updates), and so on.</para>
      </note>

      <para>A few months later, we're told that the company is
        moving development to separate machines and that we'll be
        using HTTP to access the repository.  So we relocate our
        working copy again.</para>

      <informalexample>
        <screen>
$ svn relocate http://svn.company.com/repos/trunk
$
</screen>
      </informalexample>

      <para>Now, each time we perform a relocation of this sort,
        Subversion contacts the repository&mdash;at its new URL,
        of course&mdash;to verify a few things.</para>

      <para>First, it wants to compare the UUID of the repository
        against what is stored in the working copy.  If these UUIDs
        don't match, the working copy relocation is disallowed.
        Maybe this isn't the same repository (just in a new
        location) after all?</para>

      <para>Secondly, Subversion wants to ensure that the updated
        working copy metadata jives with respect to the directory
        location <emphasis>inside</emphasis> the repository.
        Subversion won't let you accidentally relocate a working
        copy of a branch in your repository to the URL of a
        different branch in the same repository.  (That's
        what <command>svn switch</command>, described in
        <xref linkend="svn.ref.svn.c.switch" />, is for.)</para>

      <para>Also, Subversion will not allow you to relocate a
        subtree of the working copy.  If you're going to relocate
        the working copy at all, you must relocate the whole
        thing.  This is to protect the integrity of the working
        copy metadata and behavior as a whole.  (And really, you'd
        be hard pressed to come up with a compelling reason to
        relocate only a piece of your working copy anyway.)</para>

      <para>Let's look at one final relocation opportunity.  After
        using HTTP access for some time, the company moves to
        SSL-only access.  Now, the only change to the repository
        URL is that the scheme goes from
        being <literal>http://</literal> to
        being <literal>https://</literal>.  There are two
        different ways that we could make our working copy reflect
        ths change.  The first is to do exactly as we've done
        before and relocate to the new repository URL.</para>

      <informalexample>
        <screen>
$ svn relocate http://svn.company.com/repos/trunk
$
</screen>
      </informalexample>

      <para>But we have another option here, too.  We could simply
        ask Subversion to swap out the changed prefixes of the
        URL.</para>

      <informalexample>
        <screen>
$ svn relocate http https
$
</screen>
      </informalexample>

      <para>Either approach leaves us a working copy whose
        metadata has been updated to point to the right repository
        location.</para>

      <para>By default, <command>svn relocate</command> will
        traverse any external working copies nested within your
        working copy and attempt relocation of those working
        copies, too.  Use the <option>--ignore-externals</option>
        option to disable this behavior.</para>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.resolve">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>resolve</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn resolve</refname>
      <refpurpose>Resolve conflicts on working copy files or
        directories.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn resolve [PATH...]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>Resolve <quote>conflicted</quote> state on working
        copy files or directories.  This routine does not
        semantically resolve conflict markers; however, it
        replaces the conflicted item with the version specified
        (interactively or via the <option>--accept</option>
        argument) and then removes conflict-related artifact
        files.  This allows <replaceable>PATH</replaceable> to be
        committed again&mdash;that is, it tells Subversion that
        the conflicts have been <quote>resolved.</quote></para>

      <para>See <xref linkend="svn.tour.cycle.resolve" /> for an
        in-depth look at resolving conflicts.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.accept" />
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.recursive" />
<xref linkend="svn.ref.svn.sw.targets" />
</screen>
      </informalexample>
    </refsect1>
    
    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>
      
      <para>Here's an example where, after a postponed conflict
        resolution during update, <command>svn resolve</command>
        replaces the all conflicts in
        file <filename>foo.c</filename> with your edits:</para>

      <informalexample>
        <screen>
$ svn update
Updating '.':
Conflict discovered in 'foo.c'.
Select: (p) postpone, (df) diff-full, (e) edit,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options: p
C    foo.c
Updated to revision 5.
Summary of conflicts:
  Text conflicts: 1
$ svn resolve --accept mine-full foo.c
Resolved conflicted state of 'foo.c'
$
</screen>
      </informalexample>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.resolved">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>resolved</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn resolved</refname>
      <refpurpose><emphasis>Deprecated</emphasis>.
        Remove <quote>conflicted</quote> state on working copy
        files or directories.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn resolved PATH...</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>This command has been deprecated in favor of
        running <userinput>svn resolve --accept
        working <replaceable>PATH</replaceable></userinput>.  See
        <xref linkend="svn.ref.svn.c.resolve"/> in the preceding
        section for details.</para>

      <para>Remove <quote>conflicted</quote> state on working copy
        files or directories.  This routine does not semantically
        resolve conflict markers; it merely removes
        conflict-related artifact files and allows
        <replaceable>PATH</replaceable> to be committed again;
        that is, it tells Subversion that the conflicts have been
        <quote>resolved.</quote>  See <xref
        linkend="svn.tour.cycle.resolve"/> for an in-depth look at
        resolving conflicts.</para> </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.recursive" />
<xref linkend="svn.ref.svn.sw.targets" />
</screen>
      </informalexample>
    </refsect1>
    
    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>
      
      <para>If you get a conflict on an update, your working
        copy will sprout three new files:</para>

      <informalexample>
        <screen>
$ svn update
Updating '.':
C    foo.c
Updated to revision 31.
Summary of conflicts:
  Text conflicts: 1
$ ls foo.c*
foo.c
foo.c.mine
foo.c.r30
foo.c.r31
$
</screen>
      </informalexample>

      <para>Once you've resolved the conflict and
        <filename>foo.c</filename> is ready to be committed, run
        <command>svn resolved</command> to let your working copy
        know you've taken care of everything.</para>

      <warning>
        <para>You <emphasis>can</emphasis> just remove the
          conflict files and commit, but <command>svn
          resolved</command> fixes up some bookkeeping data
          in the working copy administrative area in addition
          to removing the conflict files, so we recommend that
          you use this command.</para>
      </warning>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.revert">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>revert</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn revert</refname>
      <refpurpose>Undo all local edits.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn revert PATH...</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>Reverts any local changes to a file or directory and
        resolves any conflicted states.  <command>svn
        revert</command> will revert not only the contents of an
        item in your working copy, but also any property
        changes.  Finally, you can use it to undo any scheduling
        operations that you may have performed (e.g., files scheduled
        for addition or deletion can be
        <quote>unscheduled</quote>).</para>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.changelist" />
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.recursive" />
<xref linkend="svn.ref.svn.sw.targets" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Discard changes to a file:</para>

      <informalexample>
        <screen>
$ svn revert foo.c
Reverted foo.c
</screen>
      </informalexample>

      <para>If you want to revert a whole directory of files,
        use the <option>--depth=infinity</option> option:</para>

      <informalexample>
        <screen>
$ svn revert --depth=infinity .
Reverted newdir/afile
Reverted foo.c
Reverted bar.txt
</screen>
      </informalexample>

      <para>Lastly, you can undo any scheduling
        operations:</para>

      <informalexample>
        <screen>
$ svn add mistake.txt whoops
A         mistake.txt
A         whoops
A         whoops/oopsie.c

$ svn revert mistake.txt whoops
Reverted mistake.txt
Reverted whoops

$ svn status
?       mistake.txt
?       whoops
</screen>
      </informalexample>

      <warning>
        <para><command>svn revert</command> is inherently
          dangerous, since its entire purpose is to throw away
          data&mdash;namely, your uncommitted changes.  Once
          you've reverted, Subversion provides <emphasis>no
          way</emphasis> to get back those uncommitted
          changes.</para>

        <para>If you provide no targets to <command>svn
          revert</command>, it will do nothing.  To protect you
          from accidentally losing changes in your working
          copy, <command>svn revert</command> requires you to
          explicitly provide at least one target.</para>
      </warning>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.status">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>status</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn status (stat, st)</refname>
      <refpurpose>Print the status of working copy files and directories.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn status [PATH...]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>Print the status of working copy files and
        directories.  With no arguments, it prints only locally
        modified items (no repository access).  With
        <option>--show-updates</option> (<option>-u</option>), it
        adds working revision and server out-of-date information.
        With <option>--verbose</option> (<option>-v</option>), it
        prints full revision information on every item.
        With <option>--quiet</option> (<option>-q</option>), it
        prints only summary information about locally modified
        items.</para>

      <para>The first seven columns in the output are each one
        character wide, and each column gives you information
        about a different aspect of each working copy item.</para>
      
      <para>The first column indicates that an item
        was added, deleted, or otherwise changed:</para>

      <variablelist>
        
        <varlistentry>
          <term><literal>' '</literal></term>
          <listitem>
            <para>No modifications.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>'A'</literal></term>
          <listitem>
            <para>Item is scheduled for addition.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>'D'</literal></term>
          <listitem>
            <para>Item is scheduled for deletion.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>'M'</literal></term>
          <listitem>
            <para>Item has been modified.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>'R'</literal></term>
          <listitem>
            <para>Item has been replaced in your working copy.
            This means the file was scheduled for deletion, and
            then a new file with the same name was scheduled for
            addition in its place.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>'C'</literal></term>
          <listitem>
            <para>The contents (as opposed to the properties) of
              the item conflict with updates received from the
              repository.</para>  
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>'X'</literal></term>
          <listitem>
            <para>Item is present because of an externals definition.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>'I'</literal></term>
          <listitem>
            <para>Item is being ignored (e.g., with the 
              <literal>svn:ignore</literal> property).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>'?'</literal></term>
          <listitem>
            <para>Item is not under version control.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>'!'</literal></term>
          <listitem>
            <para>Item is missing (e.g., you moved or deleted it
              without using <command>svn</command>).  This also
              indicates that a directory is incomplete (a checkout
              or update was interrupted).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>'~'</literal></term>
          <listitem>
            <para>Item is versioned as one kind of object (file,
              directory, link), but has been replaced by a different
              kind of object.</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>The second column tells the status of a file's or
        directory's properties:</para>

      <variablelist>
        
        <varlistentry>
          <term><literal>' '</literal></term>
          <listitem>
            <para>No modifications.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>'M'</literal></term>
          <listitem>
            <para>Properties for this item have been
              modified.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>'C'</literal></term>
          <listitem>
            <para>Properties for this item are in conflict with
              property updates received from the
              repository.</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>The third column is populated only if the
        working copy directory is locked (see
        <xref linkend="svn.tour.cleanup"/>):</para>

      <variablelist>
        
        <varlistentry>
          <term><literal>' '</literal></term>
          <listitem>
            <para>Item is not locked.</para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><literal>'L'</literal></term>
          <listitem>
            <para>Item is locked.</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>The fourth column is populated only if the item is
        scheduled for addition-with-history:</para>
      
      <variablelist>
        
        <varlistentry>
          <term><literal>' '</literal></term>
          <listitem>
            <para>No history scheduled with commit.</para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><literal>'+'</literal></term>
          <listitem>
            <para>History scheduled with commit.</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>The fifth column is populated only if the item is
        switched relative to its parent (see <xref
        linkend="svn.branchmerge.switchwc"/>):</para>

      <variablelist>
        
        <varlistentry>
          <term><literal>' '</literal></term>
          <listitem>
            <para>Item is a child of its parent directory.</para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><literal>'S'</literal></term>
          <listitem>
            <para>Item is switched.</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>The sixth column is populated with lock information:</para>
      
      <variablelist>
        
        <varlistentry>
          <term><literal>' '</literal></term>
          <listitem>
            <para>When <option>--show-updates</option>
              (<option>-u</option>) is used, this means the file is not
              locked.  If <option>--show-updates</option>
              (<option>-u</option>) is <emphasis>not</emphasis>
              used, this merely means that the file is not locked
              in this working copy.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>'K'</literal></term>
          <listitem>
            <para>File is locked in this working copy.</para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><literal>'O'</literal></term>
          <listitem>
            <para>File is locked either by another user or in
            another working copy.  This appears only when
            <option>--show-updates</option>
            (<option>-u</option>) is used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>'T'</literal></term>
          <listitem>
            <para>File was locked in this working copy, but the
            lock has been <quote>stolen</quote> and is invalid.
            The file is currently locked in the repository.  This
            appears only when <option>--show-updates</option>
            (<option>-u</option>) is used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>'B'</literal></term>
          <listitem>
            <para>File was locked in this working copy, but the
              lock has been <quote>broken</quote> and is invalid.
              The file is no longer locked.  This appears only
              when <option>--show-updates</option>
              (<option>-u</option>) is used.</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>The seventh column is populated only if the item is
        the victim of a tree conflict:</para>

      <variablelist>

        <varlistentry>
          <term><literal>' '</literal></term>
          <listitem>
            <para>Item is not the victim of a tree conflict.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>'C'</literal></term>
          <listitem>
            <para>Item is the victim of a tree conflict.</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>The eighth column is always blank.</para>

      <para>The out-of-date information appears in the ninth
        column (only if you pass the
        <option>--show-updates</option> (<option>-u</option>)
        option):</para>

      <variablelist>
        
        <varlistentry>
          <term><literal>' '</literal></term>
          <listitem>
            <para>The item in your working copy is up to date.</para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><literal>'*'</literal></term>
          <listitem>
            <para>A newer revision of the item exists on the
              server.</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>The remaining fields are variable width and delimited
        by spaces.  The working revision is the next field if
        the <option>--show-updates</option> (<option>-u</option>)
        or <option>--verbose</option> (<option>-v</option>) option
        is passed.</para>
      
      <para>If the <option>--verbose</option>
        (<option>-v</option>) option is passed, the last committed
        revision and last committed author are displayed
        next.</para>
      
      <para>The working copy path is always the final field, so
        it can include spaces.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.changelist" />
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.ignore_externals" />
<xref linkend="svn.ref.svn.sw.incremental" />
<xref linkend="svn.ref.svn.sw.no_ignore" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.show_updates" />
<xref linkend="svn.ref.svn.sw.verbose" />
<xref linkend="svn.ref.svn.sw.xml" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>This is the easiest way to find out what changes you
        have made to your working copy:</para>

      <informalexample>
        <screen>
$ svn status wc
 M      wc/bar.c
A  +    wc/qax.c
</screen>
      </informalexample>

      <para>If you want to find out what files in your working
        copy are out of date, pass
        the <option>--show-updates</option> (<option>-u</option>)
        option (this will <emphasis>not</emphasis> make any
        changes to your working copy).  Here you can see that
        <filename>wc/foo.c</filename> has changed in the
        repository since we last updated our working
        copy:</para>

      <informalexample>
        <screen>
$ svn status -u wc
 M            965    wc/bar.c
        *     965    wc/foo.c
A  +          965    wc/qax.c
Status against revision:    981
</screen>
      </informalexample>

      <note>
        <para><option>--show-updates</option>
          (<option>-u</option>) <emphasis>only</emphasis> places
          an asterisk next to items that are out of date (i.e.,
          items that will be updated from the repository if you
          later use <command>svn update</command>).
          <option>--show-updates</option> (<option>-u</option>)
          does <emphasis>not</emphasis> cause the status listing
          to reflect the repository's version of the item
          (although you can see the revision number in the
          repository by passing the <option>--verbose</option>
          (<option>-v</option>) option).</para>
      </note>

      <para>The most information you can get out of
        the status subcommand is as follows:</para>

      <informalexample>
        <screen>
$ svn status -u -v wc
 M            965       938 sally        wc/bar.c
        *     965       922 harry        wc/foo.c
A  +          965       687 harry        wc/qax.c
              965       687 harry        wc/zig.c
Status against revision:   981
</screen>
      </informalexample>

      <para>Lastly, you can get <command>svn status</command>
        output in XML format with the <option>--xml</option>
        option:</para>

      <informalexample>
        <screen>
$ svn status --xml wc
&lt;?xml version="1.0"?&gt;
&lt;status&gt;
&lt;target
   path="wc"&gt;
&lt;entry
   path="qax.c"&gt;
&lt;wc-status
   props="none"
   item="added"
   revision="0"&gt;
&lt;/wc-status&gt;
&lt;/entry&gt;
&lt;entry
   path="bar.c"&gt;
&lt;wc-status
   props="normal"
   item="modified"
   revision="965"&gt;
&lt;commit
   revision="965"&gt;
&lt;author&gt;sally&lt;/author&gt;
&lt;date&gt;2008-05-28T06:35:53.048870Z&lt;/date&gt;
&lt;/commit&gt;
&lt;/wc-status&gt;
&lt;/entry&gt;
&lt;/target&gt;
&lt;/status&gt;
</screen>
      </informalexample>

      <para>For many more examples of <command>svn status</command>,
        see <xref linkend="svn.tour.cycle.examine.status"/>.</para>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.switch">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>switch</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn switch (sw)</refname>
      <refpurpose>Update working copy to a different URL.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn switch URL[@PEGREV] [PATH]</literal></para>
      <para><literal>switch --relocate FROM TO [PATH...]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>The first variant of this subcommand (without the
        <option>--relocate</option> option) updates your working
        copy to point to a new URL.  This is the Subversion way to
        make a working copy begin tracking a new branch.  If
        specified, <replaceable>PEGREV</replaceable> determines in
        which revision the target is first looked up.  See
        <xref linkend="svn.branchmerge.switchwc"/> for an in-depth
        look at switching.</para>

      <note>
        <para>Beginning with Subversion 1.7, the <command>svn
          switch</command> command will demand by default that the
          URL to which you are switching your working copy shares
          a common ancestry with item that the working copy
          currently reflects.  You can override this behavior by
          specifying the <option>--ignore-ancestry</option>
          option.</para>
      </note>

      <para>If <option>--force</option> is used, unversioned
        obstructing paths in the working copy do not automatically
        cause a failure if the switch attempts to add the same
        path.  If the obstructing path is the same type (file or
        directory) as the corresponding path in the repository, it
        becomes versioned but its contents are left untouched in
        the working copy.  This means that an obstructing
        directory's unversioned children may also obstruct and
        become versioned.  For files, any content differences
        between the obstruction and the repository are treated
        like a local modification to the working copy.  All
        properties from the repository are applied to the
        obstructing path.</para>

      <para>As with most subcommands, you can limit the scope of
        the switch operation to a particular tree depth using the
        <option>--depth</option> option.  Alternatively, you can
        use the <option>--set-depth</option> option to set a new
        <quote>sticky</quote> working copy depth on the switch
        target.</para>

      <para>The <option>--relocate</option> option is deprecated
        as of Subversion 1.7.  Use <command>svn relocate</command>
        (described in <xref linkend="svn.ref.svn.c.relocate" />)
        to perform working copy relocation instead.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.accept" />
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.diff3_cmd" />
<xref linkend="svn.ref.svn.sw.force" />
<xref linkend="svn.ref.svn.sw.ignore_ancestry" />
<xref linkend="svn.ref.svn.sw.ignore_externals" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.relocate" />
<xref linkend="svn.ref.svn.sw.revision" />
<xref linkend="svn.ref.svn.sw.set_depth" />
</screen>
      </informalexample>
    </refsect1>
    
    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>If you're currently inside the directory
        <filename>vendors</filename>, which was branched to
        <filename>vendors-with-fix</filename>, and you'd like to
        switch your working copy to that branch:</para>

      <informalexample>
        <screen>
$ svn switch http://svn.red-bean.com/repos/branches/vendors-with-fix .
U    myproj/foo.txt
U    myproj/bar.txt
U    myproj/baz.c
U    myproj/qux.c
Updated to revision 31.
</screen>
      </informalexample>

      <para>To switch back, just provide the URL to the
        location in the repository from which you originally
        checked out your working copy:</para>

      <informalexample>
        <screen>
$ svn switch http://svn.red-bean.com/repos/trunk/vendors .
U    myproj/foo.txt
U    myproj/bar.txt
U    myproj/baz.c
U    myproj/qux.c
Updated to revision 31.
</screen>
      </informalexample>

      <tip>
        <para>You <emphasis>can</emphasis> switch just part of
          your working copy to a branch if you don't want to
          switch your entire working copy, but this is not
          generally recommended.  It's too easy to forget that
          you've done this and wind up accidentally making and
          committing changes both to the switched and unswitched
          portions of your tree.</para>
      </tip>

    </refsect1>
  </refentry>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.unlock">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>unlock</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn unlock</refname> 
        <refpurpose>Unlock working copy paths or URLs.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn unlock TARGET...</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>Unlock each <replaceable>TARGET</replaceable>.  If any
        <replaceable>TARGET</replaceable> is locked by
        another user or no valid lock token exists in the working
        copy, print a warning and continue unlocking the rest of
        the <replaceable>TARGET</replaceable>s.  Use
        <option>--force</option> to break a lock belonging to
        another user or working copy.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.force" />
<xref linkend="svn.ref.svn.sw.targets" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Unlock two files in your working copy:</para>

      <informalexample>
        <screen>
$ svn unlock tree.jpg house.jpg
'tree.jpg' unlocked.
'house.jpg' unlocked.
</screen>
      </informalexample>

      <para>Unlock a file in your working copy that is currently
        locked by another user:</para>

      <informalexample>
        <screen>
$ svn unlock tree.jpg
svn: E195013: 'tree.jpg' is not locked in this working copy
$ svn unlock --force tree.jpg
'tree.jpg' unlocked.
</screen>
      </informalexample>

      <para>Unlock a file without a working copy:</para>

      <informalexample>
        <screen>
$ svn unlock http://svn.red-bean.com/repos/test/tree.jpg
'tree.jpg unlocked.
</screen>
      </informalexample>

      <para>For further details, see <xref
        linkend="svn.advanced.locking"/>.</para>

    </refsect1>
  </refentry>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.update">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>update</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn update (up)</refname>
      <refpurpose>Update your working copy.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn update [PATH...]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para><command>svn update</command> brings changes from the
        repository into your working copy.  If no revision is
        given, it brings your working copy up to date with the
        <literal>HEAD</literal> revision.  Otherwise, it
        synchronizes the working copy to the revision given by the
        <option>--revision</option> (<option>-r</option>) option.
        As part of the synchronization, <command>svn
        update</command> also removes any stale locks (see
        <xref linkend="svn.tour.cleanup"/>) found in the working
        copy.</para>

      <para>For each updated item, it prints a line that starts
        with a character reporting the action taken.  These
        characters have the following meaning:</para>

      <variablelist>

        <varlistentry>
          <term><literal>A</literal></term>
          <listitem>
            <para>Added</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>B</literal></term>
          <listitem>
            <para>Broken lock (third column only)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>D</literal></term>
          <listitem>
            <para>Deleted</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>U</literal></term>
          <listitem>
            <para>Updated</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>C</literal></term>
          <listitem>
            <para>Conflicted</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>G</literal></term>
          <listitem>
            <para>Merged</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>E</literal></term>
          <listitem>
            <para>Existed</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>A character in the first column signifies an update to
        the actual file, whereas updates to the file's properties
        are shown in the second column.  Lock information is
        printed in the third column.</para>

      <para>As with most subcommands, you can limit the scope of
        the update operation to a particular tree depth using the
        <option>--depth</option> option.  Alternatively, you can
        use the <option>--set-depth</option> option to set a new
        <quote>sticky</quote> working copy depth on the update
        target.</para>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.accept" />
<xref linkend="svn.ref.svn.sw.changelist" />
<xref linkend="svn.ref.svn.sw.depth" />
<xref linkend="svn.ref.svn.sw.diff3_cmd" />
<xref linkend="svn.ref.svn.sw.editor_cmd" />
<xref linkend="svn.ref.svn.sw.force" />
<xref linkend="svn.ref.svn.sw.ignore_externals" />
<xref linkend="svn.ref.svn.sw.parents" />
<xref linkend="svn.ref.svn.sw.quiet" />
<xref linkend="svn.ref.svn.sw.revision" />
<xref linkend="svn.ref.svn.sw.set_depth" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>Pick up repository changes that have happened since
        your last update:</para>

      <informalexample>
        <screen>
$ svn update
Updating '.':
A    newdir/toggle.c
A    newdir/disclose.c
A    newdir/launch.c
D    newdir/README
Updated to revision 32.
</screen>
      </informalexample>

      <para>You can also <quote>update</quote> your working copy
        to an older revision (Subversion doesn't have the concept
        of <quote>sticky</quote> files like CVS does; see <xref
        linkend="svn.forcvs"/>):</para>

      <informalexample>
        <screen>
$ svn update -r30
Updating '.':
A    newdir/README
D    newdir/toggle.c
D    newdir/disclose.c
D    newdir/launch.c
U    foo.c
Updated to revision 30.
</screen>
      </informalexample>

      <tip>
        <para>If you want to examine an older revision of a
          single file, you may want to use <command>svn
          cat</command> instead&mdash;it won't change your working
          copy.</para>
      </tip>

      <para><command>svn update</command> is also the primary
        mechanism used to configure sparse working copies.  When
        used with the <option>--set-depth</option>, the update
        operation will omit or reenlist individual working copy
        members by modifying their recorded ambient depth to the
        depth you specify (fetching information from the
        repository as necessary).  See
        <xref linkend="svn.advanced.sparsedirs" /> for more about
        sparse directories.</para>
      
      <para>You can update multiple targets with a single
        invocation, and Subversion will not only gracefully skip
        any unversioned targets you provide it, but as of
        Subversion 1.7 will also include a post-update summary of
        all the updates it performed:</para>

      <informalexample>
        <screen>
$ cd my-projects
$ svn update *
Updating 'calc':
U    button.c
U    integer.c
Updated to revision 394.
Skipped 'tempfile.tmp'
Updating 'paint':
A    palettes.c
U    brushes.c
Updated to revision 60.
Updating 'ziptastic':
At revision 43.
Summary of updates:
  Updated 'calc' to r394.
  Updated 'paint' to r60.
  Updated 'ziptastic' to r43.
Summary of conflicts:
  Skipped paths: 1
$
</screen>
      </informalexample>

    </refsect1>
  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svn.c.upgrade">

    <indexterm>
      <primary>svn</primary>
      <secondary>subcommands</secondary>
      <tertiary>upgrade</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svn upgrade</refname>
      <refpurpose>Upgrade the metadata storage format for a
        working copy.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svn upgrade [PATH...]</literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

      <para>As new versions of Subversion are released, the format
        used for the working copy metadata changes to accomodate
        new features or fix bugs.  Older versions of Subversion
        would automatically upgrade working copies to the new
        format the first time the working copy was used by the new
        version of the software.  Beginning with Subversion 1.7,
        working copy upgrades must be explicitly performed at the
        user's request.  <command>svn upgrade</command> is the
        subcommand used to trigger that upgrade process.</para>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svn.sw.quiet" />
</screen>
      </informalexample>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
      <title>Examples</title>

      <para>If you attempt to use Subversion 1.7 on a working copy
        created with an older version of Subversion, you will see
        an error:</para>

      <informalexample>
        <screen>
$ svn status
svn: E155036: Please see the 'svn upgrade' command
svn: E155036: Working copy '/home/sally/project' is too old (format 10, create
d by Subversion 1.6)
$
</screen>
      </informalexample>

      <para>Use the <command>svn upgrade</command> command to
        upgrade the working copy to the most recent metadata
        format supported by your version of Subversion.</para>

      <informalexample>
        <screen>
$ svn upgrade
Upgraded '.'
Upgraded 'A'
Upgraded 'A/B'
Upgraded 'A/B/E'
Upgraded 'A/B/F'
Upgraded 'A/C'
Upgraded 'A/D'
Upgraded 'A/D/G'
Upgraded 'A/D/H'
$ svn status
D       A/B/E/alpha
M       A/D/gamma
A       A/newfile
$
</screen>
      </informalexample>

      <para>Notice that <command>svn upgrade</command> preserved
        the local modifications present in the working copy at the
        time of the upgrade, which were introduced by the version
        of Subversion previously used to manipulate this working
        copy.</para>

      <warning>
        <para>As was the case with automatically upgraded working
          copies in the past, explicitly upgraded working copies
          will be unusable by older versions of Subversion,
          too.</para>
      </warning>
      
    </refsect1>
  </refentry>

</reference>

<!--
local variables: 
sgml-parent-document: ("book.xml" "reference")
end:
-->
