<!-- -*- sgml -*- -->

<reference id="svn.ref.svnmucc">
  <title>svnmucc Reference&mdash;Subversion Multiple URL Command Client</title>

  <partintro>

    <para>The Subversion Multiple URL Command Client
      (<command>svnmucc</command>) is a tool that can make arbitrary
      changes to the repository without the use of a working copy.  As
      regards remote commit capabilities, the functionality provided
      by this tool is similar to, but far exceeds, that which is
      offered by the Subversion command-line client itself.  For
      example, <command>svnmucc</command> is not limited to performing
      only a single type of change in a given commit.  It is also able
      to modify file content and versioned properties without a
      working copy, which is functionality not currently offered by
      <command>svn</command>.</para>

    <para>This reference describes the <command>svnmucc</command> tool,
      and the various remote modification actions you can perform
      using it.</para>

  </partintro>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.svnmucc.re">

    <indexterm>
      <primary>svnmucc</primary>
    </indexterm>

    <refnamediv>
      <refname>svnmucc</refname>

      <refpurpose>Perform one or more Subversion repository
        URL-based ACTIONs, committing the result as a (single) new
        revision.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>svnmucc <replaceable>ACTION...</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1 id="svn.ref.svnmucc.re.desc">
      <title>Description</title>

      <para><command>svnmucc</command> is a program for modifying
        Subversion-versioned data without the use of a working copy.
        It allows operations to be performed directly against the
        repository URLs of the files and directories that the user
        wishes to change.  Each invocation of <command>svnmucc</command>
        attempts one or more <replaceable>ACTION</replaceable>s,
        atomically committing the results of those combined
        <replaceable>ACTION</replaceable>s as a single new
        revision.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1 id="svn.ref.svnmucc.re.actions">
      <title>Actions</title>

      <para><command>svnmucc</command> supports the following
        actions (and related arguments), which may be combined into
        ordered sequences on the command line:</para>

      <variablelist>

        <varlistentry>
          <term>cp <replaceable>REV</replaceable>
            <replaceable>SRC-URL</replaceable> 
            <replaceable>DST-URL</replaceable></term>
          <listitem>
            <para>Copy the file or directory located
              at <replaceable>SRC-URL</replaceable> in
              revision <replaceable>REV</replaceable>
              to <replaceable>DST-URL</replaceable>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>mkdir <replaceable>URL</replaceable></term>
          <listitem>
            <para>Create a new directory at <replaceable>URL</replaceable>.
              The parent directory of <replaceable>URL</replaceable>
              must already exist (or have been created by a
              prior <command>svnmucc</command> action), as this
              command does not offer the ability to automatically
              create any missing intermediate parent
              directories.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>mv <replaceable>SRC-URL</replaceable> 
            <replaceable>DST-URL</replaceable></term>
          <listitem>
            <para>Move the file or directory located
              at <replaceable>SRC-URL</replaceable> to
              <replaceable>DST-URL</replaceable>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>rm <replaceable>URL</replaceable></term>
          <listitem>
            <para>Delete the file or directory located
              at <replaceable>URL</replaceable>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>put <replaceable>SRC-FILE</replaceable>
            <replaceable>URL</replaceable></term>
          <listitem>
            <para>Add a new file&mdash;or modify an existing
              one&mdash;located at <replaceable>URL</replaceable>,
              copying the contents of the local file
              <replaceable>SRC-FILE</replaceable> as the new contents
              of the created or modified file.  As a special
              consideration, <replaceable>SRC-FILE</replaceable> may
              be <literal>-</literal> to instruct
              <command>svnmucc</command> to read from standard input
              rather than a local filesystem file.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>propset <replaceable>NAME</replaceable>
            <replaceable>VALUE</replaceable>
            <replaceable>URL</replaceable></term>
          <listitem>
            <para>Set the value of the
              property <replaceable>NAME</replaceable> on the
              target <replaceable>URL</replaceable>
              to <replaceable>VALUE</replaceable>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>propsetf <replaceable>NAME</replaceable>
            <replaceable>FILE</replaceable>
            <replaceable>URL</replaceable></term>
          <listitem>
            <para>Set the value of the
              property <replaceable>NAME</replaceable> on the
              target <replaceable>URL</replaceable>
              to the contents of the file
              <replaceable>FILE</replaceable>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>propdel <replaceable>NAME</replaceable>
            <replaceable>URL</replaceable></term>
          <listitem>
            <para>Delete the property <replaceable>NAME</replaceable>
              from the target <replaceable>URL</replaceable>.</para>
          </listitem>
        </varlistentry>

      </variablelist>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1 id="svn.ref.svnmucc.re.sw">
      <title>Options</title>

      <para>Options specified on the <command>svnmucc</command>
        command line are global to all actions performed by that
        command line.  The following is a list of the options
        supported by this tool:</para>

      <variablelist>

        <varlistentry>
          <term><option>--config-dir</option>
            <replaceable>DIR</replaceable></term>
          <listitem>
            <para>Read configuration information from the specified
              directory instead of the default location
              (<filename>.subversion</filename> in the user's home
              directory).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--config-option</option>
            <replaceable>CONFSPEC</replaceable></term>
          <listitem>
            <para>Set, for the duration of the command, the value
              of a runtime configuration option.
              <replaceable>CONFSPEC</replaceable> is a
              string which specifies the configuration option
              namespace, name and value that you'd like to assign,
              formatted as
              <replaceable>FILE</replaceable>:<replaceable>SECTION</replaceable>:<replaceable>OPTION</replaceable>=[<replaceable>VALUE</replaceable>].
              In this syntax, <replaceable>FILE</replaceable>
              and <replaceable>SECTION</replaceable> are the runtime
              configuration file (either <filename>config</filename>
              or <filename>servers</filename>) and the section
              thereof, respectively, which contain the option whose
              value you wish to
              change.  <replaceable>OPTION</replaceable> is, of
              course, the option itself,
              and <replaceable>VALUE</replaceable> the value (if
              any) you wish to assign to the option.  For example, to
              temporarily disable the use of the compression in the
              HTTP protocol,
              use <option>--config-option=servers:global:http-compression=no</option>.
              You can use this option multiple times to change
              multiple option values simultaneously.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--extra-args</option> (<option>-X</option>)
            <replaceable>ARGFILE</replaceable></term>
          <listitem>
            <para>Read additional would-be command-line arguments
              from <replaceable>ARGFILE</replaceable>, one argument
              per line.  As a special consideration,
              <replaceable>ARGFILE</replaceable> may be
              <literal>-</literal> to indicate that additional
              arguments should be read instead from standard
              input.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--file</option> (<option>-F</option>)
            <replaceable>MSGFILE</replaceable></term>
          <listitem>
             <para>Use the contents of the <replaceable>MSGFILE</replaceable>
               as the log message for the commit.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--help</option> (<option>-h</option>,
            <option>-?</option>)</term>
          <listitem>
             <para>Show program usage information and exit.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--message</option> (<option>-m</option>)
            <replaceable>MSG</replaceable></term>
          <listitem>
             <para>Use <replaceable>MSG</replaceable> as the log
               message for the commit.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--no-auth-cache</option></term>
          <listitem>
            <para>Prevent caching of authentication information
              (e.g., username and password) in the Subversion
              runtime configuration directories.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--non-interactive</option></term>
          <listitem>
            <para>Disable all interactive prompting (e.g., requests
              for authentication credentials).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--revision</option> (<option>-r</option>)
            <replaceable>REV</replaceable></term>
          <listitem>
            <para>Use revision <replaceable>REV</replaceable> as the
              baseline revision for all changes made via
              the <command>svnmucc</command> actions.  This is an
              important option which users should habituate to using
              whenever modifying existing versioned items to avoid
              inadvertently undoing contemporary changes made by
              fellow team members.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--root-url</option> (<option>-U</option>)
            <replaceable>ROOT-URL</replaceable></term>
          <listitem>
            <para>Use <replaceable>ROOT-URL</replaceable> as a base
              URL to which all other URL targets are relative.  This
              URL need not be the repository's root URL (such
              as might be reported by <command>svn info</command>).
              It can be any URL common to the various targets which
              are specified in the <command>svnmucc</command>
              actions.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--password</option> (<option>-p</option>)
            <replaceable>PASSWD</replaceable></term>
          <listitem>
            <para>Use <replaceable>PASSWD</replaceable> as the
              password when authenticating against a Subversion
              server.  If not provided, or if incorrect, Subversion
              will prompt you for this information as needed.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--username</option>
            <replaceable>NAME</replaceable></term>
          <listitem>
            <para>Use <replaceable>USERNAME</replaceable> as the
              username when authenticating against a Subversion
              server.  If not provided, or if incorrect, Subversion
              will prompt you for this information as needed.</para>
          </listitem>
        </varlistentry>
      
        <varlistentry>
          <term><option>--version</option></term>
          <listitem>
            <para>Display the program's version information and
              exit.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--with-revprop</option>
            <replaceable>NAME</replaceable>=<replaceable>VALUE</replaceable></term>
          <listitem>
            <para>Set the value of the revision property
              <replaceable>NAME</replaceable> to
              <replaceable>VALUE</replaceable> on the committed
              revision.</para>
          </listitem>
        </varlistentry>

      </variablelist>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1 id="svn.ref.svnmucc.re.examples">
      <title>Examples</title>

      <para>To (safely) modify a file's contents without using a
        working copy, use <command>svn cat</command> to fetch the
        current contents of the file, and <command>svnmucc
        put</command> to commit the edited contents thereof.</para>

      <informalexample>
        <screen>
$ # Calculate some convenience variables.
$ export FILEURL=http://svn.example.com/projects/sandbox/README
$ export BASEREV=`svn info ${FILEURL} | \
                  grep '^Last Changed Rev' | cut -d ' ' -f 2`
$ # Get a copy of the file's current contents.
$ svn cat ${FILEURL}@${BASEREV} > /tmp/README.tmpfile
$ # Edit the (copied) file.
$ vi /tmp/README.tmpfile
$ # Commit the new content for our file.
$ svnmucc -r ${BASEREV} put README.tmpfile ${FILEURL} \
          -m "Tweak the README file."
r24 committed by harry at 2013-01-21T16:21:23.100133Z
# Cleanup after ourselves.
$ rm /tmp/README.tmpfile
</screen>
      </informalexample>

      <para>Apply a similar approach to change a file or directory
        property.  Simply use <command>svn propget</command>
        and <command>svnmucc propsetf</command> instead
        of <command>svn cat</command> and <command>svnmucc
        put</command>, respectively.</para>

      <informalexample>
        <screen>
$ # Calculate some convenience variables.
$ export PROJURL=http://svn.example.com/projects/sandbox
$ export BASEREV=`svn info ${PROJURL} | \
                  grep '^Last Changed Rev' | cut -d ' ' -f 2`
$ # Get a copy of the directory's "license" property value.
$ svn -r ${BASEREV} propget license ${PROJURL} > /tmp/prop.tmpfile
$ # Tweak the property.
$ vi /tmp/prop.tmpfile
$ # Commit the new property value.
$ svnmucc -r ${BASEREV} propsetf prop.tmpfile ${PROJURL} \
          -m "Tweak the project directory 'license' property."
r25 committed by harry at 2013-01-21T16:24:11.375936Z
# Cleanup after ourselves.
$ rm /tmp/prop.tmpfile
</screen>
      </informalexample>

      <para>Let's look now at some multi-operation examples.</para>

      <para>To implement a <quote>moving tag</quote>, where a single
        tag name is recycled to point to different snapshots (for
        example, the current latest stable version) of a codebase,
        use <command>svnmucc rm</command> and <command>svnmucc
        cp</command>:</para>

      <informalexample>
        <screen>
$ svnmucc -U http://svn.example.com/projects/doohickey \
          rm tags/latest-stable \
          cp HEAD trunk tags/latest-stable \
          -m "Slide the 'latest-stable' tag forward."
r134 committed by harry at 2013-01-12T11:02:16.142536Z
$ 
</screen>
      </informalexample>

      <para>In the previous example, we slyly introduced the use of
        the <option>--root-url (-U)</option> option.  Use this
        option to specify a base URL to which all other operand URLs
        are treated as relative (and save yourself some
        typing).</para>

      <para>The following shows an example of using
        <command>svnmucc</command> to, in a single revision, create
        a new tag of your project which includes a newly created
        descriptive file and which lacks a directory which shouldn't
        be included in, say, a release tarball.</para>

      <informalexample>
        <screen>
$ echo "This is the 1.2.0 release." | \
       svnmucc -U http://svn.example.com/projects/doohickey \
               -m "Tag the 1.2.0 release." \
               -- \
               cp HEAD trunk tags/1.2.0 \
               rm tags/1.2.0/developer-notes \
               put - tags/1.2.0/README.tag
r164 committed by cmpilato at 2013-01-22T05:26:15.563327Z
$ svn log -c 164 -v http://svn.example.com/projects/doohickey
------------------------------------------------------------------------
r164 | cmpilato | 2013-01-22 00:26:15 -0500 (Tue, 22 Jan 2013) | 1 line
Changed paths:
   A /tags/1.2.0 (from /trunk:163)
   A /tags/1.2.0/README.tag
   D /tags/1.2.0/developer-notes

Tag the 1.2.0 release.
$ 
</screen>
      </informalexample>

      <para>The previous example demonstrates not only how to do
        several different things in a single <command>svnmucc</command>
        invocation, but also the use of standard input as the source
        of new file contents.  Note the presence of <literal>--</literal>
        to indicate that no more options follow on the command line.
        This is required so that the bare <literal>-</literal> used
        in the <command>svnmucc put</command> action won't be
        flagged as a malformed option indicator.</para>

    </refsect1>

  </refentry>
</reference>

<!--
local variables: 
sgml-parent-document: ("book.xml" "reference")
end:
-->
