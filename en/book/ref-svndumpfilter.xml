<!-- -*- sgml -*- -->

<reference id="svn.ref.svndumpfilter">
  <title>svndumpfilter Reference&mdash;Subversion History Filtering</title>
  
  <partintro>
    
    <para><command>svndumpfilter</command> is a command-line utility
      for removing history from a Subversion dump file by either
      excluding or including paths beginning with one or more named
      prefixes.  For details, see
      <xref linkend="svn.reposadmin.maint.tk.svndumpfilter"/>.</para>

    <para>Options in <command>svndumpfilter</command> are global, just
      as they are in <command>svn</command> and
      <command>svnadmin</command>:</para>

    <variablelist id="svn.ref.svndumpfilter.sw">
      <title>svndumpfilter Options</title>

      <varlistentry id="svn.ref.svndumpfilter.sw.drop_empty_revs">
        <term><option>--drop-empty-revs</option></term>
        <listitem>
          <para>If filtering causes any revision to be empty (i.e.,
            causes no change to the repository), removes these
            revisions from the final dump file.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svndumpfilter.sw.pattern">
        <term><option>--pattern</option></term>
        <listitem>
          <para>Treat the path prefixes provided to the filtering
            commands as file glob patterns rather than explicit path
            substrings.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svndumpfilter.sw.renumber_revs">
        <term><option>--renumber-revs</option></term>
        <listitem>
          <para>Renumbers revisions that remain after
            filtering.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svndumpfilter.sw.skip_missing_merge_sources">
        <term><option>--skip-missing-merge-sources</option></term>
        <listitem>
          <para>Skips merge sources that have been removed as part of
            the filtering.  Without this
            option, <command>svndumpfilter</command> will exit with
            an error if the merge source for a retained path is
            removed by filtering.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svndumpfilter.sw.preserve_revprops">
        <term><option>--preserve-revprops</option></term>
        <listitem>
          <para>If all nodes in a revision are removed by filtering
            and <option>--drop-empty-revs</option> is not passed,
            the default behavior of <command>svndumpfilter</command>
            is to remove all revision properties except for the date
            and the log message (which will merely indicate that the
            revision is empty).  Passing this option will preserve
            existing revision properties (which may or may not make
            sense since the related content is no longer present in
            the dump file).</para>
        </listitem>
      </varlistentry>

      <varlistentry id="svn.ref.svndumpfilter.sw.targets">
        <term><option>--targets</option> <replaceable>FILENAME</replaceable></term>
        <listitem>
          <para>Instructs <command>svndumpfilter</command> to read
            additional path prefixes&mdash;one per line&mdash;from
            the file located at <replaceable>FILENAME</replaceable>.
            This is especially useful for complex filtering
            operations which require more prefixes than the
            operating system allows to be specified on a single
            command line.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="svn.ref.svndumpfilter.sw.quiet">
        <term><option>--quiet</option></term>
        <listitem>
          <para>Does not display filtering statistics.</para>
        </listitem>
      </varlistentry>

    </variablelist>

  </partintro>

  <!-- =============================================================== -->
  <refentry id="svn.ref.svndumpfilter.commands.c.exclude">

    <indexterm>
      <primary>svndumpfilter</primary>
      <secondary>subcommands</secondary>
      <tertiary>exclude</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svndumpfilter exclude</refname>
      <refpurpose>Filter out nodes with given prefixes from the dump stream.</refpurpose>
    </refnamediv>
    <refsect1>
      <title>Synopsis</title>
      <para><literal>svndumpfilter exclude PATH_PREFIX...</literal></para>
    </refsect1>
    <refsect1>
      <title>Description</title>

      <para>This can be used to exclude nodes that begin with one or
        more <replaceable>PATH_PREFIX</replaceable>es from a
        filtered dump file.</para>
    </refsect1>

    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svndumpfilter.sw.drop_empty_revs" />
<xref linkend="svn.ref.svndumpfilter.sw.pattern" />
<xref linkend="svn.ref.svndumpfilter.sw.preserve_revprops" />
<xref linkend="svn.ref.svndumpfilter.sw.quiet" />
<xref linkend="svn.ref.svndumpfilter.sw.renumber_revs" />
<xref linkend="svn.ref.svndumpfilter.sw.skip_missing_merge_sources" />
<xref linkend="svn.ref.svndumpfilter.sw.targets" />
</screen>
      </informalexample>
    </refsect1>

    <refsect1>
      <title>Examples</title>

      <para>If we have a dump file from a repository with a number
        of different picnic-related directories in it, but we want
        to keep everything <emphasis>except</emphasis>
        the <filename>sandwiches</filename> part of the
        repository, we'll exclude only that path:</para>

      <informalexample>
        <screen>
$ svndumpfilter exclude sandwiches &lt; dumpfile &gt; filtered-dumpfile
Excluding prefixes:
   '/sandwiches'

Revision 0 committed as 0.
Revision 1 committed as 1.
Revision 2 committed as 2.
Revision 3 committed as 3.
Revision 4 committed as 4.

Dropped 1 node(s):
   '/sandwiches'
$
</screen>
      </informalexample>

      <para>Beginning in Subversion 1.7,
        <command>svndumpfilter</command> can optionally treat
        the <replaceable>PATH_PREFIX</replaceable>s not merely as
        explicit substrings, but as file patterns instead.  So,
        for example, if you wished to filter out paths which ended
        with <filename>.OLD</filename>, you would do the
        following:</para>

      <informalexample>
        <screen>
$ svndumpfilter exclude --pattern "*.OLD" &lt; dumpfile &gt; filtered-dumpfile
Excluding prefix patterns:
   '/*.OLD'

Revision 0 committed as 0.
Revision 1 committed as 1.
Revision 2 committed as 2.
Revision 3 committed as 3.
Revision 4 committed as 4.

Dropped 3 node(s):
   '/condiments/salt.OLD'
   '/condiments/pepper.OLD'
   '/toppings/cheese.OLD'
$
</screen>
      </informalexample>

    </refsect1>
  </refentry>

  <!-- =============================================================== -->
  <refentry id="svn.ref.svndumpfilter.commands.c.include">

    <indexterm>
      <primary>svndumpfilter</primary>
      <secondary>subcommands</secondary>
      <tertiary>include</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svndumpfilter include</refname>
      <refpurpose>Filter out nodes without given prefixes from
        dump stream.</refpurpose>
    </refnamediv>
    <refsect1>
      <title>Synopsis</title>
      <para><literal>svndumpfilter include PATH_PREFIX...</literal></para>
    </refsect1>
    <refsect1>
      <title>Description</title>

      <para>Can be used to include nodes that begin with one or
        more <replaceable>PATH_PREFIX</replaceable>es in a
        filtered dump file (thus excluding all other paths).</para>
    </refsect1>

    <refsect1>
      <title>Options</title>

      <informalexample>
        <screen>
<xref linkend="svn.ref.svndumpfilter.sw.drop_empty_revs" />
<xref linkend="svn.ref.svndumpfilter.sw.pattern" />
<xref linkend="svn.ref.svndumpfilter.sw.preserve_revprops" />
<xref linkend="svn.ref.svndumpfilter.sw.quiet" />
<xref linkend="svn.ref.svndumpfilter.sw.renumber_revs" />
<xref linkend="svn.ref.svndumpfilter.sw.skip_missing_merge_sources" />
<xref linkend="svn.ref.svndumpfilter.sw.targets" />
</screen>
      </informalexample>
    </refsect1>

    <refsect1>
      <title>Example</title>

    <para>If we have a dump file from a repository with a number of
      different picnic-related directories in it, but want to
      keep only the <filename>sandwiches</filename> part of the
      repository, we'll include only that path:</para>

    <informalexample>
        <screen>
$ svndumpfilter include sandwiches &lt; dumpfile &gt; filtered-dumpfile
Including prefixes:
   '/sandwiches'

Revision 0 committed as 0.
Revision 1 committed as 1.
Revision 2 committed as 2.
Revision 3 committed as 3.
Revision 4 committed as 4.

Dropped 12 node(s):
   '/condiments'
   '/condiments/pepper'
   '/condiments/pepper.OLD'
   '/condiments/salt'
   '/condiments/salt.OLD'
   '/drinks'
   '/snacks'
   '/supplies'
   '/toppings'
   '/toppings/cheese'
   '/toppings/cheese.OLD'
   '/toppings/lettuce'
$
</screen>
      </informalexample>

      <para>Beginning in Subversion 1.7,
        <command>svndumpfilter</command> can optionally treat
        the <replaceable>PATH_PREFIX</replaceable>s not merely as
        explicit substrings, but as file patterns instead.  So,
        for example, if you wished to include only paths which ended
        with <filename>ks</filename>, you would do the
        following:</para>

      <informalexample>
        <screen>
$ svndumpfilter include --pattern "*ks" &lt; dumpfile &gt; filtered-dumpfile
Including prefix patterns:
   '/*ks'

Revision 0 committed as 0.
Revision 1 committed as 1.
Revision 2 committed as 2.
Revision 3 committed as 3.
Revision 4 committed as 4.

Dropped 11 node(s):
   '/condiments'
   '/condiments/pepper'
   '/condiments/pepper.OLD'
   '/condiments/salt'
   '/condiments/salt.OLD'
   '/sandwiches'
   '/supplies'
   '/toppings'
   '/toppings/cheese'
   '/toppings/cheese.OLD'
   '/toppings/lettuce'
$
</screen>
      </informalexample>

    </refsect1>
  </refentry>

  <!-- =============================================================== -->
  <refentry id="svn.ref.svndumpfilter.commands.c.help">

    <indexterm>
      <primary>svndumpfilter</primary>
      <secondary>subcommands</secondary>
      <tertiary>help</tertiary>
    </indexterm>

    <refnamediv>
      <refname>svndumpfilter help</refname>
      <refpurpose>Help!</refpurpose>
    </refnamediv>
    <refsect1>
      <title>Synopsis</title>
      <para><literal>svndumpfilter help [SUBCOMMAND...]</literal></para>
    </refsect1>
    <refsect1>
      <title>Description</title>

      <para>Displays the help message
        for <command>svndumpfilter</command>.  Unlike other help
        commands documented in this chapter, there is no witty
        commentary for this help command.  The authors of this
        book deeply regret the omission.</para>
    </refsect1>

    <refsect1>
      <title>Options</title>
      <para>None</para>
    </refsect1>

  </refentry>

</reference>

<!--
local variables: 
sgml-parent-document: ("book.xml" "reference")
end:
-->
