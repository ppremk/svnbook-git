<chapter id="svn.basic">
  <!-- @ENGLISH {{{
  <title>Fundamental Concepts</title>
  @ENGLISH }}} -->
  <title>Фундаментальные понятия</title>

  <!-- @ENGLISH {{{
  <para>This chapter is a short, casual introduction to Subversion and
    its approach to version control.  We begin with a discussion of
    general version control concepts, work our way into the specific
    ideas behind Subversion, and show some simple examples of
    Subversion in use.</para>
  @ENGLISH }}} -->
  <para>Эта глава представляет собой краткое, неформальное введение
    в Subversion и её подход к управлению версиями. Мы начнем с
    обсуждения основных понятий управления версиями, пройдём по
    основным идеям, лежащим в основе и покажем несколько простых
    примеров использования Subversion.</para>

  <!-- @ENGLISH {{{
  <para>Even though the examples in this chapter show people sharing
    collections of program source code, keep in mind that Subversion
    can manage any sort of file collection&mdash;it's not limited to
    helping computer programmers.</para>
  @ENGLISH }}} -->
  <para>Несмотря на то, что примеры в этой главе показывают людей,
    разделяющих между собой набор исходных кодов программ, помните,
    что Subversion может управлять набором файлов любого типа &mdash;
    она не ограничивается помощью программистам.</para>


<!-- @CHK {{ -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.basic.version-control-basics">
    <!-- @ENGLISH {{{
    <title>Version Control Basics</title>
    @ENGLISH }}} -->
    <title>Основы управления версиями</title>

    <indexterm>
      <primary>version control systems</primary>
    </indexterm>

    <!-- @ENGLISH {{{
    <para>A version control system (or revision control system) is a
      system that tracks incremental versions (or revisions) of files
      and, in some cases, directories over time.  Of course, merely
      tracking the various versions of a user's (or group of users')
      files and directories isn't very interesting in itself.  What
      makes a version control system useful is the fact that it allows
      you to explore the changes which resulted in each of those
      versions and facilitates the arbitrary recall of the
      same.</para>
    @ENGLISH }}} -->
    <para>Система контроля версий (или система контроля правок) это
      система, отслеживающая пошаговые версии (или правки) файлов и,
      в некоторых случаях, каталогов, в течение времени. Конечно же,
      всего лишь отслеживание различных версий файлов пользователя
      (или группы пользователей) само по себе не представляет
      интереса. Что действительно делает систему контроля версий
      востребованной, так это то, что она позволяет исследовать
      изменения и произвольно отменять их.</para>

    <!-- @ENGLISH {{{
    <para>In this section, we'll introduce some fairly high-level
      version control system components and concepts.  We'll limit our
      discussion to modern version control systems&mdash;in today's
      interconnected world, there is very little point in
      acknowledging version control systems which cannot
      operate across wide-area networks.</para>
    @ENGLISH }}} -->
    <para>В этом разделе мы представим несколько достаточно
      высокоуровневых концепций и компонентов систем управления
      версиями. Мы ограничимся обсуждением современных систем
      управления версиями &mdash; сегодня, когда весь мир
      взаимно связан, нет никакого смысла использовать системы,
      не позволяющие работать через глобальную сеть.</para>
<!-- @CHK }} -->

<!-- @CHK {{ -->
    <!-- =============================================================== -->
    <sect2 id="svn.basic.repository">
      <!-- @ENGLISH {{{
      <title>The Repository</title>
      @ENGLISH }}} -->
      <title>Репозиторий</title>

      <indexterm>
        <primary>repository</primary>
        <secondary>defined</secondary>
      </indexterm>

      <!-- @ENGLISH {{{
      <para>At the core of the version control system is a repository,
        which is the central store of that system's data.  The
        repository usually stores information in the form of a
        <firstterm>filesystem tree</firstterm>&mdash;a hierarchy of
        files and directories.  Any number of
        <firstterm>clients</firstterm> connect to the repository, and
        then read or write to these files.  By writing data, a client
        makes the information available to others; by reading data,
        the client receives information from others.
        <xref linkend="svn.basic.repository.dia-1"/> illustrates
        this.</para>
      @ENGLISH }}} -->
      <para>Ядро системы управления версиями &mdash; репозиторий,
        являющийся центральным хранилищем данных. Данные обычно
        хранятся в виде<firstterm>дерева</firstterm> &mdash; иерархии
        файлов и каталогов. <firstterm>Клиенты</firstterm> подключаются
        к репозиторию и считывают либо записывают эти файлы.
        Записывая данные, клиент делает информацию доступной остальным;
        при чтении он получает её от других.
        <xref linkend="svn.basic.repository.dia-1"/> иллюстрирует этот
        процесс.</para>

      <figure id="svn.basic.repository.dia-1">
        <!-- @ENGLISH {{{
        <title>A typical client/server system</title>
        @ENGLISH }}} -->
        <title>Типичная система клиент/сервер</title>
        <graphic fileref="images/ch02dia1.png"/>
      </figure>

      <!-- @ENGLISH {{{
      <para>Why is this interesting?  So far, this sounds like the
        definition of a typical file server.  And indeed, the
        repository <emphasis>is</emphasis> a kind of file server, but
        it's not your usual breed.  What makes the repository special
        is that as the files in the repository are changed, the
        repository remembers each version of those files.</para>
      @ENGLISH }}} -->
      <para>Что в этом интересного? В итоге, звучит как определение
        обыкновенного файлового сервера. В действительности,
        репоизторий <emphasis>и есть</emphasis> разновидность
        файлового сервера, но немного необычная. Таким особенным
        репозиторий делает его возможность сохранять каждую версию
        файла по мере его изменения.</para>

      <!-- @ENGLISH {{{
      <para>When a client reads data from the repository, it normally
        sees only the latest version of the filesystem tree.  But what
        makes a version control client interesting is that it also has
        the ability to request previous states of the filesystem from
        the repository.  A version control client can ask historical
        questions such as <quote>What did this directory contain last
        Wednesday?</quote> and <quote>Who was the last person to
        change this file, and what changes did he make?</quote>
        These are the sorts of questions that are at the heart of any
        version control system.</para>
      @ENGLISH }}} -->
      <para>Когда клиент читает данные из репозитория, обычно он видит
        лишь последнюю версию файловой системы. Но что делает клиента
        системы управления версиями дейтсвительно интересным, так это
        возможность запросить прежнее состояние файловой системы.
        Клиент может дать ответы на такие вопросы как <quote>Что
        содержал этот каталог в прошлую среду?</quote> и <quote>Кто
        последний изменял этот файл, и что именно он изменил в
        нем?</quote> Подобные вопросы лежат в основе любой системы
        управления версиями.</para>

    </sect2>
<!-- @CHK }} -->

<!-- @CHK {{ -->
    <!-- =============================================================== -->
    <sect2 id="svn.basic.working-copy">
      <!-- @ENGLISH {{{
      <title>The Working Copy</title>
      @ENGLISH }}} -->
      <title>Рабочая копия</title>

      <indexterm>
        <primary>working copy</primary>
        <secondary>defined</secondary>
      </indexterm>

      <!-- @ENGLISH {{{
      <para>A version control system's value comes from the fact that it
        tracks versions of files and directories, but the rest of the
        software universe doesn't operate on <quote>versions of files
        and directories</quote>.  Most software programs understand
        how to operate only on a <emphasis>single</emphasis> version
        of a specific type of file.  So how does a version control
        user interact with an abstract&mdash;and, often,
        remote&mdash;repository full of multiple versions of various
        files in a concrete fashion?  How does his or her word
        processing software, presentation software, source code
        editor, web design software, or some other program&mdash;all
        of which trade in the currency of simple data files&mdash;get
        access to such files?  The answer is found in the version
        control construct known as a <firstterm>working
        copy</firstterm>.</para>
      @ENGLISH }}} -->
      <para>Значимость системы управления версиями в том, что, она
        отслеживает версии файлов и каталогов, но остальныепрограммы
        не работают с <quote>версиями файлов и каталогов</quote>.
        Большая часть программ может работать только с
        <emphasis>одной</emphasis> версией файла особого типа.
        Так как же пользователю взаимодействовать с абстрактным и,
        зачастую, удаленным репозиторием, полным нескольких версий
        различных файлов? Каким образом его или её тектовый
        процессор, программа создания презентаций, редактор исходног
        кода, инструмент веб-дизайна, или какая-либо другая программа,
        получит доступ к таким файлам? Ответ находится в системе
        управления версиями и известен как
        <firstterm>рабочая копия</firstterm>.</para>

      <!-- @ENGLISH {{{
      <para>A working copy is, quite literally, a local copy of a
        particular version of a user's VCS-managed data upon which
        that user is free to work.  Working copies<footnote><para>The
        term <quote>working copy</quote> can be generally applied to
        any one file version's local instance.  When most folks use
        the term, though, they are referring to a whole directory tree
        containing files and subdirectories managed by the version
        control system.</para></footnote> appear to other software
        just as any other local directory full of files, so those
        programs don't have to be <quote>version-control-aware</quote>
        in order to read from and write to that data.  The task of
        managing the working copy and communicating changes made to
        its contents to and from the repository falls squarely to the
        version control system's client software.</para>
      @ENGLISH }}} -->
      <para>Буквально, рабочая копия является локальной копией
        конкретной версии данных, в которой пользователь может
        свободно работать. Для других программ рабочие
        копии<footnote><para>Термин <quote>рабочая копия</quote>
        применим к любому единичному файлу. Чаще всего под ним
        подразумевается весь каталог рабочей копии
        целиком.</para></footnote> выглядят обычные каталоги
        с файлами, и эти программы не обязаны <quote>знать об
        управлении версиями</quote> для того чтобы считывать или
        записывать эти данные. Задача управления рабочей копией
        а также отправлка новых версий в репозиторий, как и
        получение их из него целиком ложится на клиентское
        программное обеспечение системы управления версиями.</para>

    </sect2>
<!-- @CHK }} -->

<!-- @CHK {{ -->
    <!-- =============================================================== -->
    <sect2 id="svn.basic.vsn-models">
      <!-- @ENGLISH {{{
      <title>Versioning Models</title>
      @ENGLISH }}} -->
      <title>Модель работы</title>

      <!-- @ENGLISH {{{
      <para>If the primary mission of a version control system is to
        track the various versions of digital information over time, a
        very close secondary mission in any modern version control
        system is to enable collaborative editing and sharing of that
        data.  But different systems use different strategies to
        achieve this.  It's important to understand these different
        strategies, for a couple of reasons.  First, it will help you
        compare and contrast existing version control systems, in case
        you encounter other systems similar to Subversion.  Beyond
        that, it will also help you make more effective use of
        Subversion, since Subversion itself supports a couple of
        different ways of working.</para>
      @ENGLISH }}} -->
      <para>Если основной задачей системы управления версиями является
        отслеживание версий цифровой информации с течением времени, то
        второй задачей любой соверменной системы управления версиями
        является обеспечение совместной работы с этой информацией. Для
        достижения этой цели различные системы использую различные
        стратегии. Понимание этих стратегий важно по нескольким
        причинам. Во-первых, это поможет сравнить и сопоставить
        существующие системы управления версиями, если вы столкнулись с
        другой системой, похожей на Subversion. Во-вторых, это поможет
        вам более эффективно использовать Subversion, так как сама
        Subversion поддерживает несколько различных стратегий.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.basic.vsn-models.problem-sharing">
        <!-- @ENGLISH {{{
        <title>The problem of file sharing</title>
        @ENGLISH }}} -->
        <title>Проблема разделения файлов</title>
<!-- @CHK }} -->

        <!-- @ENGLISH {{{
        <para>All version control systems have to solve the same
          fundamental problem: how will the system allow users to
          share information, but prevent them from accidentally
          stepping on each other's feet?  It's all too easy for users
          to accidentally overwrite each other's changes in the
          repository.</para>
        @ENGLISH }}} -->
        <para>Всем системам управления версиями приходится решать одну
          и ту же основную проблему: как предоставить пользователям
          возможность совместного использования информации, при этом
          не позволяя им наступать друг другу на пятки? Дело в том,
          что пользователи запросто могут случайно перезаписать в
          хранилище изменения, сделанные друг другом.</para>

        <!-- @ENGLISH {{{
        <para>Consider the scenario shown in
          <xref linkend="svn.basic.vsn-models.problem-sharing.dia-1"/>.
          Suppose we have two coworkers, Harry and Sally.  They each
          decide to edit the same repository file at the same time.
          If Harry saves his changes to the repository first, it's
          possible that (a few moments later) Sally could accidentally
          overwrite them with her own new version of the file.  While
          Harry's version of the file won't be lost forever (because
          the system remembers every change), any changes Harry made
          <emphasis>won't</emphasis> be present in Sally's newer version
          of the file, because she never saw Harry's changes to begin
          with.  Harry's work is still effectively lost&mdash;or at
          least missing from the latest version of the file&mdash;and
          probably by accident.  This is definitely a situation we want
          to avoid!</para>
        @ENGLISH }}} -->
        <para>Рассматриваемую ситуацию иллюстрирует <xref
          linkend="svn.basic.vsn-models.problem-sharing.dia-1"/>.
          Допустим, у нас есть два разработчика &mdash; Гарри и Салли.
          Каждый из них решил одновременно отредактировать один и тот
          же файл из репозитория. Если первым свои изменения в
          репозитории сохранит Гарри, то возможно, что (несколькими
          минутами позже) Салли может непреднамеренно перезаписать
          их своей новой версией файла. Несмотря на то, что версия
          файла Гарри не будет полностью потеряна (так как система
          помнит каждое изменение), внесенные Гарри изменения
          <emphasis>не будут </emphasis>отражены в новой версии
          файла Салли, потому что, начиная, она не видела изменения
          Гарри. Работа Гарри фактически потеряна &mdash; или, по
          крайней мере, отсутствует в последней версии файла &mdash;
          по случайности.
          Как раз этой ситуации мы и хотим избежать!</para>

        <figure id="svn.basic.vsn-models.problem-sharing.dia-1">
          <!-- @ENGLISH {{{
          <title>The problem to avoid</title>
          @ENGLISH }}} -->
          <title>Проблема потери изменений</title>
          <graphic fileref="images/ch02dia2.png"/>
        </figure>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.basic.vsn-models.lock-unlock">
        <!-- @ENGLISH {{{
        <title>The lock-modify-unlock solution</title>
        @ENGLISH }}} -->
        <title>Модель блокирование-именение-разблокирование</title>

        <indexterm>
          <primary>version control</primary>
          <secondary>models</secondary>
          <tertiary>lock-modify-unlock</tertiary>
        </indexterm>

        <!-- @ENGLISH {{{
        <para>Many version control systems use a
          <firstterm>lock-modify-unlock</firstterm> model to address
          the problem of many authors clobbering each other's work.
          In this model, the repository allows only one person to
          change a file at a time.  This exclusivity policy is managed
          using locks.  Harry must <quote>lock</quote> a file before
          he can begin making changes to it.  If Harry has locked a
          file, Sally cannot also lock it, and therefore cannot make
          any changes to that file.  All she can do is read the file
          and wait for Harry to finish his changes and release his
          lock.  After Harry unlocks the file, Sally can take her turn
          by locking and editing the file.
          <xref linkend="svn.basic.vsn-models.lock-unlock.dia-1"/>
          demonstrates this simple solution.</para>
        @ENGLISH }}} -->
        <para>Для того, чтобы несколько авторов не мешало работать друг
          другу, многие системы управления версиями применяют модель
          <firstterm>блокирование-изменение-разблокирование</firstterm>.
          Эта модель запрещает одновременное редактирование файла
          несколькими пользователями. Эксклюзивность доступа
          гарантируется блокировками. Перед началом редактирования
          Гарри должен <quote>заблокировать</quote> файл. Если Гарри
          заблокирует файл, Салли уже не сможет его заблокировать
          и внести свои изменения. Ей остается только читать файл
          и ждать, пока Гарри закончит свои изменения и снимет
          блокировку. Лишь после того, как Гарри разблокирует файл,
          Салли сможет получить его, заблокировать и начать
          редактирование. <xref
          linkend="svn.basic.vsn-models.lock-unlock.dia-1"/>
          демонстрирует это простое решение.</para>

        <figure id="svn.basic.vsn-models.lock-unlock.dia-1">
          <!-- @ENGLISH {{{
          <title>The lock-modify-unlock solution</title>
          @ENGLISH }}} -->
          <title>Модель блокирование-изменение-разблокирование</title>
          <graphic fileref="images/ch02dia3.png"/>
        </figure>

        <!-- @ENGLISH {{{
        <para>The problem with the lock-modify-unlock model is that it's
          a bit restrictive and often becomes a roadblock for
          users:</para>
        @ENGLISH }}} -->
        <para>Проблемой модели блокирование-изменение-разблокирование
          является то, что она немного ограниченная и часто доставляет
          неудобства пользователям:</para>

        <itemizedlist>
          <listitem>
            <!-- @ENGLISH {{{
            <para><emphasis>Locking may cause administrative
              problems.</emphasis>

              Sometimes Harry will lock a file and then forget about it.
              Meanwhile, because Sally is still waiting to edit the file,
              her hands are tied.  And then Harry goes on vacation.  Now
              Sally has to get an administrator to release Harry's lock.
              The situation ends up causing a lot of unnecessary delay
              and wasted time.</para>
            @ENGLISH }}} -->
            <para><emphasis>Блокирование может вызвать проблемы
              администрирования.</emphasis>

              Иногда Гарри может заблокировать файл, а затем забыть об
              этом. Между тем, у Салли, ожидающей редактирования файла,
              будут связаны руки. А Гарри тем временем уехал в отпуск.
              Теперь Салли, для снятия блокировки Гарри, нужно обращаться
              к администратору. Ситуация заканчивается не нужной задержкой
              и потерянным временем.</para>
          </listitem>

          <listitem>
            <!-- @ENGLISH {{{
            <para><emphasis>Locking may cause unnecessary
              serialization.</emphasis>

              What if Harry is editing the beginning of a text file,
              and Sally simply wants to edit the end of the same file?
              These changes don't overlap at all.  They could easily
              edit the file simultaneously, and no great harm would
              come, assuming the changes were properly merged together.
              There's no need for them to take turns in this
              situation.</para>
            @ENGLISH }}} -->
            <para><emphasis>Блокирование может вызвать излишнюю
              пошаговость.</emphasis>

              Вполне вероятна ситуация, когда Гарри редактирует начало
              текстового файла, а Салли нужно отредактировать концовку
              этого же файла? Эти изменения совсем не перекрываются.
              Они могли бы легко редактировать файл одновременно, и при
              условии корректного слияния изменений это не вызвало бы
              никаких особенных проблем. Нет никакой необходимости
              блокировать файл в такой ситуации.</para>
          </listitem>

          <listitem>
            <!-- @ENGLISH {{{
            <para><emphasis>Locking may create a false sense of
              security.</emphasis>

              Suppose Harry locks and edits file A, while Sally
              simultaneously locks and edits file B.  But what if A and
              B depend on one another, and the changes made to each are
              semantically incompatible?  Suddenly A and B don't work
              together anymore.  The locking system was powerless to
              prevent the problem&mdash;yet it somehow provided a false
              sense of security.  It's easy for Harry and Sally to
              imagine that by locking files, each is beginning a safe,
              insulated task, and thus they need not bother discussing
              their incompatible changes early on.  Locking often
              becomes a substitute for real communication.</para>
            @ENGLISH }}} -->
            <para><emphasis>Блокирование может вызвать ложное чувство
              безопасности.</emphasis>

              Предположим, что Гарри блокирует и редактирует файл А, в
              то время как Салли одновременно блокирует и редактирует
              файл В. Но допустим, что А и В зависят друг от друга и
              сделанные в каждом изменения семантически не совместимы.
              Неожиданно А и В больше не работают вместе. Блокирующая
              система бессильна в предотвращении проблемы &mdash;
              вместо этого она обеспечила ложное чувство безопасности.
              Для Гарри и Салли просто вообразить, что, блокируя файлы
              каждый начинает безопасную изолированную задачу и не
              беспокоиться об обсуждении их несовместимых изменений
              заранее. Зачастую, блокирование подменяет настоящее
              общение.</para>
          </listitem>
        </itemizedlist>

      </sect3>

<!-- @CHK {{ -->
      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.basic.vsn-models.copy-merge">
        <!-- @ENGLISH {{{
        <title>The copy-modify-merge solution</title>
        @ENGLISH }}} -->
        <title>Модель копирование-изменение-слияние</title>

        <indexterm>
          <primary>version control</primary>
          <secondary>models</secondary>
          <tertiary>copy-modify-merge</tertiary>
        </indexterm>

        <!-- @ENGLISH {{{
        <para>Subversion, CVS, and many other version control systems
          use a <firstterm>copy-modify-merge</firstterm> model as an
          alternative to locking.  In this model, each user's client
          contacts the project repository and creates a personal
          working copy.  Users then work simultaneously and
          independently, modifying their private copies.  Finally, the
          private copies are merged together into a new, final
          version.  The version control system often assists with the
          merging, but ultimately, a human being is responsible for
          making it happen correctly.</para>
        @ENGLISH }}} -->
          <para>Subversion, CVS и ряд других систем управления версиями
          в качестве альтернативы блокированию пользуются моделью
          <firstterm>копирование-изменение-слияние</firstterm>. В этой
          модели каждый пользовательский клиент связывается с хранилищем
          проекта и создает персональную <firstterm>рабочую
          копию</firstterm> &mdash; локальное отражение файлов и каталогов
          репозитория. После этого пользователи работают одновременно и
          независимо друг от друга, изменяя свои личные копии. В конце
          концов, личные копии сливаются в новую, итоговую версию. Обычно
          система управления версиями помогает в слиянии, но, разумеется,
          за его корректное выполнение отвечает человек.</para>

        <!-- @ENGLISH {{{
        <para>Here's an example.  Say that Harry and Sally each create
          working copies of the same project, copied from the
          repository.  They work concurrently and make changes to the
          same file A within their copies.  Sally saves her changes to
          the repository first.  When Harry attempts to save his changes
          later, the repository informs him that his file A is
          <firstterm>out of date</firstterm>.  In other words, file A
          in the repository has somehow changed since he last copied
          it.  So Harry asks his client
          to <firstterm>merge</firstterm> any new changes from the
          repository into his working copy of file A.  Chances are
          that Sally's changes don't overlap with his own; once he has
          both sets of changes integrated, he saves his working copy
          back to the repository.
          <xref linkend="svn.basic.vsn-models.copy-merge.dia-1"/> and
          <xref linkend="svn.basic.vsn-models.copy-merge.dia-2"/> show
          this process.</para>
        @ENGLISH }}} -->
        <para>В качестве примера предположим, что Гарри и Салли создали
          рабочие копии одного и того же проекта, скопировав их из
          хранилища. Они работают одновременно и в своих рабочих копиях
          вносят изменения в один и тот же файл А. Первой свои изменения
          в хранилище сохраняет Салли. Когда позже Гарри попытается
          сохранить свои изменения, хранилище проинформирует его о том,
          что его файл А <firstterm>устарел</firstterm>. Другими словами,
          файл А каким-то образом изменился со времени, когда он его
          последний раз копировал. Поэтому Гарри просит свой клиент
          <firstterm>слить</firstterm> любые изменения из хранилища
          в его рабочую копию файла А. По счастливому совпадению,
          изменения Салли не перекрываются с его собственными; после
          объединения обоих наборов изменений он сохраняет свою рабочую
          копию обратно в хранилище. <xref
          linkend="svn.basic.vsn-models.copy-merge.dia-1"/> и
          <xref linkend="svn.basic.vsn-models.copy-merge.dia-2"/>
          показывают этот процесс.</para>

        <figure id="svn.basic.vsn-models.copy-merge.dia-1">
          <!-- @ENGLISH {{{
          <title>The copy-modify-merge solution</title>
          @ENGLISH }}} -->
          <title>Модель копирование-изменение-слияние</title>
          <graphic fileref="images/ch02dia4.png"/>
        </figure>

        <figure id="svn.basic.vsn-models.copy-merge.dia-2">
          <!-- @ENGLISH {{{
          <title>The copy-modify-merge solution (continued)</title>
          @ENGLISH }}} -->
          <title>Модель копирование-изменение-слияние (продолжение)</title>
          <graphic fileref="images/ch02dia5.png"/>
        </figure>

        <indexterm>
          <primary>conflicts</primary>
        </indexterm>

        <!-- @ENGLISH {{{
        <para>But what if Sally's changes <emphasis>do</emphasis> overlap
          with Harry's changes?  What then?  This situation is called a
          <firstterm>conflict</firstterm>, and it's usually not much
          of a problem.  When Harry asks his client to merge the
          latest repository changes into his working copy, his copy of
          file A is somehow flagged as being in a state of conflict:
          he'll be able to see both sets of conflicting changes and
          manually choose between them.  Note that software can't
          automatically resolve conflicts; only humans are capable of
          understanding and making the necessary intelligent choices.
          Once Harry has manually resolved the overlapping
          changes&mdash;perhaps after a discussion with Sally&mdash;he
          can safely save the merged file back to the
          repository.</para>
        @ENGLISH }}} -->
        <para>А что будет, если изменения Салли перекрывают 
          <emphasis>изменения</emphasis> Гарри? Что тогда? Эта ситуация
          называется <firstterm>конфликтом</firstterm> и, как правило,
          это не является большой проблемой. Когда Гарри просит свой
          клиент слить последние изменения из хранилища в рабочую копию,
          его копия файла А помечается некоторым образом как находящаяся
          в состоянии конфликта: у него будет возможность видеть оба
          набора конфликтующих изменений и вручную сделать между ними
          выбор. Помните, что ПО не может автоматически разрешать
          конфликты; только человек способен к пониманию и выполнению
          осмысленного выбора. Разрешив вручную перекрывающиеся
          изменения &mdash; возможно, после обсуждения с Салли &mdash;
          он может безопасно сохранить объединенный файл обратно в
          хранилище.</para>

        <!-- @ENGLISH {{{
        <para>The copy-modify-merge model may sound a bit chaotic, but
          in practice, it runs extremely smoothly.  Users can work in
          parallel, never waiting for one another.  When they work on
          the same files, it turns out that most of their concurrent
          changes don't overlap at all; conflicts are infrequent.  And
          the amount of time it takes to resolve conflicts is usually
          far less than the time lost by a locking system.</para>
        @ENGLISH }}} -->
        <para>Модель копирование-изменение-слияние может выглядеть немного
        хаотично, однако, на практике она отлично работает. Пользователи
        могут работать параллельно, не тратя время на ожидание друг друга.
        При работе над одними и теми же файлами оказывается, что
        большинство параллельно вносимых изменений совсем не перекрываются;
        конфликты бывают редко. И время, которое было потрачено на
        разрешение конфликтов, как правило, значительно меньше времени,
        отнимаемого блокирующей системой.</para>

        <!-- @ENGLISH {{{
        <para>In the end, it all comes down to one critical factor:
          user communication.  When users communicate poorly, both
          syntactic and semantic conflicts increase.  No system can
          force users to communicate perfectly, and no system can
          detect semantic conflicts.  So there's no point in being
          lulled into a false sense of security that a locking system
          will somehow prevent conflicts; in practice, locking seems
          to inhibit productivity more than anything else.</para>
        @ENGLISH }}} -->
        <para>Наконец, все сходится к такому критическому фактору как
          взаимодействие пользователей. При плохом взаимопонимании
          увеличивается количество как синтаксических, так и
          семантических конфликтов. Нет системы, которая может
          повысить уровень взаимопонимания, и нет системы, которая
          может определять семантические конфликты. Не стоит возлагать
          большие надежды на то, что блокирующая система лучше
          защищена от конфликтов; на практике блокирование снижает
          продуктивность как ничто другое.</para>

        <sidebar id="svn.basic.vsn-models.copy-merge.sb-1">
          <!-- @ENGLISH {{{
          <title>When Locking Is Necessary</title>
          @ENGLISH }}} -->
          <title>Когда блокирование необходимо</title>

          <!-- @ENGLISH {{{
          <para>While the lock-modify-unlock model is considered
            generally harmful to collaboration, sometimes
            locking is appropriate.</para>
          @ENGLISH }}} -->
          <para>Несмотря на то, что модель
            блокирование-изменение-разблокирование названа, в целом,
            губительной для командной работы, все-таки есть моменты,
            когда блокирование уместно.</para>

          <!-- @ENGLISH {{{
          <para>The copy-modify-merge model is based on the assumption
            that files are contextually mergeable&mdash;that is, that the
            majority of the files in the repository are line-based text
            files (such as program source code).  But for files with
            binary formats, such as artwork or sound, it's often
            impossible to merge conflicting changes.  In these
            situations, it really is necessary for users to take strict
            turns when changing the file.  Without serialized access,
            somebody ends up wasting time on changes that are ultimately
            discarded.</para>
          @ENGLISH }}} -->
          <para>Модель копирование-изменение-слияние основывается на
            предположении о том, что файлы контекстно-объединяемы, и
            оно справедливо, если большинство файлов в хранилище &mdash;
            текстовые файлы (например, исходные коды программ). Но для
            файлов бинарных форматов, таких как графические или звуковые,
            как правило невозможно объединить конфликтующие изменения.
            В таких ситуациях пользователям действительно необходимо быть
            внимательными при изменении файла. Без раздельного доступа
            кто-то может впустую потратить время на изменения, которые
            в конце концов будут потеряны.</para>

          <!-- @ENGLISH {{{
          <para>While Subversion is primarily a copy-modify-merge
            system, it still recognizes the need to lock an occasional
            file, and thus provides mechanisms for this.  We discuss
            this feature in <xref linkend="svn.advanced.locking"/>.</para>
          @ENGLISH }}} -->
          <para>Несмотря на то, что Subversion в первую очередь является
            системой типа копирование-изменение-слияние, в ней признается
            необходимость блокирования определенных файлов и предлагаются
            соответствующие механизмы. Подробнее эта возможность
            рассматривается далее в этой книге, см.
            <xref linkend="svn.advanced.locking"/>.</para>

        </sidebar>

      </sect3>
    </sect2>
  </sect1>
<!-- @CHK }} -->

<!-- @CHK {{ -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.basic.in-action">
    <!-- @ENGLISH {{{
    <title>Version Control the Subversion Way</title>
    @ENGLISH }}} -->
    <title>Управление версиями в стиле Subversion</title>

<!-- @CHK {{ -->
    <!-- @ENGLISH {{{
    <para>We've mentioned already that Subversion is a modern,
      network-aware version control system.  As we described in
      <xref linkend="svn.basic.version-control-basics"/> (our
      high-level version control overview), a repository serves as the
      core storage mechanism for Subversion's versioned data, and it's
      via working copies that users and their software programs
      interact with that data.  In this section, we'll begin to
      introduce the specific ways in which Subversion implements
      version control.</para>
    @ENGLISH }}} -->
    <para>Мы уже упоминали, что Subversion &mdash; это соверменная
      сетевая система управления версиями.  Как было описано в
      <xref linkend="svn.basic.version-control-basics"/> (наше
      высокоуровневое введение в системы управления версиями),
      репозиторий служит в качестве ядра механизма хранения для
      версионированных данных Subversion и с ним работают посредством
      рабочих копий, с которыми работают пользователи и программы для
      взаимодействия с этими данными.  В этом разделе мы начнем представление
      тех способов, которыми Subversion реализует управление версиями.</para>
<!-- @CHK }} -->

    <!-- =============================================================== -->
    <sect2 id="svn.basic.svn-repositories">
      <!-- @ENGLISH {{{
      <title>Subversion Repositories</title>
      @ENGLISH }}} -->
      <title>Репозитории Subversion</title>

      <!-- @ENGLISH {{{
      <para>Subversion implements the concept of a version control
        repository much as any other modern version control system
        would.  Unlike a working copy, a Subversion repository is an
        abstract entity, able to be operated upon almost exclusively
        by Subversion's own libraries and tools.  As most of a user's
        Subversion interactions involve the use of the Subversion
        client and occur in the context of a working copy, we spend
        the majority of this book discussing the Subversion working
        copy and how to manipulate it.  For the finer details of the
        repository, though, check out
        <xref linkend="svn.reposadmin"/>.</para>
      @ENGLISH }}} -->
      <para>Subversion реализует концепцию контроля версий также как
        многие соверменные системы управления версиями. В отличие от
        рабочей копии, репозиторий Subversion это абстрактная сущность
        управляемая почти исключительно инструментами и библиотеками
        Subversion. Поскольку большая часть взаимодействия пользователя
        связана с использованием клиента и происходит в контексте
        рабочей копии, мы потратим большую часть книги на обсуждение
        рабочих копий и управления ими. Для дополнительной информации о
        репозитории Subversion существует
        <xref linkend="svn.reposadmin"/>.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.basic.in-action.revs">
      <!-- @ENGLISH {{{
      <title>Revisions</title>
      @ENGLISH }}} -->
      <title>Ревизии</title>

      <indexterm>
        <primary>revisions</primary>
        <secondary>defined</secondary>
      </indexterm>

      <!-- @ENGLISH {{{
      <para>A Subversion client commits (that is, communicates the
        changes made to) any number of files and directories as a
        single atomic transaction.  By atomic transaction, we mean
        simply this: either all of the changes are accepted into the
        repository, or none of them is.  Subversion tries to retain
        this atomicity in the face of program crashes, system crashes,
        network problems, and other users' actions.</para>
      @ENGLISH }}} -->
      <para>Клиент Subversion фиксирует (то есть, передаёт в
        перозиторий) изменения любого количества файлов и каталогов
        как одну атомарную транзакцию. Под атомарностью транзакции
        подразумевается следующее: либо принимаются все изменения,
        либо ни одно из них. Subversion tries to retain this
        atomicity in the face of program crashes, system crashes,
        network problems, and other users' actions.</para>
<!-- @CHK }} -->

<!-- @CHK {{ -->
      <!-- @ENGLISH {{{
      <para>Each time the repository accepts a commit, this creates a
        new state of the filesystem tree, called a
        <firstterm>revision</firstterm>.  Each revision is assigned a
        unique natural number, one greater than the number assigned to
        the previous revision.  The initial revision of a freshly
        created repository is numbered 0 and consists of nothing but
        an empty root directory.</para>
      @ENGLISH }}} -->
      <para>Каждый раз, когда происходит фиксация, создаётся
        новое состояние файловой системы, которое называется
        <firstterm>ревизией</firstterm>. Каждая ревизия получает
        уникальный номер, на единицу больший номера предыдущей
        ревизии. Начальная правка только что созданного хранилища
        получает номер 0 и не содержит ничего, кроме пустого
        каталога.</para>

      <!-- @ENGLISH {{{
      <para><xref linkend="svn.basic.in-action.revs.dia-1"/>
        illustrates a nice way to visualize the repository.  Imagine
        an array of revision numbers, starting at 0, stretching from
        left to right.  Each revision number has a filesystem tree
        hanging below it, and each tree is a <quote>snapshot</quote>
        of the way the repository looked after a commit.</para>
      @ENGLISH }}} -->
      <para><xref linkend="svn.basic.in-action.revs.dia-1"/> отлично
        иллюстрирует хранилище. Представьте массив номеров ревизий,
        начинающийся с 0, с направлением слева направо. Каждый номер
        ревизии имеет соответствующее дерево файлов, а каждое дерево
        представляет собой <quote>снимок</quote> того, как репозиторий
        выглядел после фиксации.</para>
<!-- @CHK }} -->

<!-- @CHK {{ -->
      <figure id="svn.basic.in-action.revs.dia-1">
        <!-- @ENGLISH {{{
        <title>Tree changes over time</title>
        @ENGLISH }}} -->
        <title>Изменения дерева с течением времени</title>
        <graphic fileref="images/ch02dia7.png"/>
      </figure>
<!-- @CHK }} -->

<!-- @CHK {{ -->
      <sidebar>
        <!-- @ENGLISH {{{
        <title>Global Revision Numbers</title>
        @ENGLISH }}} -->
        <title>Глобальные номера ревизий</title>

        <indexterm>
          <primary>revisions</primary>
          <secondary>global</secondary>
        </indexterm>

        <!-- @ENGLISH {{{
        <para>Unlike most version control systems, Subversion's
          revision numbers apply to <emphasis>the entire repository
          tree</emphasis>, not individual files.  Each revision number
          selects an entire tree, a particular state of the repository
          after some committed change.  Another way to think about it
          is that revision N represents the state of the repository
          filesystem after the Nth commit.  When Subversion users talk
          about <quote>revision 5 of
          <filename>foo.c</filename>,</quote> they really mean
          <quote><filename>foo.c</filename> as it appears in revision
          5.</quote> Notice that in general, revisions N and M of a
          file do <emphasis>not</emphasis> necessarily differ!  Many
          other version control systems use per-file revision numbers,
          so this concept may seem unusual at first. (Former CVS users
          might want to see <xref linkend="svn.forcvs"/> for more
          details.)</para>
        @ENGLISH }}} -->
        <para>В отличие от большинства систем управления версиями,
          номера ревизий в Subversion относятся
          <emphasis>ко всему дереву</emphasis>, а не только к отдельным
          файлам. Каждый номер ревизии соответствует целому дереву,
          отдельному состоянию репозитория после зафиксированного
          изменения. Иначе говоря, правка N представляет состояние
          файловой системы репозитория после выполнения N-ой фиксации.
          Когда пользователи Subversion говорят о <quote>ревизии 5
          <filename>foo.c</filename></quote>, на самом деле речь идет
          о <quote><filename>foo.c</filename> входящем в ревизию
          5</quote>. Заметьте, что ревизии N и M файла <emphasis>не
          обязательно</emphasis> будут отличаться! Многие системы
          управления версиями исполюзуют пофайловую нумерацию ревизий,
          так что этот подход на первых порах может показаться
          непривычным. (Бывшие пользователи CVS могут обратиться за
          более подробной информацией к
          <xref linkend="svn.forcvs"/>.)</para>
      </sidebar>
<!-- @CHK }} -->

<!-- @CHK {{ -->
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.advanced.reposurls">
      <!-- @ENGLISH {{{
      <title>Addressing the Repository</title>
      @ENGLISH }}} -->
      <title>Обращение к репозиторию</title>

      <indexterm>
        <primary>svn</primary>
        <secondary>syntax</secondary>
        <tertiary>URLs</tertiary>
      </indexterm>
      <indexterm>
        <primary>svnsync</primary>
        <secondary>syntax</secondary>
        <tertiary>URLs</tertiary>
      </indexterm>

      <!-- @ENGLISH {{{
      <para>Subversion client programs use URLs to identify versioned
        files and directories in Subversion repositories.  For the
        most part, these URLs use the standard syntax, allowing for
        server names and port numbers to be specified as part of the
        URL.</para>
      @ENGLISH }}} -->
      <para>Программа-клиент Subversion использует
        URL<footnote><para>Единый указатель ресурсов (Uniform Resource
        Locator)</para></footnote> для идентификации файлов и каталогов
        в репозитории. В большинстве случаем используется стандартный
        синтаксис позволяющий указать адреса и порты как часть
        URL.</para>

      <informalexample>
        <itemizedlist spacing="compact">
          <listitem>
            <simpara>http://svn.example.com/svn/project</simpara>
          </listitem>
          <listitem>
            <simpara>http://svn.example.com:9834/repos</simpara>
          </listitem>
        </itemizedlist>
      </informalexample>

      <!-- @ENGLISH {{{
      <para>Subversion repository URLs aren't limited to only
        the <literal>http://</literal> variety.  Because Subversion
        offers several different ways for its clients to communicate
        with its servers, the URLs used to address the repository
        differ subtly depending on which repository access mechanism
        is employed.  <xref linkend="svn.basic.in-action.wc.tbl-1"/>
        describes how different URL schemes map to the available
        repository access methods.  For more details about
        Subversion's server options, see
        <xref linkend="svn.serverconfig"/>.</para>
      @ENGLISH }}} -->
      <para>Адреса репозитория Subversion не ограничивается схемой
        <literal>http://</literal>. Так как Subversion предлагает
        различные способы доступа к репозиторию, адрес изменяется в
        зависимости от метода.
        <xref linkend="svn.basic.in-action.wc.tbl-1"/>
        описывает схемы URL для разных методов доступа.
        Дополнительную информацию о сервере Subversion содержит
        <xref linkend="svn.serverconfig"/>.</para>

      <table id="svn.basic.in-action.wc.tbl-1">
        <!-- @ENGLISH {{{
        <title>Repository access URLs</title>
        @ENGLISH }}} -->
        <title>URL доступа к репозиторию</title>
        <tgroup cols="2">
          <thead>
            <row>
              <!-- @ENGLISH {{{
              <entry>Schema</entry>
              <entry>Access method</entry>
              @ENGLISH }}} -->
              <entry>Схема</entry>
              <entry>Метод доступа</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>file:///</literal></entry>
              <!-- @ENGLISH {{{
              <entry>Direct repository access (on local disk)</entry>
              @ENGLISH }}} -->
              <entry>Прямой доступ к репозиторию (файлы
                на локальном диске)</entry>
            </row>
            <row>
              <entry><literal>http://</literal></entry>
              <!-- @ENGLISH {{{
              <entry>Access via WebDAV protocol to Subversion-aware
                Apache server</entry>
              @ENGLISH }}} -->
              <entry>Доступ по протоколу WebDAV через веб-сервер
                Apache</entry>
            </row>
            <row>
              <entry><literal>https://</literal></entry>
              <!-- @ENGLISH {{{
              <entry>Same as <literal>http://</literal>, but with
                SSL encryption</entry>
              @ENGLISH }}} -->
              <entry>Тоже что <literal>http://</literal>, но с
                шифрованием SSL</entry>
            </row>
            <row>
              <entry><literal>svn://</literal></entry>
              <!-- @ENGLISH {{{
              <entry>Access via custom protocol to an
                <literal>svnserve</literal> server</entry>
              @ENGLISH }}} -->
              <entry>Доступ к серверу<literal>svnserve</literal>
                по собственному протоколу</entry>
            </row>
            <row>
              <entry><literal>svn+ssh://</literal></entry>
              <!-- @ENGLISH {{{
              <entry>Same as <literal>svn://</literal>, but through
                an SSH tunnel</entry>
              @ENGLISH }}} -->
              <entry>Тоже что <literal>svn://</literal>, но
                через SSH-туннель</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
<!-- @CHK }} -->

<!-- @CHK {{ -->
      <!-- @ENGLISH {{{
      <para>Subversion's handling of URLs has some notable nuances.
        For example, URLs containing the <literal>file://</literal>
        access method (used for local repositories) must, in
        accordance with convention, have either a server name
        of <literal>localhost</literal> or no server name at
        all:</para>
      @ENGLISH }}} -->
      <para>Однако, в обработке URL системой Subversion есть некоторые
        нюансы, о которых нужно помнить. Например, в соответствии с 
        принятыми соглашениями, URL, использующий метод доступа
        <literal>file:</literal> (этот метод доступа используется для 
        локальных репозиториев), должен либо включать имя сервера
        <literal>localhost</literal>, либо вообще не содержать имени 
        сервера:</para>

      <informalexample>
        <itemizedlist spacing="compact">
          <listitem>
            <simpara>file:///var/svn/repos</simpara>
          </listitem>
          <listitem>
            <simpara>file://localhost/var/svn/repos</simpara>
          </listitem>
        </itemizedlist>
      </informalexample>

      <!-- @ENGLISH {{{
      <para>Also, users of the <literal>file://</literal> scheme on
        Windows platforms will need to use an unofficially
        <quote>standard</quote> syntax for accessing repositories
        that are on the same machine, but on a different drive than
        the client's current working drive.  Either of the two
        following URL path syntaxes will work, where
        <literal>X</literal> is the drive on which the repository
        resides:</para>
      @ENGLISH }}} -->
      <para>Кроме того, тем, кто применяет схему
        <literal>file:</literal> на платформе Windows, необходимо
        использовать неофициальные <quote>стандартные</quote>
        правила записи при обращении к репозиторию, который
        находится на одном компьютере, но на разных дисках с
        клиентом. Обе приведенные ниже записи будут работать;
        здесь <literal>X</literal> &mdash; это имя диска, на
        котором находится хранилище:</para>
<!-- @CHK }} -->

<!-- @CHK {{ -->
      <informalexample>
        <itemizedlist spacing="compact">
          <listitem>
            <simpara>file:///X:/var/svn/repos</simpara>
          </listitem>
          <listitem>
            <simpara>file:///X|/var/svn/repos</simpara>
          </listitem>
        </itemizedlist>
      </informalexample>

      <!-- @ENGLISH {{{
      <para>Note that a URL uses forward slashes even though the
        native (non-URL) form of a path on Windows uses backslashes.
        Also note that when using
        the <literal>file:///<replaceable>X</replaceable>|/</literal>
        form at the command line, you need to quote the URL (wrap it
        in quotation marks) so that the vertical bar character is not
        interpreted as a pipe.</para>
      @ENGLISH }}} -->
      <para>Обратите внимание на использование косой черты, хотя на
        платформе Windows для формирования пути используется обратная
        косая черта. Также заметьте, что для использования формы
        <literal>file:///<replaceable>X</replaceable>|/</literal>
        в командной строке, вам необходимо заключить весь пусть в
        кавычки, чтобы вертикальная черта не была воспринята
        интерпретатором как символ конвейр.</para>

      <note>
        <!-- @ENGLISH {{{
        <para>You cannot use Subversion's <literal>file://</literal> URLs
          in a regular web browser the way typical
          <literal>file://</literal> URLs can.  When you attempt to view
          a <literal>file://</literal> URL in a regular web browser, it
          reads and displays the contents of the file at that location
          by examining the filesystem directly.  However, Subversion's
          resources exist in a virtual filesystem (see <xref
          linkend="svn.developer.layerlib.repos" />), and your browser
          will not understand how to interact with that
          filesystem.</para>
        @ENGLISH }}} -->
        <para>Вы не сможете использовать адрес Subversion
          <literal>file://</literal> также, как вы используете обычный
          адрес <literal>file://</literal>. При попытке открыть
          <literal>file://</literal> в браузере, он обращается к файлам
          напрямую, в то время как ресурсы Subversion находятся в
          виртуальной файловой системе (см. <xref
          linkend="svn.developer.layerlib.repos" />), и браузер не
          может взаимодействовать с этой системой.</para>
      </note>

      <!-- @ENGLISH {{{
      <para>The Subversion client will automatically encode URLs as
        necessary, just like a web browser does.  For example, the URL
        <literal>http://host/path with space/project/españa</literal>
        &mdash; which contains both spaces and upper-ASCII characters
        &mdash; will be automatically interpreted by Subversion as if
        you'd provided
        <literal>http://host/path%20with%20space/project/espa%C3%B1a</literal>.
        If the URL contains spaces, be sure to place it within
        quotation marks at the command line so that your shell treats
        the whole thing as a single argument to the program.</para>
      @ENGLISH }}} -->
      <para>Клиент Subversion автоматически кодирует адрес, также как
        это делает веб-браузер. Например, URL
        <literal>http://host/path with space/project/españa</literal>,
        содержащий пробелы и символы Юникода, будет автоматически
        закодирован как
        <literal>http://host/path%20with%20space/project/espa%C3%B1a</literal>.
        Если адрес содержит пробелы, убедитесь, что заключили его в
        кавычки, чтобы интерпретатор воспринял всю строку адреса
        как единый аргумент программы-клиента.</para>
<!-- @CHK }} -->

<!-- @CHK {{ -->
      <!-- @ENGLISH {{{
      <para>There is one notable exception to Subversion's handling of
        URLs which also applies to its handling of local paths in many
        contexts, too.  If the final path component of your URL or
        local path contains an at sign (<literal>@</literal>), you need
        to use a special syntax&mdash;described in
        <xref linkend="svn.advanced.pegrevs" />&mdash;in order to make
        Subversion properly address that resource.</para>
      @ENGLISH }}} -->
      <para>Есть одно заметное исключение в том как Subversion обрабатывает
        URL, и во многих случаях это касается также и обработки путей
        к локальным файлам.  
        Если в последнем компоненте вашего URL или пути к файлу содержится
        символ (<literal>@</literal>), то вам нужно использовать особый
        синтаксис, описанный в <xref linkend="svn.advanced.pegrevs" />,
        с тем чтобы Subversion правильно адресовал этот ресурс.</para>

      <!-- @ENGLISH {{{
      <para>In Subversion 1.6, a new caret (<literal>^</literal>)
        notation was introduced as a shorthand for <quote>the URL of
        the repository's root directory</quote>.  For example, you can
        use the <literal>^/tags/bigsandwich/</literal> to refer to the
        URL of the <filename>/tags/bigsandwich</filename> directory in
        the root of the repository.  Note that this URL syntax works
        only when your current working directory is a working
        copy&mdash;the command-line client knows the repository's root
        URL by looking at the working copy's metadata.  Also note that
        when you wish to refer precisely to the root directory of the
        repository, you must do so using <literal>^/</literal> (with
        the trailing slash character), not merely
        <literal>^</literal>.</para>
      @ENGLISH }}} -->
      <para>В Subversion 1.6 введена новая нотация с галочкой (<literal>^</literal>)
        как сокращение для <quote>URL корневой директории репозитория</quote>.
        Например, вы можете использовать <literal>^/tags/bigsandwich/</literal>
        чтобы сослаться на URL для директории <filename>/tags/bigsandwich</filename>
        в корне репозитория.  Заметим, что такой синтаксис работает для URL
        только если ваша текущая папка это рабочая копия &mdash; клиент,
        работающий с командной строки, определяет корневой URL репозитория
        из метаданных рабочей копии.  Также обратите внимание, что когда вы
        хотите сослаться в точности на корневую директорию репозитария, вам
        нужно использовать <literal>^/</literal> (с косой чертой в конце),
        а не просто <literal>^</literal>.</para>

    </sect2>
<!-- @CHK }} -->

    <!-- =============================================================== -->
    <sect2 id="svn.basic.in-action.wc">
      <!-- @ENGLISH {{{
      <title>Subversion Working Copies</title>
      @ENGLISH }}} -->
      <title>Рабочие копии</title>

      <indexterm>
        <primary>working copy</primary>
        <secondary>defined</secondary>
      </indexterm>

<!-- @CHK {{ -->
      <!-- @ENGLISH {{{
      <para>A Subversion working copy is an ordinary directory tree on
        your local system, containing a collection of files.  You can
        edit these files however you wish, and if they're source code
        files, you can compile your program from them in the usual
        way.  Your working copy is your own private work area:
        Subversion will never incorporate other people's changes, nor
        make your own changes available to others, until you
        explicitly tell it to do so.  You can even have multiple
        working copies of the same project.</para>
      @ENGLISH }}} -->
      <para>Рабочая копия Subversion представляет собой обычное дерево
        каталогов на вашем компьютере, содержащее набор файлов. Вы можете
        по своему усмотрению редактировать эти файлы и, если это исходные коды,
        вы можете обычным способом скомпилировать из них программу. Ваша рабочая
        копия &mdash; это ваше личное рабочее пространство. Subversion как не
        смешивает с вашими изменения, вносимые другими, так и не делает
        доступными для других изменения, сделанные вами, пока вы сами не
        прикажете сделать это. Вы даже можете иметь несколько рабочих копий
        одного и того же проекта.</para>

      <!-- @ENGLISH {{{
      <para>After you've made some changes to the files in your
        working copy and verified that they work properly, Subversion
        provides you with commands to <quote>publish</quote> your
        changes to the other people working with you on your project
        (by writing to the repository).  If other people publish their
        own changes, Subversion provides you with commands to merge
        those changes into your working copy (by reading from the
        repository).</para>
      @ENGLISH }}} -->
      <para>После того, как вы внесли изменения в файлы вашей рабочей копии и
        убедились в том, что они корректно работают, Subversion предлагает вам
        команды <quote>публикации</quote> (записи в хранилище) ваших
        изменений, в результате чего они станут доступными для всех участников
        проекта. Если другие участники проекта опубликовали свои изменения,
        Subversion предлагает вам команды для объединения (путем чтения
        информации из хранилища) этих изменений с вашей рабочей
        копией.</para>

      <!-- ### TODO:  This will change in 1.7! -->

      <!-- @ENGLISH {{{
      <para>A working copy also contains some extra files, created and
        maintained by Subversion, to help it carry out these commands.
        In particular, each directory in your working copy contains a
        subdirectory named <filename>.svn</filename>, also known as
        the working copy's <firstterm>administrative
        directory</firstterm>.  The files in each administrative
        directory help Subversion recognize which files contain
        unpublished changes, and which files are out of date with
        respect to others' work.</para>
      @ENGLISH }}} -->
      <para>Рабочая копия содержит несколько дополнительных файлов, созданных
        и обслуживаемых Subversion, которые помогают ей при выполнении этих
        команд. В частности, каждый каталог в вашей рабочей копии содержит
        подкаталог с именем <filename>.svn</filename> который называется
        <firstterm>служебным каталогом</firstterm> рабочей копии.
        Файлы в служебном каталоге помогают Subversion определить
        какие файлы рабочей копии содержат неопубликованные изменения, и какие
        файлы устарели по отношению к файлам других участников.</para>

  <!-- @TR {{ -->
      <tip>
        <para>While <filename>.svn</filename> is the de facto name of
          the Subversion administrative directory, Windows users may
          run into problems with the ASP.NET Web application framework
          disallowing access to directories whose names begin with a
          dot (<literal>.</literal>).  As a special consideration to
          users in such situations, Subversion will instead use
          <literal>_svn</literal> as the administrative directory name
          if it finds a variable
          named <literal>SVN_ASP_DOT_NET_HACK</literal> in its
          operating environment.  Throughout this book, any reference
          you find to <filename>.svn</filename> applies also
          to <literal>_svn</literal> when this <quote>ASP.NET
          hack</quote> is in use.</para>
      </tip>
  <!-- @TR }} -->

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.basic.in-action.track-repos">
        <!-- @ENGLISH {{{
        <title>How the working copy works</title>
        @ENGLISH }}} -->
        <title>Как работают рабочие копии</title>

        <!-- @ENGLISH {{{
        <para>For each file in a working directory, Subversion records
          (among other things) two essential pieces of
          information:</para>
        @ENGLISH }}} -->
        <para>В служебном каталоге <filename>.svn/</filename> для каждого
          файла рабочего каталога Subversion записывает информацию о двух
          важнейших свойствах:</para>

        <itemizedlist>
          <listitem>
            <!-- @ENGLISH {{{
            <para>What revision your working file is based on (this is
              called the file's <firstterm>working
              revision</firstterm>)</para>
            @ENGLISH }}} -->
            <para>на какой правке основан ваш рабочий файл (это
              называется <firstterm>рабочая правка</firstterm> файла),
              и</para>
          </listitem>
          <listitem>
            <!-- @ENGLISH {{{
            <para>A timestamp recording when the local copy was last
              updated by the repository</para>
            @ENGLISH }}} -->
            <para>временной (ударение на последний слог) метке, определяющей,
              когда рабочая копия последний раз обновлялась из хранилища.</para>
          </listitem>
        </itemizedlist>

        <!-- @ENGLISH {{{
        <para>Given this information, by talking to the repository,
          Subversion can tell which of the following four states a
          working file is in:</para>
        @ENGLISH }}} -->
        <para>Используя эту информацию при соединении с хранилищем, Subversion
          может сказать, в каком из следующих четырех состояний находится рабочий
          файл:</para>

        <variablelist>
          <varlistentry>
            <!-- @ENGLISH {{{
            <term>Unchanged, and current</term>
            @ENGLISH }}} -->
            <term>Не изменялся и не устарел</term>
            <listitem>
              <!-- @ENGLISH {{{
              <para>The file is unchanged in the working directory, and
                no changes to that file have been committed to the
                repository since its working revision.  An <command>svn
                commit</command> of the file will do nothing, and an
                <command>svn update</command> of the file will do
                nothing.</para>
              @ENGLISH }}} -->
              <para>Файл не изменялся в рабочем каталоге, а в хранилище также не
                фиксировались изменения этого файла со времени создания его
                рабочей правки. Команды <command>svn commit</command> и
                <command>svn update</command> никаких операций делать не
                будут.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <!-- @ENGLISH {{{
            <term>Locally changed, and current</term>
            @ENGLISH }}} -->
            <term>Изменялся локально и не устарел</term>
            <listitem>
              <!-- @ENGLISH {{{
              <para>The file has been changed in the working directory,
                and no changes to that file have been committed to the
                repository since you last updated.  There are local
                changes that have not been committed to the repository;
                thus an <command>svn commit</command> of the file will
                succeed in publishing your changes, and an <command>svn
                update</command> of the file will do nothing.</para>
              @ENGLISH }}} -->
              <para>Файл был изменен в рабочей копии, но в хранилище не
                фиксировались изменения этого файла последнего обновления
                рабочей копии. Есть локальные изменения, которые не были
                зафиксированы в хранилище, поэтому <command>svn commit</command>
                выполнит фиксацию ваших изменений, а
                <command>svn update</command> не сделает ничего.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <!-- @ENGLISH {{{
            <term>Unchanged, and out of date</term>
            @ENGLISH }}} -->
            <term>Не изменялся и устарел</term>
            <listitem>
              <!-- @ENGLISH {{{
              <para>The file has not been changed in the working
                directory, but it has been changed in the repository.
                The file should eventually be updated in order to make
                it current with the latest public revision.
                An <command>svn commit</command> of the file will do
                nothing, and an
                <command>svn update</command> of the file will fold the
                latest changes into your working copy.</para>
              @ENGLISH }}} -->
              <para>В рабочем каталоге файл не изменялся, но был изменен в
                хранилище. Необходимо выполнить обновление файла для того,
                чтобы он соответствовал текущей опубликованной правке.
                Команда <command>svn commit</command> не сделает ничего, а
                <command>svn update</command> обновит вашу рабочую копию файла в
                соответствии с последними изменениями.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <!-- @ENGLISH {{{
            <term>Locally changed, and out of date</term>
            @ENGLISH }}} -->
            <term>Изменялся локально и устарел</term>
            <listitem>
              <!-- @ENGLISH {{{
              <para>The file has been changed both in the working
                directory and in the repository.  An <command>svn
                commit</command> of the file will fail with an
                <quote>out-of-date</quote> error.  The file should be
                updated first; an <command>svn update</command> command
                will attempt to merge the public changes with the local
                changes.  If Subversion can't complete the merge in a
                plausible way automatically, it leaves it to the user to
                resolve the conflict.</para>
              @ENGLISH }}} -->
              <para>Файл был изменен как в рабочем каталоге, так и в
                хранилище. <command>svn commit</command> потерпит неудачу, выдав
                ошибку <quote>out-of-date</quote>. Файл необходимо сначала
                обновить; <command>svn update</command> попытается объединить
                локальные изменения с опубликованными. Если Subversion не сможет
                выполнить объединение самостоятельно, она предложит пользователю
                разрешить конфликт вручную.</para>
            </listitem>
          </varlistentry>
        </variablelist>

      </sect3>
<!-- @CHK }} -->

<!-- @CHK {{ -->
      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.basic.in-action.wc-funcdamentals">
        <!-- @ENGLISH {{{
        <title>Fundamental working copy interactions</title>
        @ENGLISH }}} -->
        <title>Основные операции на рабочей копии</title>
<!-- @CHK }} -->

<!-- @CHK {{ -->
        <!-- @ENGLISH {{{
        <para>A typical Subversion repository often holds the files (or
          source code) for several projects; usually, each project is a
          subdirectory in the repository's filesystem tree.  In this
          arrangement, a user's working copy will usually correspond to
          a particular subtree of the repository.</para>
        @ENGLISH }}} -->
        <para>Как правило, хранилище Subversion содержит файлы (или исходный
        код) нескольких проектов; обычно каждый проект представляется в виде
        подкаталога файловой системы хранилища. При таком подходе,
        пользовательская рабочая копия обычно соответствует отдельному
        подкаталогу хранилища.</para>

        <!-- @ENGLISH {{{
        <para>For example, suppose you have a repository that contains
          two software projects, <literal>paint</literal> and
          <literal>calc</literal>.  Each project lives in its own
          top-level subdirectory, as shown in <xref
          linkend="svn.basic.in-action.wc.dia-1"/>.</para>
        @ENGLISH }}} -->
        <para>Например, предположим, что у вас есть хранилище, содержащее два
          программных проекта: <literal>paint</literal> и
          <literal>calc</literal>. Каждый проект располагается в своем
          собственном каталоге как показано на
          <xref linkend="svn.basic.in-action.wc.dia-1"/>.</para>

        <figure id="svn.basic.in-action.wc.dia-1">
          <!-- @ENGLISH {{{
          <title>The repository's filesystem</title>
          @ENGLISH }}} -->
          <title>Файловая система хранилища</title>
          <graphic fileref="images/ch02dia6.png"/>
        </figure>

        <indexterm>
          <primary>svn</primary>
          <secondary>subcommands</secondary>
          <tertiary>checkout</tertiary>
        </indexterm>
        <indexterm>
          <primary>working copy</primary>
          <secondary>creation</secondary>
        </indexterm>
        <indexterm>
          <primary>checkout</primary>
          <see>working copy, creation</see>
        </indexterm>

        <!-- @ENGLISH {{{
        <para>To get a working copy, you must <firstterm>check
          out</firstterm> some subtree of the repository.  (The term
          <emphasis>check out</emphasis> may sound like it has something to do
          with locking or reserving resources, but it doesn't; it simply
          creates a working copy of the project for you.)  For example,
          if you check out <filename>/calc</filename>, you will get a
          working copy like this:</para>
        @ENGLISH }}} -->
        <para>Для того, чтобы создать рабочую копию, вам нужно
          <firstterm>получить</firstterm> какой-либо из подкаталогов
          хранилища. (Возможно, термин <firstterm>получить</firstterm>
          звучит как что-то, связанное с блокированием или резервированием
          ресурсов, но это не так; данная команда просто создает для вас личную
          копию проекта.) Например, если вы получите
          <filename>/calc</filename>, у вас будет рабочая копия наподобие
          этой:</para>

        <informalexample>
          <screen>
$ svn checkout http://svn.example.com/repos/calc
A    calc/Makefile
A    calc/integer.c
A    calc/button.c
Checked out revision 56.
$ ls -A calc
Makefile  button.c integer.c .svn/
$
</screen>
        </informalexample>

        <!-- @ENGLISH {{{
        <para>The list of letter <literal>A</literal>s in the left
          margin indicates that Subversion is adding a number of items
          to your working copy.  You now have a personal copy of the
          repository's <filename>/calc</filename> directory, with one
          additional entry&mdash;<filename>.svn</filename>&mdash;which
          holds the extra information needed by Subversion, as mentioned
          earlier.</para>
        @ENGLISH }}} -->
        <para>Буквы А говорят о том, что Subversion добавил этот элемент в
          вашу рабочую копию. Теперь у вас есть личная копия каталога
          <filename>/calc</filename> хранилища, с одним небольшим добавлением
          &mdash; каталогом <filename>.svn</filename>, содержащим, как было
          указано выше, дополнительную информацию, необходимую Subversion.</para>

        <!-- @ENGLISH {{{
        <para>Suppose you make changes to <filename>button.c</filename>.
          Since the <filename>.svn</filename> directory remembers the
          file's original modification date and contents, Subversion can
          tell that you've changed the file.  However, Subversion does
          not make your changes public until you explicitly tell it to.
          The act of publishing your changes is more commonly known as
          <firstterm>committing</firstterm> (or <firstterm>checking
          in</firstterm>) changes to the repository.</para>
        @ENGLISH }}} -->
        <para>Предположим, вы внесли изменения в <filename>button.c</filename>.
          Так как каталог <filename>.svn</filename> помнит дату изменения
          файла и его оригинальное содержимое, Subversion может сказать о том,
          что вы изменили файл. Subversion не публикует ваших изменений, пока
          вы не прикажете это сделать. Публикация ваших изменений более известна
          как <firstterm>фиксация</firstterm> (или <firstterm>checking
          in</firstterm>) изменений в хранилище.</para>

        <indexterm>
          <primary>svn</primary>
          <secondary>subcommands</secondary>
          <tertiary>commit</tertiary>
        </indexterm>
        <indexterm>
          <primary>committing</primary>
          <see>working copy, commit</see>
        </indexterm>
        <indexterm>
          <primary>working copy</primary>
          <secondary>commit</secondary>
        </indexterm>

        <!-- @ENGLISH {{{
        <para>To publish your changes to others, you can use
          Subversion's <command>svn commit</command> command:</para>
        @ENGLISH }}} -->
        <para>Для того, чтобы опубликовать ваши изменения, вы можете
          воспользоваться командой <command>commit</command>.</para>

        <informalexample>
          <screen>
$ svn commit button.c -m "Fixed a typo in button.c."
Sending        button.c
Transmitting file data .
Committed revision 57.
$
</screen>
        </informalexample>

        <!-- @ENGLISH {{{
        <para>Now your changes to <filename>button.c</filename> have
          been committed to the repository, with a note describing your
          change (namely, that you fixed a typo).  If another user
          checks out a working copy of <filename>/calc</filename>, she
          will see your changes in the latest version of the
          file.</para>
        @ENGLISH }}} -->
        <para>Теперь ваши изменения в <filename>button.c</filename>, вместе
          с примечанием, описывающим эти изменения (а именно: исправление
          опечатки), зафиксированы в хранилище; если другой пользователь
          создаст рабочую копию <filename>/calc</filename>, он увидит
          ваши изменения в последней версии файла.</para>

        <!-- @ENGLISH {{{
        <para>Suppose you have a collaborator, Sally, who checked out a
          working copy of <filename>/calc</filename> at the same time
          you did.  When you commit your change to
          <filename>button.c</filename>, Sally's working copy is left
          unchanged; Subversion modifies working copies only at the
          user's request.</para>
        @ENGLISH }}} -->
        <para>Предположим, у вас есть партнер, Салли, которая
          создала рабочую копию <filename>/calc</filename> одновременно
          с вами. Когда вы зафиксировали изменения в
          <filename>button.c</filename>, рабочая копия Салли осталась 
          неизмененной, так как Subversion модифицирует рабочие копии только
          по запросу пользователей.</para>

        <indexterm>
          <primary>svn</primary>
          <secondary>subcommands</secondary>
          <tertiary>update</tertiary>
        </indexterm>
        <indexterm>
          <primary>updating</primary>
          <see>working copy, update</see>
        </indexterm>
        <indexterm>
          <primary>working copy</primary>
          <secondary>update</secondary>
        </indexterm>

        <!-- @ENGLISH {{{
        <para>To bring her project up to date, Sally can ask Subversion
          to <firstterm>update</firstterm> her working copy, by using
          the <command>svn update</command> command.  This will incorporate
          your changes into her working copy, as well as any others that
          have been committed since she checked it out.</para>
        @ENGLISH }}} -->
        <para>Для приведения рабочей копии в актуальное состояние Салли
          может попросить Subversion <firstterm>обновить</firstterm> её
          рабочую копию, используя команду Subversion
          <command>update</command>. Это включит ваши изменения в ее рабочую
          копию, так же как и все другие изменения, зафиксированные после того,
          как она создавала рабочую копию.</para>

        <informalexample>
          <screen>
$ pwd
/home/sally/calc
$ ls -A
Makefile button.c integer.c .svn/
$ svn update
U    button.c
Updated to revision 57.
$
</screen>
        </informalexample>

        <!-- @ENGLISH {{{
        <para>The output from the <command>svn update</command> command
          indicates that Subversion updated the contents of
          <filename>button.c</filename>.  Note that Sally didn't need to
          specify which files to update; Subversion uses the information
          in the <filename>.svn</filename> directory as well as further
          information in the repository, to decide which files need to
          be brought up to date.</para>
        @ENGLISH }}} -->
        <para>Вывод команды <command>svn update</command> говорит, что
          Subversion обновила содержимое <filename>button.c</filename>.
          Обратите внимание, что Салли не должна указывать, какой файл обновить;
          для определения файлов, которые необходимо привести в актуальное
          состояние, Subversion использует информацию в каталоге
          <filename>.svn</filename>, а также информацию из хранилища.</para>

      </sect3>
<!-- @CHK }} -->

<!-- @CHK {{ -->
      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.basic.in-action.mixedrevs">
        <!-- @ENGLISH {{{
        <title>Mixed-revision working copies</title>
        @ENGLISH }}} -->
        <title>Рабочие копии со смешаными ревизиями</title>

        <indexterm>
          <primary>working copy</primary>
          <secondary>mixed-revision</secondary>
        </indexterm>

        <!-- @ENGLISH {{{
        <para>As a general principle, Subversion tries to be as flexible
          as possible.  One special kind of flexibility is the ability
          to have a working copy containing files and directories with a
          mix of different working revision numbers.  Subversion working
          copies do not always correspond to any single revision in the
          repository; they may contain files from several different
          revisions.  For example, suppose you check out a working copy
          from a repository whose most recent revision is 4:</para>
        @ENGLISH }}} -->
        <para>В качестве общего принципа, Subversion старается быть настолько
          гибким насколько это возможно.  Один из возможных видов гибкости
          это возможность иметь рабочую копию, содержащую файлы и папки
          с различными номерами ревизий.  Рабочие копии Subversion не всегда
          соответствуют какой-либо одной ревизии репозитория; они могут
          содержать файлы из различных ревизий.  Например, предположим что
          вы взяли рабочую копию из репозитория, самая свежая ревизия
          в котором имеет номер 4:</para>

        <informalexample>
          <literallayout>
calc/
   Makefile:4
   integer.c:4
   button.c:4
</literallayout>
        </informalexample>
<!-- @CHK }} -->

<!-- @CHK {{ -->
        <!-- @ENGLISH {{{
        <para>At the moment, this working directory corresponds exactly
          to revision 4 in the repository.  However, suppose you make a
          change to <filename>button.c</filename>, and commit that
          change.  Assuming no other commits have taken place, your
          commit will create revision 5 of the repository, and your
          working copy will now look like this:</para>
        @ENGLISH }}} -->
        <para>На данный момент рабочий каталог полностью соответствует
          правке 4 в хранилище. Допустим, что вы внесли изменения в
          <filename>button.c</filename> и зафиксировали эти изменения.
          При отсутствии других фиксаций ваша фиксация создаст правку
          под номером 5, и теперь ваша рабочая копия выглядит следующим
          образом:</para>

        <informalexample>
          <literallayout>
calc/
   Makefile:4
   integer.c:4
   button.c:5
</literallayout>
        </informalexample>

        <!-- @ENGLISH {{{
        <para>Suppose that, at this point, Sally commits a change to
          <filename>integer.c</filename>, creating revision 6.  If you
          use <command>svn update</command> to bring your working copy
          up to date, it will look like this:</para>
        @ENGLISH }}} -->
        <para>Предположим, что после этого Салли фиксирует изменения <filename>
          integer.c</filename>, создавая правку 6. Если вы воспользуетесь
          <command>svn update</command> для приведения своей рабочей копии
          в актуальное состояние, то она станет выглядеть так:</para>

        <informalexample>
          <literallayout>
calc/
   Makefile:6
   integer.c:6
   button.c:6
</literallayout>
        </informalexample>

        <!-- @ENGLISH {{{
        <para>Sally's change to <filename>integer.c</filename> will
          appear in your working copy, and your change will still be
          present in <filename>button.c</filename>.  In this example,
          the text of <filename>Makefile</filename> is identical in
          revisions 4, 5, and 6, but Subversion will mark your working
          copy of <filename>Makefile</filename> with revision 6 to
          indicate that it is still current.  So, after you do a clean
          update at the top of your working copy, it will generally
          correspond to exactly one revision in the repository.</para>
        @ENGLISH }}} -->
        <para>Изменения, внесенные Салли в <filename>integer.c</filename> будут
          отражены в вашей рабочей копии, и ваши изменения в
          <filename>button.c</filename> также будут присутствовать. В этом
          примере текст <filename>Makefile</filename> в правках 4, 5 и 6
          идентичен, однако Subversion проставляет номер правки 6 для вашей
          рабочей копии <filename>Makefile</filename>, чтобы показать что файл
          не устарел. Таким образом, после того как вы выполните полное
          обновление вашей рабочей копии, она будет полностью соответствовать
          текущему состоянию хранилища.</para>
  
        <sect4 id="svn.basic.in-action.mixedrevs.update-commit">
          <!-- @ENGLISH {{{
          <title>Updates and commits are separate</title>
          @ENGLISH }}} -->
          <title>Обновления и фиксации отделены друг от друга</title>

          <!-- @ENGLISH {{{
          <para>One of the fundamental rules of Subversion is that
            a <quote>push</quote> action does not cause
            a <quote>pull</quote> nor vice versa.  Just
            because you're ready to submit new changes to the repository
            doesn't mean you're ready to receive changes from other
            people.  And if you have new changes still in progress,
            <command>svn update</command> should gracefully merge
            repository changes into your own, rather than forcing you to
            publish them.</para>
          @ENGLISH }}} -->
          <para>Одно из фундаментальных правил Subversion заключается в том,
            что <quote>передающее</quote> действие не приводит к
            <quote>принимаемому</quote>, и наоборот. То, что вы готовы
            внести изменения в хранилище, не означает, что вы готовы принять
            изменения от других. А если вы все еще работаете над новыми изменениями,
            то <command>svn update</command> изящно объединит изменения из
            хранилища с вашими собственными, вместо того, чтобы заставлять вас
            опубликовать их.</para>

          <!-- @ENGLISH {{{
          <para>The main side effect of this rule is that it means a
            working copy has to do extra bookkeeping to track mixed
            revisions as well as be tolerant of the mixture.  It's made
            more complicated by the fact that directories themselves are
            versioned.</para>
          @ENGLISH }}} -->
          <para>Главным побочным эффектом этого правила является то, что
            рабочая копия должна вести дополнительный учет при смешивании
            правок и быть аккуратной при любом смешивании. И то, что каталоги
            попадают под контроль версий, делает это еще более сложным
            для понимания.</para>

          <!-- @ENGLISH {{{
          <para>For example, suppose you have a working copy entirely at
            revision 10.  You edit the
            file <filename>foo.html</filename> and then perform
            an <command>svn commit</command>, which creates revision 15
            in the repository.  After the commit succeeds, many new
            users would expect the working copy to be entirely at
            revision 15, but that's not the case!  Any number of changes
            might have happened in the repository between revisions 10
            and 15.  The client knows nothing of those changes in the
            repository, since you haven't yet run <command>svn
            update</command>, and <command>svn commit</command> doesn't
            pull down new changes.  If, on the other hand,
            <command>svn commit</command> were to automatically download
            the newest changes, it would be possible to set the
            entire working copy to revision 15&mdash;but then we'd be
            breaking the fundamental rule of <quote>push</quote>
            and <quote>pull</quote> remaining separate actions.
            Therefore, the only safe thing the Subversion client can do
            is mark the one
            file&mdash;<filename>foo.html</filename>&mdash;as being at
            revision 15.  The rest of the working copy remains at
            revision 10.  Only by running <command>svn update</command>
            can the latest changes be downloaded and the whole working
            copy be marked as revision 15.</para>
          @ENGLISH }}} -->
          <para>Допустим, у вас есть рабочая копия, полностью соответствующая
            правке 10. После изменения файла <filename>foo.html</filename>,
            вы выполняете команду <command>svn commit</command>,
            которая создает в хранилище правку 15. После выполнения
            фиксации большая часть новичков ожидают, что вся
            рабочая копия будет иметь правку 15, однако это не так.
            Между правками 10 и 15 в хранилище могло быть внесено любое
            количество изменений. Так как команда <command>svn update</command>
            не выполнялась, а <command>svn commit</command>
            не загружает изменений, клиент ничего не знает о находящихся в
            хранилище изменениях. С другой стороны, если бы команда <command>svn
            commit</command> автоматически загружала последние изменения,
            то всей рабочей копии можно было бы назначить соответствующий номер
            правки - 15. Однако это нарушило бы фундаментальное правило,
            согласно которому <quote>передача</quote> и
            <quote>получение</quote> являются независимыми операциями.
            Следовательно, все, что может сделать клиент Subversion, это
            пометить один файл &mdash; <filename>foo.html</filename> &mdash;
            как соответствующий правке 15. Остальная рабочая копия
            продолжает соответствовать правке 10. Только при выполнении
            <command>svn update</command> будут загружены последние
            изменения, и вся рабочая копия будет помечена как соответствующая
            правке 15.</para>

        </sect4>

        <sect4 id="svn.basic.in-action.mixedrevs.normal">
          <!-- @ENGLISH {{{
          <title>Mixed revisions are normal</title>
          @ENGLISH }}} -->
          <title>Смешивание правок &mdash; это нормально</title>

          <!-- @ENGLISH {{{
          <para>The fact is, <emphasis>every time</emphasis> you run
            <command>svn commit</command> your working copy ends up
            with some mixture of revisions.  The things you just
            committed are marked as having larger working revisions than
            everything else.  After several commits (with no updates
            in between), your working copy will contain a whole mixture
            of revisions.  Even if you're the only person using the
            repository, you will still see this phenomenon.  To examine
            your mixture of working revisions, use the <command>svn
            status</command> command with the <option>-&#64738;-verbose</option>
            (<option>-v</option>) option (see
            <xref linkend="svn.tour.cycle.examine.status"/> for more
            information).</para>
          @ENGLISH }}} -->
          <para>Фактически, <emphasis>каждый раз</emphasis> при
            выполнении <command>svn commit</command> правки рабочей
            копии смешиваются. Только что зафиксированные элементы
            отмечаются как имеющие больший номер рабочей правки, чем все
            остальные. После нескольких фиксаций (без выполнения
            обновлений между ними) правки рабочей копии будут полностью
            перемешаны. Даже если вы являетесь единственным пользователем
            хранилища, вы все равно с этим столкнетесь. Для просмотра
            этой смеси рабочих правок воспользуйтесь командой
            <command>svn status --verbose</command> (см.
            <xref linkend="svn.tour.cycle.examine.status"/>).</para>

          <!-- @ENGLISH {{{
          <para>Often, new users are completely unaware that their
            working copy contains mixed revisions.  This can be
            confusing, because many client commands are sensitive to the
            working revision of the item they're examining.  For
            example, the <command>svn log</command> command is used to
            display the history of changes to a file or directory (see
            <xref linkend="svn.tour.history.log"/>).  When the user
            invokes this command on a working copy object, he expects
            to see the entire history of the object.  But if the
            object's working revision is quite old (often because
            <command>svn update</command> hasn't been run in a long
            time), the history of the <emphasis>older</emphasis>
            version of the object is shown.</para>
          @ENGLISH }}} -->
          <para>Часто новые пользователи даже не подозревают о том,
            что их рабочая копия содержит смешанные правки. Это может
            сбить с толку, так как многие команды клиента чувствительны
            к рабочей правке элемента, с которым он работает. Например,
            команда <command>svn log</command> используется для вывода
            истории изменения файла или каталога (см. <xref
            linkend="svn.tour.history.log"/>). Когда пользователь
            вызывает эту команду применительно к объекту рабочей копии,
            он ожидает увидеть полную историю этого объекта. Однако
            если рабочая правка объекта очень старая (из-за того, что
            команда <command>svn update</command> долго не выполнялась)
            будет показана история для <emphasis>более старой</emphasis>
            версии этого объекта.</para>

        </sect4>

        <sect4 id="svn.basic.in-action.mixedrevs.useful">
          <!-- @ENGLISH {{{
          <title>Mixed revisions are useful</title>
          @ENGLISH }}} -->
          <title>Смешивание правок &mdash; это полезно</title>

          <!-- @ENGLISH {{{
          <para>If your project is sufficiently complex, you'll discover
            that it's sometimes nice to
            forcibly <firstterm>backdate</firstterm> (or update to a
            revision older than the one you already have) portions of
            your working copy to an earlier revision; you'll learn how
            to do that in <xref linkend="svn.tour"/>.  Perhaps you'd
            like to test an earlier version of a submodule contained in
            a subdirectory, or perhaps you'd like to figure out when a
            bug first came into existence in a specific file.  This is
            the <quote>time machine</quote> aspect of a version control
            system&mdash;the feature that allows you to move any
            portion of your working copy forward and backward in
            history.</para>
          @ENGLISH }}} -->
          <para>Если у вас очень большой проект, вы можете найти
            полезным время от времени принудительно
            <quote>возвращать</quote> части рабочей копии к более
            ранним правкам; как это делается, вы узнаете в <xref
            linkend="svn.tour"/>. Возможно, вы захотите протестировать
            более раннюю версию модуля, находящегося в подкаталоге
            или точно узнать, когда в конкретном файле появилась
            ошибка. Это &mdash; <quote>машина времени</quote>,
            тот аспект системы управления версиями, который
            позволяет перемещать в истории любую часть рабочей копии
            вперед и назад.</para>

        </sect4>

        <sect4 id="svn.basic.in-action.mixedrevs.limits">
          <!-- @ENGLISH {{{
          <title>Mixed revisions have limitations</title>
          @ENGLISH }}} -->
          <title>Смешивание правок имеет ограничения</title>

          <!-- @ENGLISH {{{
          <para>However you make use of mixed revisions in your working
            copy, there are limitations to this flexibility.</para>
          @ENGLISH }}} -->
          <para>Несмотря на то, что в рабочей копии можно использовать
            смешивание правок, у этой гибкости существуют
            ограничения.</para>

          <!-- @ENGLISH {{{
          <para>First, you cannot commit the deletion of a file or
            directory that isn't fully up to date.  If a newer version
            of the item exists in the repository, your attempt to delete
            will be rejected to prevent you from accidentally
            destroying changes you've not yet seen.</para>
          @ENGLISH }}} -->
          <para>Во-первых, нельзя зафиксировать удаление устаревшего
            файла или каталога. Если в хранилище существует более новая
            версия элемента, попытка удаления будет отклонена для
            предотвращения возможности непреднамеренного уничтожения
            изменений о которых вы не в курсе.</para>

          <!-- @ENGLISH {{{
          <para>Second, you cannot commit a metadata change to a
            directory unless it's fully up to date.  You'll learn about
            attaching <quote>properties</quote> to items in <xref
            linkend="svn.advanced"/>.  A directory's working revision
            defines a specific set of entries and properties, and thus
            committing a property change to an out-of-date directory may
            destroy properties you've not yet seen.</para>
          @ENGLISH }}} -->
          <para>Во-вторых, нельзя зафиксировать изменение метаданных
            для необновленного каталога. О присвоении
            <quote>свойств</quote> элементам вы узнаете в <xref
            linkend="svn.advanced"/>. Рабочая правка каталога
            определяет конкретный набор входящих в нее элементов и
            свойств, поэтому фиксация изменений свойств для устаревшего
            каталога может привести к уничтожению свойств, о которых
            вы не знаете.</para>

           <!-- ### TODO: In Subversion 1.7, you cannot merge into a
                ### mixed-rev working copy by default -->

        </sect4>
      </sect3>
    </sect2>
  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.basic.summary">
    <!-- @ENGLISH {{{
    <title>Summary</title>
    @ENGLISH }}} -->
    <title>Подводя итоги</title>
    
    <!-- @ENGLISH {{{
    <para>We covered a number of fundamental Subversion concepts in
      this chapter:</para>
    @ENGLISH }}} -->
    <para>В этой главе мы рассмотрели ряд фундаментальных концепций 
      Subversion:</para>

    <itemizedlist>
      <listitem>
        <!-- @ENGLISH {{{
        <para>We introduced the notions of the central repository,
          the client working copy, and the array of repository
          revision trees.</para>
        @ENGLISH }}} -->
        <para>Мы ввели такие понятия как центральное хранилище, рабочая
          копия и массив правок хранилища.</para>
      </listitem>

      <listitem>
        <!-- @ENGLISH {{{
        <para>We saw some simple examples of how two collaborators
          can use Subversion to publish and receive changes from one
          another, using the <quote>copy-modify-merge</quote>
          model.</para>
        @ENGLISH }}} -->
        <para>Мы рассмотрели на нескольких простых примерах, как при помощи
          Subversion два партнера могут публиковать и получать
          изменения, сделанные друг другом, используя модель
          <quote>копирование-изменение-слияние</quote>.</para>
      </listitem>

      <listitem>
        <!-- @ENGLISH {{{
        <para>We talked a bit about the way Subversion tracks and
          manages information in a working copy.</para>
        @ENGLISH }}} -->
        <para>Мы немного поговорили о том, как Subversion отслеживает и
          управляет информацией в рабочей копии.</para>
      </listitem>

    </itemizedlist>

    <!-- @ENGLISH {{{
    <para>At this point, you should have a good idea of how Subversion
      works in the most general sense.  Armed with this knowledge, you
      should now be ready to move into the next chapter, which is a
      detailed tour of Subversion's commands and features.</para>
    @ENGLISH }}} -->
    <para>На данный момент у вас должно быть хорошее представление о том, как
      вообще работает Subversion. Теперь, вооруженные этими знаниями, вы
      готовы перейти к следующей главе, которая представляет собой подробный
      обзор команд и возможностей Subversion.</para>

  </sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
<!-- @CHK }} -->
