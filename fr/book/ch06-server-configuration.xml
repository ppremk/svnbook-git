<!-- -*- sgml -*- -->

<chapter id="svn.serverconfig">
<!--
  <title>Server Configuration</title>
-->
  <title>Configuration du serveur</title>

<!--
  <para>A Subversion repository can be accessed simultaneously by
    clients running on the same machine on which the repository
    resides using URLs carrying the <literal>file://</literal> scheme.
    But the typical Subversion setup involves a single server machine
    being accessed from clients on computers all over the
    office&mdash;or, perhaps, all over the world.</para>
-->
  <para>Un dépôt Subversion hébergé sur une machine donnée est
    accessible simultanément par des clients fonctionnant sur cette même
    machine en utilisant la méthode <literal>file://</literal>. Mais la
    configuration typique de Subversion consiste en une machine serveur
    unique à laquelle accèdent des clients tournant sur les ordinateurs
    de tout le bureau &mdash; ou, peut-être, de partout dans le
    monde.</para>

<!--
  <para>This chapter describes how to get your Subversion repository
    exposed outside its host machine for use by remote clients.  We
    will cover Subversion's currently available server mechanisms,
    discussing the configuration and use of each.  After reading this
    chapter, you should be able to decide which networking setup is
    right for your needs, as well as understand how to enable such a
    setup on your host computer.</para>
-->

  <para>Ce chapitre décrit comment rendre visible votre dépôt Subversion
    en dehors de la machine hôte pour qu'il soit utilisable par des
    clients distants. Nous couvrons les mécanismes serveurs disponibles
    actuellement pour Subversion, leur configuration et leur
    utilisation. À la fin de ce chapitre, vous devriez être apte à
    décider quelle configuration réseau convient à vos besoins et
    comprendre comment mettre en place cette configuration sur votre
    machine hôte.</para>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.serverconfig.overview">

<!--
    <title>Overview</title>
-->
    <title>Présentation générale</title>

<!--
    <para>
      <indexterm>
        <primary>API</primary>
        <secondary>layers</secondary>
        <tertiary>Repository Access (RA) Layer</tertiary>
      </indexterm>Subversion was designed with an abstract repository
      access layer.  This means that a repository can be
      programmatically accessed by any sort of server process, and the
      client <quote>repository access</quote> API allows programmers
      to write plug-ins that speak relevant network protocols.  In
      theory, Subversion can use an infinite number of network
      implementations.  In practice, there are only two Subversion
      servers in widespread use today.</para>
-->
    <para>
      <indexterm>
        <primary>API</primary>
        <secondary>couches</secondary>
        <tertiary>couche d'accès au dépôt (RA)</tertiary>
      </indexterm>Subversion a été conçu avec une couche réseau
      abstraite. Cela signifie que l'on peut accéder de façon
      automatisée à un dépôt par toute sorte de protocoles
      client/serveur, et que l'interface (l'API) d'accès au dépôt du
      client permet aux programmeurs d'écrire des greffons implémentant
      les protocoles réseaux appropriés. En théorie, Subversion peut
      utiliser un nombre infini d'implémentations réseau. En pratique,
      il n'existe à ce jour que deux serveurs largement déployés.</para>

<!--
    <para>
      <indexterm>
        <primary>httpd</primary>
      </indexterm>
      <indexterm>
        <primary>Apache HTTP Server</primary>
        <see>httpd</see>
      </indexterm>Apache HTTP Server (also known
      as <command>httpd</command>) is an extremely popular web server;
      using the <command>mod_dav_svn</command> module, Apache can
      access a repository and make it available to clients via the
      WebDAV/DeltaV protocol, which is an extension of HTTP.  Because
      Apache is an extremely extensible server, it provides a number
      of features <quote>for free,</quote> such as encrypted SSL
      communication, logging, integration with a number of third-party
      authentication systems, and limited built-in web browsing of
      repositories.</para>
-->
    <para>
      <indexterm>
        <primary>httpd</primary>
      </indexterm>
      <indexterm>
        <primary>serveur HTTP Apache</primary>
        <see>httpd</see>
      </indexterm>Apache est un serveur web extrêmement populaire&nbsp;;
      en utilisant le module <command>mod_dav_svn</command>, Apache a
      accès au dépôt et peut le rendre accessible aux clients
      <foreignphrase>via</foreignphrase> le protocole WebDAV/DeltaV, qui
      est une extension d'HTTP. Comme Apache est un serveur très
      complet, il inclut un grand nombre de fonctionnalités
      <quote>gratuitement</quote>, telles que&nbsp;: communications
      chiffrées par SSL, journalisation, intégration avec bon nombre de
      systèmes d'authentification tiers et navigation web limitée des
      dépôts.</para>

<!--
    <para>
      <indexterm>
        <primary>svnserve</primary>
      </indexterm>In the other corner is <command>svnserve</command>:
      a small, lightweight server program that speaks a custom
      protocol with clients.  Because its protocol is explicitly
      designed for Subversion and is stateful (unlike HTTP), it
      provides significantly faster network operations&mdash;but at
      the cost of some features as well.  While it can use SASL to
      provide a variety of authentication and encryption options, it
      has no logging or built-in web browsing.  It is, however,
      extremely easy to set up and is often the best option for small
      teams just starting out with Subversion.</para>
-->

    <para>
      <indexterm>
        <primary>svnserve</primary>
      </indexterm>À l'opposé vous trouvez
      <command>svnserve</command>&nbsp;: un petit programme serveur,
      léger, qui communique <foreignphrase>via</foreignphrase> un
      protocole sur mesure avec les clients. Parce que ce protocole a
      été conçu spécialement pour Subversion et possède la notion
      d'états (à la différence d'HTTP), il offre des opérations
      significativement plus rapides, certes aux dépens de certaines
      fonctionnalités. Bien qu'il sache utiliser SASL pour offrir toute
      une gamme d'options d'authentification et de chiffrement, il ne
      possède ni journalisation ni navigation web intégrée. Il est
      néanmoins très facile à mettre en place et constitue souvent le
      meilleur choix pour de petites équipes débutant avec
      Subversion.</para>

<!--
    <para>The network protocol which <command>svnserve</command>
      speaks may also be tunneled over an SSH connection.  This
      deployment option for <command>svnserve</command> differs quite
      a bit in features from a traditional <command>svnserve</command>
      deployment.  SSH is used to encrypt all communication.  SSH is
      also used exclusively to authenticate, so real system accounts
      are required on the server host (unlike
      vanilla <command>svnserve</command>, which has its own private
      user accounts).  Finally, because this setup requires that each
      user spawn a private, temporary <command>svnserve</command>
      process, it's equivalent (from a permissions point of view) to
      allowing a group of local users to all access the repository
      via <literal>file://</literal> URLs.  Path-based access control
      has no meaning, since each user is accessing the repository
      database files directly.</para>
-->

    <para>Une troisième option consiste à utiliser
      <command>svnserve</command> encapsulé dans une connexion SSH. Même
      si ce scénario utilise toujours <command>svnserve</command>, il
      diffère quelque peu, en termes de fonctionnalités, d'un
      déploiement <command>svnserve</command> traditionnel. SSH sert à
      chiffrer toutes les communications. Par ailleurs,
      l'authentification utilise exclusivement SSH, ce qui nécessite des
      comptes utilisateurs au niveau système sur le serveur hôte (à la
      différence de <quote>svnserve simple</quote>, qui possède ses
      propres comptes utilisateurs privés). Enfin, avec ce type de
      déploiement, un processus <command>svnserve</command> temporaire
      privé est créé pour chaque utilisateur qui se connecte, ce qui
      équivaut (du point de vue des permissions) à permettre à un groupe
      d'utilisateurs locaux d'accéder au dépôt
      <foreignphrase>via</foreignphrase> des URL
      <literal>file://</literal>. Les autorisations d'accès basées sur
      des chemins n'ont donc aucun sens, puisque chaque utilisateur
      accède directement aux fichiers de la base de données du
      dépôt.</para>

<!--
    <para><xref linkend="svn.serverconfig.overview.tbl-1"/> provides a
      quick summary of the three typical server deployments.</para>
-->

    <para>Le <xref linkend="svn.serverconfig.overview.tbl-1"/> présente
      un résumé rapide des trois types courants de déploiements de
      serveurs.</para>

    <table id="svn.serverconfig.overview.tbl-1">
<!--
      <title>Comparison of Subversion server options</title>
-->
      <title>Comparaison des fonctionnalités des serveurs
        Subversion</title>
      <tgroup cols="4">
        <thead>
          <row>
<!--
            <entry>Feature</entry>
-->
            <entry>Fonctionnalité</entry>
            <entry>Apache + mod_dav_svn</entry>
            <entry>svnserve</entry>
<!--
            <entry>svnserve over SSH</entry>
-->
            <entry>svnserve sur SSH</entry>
          </row>
        </thead>
        <tbody>
          <row>
<!--
            <entry>Authentication options</entry>
-->
            <entry>Authentification</entry>
<!--
            <entry>HTTP Basic or Digest auth, X.509 certificates, LDAP,
              NTLM, or any other mechanism available to Apache httpd</entry>
-->
            <entry>Authentification HTTP(S) de base, certificats X.509,
              LDAP, NTLM, ou tout autre mécanisme compatible avec
              Apache.</entry>
<!--
            <entry>CRAM-MD5 by default;  LDAP, NTLM, or any other mechanism
              available to SASL</entry>
-->
            <entry>CRAM-MD5 par défaut&nbsp;; LDAP, NTLM, ou tout autre
              mécanisme compatible avec SASL.</entry>
            <entry>SSH</entry>
          </row>

          <row>
<!--
            <entry>User account options</entry>
-->
            <entry>Comptes utilisateurs</entry>
<!--
            <entry>Private <quote>users</quote> file, or other mechanisms
            available to Apache httpd (LDAP, SQL, etc.)</entry>
-->
            <entry>Fichiers privés ou tout autre mécanisme compatible
              avec Apache (LDAP, SQL,&nbsp;etc.).</entry>
<!--
            <entry>Private <quote>users</quote> file, or other
              mechanisms available to SASL (LDAP, SQL, etc.)</entry>
-->
            <entry>Fichiers privés ou tout autre mécanisme compatible
              avec SASL (LDAP, SQL,&nbsp;etc.).</entry>
<!--
            <entry>System accounts</entry>
-->
            <entry>Comptes utilisateurs du système.</entry>
          </row>

          <row>
<!--
            <entry>Authorization options</entry>
-->
            <entry>Contrôle d'accès</entry>
<!--
            <entry>Read/write access can be granted over the whole
              repository, or specified per path</entry>
-->
            <entry>L'accès en lecture/écriture peut être autorisé sur le
              dépôt tout entier ou restreint à des chemins
              spécifiés.</entry>
<!--
            <entry>Read/write access can be granted over the whole
              repository, or specified per path</entry>
-->
            <entry>L'accès en lecture/écriture peut être autorisé sur le
              dépôt tout entier ou restreint à des chemins
              spécifiés.</entry>
<!--
            <entry>Read/write access only grantable over the whole
              repository</entry>
-->
            <entry>L'accès en lecture/écriture ne peut être autorisé que
              sur le dépôt tout entier.</entry>
          </row>

          <row>
<!--
            <entry>Encryption</entry>
-->
            <entry>Chiffrement</entry>
<!--
            <entry>Available via optional SSL (https)</entry>
-->
            <entry>Disponible <foreignphrase>via</foreignphrase> SSL
              (option).</entry>
<!--
            <entry>Available via optional SASL features</entry>
-->
            <entry>Disponible <foreignphrase>via</foreignphrase> les
              fonctionnalités optionnelles de SASL.</entry>
<!--
            <entry>Inherent in SSH connection</entry>
-->
            <entry>Inhérent à toute connexion SSH.</entry>
          </row>

          <row>
<!--
            <entry>Logging</entry>
-->
            <entry>Journalisation</entry>
<!--
            <entry>High-level operational logging of Subversion
              operations plus detailed logging at the
              per-HTTP-request level</entry>
-->
            <entry>Journaux Apache complets de chaque requête HTTP et
              journalisation <quote>de haut niveau</quote> des
              opérations de Subversion.</entry>
<!--
            <entry>High-level operational logging only</entry>
-->
            <entry>Uniquement la journalisation <quote>de haut
              niveau</quote> des opérations de Subversion.</entry>
<!--
            <entry>High-level operational logging only</entry>
-->
            <entry>Uniquement la journalisation <quote>de haut
              niveau</quote> des opérations de Subversion.</entry>
          </row>

          <row>
<!--
            <entry>Interoperability</entry>
-->
            <entry>Interopérabilité</entry>
<!--
            <entry>Accessible by other WebDAV clients</entry>
-->
            <entry>Accessible par tout client WebDAV.</entry>
<!--
            <entry>Talks only to svn clients</entry>
-->
            <entry>Ne peut communiquer qu'avec des clients svn.</entry>
<!--
            <entry>Talks only to svn clients</entry>
-->
            <entry>Ne peut communiquer qu'avec des clients svn.</entry>
          </row>

          <row>
<!--
            <entry>Web viewing</entry>
-->
            <entry>Accès <foreignphrase>via</foreignphrase> une
              interface Web</entry>
<!--
            <entry>Limited built-in support, or via third-party tools
              such as ViewVC</entry>
-->
            <entry>Support intégré limité ou
              <foreignphrase>via</foreignphrase> des outils tiers tels
              que ViewVC.</entry>
<!--
            <entry>Only via third-party tools such as ViewVC</entry>
-->
            <entry>Uniquement <foreignphrase>via</foreignphrase> des
              outils tiers tels que ViewVC.</entry>
<!--
            <entry>Only via third-party tools such as ViewVC</entry>
-->
            <entry>Uniquement <foreignphrase>via</foreignphrase> des
              outils tiers tels que ViewVC.</entry>
          </row>

          <row>
<!--
            <entry>Master-slave server replication</entry>
-->
            <entry>Réplication serveur de type maître-esclave</entry>
<!--
            <entry>Transparent write-proxying available from slave to
              master</entry>
-->
            <entry>Possibilité d'un mandataire transparent pour
              l'écriture (de l'esclave vers le maître).</entry>
<!--
            <entry>Can only create read-only slave servers</entry>
-->
            <entry>Possibilité de créer seulement des serveurs esclaves
              en lecture seule.</entry>
<!--
            <entry>Can only create read-only slave servers</entry>
-->
            <entry>Possibilité de créer seulement des serveurs esclaves
              en lecture seule.</entry>
          </row>


          <row>
<!--
            <entry>Speed</entry>
-->
            <entry>Vitesse</entry>
<!--
            <entry>Somewhat slower</entry>
-->
            <entry>Relativement plus lent.</entry>
<!--
            <entry>Somewhat faster</entry>
-->
            <entry>Relativement plus rapide.</entry>
<!--
            <entry>Somewhat faster</entry>
-->
            <entry>Relativement plus rapide.</entry>
          </row>

          <row>
<!--
            <entry>Initial setup</entry>
-->
            <entry>Mise en place</entry>
<!--
            <entry>Somewhat complex</entry>
-->
            <entry>Relativement complexe.</entry>
<!--
            <entry>Extremely simple</entry>
-->
            <entry>Extrêmement simple.</entry>
<!--
            <entry>Moderately simple</entry>
-->
            <entry>Relativement simple.</entry>
          </row>

        </tbody>
      </tgroup>
    </table>

  </sect1>




  <sect1 id="svn.serverconfig.choosing">

<!--
    <title>Choosing a Server Configuration</title>

    <para>So, which server should you use?  Which is best?</para>

    <para>Obviously, there's no right answer to that question.  Every
      team has different needs, and the different servers all
      represent different sets of trade-offs.  The Subversion project
      itself doesn't endorse one server or another, or consider either
      server more <quote>official</quote> than another.</para>

    <para>Here are some reasons why you might choose one deployment
      over another, as well as reasons you
      might <emphasis>not</emphasis> choose one.</para>
-->

    <title>Choix d'une configuration serveur</title>

    <para>Et alors, quel serveur vous faut-il&nbsp;? Quel est le
      meilleur&nbsp;?</para>

    <para>Bien évidemment, il n'y a pas de bonne réponse à cette
      question. Chaque équipe a des besoins propres et les différents
      serveurs représentent des compromis différents. Le projet
      Subversion lui-même ne recommande pas un serveur plus qu'un autre,
      ni ne considère qu'un serveur est plus <quote>officiel</quote>
      qu'un autre.</para>

    <para>Voici quelques argumentaires qui vous aideront à choisir entre
      un déploiement et un autre, ainsi que quelques raisons de
      <emphasis>ne pas choisir</emphasis> l'un d'entre eux.</para>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.choosing.svnserve">

<!--
      <title>The svnserve Server</title>
-->
      <title>Serveur svnserve</title>

      <variablelist>
        <varlistentry>
<!--
          <term>Why you might want to use it:</term>
-->
          <term>Les bonnes raisons de l'utiliser&nbsp;:</term>
          <listitem>
            <itemizedlist>
              <listitem>
<!--
                <para>Quick and easy to set up.</para>
-->
                <para>facile et rapide à mettre en place&nbsp;;</para>
              </listitem>
              <listitem>
<!--
                <para>Network protocol is stateful and noticeably
                  faster than WebDAV.</para>
-->
                <para>le protocole réseau possède la notion d'états et
                  est significativement plus rapide que
                  WebDAV&nbsp;;</para>
              </listitem>
              <listitem>
<!--
                <para>No need to create system accounts on
                  server.</para>
-->
                <para>pas besoin de créer des comptes utilisateurs
                  système sur le serveur&nbsp;;</para>
              </listitem>
              <listitem>
<!--
                <para>Password is not passed over the network.</para>
-->
                <para>le mot de passe ne circule pas sur le
                  réseau.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
        <varlistentry>
<!--
          <term>Why you might want to avoid it:</term>
-->
          <term>Pourquoi l'éviter&nbsp;:</term>
          <listitem>
            <itemizedlist>
              <listitem>
<!--
                <para>By default, only one authentication method is
                  available, the network protocol is not encrypted,
                  and the server stores clear text passwords.  (All
                  these things can be changed by configuring SASL, but
                  it's a bit more work to do.)</para>
-->
                <para>par défaut, seule une méthode d'authentification
                  est disponible, le protocole réseau n'est pas chiffré
                  et le serveur enregistre les mots de passe en clair
                  (tous ces éléments peuvent être modifiés en
                  configurant SASL, mais cela requiert un peu plus de
                  travail)&nbsp;;</para>
              </listitem>
              <listitem>
<!--
                <para>No advanced logging facilities.</para>
-->
                <para>Pas de journalisation avancée&nbsp;;</para>
              </listitem>
              <listitem>
<!--
                <para>No built-in web browsing.  (You'd have to
                  install a separate web server and repository
                  browsing software to add this.)</para>
-->
                <para>pas de navigation web intégrée (il vous faut
                  installer un serveur web séparé et un logiciel de
                  navigation du dépôt pour ajouter cette
                  fonctionnalité).</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
      </variablelist>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.choosing.svn-ssh">

<!--
      <title>svnserve over SSH</title>
-->
      <title>svnserve sur SSH</title>

      <variablelist>
        <varlistentry>
<!--
          <term>Why you might want to use it:</term>
-->
          <term>Les bonnes raisons de l'utiliser&nbsp;:</term>
          <listitem>
            <itemizedlist>
              <listitem>
<!--
                <para>The network protocol is stateful and noticeably
                  faster than WebDAV.</para>
-->
                <para>le protocole réseau possède la notion d'états et
                  est significativement plus rapide que
                  WebDAV&nbsp;;</para>
              </listitem>
              <listitem>
<!--
                <para>You can take advantage of existing SSH accounts
                  and user infrastructure.</para>
-->
                <para>vous pouvez tirer parti des comptes SSH existants
                  et de l'infrastructure déjà mise en place pour les
                  utilisateurs&nbsp;;</para>
              </listitem>
              <listitem>
<!--
                <para>All network traffic is encrypted.</para>
-->
                <para>tout le trafic réseau est chiffré.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
        <varlistentry>
<!--
          <term>Why you might want to avoid it:</term>
-->
          <term>Pourquoi l'éviter&nbsp;:</term>
          <listitem>
            <itemizedlist>
              <listitem>
<!--
                <para>Only one choice of authentication method is
                  available.</para>
-->
                <para>il n'y a qu'un seul choix possible de méthode
                  d'authentification&nbsp;;</para>
              </listitem>
              <listitem>
<!--
                <para>No advanced logging facilities.</para>
-->
                <para>Les possibilités de journalisation sont
                  limitées&nbsp;;</para>
              </listitem>
              <listitem>
<!--
                <para>It requires users to be in the same system
                  group, or use a shared SSH key.</para>
-->
                <para>les utilisateurs doivent être membres du même
                  groupe système ou utiliser une clé SSH
                  partagée&nbsp;;</para>
              </listitem>
              <listitem>
<!--
                <para>If used improperly, it can lead to file
                  permission problems.</para>
-->
                <para>mal utilisé, il peut aboutir à des problèmes
                  de droits sur les fichiers.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

      </variablelist>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.choosing.apache">

<!--
      <title>The Apache HTTP Server</title>
-->
      <title>Serveur HTTP Apache</title>

      <variablelist>
        <varlistentry>
<!--
          <term>Why you might want to use it:</term>
-->
          <term>Les bonnes raisons de l'utiliser&nbsp;:</term>
          <listitem>
            <itemizedlist>
              <listitem>
<!--
                <para>It allows Subversion to use any of the
                  numerous authentication systems already integrated
                  with Apache.</para>
-->
                <para>il permet à Subversion d'utiliser n'importe lequel
                  des nombreux systèmes d'authentification déjà intégrés
                  dans Apache&nbsp;;</para>
              </listitem>
              <listitem>
<!--
                <para>There is no need to create system accounts on
                  the server.</para>
-->
                <para>pas besoin de créer des comptes système sur le
                  serveur&nbsp;;</para>
              </listitem>
              <listitem>
<!--
                <para>Full Apache logging is available.</para>
-->
                <para>journalisation Apache complète
                  disponible&nbsp;;</para>
              </listitem>
              <listitem>
<!--
                <para>Network traffic can be encrypted via SSL.</para>
-->
                <para>le trafic réseau peut être chiffré par
                  SSL&nbsp;;</para>
              </listitem>
              <listitem>
<!--
                <para>HTTP(S) can usually go through corporate
                firewalls.</para>
-->
                <para>HTTP(S) fonctionne généralement même derrière des
                  pare-feux d'entreprise&nbsp;;</para>
              </listitem>
              <listitem>
<!--
                <para>Built-in repository browsing is available via
                  web browser.</para>
-->
                <para>la possibilité de parcourir le dépôt avec un
                  navigateur Web est disponible
                  nativement&nbsp;;</para>
              </listitem>
              <listitem>
<!--
                <para>The repository can be mounted as a network
                  drive for transparent version control (see <xref
                  linkend="svn.webdav.autoversioning"/>).</para>
-->
                <para>le dépôt peut être monté en tant que lecteur
                  réseau à des fins de gestion de versionstransparente
                  (voir <xref
                  linkend="svn.webdav.autoversioning"/>).</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
        <varlistentry>
<!--
          <term>Why you might want to avoid it:</term>
-->
          <term>Pourquoi l'éviter&nbsp;:</term>
          <listitem>
            <itemizedlist>
              <listitem>
<!--
                <para>Noticeably slower than <command>svnserve</command>,
                  because HTTP is a stateless protocol and requires
                  more network turnarounds.</para>
-->
                <para>significativement plus lent que
                  <command>svnserve</command>, car HTTP est un protocole
                  sans état et nécessite plus d'allers et retours
                  réseau&nbsp;;</para>
              </listitem>
              <listitem>
<!--
                <para>Initial setup can be complex.</para>
-->
                <para>la mise en place initiale peut s'avérer
                  complexe.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

      </variablelist>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.choosing.recommendations">

<!--
      <title>Recommendations</title>
-->
    <title>Recommandations</title>

<!--
      <para>In general, the authors of this book recommend a vanilla
        <command>svnserve</command> installation for small teams just
        trying to get started with a Subversion server; it's the
        simplest to set up and has the fewest maintenance issues.
        You can always switch to a more complex server
        deployment as your needs change.</para>
-->
      <para>En général, les auteurs de ce livre recommandent une
        installation ordinaire de <command>svnserve</command> aux
        petites équipes qui débutent avec Subversion&nbsp;; c'est le
        plus simple à installer et celui qui pose le moins de problèmes
        de maintenance. Vous pouvez toujours passer au déploiement d'un
        serveur plus complexe au fur et à mesure que vos besoins
        évoluent.</para>

<!--
      <para>Here are some general recommendations and tips, based on
        years of supporting users:</para>
-->
      <para>Voici quelques recommandations et astuces générales, basées
        sur des années de support aux utilisateurs&nbsp;:</para>

      <itemizedlist>
        <listitem>
<!--
          <para>If you're trying to set up the simplest possible server
            for your group, a vanilla <command>svnserve</command>
            installation is the easiest, fastest route.  Note,
            however, that your repository data will be transmitted in
            the clear over the network.  If your deployment is
            entirely within your company's LAN or VPN, this isn't an
            issue.  If the repository is exposed to the wide-open
            Internet, you might want to make sure that either the
            repository's contents aren't sensitive (e.g., it contains
            only open source code), or that you go the extra mile in
            configuring SASL to encrypt network communications.</para>
-->
          <para>si vous essayez de mettre en place le serveur le plus
            simple possible pour votre groupe, une installation
            ordinaire de <command>svnserve</command> est la voie la plus
            sûre et la plus rapide. Notez cependant que les données de
            votre dépôt circuleront en clair sur le réseau. Si votre
            déploiement se situe entièrement à l'intérieur du LAN ou du
            VPN de votre compagnie, ce n'est pas un problème. Si le
            dépôt est accessible sur Internet, il serait bon de vous
            assurer que son contenu n'est pas sensible (par exemple s'il
            ne contient que du code open source), ou alors de faire
            l'effort supplémentaire de configurer SASL pour chiffrer les
            communications réseau&nbsp;;</para>
        </listitem>

        <listitem>
<!--
          <para>If you need to integrate with existing legacy identity
            systems (LDAP, Active Directory, NTLM, X.509, etc.),
            you must use either the Apache-based server
            or <command>svnserve</command> configured with SASL.</para>
-->
          <para>si vous devez vous insérer au sein de systèmes
            d'authentification déjà en place (LDAP, Active Directory,
            NTLM, X.509,&nbsp;etc.), il vous faudra utiliser soit le
            serveur basé sur Apache, soit <command>svnserve</command>
            configuré avec SASL&nbsp;;</para>
        </listitem>

        <listitem>
<!--
          <para>If you've decided to use either Apache or stock
            <command>svnserve</command>, create a single
            <command>svn</command> user on your system and run the
            server process as that user.  Be sure to make the
            repository directory wholly owned by the
            <command>svn</command> user as well.  From a security
            point of view, this keeps the repository data nicely
            siloed and protected by operating system filesystem
            permissions, changeable by only the Subversion server
            process itself.</para> </listitem>
-->

          <para>que vous ayez décidé d'utiliser Apache ou un banal
           <command>svnserve</command>, créez un utilisateur
           <literal>svn</literal> unique sur votre système et
           utilisez-le pour faire tourner le processus serveur.
           Assurez-vous également que la totalité du répertoire du dépôt
           est la propriété de cet utilisateur. Du point de vue de la
           sécurité, les données du dépôt restent ainsi englobées et
           protégées par l'application des droits gérés par le système
           de fichiers du système d'exploitation et sont modifiables
           uniquement par le processus serveur Subversion
           lui-même&nbsp;;</para></listitem>

        <listitem>
<!--
          <para>If you have an existing infrastructure that is heavily based
            on SSH accounts, and if your users already have system
            accounts on your server machine, it makes sense to
            deploy an <command>svnserve</command>-over-SSH solution.
            Otherwise, we don't widely recommend this option to the
            public.  It's generally considered safer to have your
            users access the repository via (imaginary) accounts
            managed by <command>svnserve</command> or Apache, rather
            than by full-blown system accounts.  If your deep desire
            for encrypted communication still draws you to this
            option, we recommend using Apache with SSL or
            <command>svnserve</command> with SASL encryption
            instead.</para> </listitem>
-->
          <para>si vous disposez d'une infrastructure existante basée
            principalement sur des comptes SSH et si vos utilisateurs
            possèdent déjà des comptes système sur la machine qui sert
            de serveur, il est logique de déployer une solution
            <command>svnserve</command> sur SSH. Dans le cas contraire,
            nous ne recommandons généralement pas cette option au
            public. Il est considéré comme plus sûr de donner l'accès au
            dépôt à vos utilisateurs au moyen de comptes (imaginaires)
            gérés par <command>svnserve</command> ou Apache plutôt que
            par de véritables comptes système. Si vous voulez vraiment
            chiffrer les communications, nous vous recommandons
            d'utiliser Apache avec chiffrement SSL ou
            <command>svnserve</command> avec chiffrement SASL à la
            place&nbsp;;</para> </listitem>

        <listitem>
<!--
          <para>Do <emphasis>not</emphasis> be seduced by the simple
            idea of having all of your users access a repository
            directly via <literal>file://</literal> URLs.  Even if the
            repository is readily available to everyone via a network
            share, this is a bad idea.  It removes any layers of
            protection between the users and the repository: users can
            accidentally (or intentionally) corrupt the repository
            database, it becomes hard to take the repository offline
            for inspection or upgrade, and it can lead to a mess of
            file permission problems (see <xref
            linkend="svn.serverconfig.multimethod"/>).  Note that this
            is also one of the reasons we warn against accessing
            repositories via <literal>svn+ssh://</literal>
            URLs&mdash;from a security standpoint, it's effectively
            the same as local users accessing via
            <literal>file://</literal>, and it can entail all the same
            problems if the administrator isn't careful.</para>
            </listitem> </itemizedlist>

-->
          <para>ne vous laissez pas séduire par l'idée très simple de
            donner l'accès à un dépôt à tous vos utilisateurs
            directement <foreignphrase>via</foreignphrase> des URL
            <literal>file://</literal>. Même si le dépôt est accessible
            à tous sur un lecteur réseau, c'est une mauvaise idée. Elle
            ôte toutes les couches de protection entre les utilisateurs
            et le dépôt&nbsp;: les utilisateurs peuvent corrompre
            accidentellement (ou intentionnellement) la base de données
            du dépôt, il est difficile de mettre le dépôt hors ligne
            pour inspection ou pour mise à niveau et vous risquez
            d'aboutir à de graves problèmes de droits sur les fichiers
            (voir <xref linkend="svn.serverconfig.multimethod"/>).
            Remarquez que c'est aussi une des raisons pour laquelle nous
            déconseillons d'accéder aux dépôts via des URL
            <literal>svn+ssh://</literal>&nbsp;: du point de vue de la
            sécurité, c'est en fait comme si les utilisateurs locaux y
            accédaient <foreignphrase>via</foreignphrase>
            <literal>file://</literal>, ce qui peut entraîner exactement
            les mêmes problèmes si l'administrateur ne fait pas preuve
            de prudence.</para>
        </listitem>

      </itemizedlist>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.serverconfig.svnserve">

<!--
    <title>svnserve, a Custom Server</title>

    <para>
      <indexterm>
        <primary>svnserve</primary>
      </indexterm>The <command>svnserve</command> program is a lightweight
      server, capable of speaking to clients over TCP/IP using a
      custom, stateful protocol.  Clients contact an
      <command>svnserve</command> server by using URLs that begin with
      the <literal>svn://</literal> or <literal>svn+ssh://</literal>
      scheme.  This section will explain the different ways of running
      <command>svnserve</command>, how clients authenticate themselves
      to the server, and how to configure appropriate access control
      to your repositories.</para>
 -->

    <title>svnserve, un serveur sur mesure</title>

    <para>
      <indexterm>
        <primary>svnserve</primary>
      </indexterm>Le programme <command>svnserve</command> est un
      serveur léger, capable de dialoguer avec des clients sur un réseau
      TCP/IP en utilisant un protocole dédié avec gestion des états. Les
      clients contactent le serveur <command>svnserve</command> en
      utilisant une URL qui commence par <literal>svn://</literal> ou
      <literal>svn+ssh://</literal>. Cette section explique différentes
      mises en œuvre de <command>svnserve</command>, l'authentification
      des clients sur le serveur et la configuration d'un contrôle
      d'accès approprié pour vos dépôts.</para>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.svnserve.invoking">
<!--
      <title>Invoking the Server</title>
-->
      <title>Démarrage du serveur</title>

<!--
      <para>
        <indexterm>
          <primary>svnserve</primary>
          <secondary>running</secondary>
        </indexterm>There are a few different ways to run the
        <command>svnserve</command> program:</para>
-->
      <para>
        <indexterm>
          <primary>svnserve</primary>
          <secondary>lancement</secondary>
        </indexterm>Il existe différentes façons de démarrer le
        programme <command>svnserve</command>&nbsp;:</para>

      <itemizedlist>
        <listitem>
<!--
          <para>Run <command>svnserve</command> as a standalone
            daemon, listening for requests.</para>
-->
          <para>lancer <command>svnserve</command> en tant que
            serveur autonome, à l'écoute de requêtes&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Have the Unix <command>inetd</command> daemon
            temporarily spawn <command>svnserve</command> whenever a
            request comes in on a certain port.</para>
-->
          <para>utiliser le démon Unix <command>inetd</command> pour
            lancer une instance temporaire de
            <command>svnserve</command> quand une requête arrive sur un
            port déterminé&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Have SSH invoke a temporary <command>svnserve</command>
            over an encrypted tunnel.</para>
-->
          <para>utiliser SSH pour lancer une instance temporaire de
            <command>svnserve</command> dans un tunnel
            chiffré&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Run <command>svnserve</command> as a Microsoft Windows
            service.</para>
-->
          <para>lancer <command>svnserve</command> en tant que service
            Microsoft Windows&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Run <command>svnserve</command> as a launchd job.</para>
-->
          <para>lancer <command>svnserve</command> en tant que tâche
            launchd.</para>
        </listitem>
      </itemizedlist>

<!--
      <para>The following sections will cover in detail these various
        deployment options for <command>svnserve</command>.</para>
-->
      <para>Les sections qui suivent vont détailler ces différentes
        mises en œuvre de <command>svnserve</command>.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.invoking.daemon">
<!--
        <title>svnserve as daemon</title>
-->
        <title>svnserve en serveur autonome</title>

<!--
        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>running</secondary>
            <tertiary>daemon mode</tertiary>
          </indexterm>The easiest option is to run <command>svnserve</command>
          as a standalone <quote>daemon</quote> process.  Use the
          <option>-d</option> option for this:</para>
-->
        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>lancement</secondary>
            <tertiary>serveur autonome</tertiary>
          </indexterm>Le plus facile est de démarrer
          <command>svnserve</command> en tant que serveur autonome. Pour
          ce faire, utilisez l'option <option>-d</option> (d pour
          <quote>daemon</quote> qui est l'appellation consacrée pour les
          serveurs Unix)&nbsp;:</para>

<!--
        <informalexample>
          <screen>
$ svnserve -d
$               # svnserve is now running, listening on port 3690
</screen>
        </informalexample>
-->
        <informalexample>
          <screen>
$ svnserve -d
$               # svnserve est maintenant actif, en écoute sur le port 3690
</screen>
        </informalexample>


<!--
        <para>When running <command>svnserve</command> in daemon mode,
          you can use the <option>- -listen-port</option> and
          <option>- -listen-host</option> options to customize the
          exact port and hostname to <quote>bind</quote> to.</para>
-->
        <para>Lorsque vous lancez <command>svnserve</command> en serveur
          autonome, vous pouvez utiliser les options
          <option>--listen-port</option> et
          <option>--listen-host</option> pour spécifier le port et
          l'adresse voulus pour <quote>écouter</quote>.</para>

<!--
        <para>Once we successfully start <command>svnserve</command>
          as explained previously, it makes every repository on your
          system available to the network.  A client needs to specify
          an <emphasis>absolute</emphasis> path in the repository URL.
          For example, if a repository is located at
          <filename>/var/svn/project1</filename>, a client would reach
          it via <uri>svn://host.example.com/var/svn/project1</uri>.
          To increase security, you can pass the <option>-r</option>
          option to <command>svnserve</command>, which restricts it to
          exporting only repositories below that path.  For
          example:</para>
-->
        <para>Une fois le serveur démarré de cette manière, tous les
          dépôts présents sur votre machine seront accessibles par le
          réseau. Un client doit spécifier un <emphasis>chemin
          absolu</emphasis> dans l'URL du dépôt. Par exemple, si un
          dépôt est situé sous <filename>/var/svn/projet-1</filename>,
          un client l'atteindra par
          <uri>svn://hote.exemple.com/var/svn/projet-1</uri>. Pour
          renforcer la sécurité, vous pouvez passer l'option
          <option>-r</option> à <command>svnserve</command> afin de
          restreindre l'export aux dépôts situés sous le chemin indiqué.
          Par exemple&nbsp;:</para>

        <informalexample>
          <screen>
$ svnserve -d -r /var/svn
&hellip;
</screen>
        </informalexample>

<!--
        <para>Using the <option>-r</option> option effectively
          modifies the location that the program treats as the root of
          the remote filesystem space.  Clients then use URLs that
          have that path portion removed from them, leaving much
          shorter (and much less revealing) URLs:</para>
-->
        <para>L'utilisation de l'option <option>-r</option> modifie le
          chemin que le serveur considère comme la racine du système de
          fichiers à exporter. Les clients utiliseront alors des URL ne
          comportant pas cette portion du chemin (ce qui rend les URL
          plus courtes et plus discrètes)&nbsp;:</para>

        <informalexample>
          <screen><!--
$ svn checkout svn://host.example.com/project1-->
$ svn checkout svn://hote.exemple.com/projet-1
&hellip;
</screen>
        </informalexample>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.invoking.inetd">
<!--
        <title>svnserve via inetd</title>
-->
        <title>svnserve <foreignphrase>via</foreignphrase> inetd</title>

<!--
        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>running</secondary>
            <tertiary>via inetd</tertiary>
          </indexterm>
          <indexterm>
            <primary>inetd</primary>
          </indexterm>If you want <command>inetd</command> to launch the
          process, you need to pass the <option>-i</option>
          (<option>- -inetd</option>) option.  In the following
          example, we've shown the output from running
          <literal>svnserve -i</literal> at the command line, but note
          that this isn't how you actually start the daemon; see the
          paragraphs following the example for how to configure
          <command>inetd</command> to start
          <command>svnserve</command>.</para>
-->
        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>lancement</secondary>
            <tertiary><foreignphrase>via</foreignphrase> inetd</tertiary>
          </indexterm>
          <indexterm>
            <primary>inetd</primary>
          </indexterm>Si vous désirez que <command>inetd</command> lance
          le processus, il vous faudra passer l'option
          <option>-i</option> (<option>--inetd</option>). Dans l'exemple
          suivant, nous montrons le résultat de la commande
          <literal>svnserve -i</literal>, mais notez bien que ce c'est
          pas de cette manière que l'on démarre le serveur&nbsp;;
          reportez-vous aux paragraphes qui suivent l'exemple pour
          savoir comment configurer <command>inetd</command> pour qu'il
          démarre <command>svnserve</command>.</para>

        <informalexample>
          <screen>
$ svnserve -i
( success ( 2 2 ( ) ( edit-pipeline svndiff1 absent-entries commit-revprops d\
epth log-revprops atomic-revprops partial-replay ) ) )
</screen>
        </informalexample>

<!--
        <para>When invoked with the <option>- -inetd</option> option,
          <command>svnserve</command> attempts to speak with a
          Subversion client via <filename>stdin</filename> and
          <filename>stdout</filename> using a custom protocol.  This
          is the standard behavior for a program being run via
          <command>inetd</command>.  The IANA has reserved port 3690
          for the Subversion protocol, so on a Unix-like system you
          can add lines to <filename>/etc/services</filename> such as
          these (if they don't already exist):</para>
-->
        <para>Quand on l'invoque avec l'option <option>--inetd</option>,
          <command>svnserve</command> tente de communiquer avec un
          client Subversion <foreignphrase>via</foreignphrase> l'entrée
          et la sortie standards (<filename>stdin</filename> et
          <filename>stdout</filename>) en utilisant un protocole
          spécifique. C'est le comportement habituel de tout programme
          lancé par <command>inetd</command>. L'IANA a réservé le port
          3690 pour le protocole Subversion&nbsp;; sur un système Unix
          vous pouvez donc ajouter au fichier
          <filename>/etc/services</filename> les lignes suivantes (si
          elles n'existent pas déjà)&nbsp;:</para>


        <informalexample>
          <programlisting>
svn           3690/tcp   # Subversion
svn           3690/udp   # Subversion
</programlisting>
        </informalexample>

<!--
        <para>If your system is using a classic Unix-like
          <command>inetd</command> daemon, you can add this line to
          <filename>/etc/inetd.conf</filename>:</para>
-->
        <para>Si votre système utilise un serveur
          <command>inetd</command> classique de type Unix, vous pouvez
          ajouter la ligne suivante au fichier
          <filename>/etc/inetd.conf</filename>&nbsp;:</para>

        <informalexample>
          <programlisting><!--
svn stream tcp nowait svnowner /usr/bin/svnserve svnserve -i-->
svn stream tcp nowait proprio-svn /usr/bin/svnserve svnserve -i
</programlisting>
        </informalexample>

<!--
        <para>Make sure <quote>svnowner</quote> is a user that has
          appropriate permissions to access your repositories.  Now,
          when a client connection comes into your server on port
          3690, <command>inetd</command> will spawn an
          <command>svnserve</command> process to service it.  Of
          course, you may also want to add <option>-r</option> to the
          configuration line as well, to restrict which repositories
          are exported.</para>
-->
        <para>Assurez-vous que l'utilisateur <quote>proprio-svn</quote>
          possède des droits d'accès appropriés pour vos dépôts. Dès
          lors, quand une connexion client arrive sur le port 3690,
          <command>inetd</command> va créer un processus
          <command>svnserve</command> pour lui répondre. Bien sûr, vous
          pouvez également ajouter l'option <option>-r</option> à cette
          ligne de configuration, pour restreindre les dépôts qui sont
          exportés.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.invoking.xinetd">
<!--
        <title>svnserve via xinetd</title>
-->
        <title>svnserve <foreignphrase>via</foreignphrase>
          xinetd</title>

<!--
        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>running</secondary>
            <tertiary>via xinetd</tertiary>
          </indexterm>
          <indexterm>
            <primary>xinetd</primary>
          </indexterm>Some operating systems provide the <command>xinetd</command>
          daemon as an alternative to <command>inetd</command>.
          Fortunately, you can configure <command>svnserve</command> for
          use with <command>xinetd</command>, too.  To do so, you'll need to
          create a configuration file <filename>/etc/xinetd.d/svn</filename>
          with the following contents:</para>
-->
        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>lancement</secondary>
            <tertiary><foreignphrase>via</foreignphrase> xinetd</tertiary>
          </indexterm>
          <indexterm>
            <primary>xinetd</primary>
          </indexterm>Certains systèmes d'exploitation fournissent le
          serveur <command>xinetd</command> en lieu et place de
          <command>inetd</command>. Fort heureusement, vous pouvez
          configurer <command>svnserve</command> pour s'interfacer aussi
          avec <command>xinetd</command>. Pour ce faire, vous devez
          créer un fichier <filename>/etc/xinetd.d/svn</filename> avec
          le contenu suivant&nbsp;:</para>

        <informalexample>
          <programlisting>
# default: on<!--
# description: Subversion server for the svn protocol
-->
# description: serveur Subversion pour le protocole svn
service svn
{
  disabled        = no
  port            = 3690
  socket_type     = stream
  protocol        = tcp
  wait            = no<!--
  user            = subversion -->
  user            = proprio-svn
  server          = /usr/local/bin/svnserve <!--
  server_args     = -i -r <replaceable>/path/to/repositories</replaceable>-->
  server_args     = -i -r <replaceable>/chemin/vers/les/dépôts</replaceable>
}
</programlisting>
        </informalexample>

<!--
        <para>Be sure that your <filename>/etc/services</filename>
          configuration file contains the definition of the port used
          for the <literal>svn</literal> protocol (as described in
          <xref linkend="svn.serverconfig.svnserve.invoking.inetd"
          />), otherwise the daemon will not start correctly.</para>
-->
        <para>Vérifier que le fichier <filename>/etc/services</filename>
          contient bien les références des ports relatifs au protocole
          <literal>svn</literal> (comme indiqué dans
          <xref linkend="svn.serverconfig.svnserve.invoking.inetd"
          />), sinon le serveur ne démarrera pas correctement.</para>

<!--
        <para>In Redhat-based distributions, you then need to activate
          the new service using <command>chkconfig - -add
          svn</command>.  After doing so, you will be able to enable
          and disable the server using the graphical configuration
          tools.</para>
-->
        <para>Sur les distributions de type Redhat, vous devez activer
          le nouveau service à l'aide de la commande
          <command>chkconfig --add svn</command>. Ensuite, vous pourrez
          activer ou désactiver le serveur au moyen de l'interface
          graphique.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.invoking.tunnel">
<!--
        <title>svnserve over a tunnel</title>
-->
        <title>svnserve encapsulé dans un tunnel</title>

<!--
        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>running</secondary>
            <tertiary>tunnel mode</tertiary>
          </indexterm>Another way to invoke <command>svnserve</command> is in
          tunnel mode, using the <option>-t</option> option.  This
          mode assumes that a remote-service program such as
          <command>rsh</command> or <command>ssh</command> has
          successfully authenticated a user and is now invoking a
          private <command>svnserve</command> process <emphasis>as
          that user</emphasis>.  (Note that you, the user, will
          rarely, if ever, have reason to invoke
          <command>svnserve</command> with the <option>-t</option> at
          the command line; instead, the SSH daemon
          does so for you.)  The <command>svnserve</command> program
          behaves normally (communicating via
          <filename>stdin</filename> and <filename>stdout</filename>)
          and assumes that the traffic is being automatically
          redirected over some sort of tunnel back to the client.
          When <command>svnserve</command> is invoked by a tunnel
          agent like this, be sure that the authenticated user has
          full read and write access to the repository database files.
          It's essentially the same as a local user accessing the
          repository via <literal>file://</literal> URLs.</para>
-->
        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>lancement</secondary>
            <tertiary>dans un tunnel</tertiary>
          </indexterm>Le mode tunnel est une troisième façon de lancer
          <command>svnserve</command>,
          <foreignphrase>via</foreignphrase>
          l'option <option>-t</option>. Ce mode présuppose qu'un
          programme de connexion à distance tel que
          <command>rsh</command> ou <command>ssh</command> a permis
          à un utilisateur de s'authentifier avec succès et lance alors
          un processus privé <command>svnserve</command> <emphasis>pour
          le compte de cet utilisateur</emphasis> (remarquez qu'en tant
          qu'utilisateur vous aurez rarement, sinon jamais, l'occasion
          de lancer <command>svnserve</command> avec l'option
          <option>-t</option> en ligne de commande&nbsp;; c'est le
          serveur SSH qui le fait à votre place). Le programme
          <command>svnserve</command> se comporte alors normalement
          (utilisation des entrées/sorties <filename>stdin</filename> et
          <filename>stdout</filename>) et suppose que le trafic est
          redirigé automatiquement vers le client par un tunnel. Quand
          <command>svnserve</command> est lancé par un gestionnaire de
          tunnel comme ici, soyez sûr que l'utilisateur authentifié
          possède les droits suffisants de lecture et d'écriture sur
          les fichiers de la base de données. C'est essentiellement la
          même chose que quand un utilisateur local accède au dépôt
          <foreignphrase>via</foreignphrase> des URL
          <literal>file://</literal>.</para>

<!--
        <para>This option is described in much more detail later in
          this chapter in <xref
          linkend="svn.serverconfig.svnserve.sshauth"/>.</para>
-->
        <para>Cette option est décrite en détail plus loin dans ce
          chapitre, dans <xref
          linkend="svn.serverconfig.svnserve.sshauth"/>.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.invoking.winservice">
<!--
        <title>svnserve as a Windows service</title>
-->
        <title>svnserve en tant que service Windows</title>

<!--
        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>running</secondary>
            <tertiary>as Windows service</tertiary>
          </indexterm>If your Windows system is a descendant of Windows NT
          (Windows 2000 or newer), you can
          run <command>svnserve</command> as a standard Windows
          service.  This is typically a much nicer experience than
          running it as a standalone daemon with
          the <option>- -daemon</option> (<option>-d</option>) option.
          Using daemon mode requires launching a console, typing a
          command, and then leaving the console window running
          indefinitely.  A Windows service, however, runs in the
          background, can start at boot time automatically, and can be
          started and stopped using the same consistent administration
          interface as other Windows services.</para>
-->
        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>lancement</secondary>
            <tertiary>en tant que service Windows</tertiary>
          </indexterm>Si votre système Windows est un descendant de
          Windows NT (Windows 2000 ou plus récent), vous pouvez lancer
          <command>svnserve</command> en tant que service Windows. C'est
          généralement une méthode bien plus agréable que de le
          lancer en démon indépendant via l'option <option>(-d)</option>.
          Utiliser le mode démon nécessite de lancer une console, de
          taper une commande et ensuite de laisser la fenêtre de la
          console tourner indéfiniment. Un service Windows, au contraire,
          tourne à l'arrière-plan, peut être lancé automatiquement au
          démarrage et peut être démarré ou arrêté à l'aide de la même
          interface d'administration que les autres services
          Windows.</para>

<!--
        <para>You'll need to define the new service using the
          command-line tool <command>SC.EXE</command>.  Much like
          the <command>inetd</command> configuration line, you must
          specify an exact invocation of <command>svnserve</command>
          for Windows to run at startup time:</para>
-->
        <para>Vous devrez définir le nouveau service en utilisant
          l'outil en ligne de commande <command>SC.EXE</command>. De
          façon analogue à la ligne de configuration
          <command>inetd</command>, il vous faudra fournir la commande
          de lancement précise de <command>svnserve</command> pour que
          Windows le lance au démarrage&nbsp;:</para>

        <informalexample>
          <screen>
C:\&gt; sc create svn<!--
        binpath= "C:\svn\bin\svnserve.exe - -service -r C:\repos"
        displayname= "Subversion Server"-->
        binpath= "C:\svn\bin\svnserve.exe --service -r C:\depot"
        displayname= "Serveur Subversion"
        depend= Tcpip
        start= auto
</screen>
        </informalexample>

<!--
        <para>This defines a new Windows service named
          <literal>svn</literal> which executes a particular
          <command>svnserve.exe</command> command when started (in
          this case, rooted at <filename>C:\repos</filename>).  There
          are a number of caveats in the prior example,
          however.</para>
-->
        <para>Ceci définit un nouveau service Windows nommé
          <quote>svn</quote>, qui exécute une commande particulière
          <command>svnserve.exe</command> quand il démarre (dont la
          racine est, dans ce cas, <filename>C:\depot</filename>). Il y
          a toutefois un certain nombre de précautions à prendre avec
          cet exemple.</para>

<!--
        <para>First, notice that the <command>svnserve.exe</command>
          program must always be invoked with the
          <option>- -service</option> option.  Any other options to
          <command>svnserve</command> must then be specified on the
          same line, but you cannot add conflicting options such as
          <option>- -daemon</option>
          (<option>-d</option>), <option>- -tunnel</option>,
          or <option>- -inetd</option> (<option>-i</option>).  Options
          such as <option>-r</option>
          or <option>- -listen-port</option> are fine, though.  Second,
          be careful about spaces when invoking
          the <command>SC.EXE</command> command: the <literal>key=
          value</literal> patterns must have no spaces between
          <literal>key=</literal> and must have exactly one space
          before the <literal>value</literal>.  Lastly, be careful
          about spaces in your command line to be invoked.  If a
          directory name contains spaces (or other characters that
          need escaping), place the entire inner value of
          <literal>binpath</literal> in double quotes, by escaping
          them:</para>
-->
        <para>Premièrement, remarquez que le programme
          <command>svnserve.exe</command> doit toujours être lancé avec
          l'option <option>--service</option>. Toute autre option de
          <command>svnserve</command> doit ensuite être spécifiée sur la
          même ligne, mais vous ne pouvez pas ajouter d'options qui
          seraient en conflit avec celle-ci, telles que
          <option>--daemon (-d)</option>, <option>--tunnel</option>,
          ou <option>--inetd (-i)</option>. D'autres options, comme
          <option>-r</option> ou <option>--listen-port</option> ne
          posent pas de problème. Deuxièmement, faites attention aux
          espaces quand vous tapez la commande
          <command>SC.EXE</command>&nbsp;: les groupes <literal>clé=
          valeur</literal> ne doivent pas comporter d'espace dans
          <literal>clé=</literal> et doivent comporter exactement une
          espace avant <literal>valeur</literal>. Enfin, faites
          attention aux espaces présentes dans la ligne de commande que
          vous indiquez. Si le nom d'un répertoire contient des espaces
          (ou tout autre caractère qui ait besoin d'être banalisé),
          placez l'ensemble du contenu de <literal>binpath</literal>
          entre guillemets, qui doivent eux-mêmes être banalisés&nbsp;:</para>

        <informalexample>
          <screen>
C:\&gt; sc create svn<!--
        binpath= "\"C:\program files\svn\bin\svnserve.exe\" - -service -r C:\repos"
        displayname= "Subversion Server"-->
        binpath= "\"C:\program files\svn\bin\svnserve.exe\" --service -r C:\depot"
        displayname= "Serveur Subversion"
        depend= Tcpip
        start= auto
</screen>
        </informalexample>

<!--
        <para>Also note that the word <literal>binpath</literal> is
          misleading&mdash;its value is a <emphasis>command
          line</emphasis>, not the path to an executable.  That's why
          you need to surround it with quotes if it contains
          embedded spaces.</para>
-->
        <para>Notez aussi que le terme <literal>binpath</literal> prête
          à confusion&nbsp;: sa valeur est une <emphasis>ligne de
          commande</emphasis>, pas le chemin d'accès à un exécutable.
          C'est pourquoi vous devez l'entourer de guillemets s'il
          contient des espaces.</para>

<!--
        <para>Once the service is defined, it can be stopped, started,
          or queried using standard GUI tools (the Services
          administrative control panel), or at the command
          line:</para>
-->
        <para>Une fois que le service a été créé, il peut être arrêté,
          démarré ou interrogé à l'aide des outils standards de
          l'interface graphique (le programme <quote>Services</quote>
          des outils d'administration) ou de la ligne de
          commande&nbsp;:</para>

        <informalexample>
          <screen>
C:\&gt; net stop svn
C:\&gt; net start svn
</screen>
        </informalexample>

<!--
        <para>The service can also be uninstalled (i.e., undefined) by
          deleting its definition:  <userinput>sc delete svn</userinput>.
          Just be sure to stop the service first!
          The <command>SC.EXE</command> program has many other
          subcommands and options; run <userinput>sc /?</userinput> to
          learn more about it.</para>
-->
        <para>Le service peut aussi être désinstallé (c'est-à-dire
          supprimé) en effaçant sa définition&nbsp;:
          <userinput>sc delete svn</userinput>. Prenez soin d'arrêter le
          service auparavant&nbsp;! Le programme
          <command>SC.EXE</command> possède de nombreuses autres
          sous-commandes&nbsp;; tapez <userinput>sc /?</userinput>
          en ligne de commande pour en savoir plus.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.invoking.launchd">
<!--
        <title>svnserve as a launchd job</title>
-->
        <title>svnserve en tant que tâche launchd</title>

<!--
        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>running</secondary>
            <tertiary>via launchd</tertiary>
          </indexterm>
          <indexterm>
            <primary>launchd</primary>
          </indexterm>Mac OS X (10.4 and higher) uses <command>launchd</command>
          to manage processes (including daemons) both system-wide and
          per-user.  A <command>launchd</command> job is specified by
          parameters in an XML property list file, and
          the <command>launchctl</command> command is used to manage
          the lifecycle of those jobs.</para>
-->
        <para>
          <indexterm>
            <primary>svnserve</primary>
            <secondary>lancement</secondary>
            <tertiary>en tant que tâche launchd</tertiary>
          </indexterm>
          <indexterm>
            <primary>launchd</primary>
          </indexterm>Mac OS X (10.4 et supérieur) utilise
          <command>launchd</command> pour gérer les processus, y compris
          les démons, de la machine et des utilisateurs. Une tâche
          <command>launchd</command> est spécifiée par des paramètres
          dans un fichier de propriétés XML et la commande
          <command>launchctl</command> sert à gérer le cycle de vie de
          ces tâches.</para>

<!--
        <para>When configured to run as a <command>launchd</command>
          job, <command>svnserve</command> is automatically launched
          on demand whenever incoming Subversion
          <literal>svn://</literal> network traffic needs to be
          handled.  This is far more convenient than a configuration
          which requires you to manually invoke
          <command>svnserve</command> as a long-running
          background process.</para>
-->
        <para>Quand il est configuré pour fonctionner en tant que tâche
          <command>launchd</command>, <command>svnserve</command> est
          automatiquement lancé à la demande dès qu'un trafic réseau
          entrant de type Subversion <literal>svn://</literal> doit être
          pris en charge. C'est beaucoup plus pratique qu'une
          configuration qui demande à lancer <command>svnserve</command>
          en tant que processus permanent en arrière-plan.</para>

<!--
        <para>To configure <command>svnserve</command> as
          a <command>launchd</command> job, first create a job
          definition file named
          <filename>/Library/LaunchDaemons/org.apache.subversion.svnserve.plist</filename>.
          <xref linkend="svn.serverconfig.svnserve.invoking.launchd.ex-1"/>
          provides an example of such a file.</para>
-->
        <para>Pour configurer <command>svnserve</command> en tant que
          tâche <command>launchd</command>, commencez par créer un
          fichier de définition de la tâche nommé
          <filename>/Library/LaunchDaemons/org.apache.subversion.svnserve.plist</filename>.
          <xref linkend="svn.serverconfig.svnserve.invoking.launchd.ex-1"/>
          donne un exemple d'un tel fichier.</para>

        <example id="svn.serverconfig.svnserve.invoking.launchd.ex-1">
<!--
          <title>A sample svnserve launchd job definition</title>
-->
          <title>Exemple de fichier de définition de tâche launchd pour
            svnserve</title>
          <programlisting>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
    "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
    &lt;dict&gt;
        &lt;key&gt;Label&lt;/key&gt;
        &lt;string&gt;org.apache.subversion.svnserve&lt;/string&gt;
        &lt;key&gt;ServiceDescription&lt;/key&gt;<!--
        &lt;string&gt;Host Subversion repositories using svn:// scheme&lt;/string&gt;-->
        &lt;string&gt;Accès aux dépôts Subversion locaux en utilisant le protocole svn://&lt;/string&gt;
        &lt;key&gt;ProgramArguments&lt;/key&gt;
        &lt;array&gt;
            &lt;string&gt;/usr/bin/svnserve&lt;/string&gt;
            &lt;string&gt;--inetd&lt;/string&gt;
            &lt;string&gt;--root=/var/svn&lt;/string&gt;
        &lt;/array&gt;
        &lt;key&gt;UserName&lt;/key&gt;<!--
        &lt;string&gt;svn&lt;/string&gt;-->
        &lt;string&gt;proprio-svn&lt;/string&gt;
        &lt;key&gt;GroupName&lt;/key&gt;<!--
        &lt;string&gt;svn&lt;/string&gt;-->
        &lt;string&gt;proprio-svn&lt;/string&gt;
        &lt;key&gt;inetdCompatibility&lt;/key&gt;
        &lt;dict&gt;
            &lt;key&gt;Wait&lt;/key&gt;
            &lt;false/&gt;
        &lt;/dict&gt;
        &lt;key&gt;Sockets&lt;/key&gt;
        &lt;dict&gt;
            &lt;key&gt;Listeners&lt;/key&gt;
            &lt;array&gt;
                &lt;dict&gt;
                    &lt;key&gt;SockServiceName&lt;/key&gt;
                    &lt;string&gt;svn&lt;/string&gt;
                    &lt;key&gt;Bonjour&lt;/key&gt;
                    &lt;true/&gt;
                &lt;/dict&gt;
            &lt;/array&gt;
        &lt;/dict&gt;
    &lt;/dict&gt;
&lt;/plist&gt;
</programlisting>
        </example>

        <warning>
<!--
          <para>The <command>launchd</command> system can be somewhat
            challenging to learn.  Fortunately, documentation exists
            for the commands described in this section. For example,
            run <userinput>man launchd</userinput> from the command
            line to see the manual page for <command>launchd</command>
            itself, <userinput>man launchd.plist</userinput> to read
            about the job definition format, etc.</para>
-->
          <para>Le système <command>launchd</command> peut être
            difficile à appréhender. Heureusement, la documentation
            existe pour les commandes décrites dans cette section. Par
            exemple, lancez <userinput>man launchd</userinput> depuis
            la ligne de commande pour avoir accès à la page de manuel de
            <command>launchd</command> lui-même ou
            <userinput>man launchd.plist</userinput> pour lire le format
            des définitions de tâches, etc.</para>
        </warning>

<!--
        <para>Once your job definition file is created, you can
          activate the job using <command>launchctl load</command>:</para>
-->
        <para>Une fois le fichier de définition de tâche créé, vous
          pouvez activer la tâche en utilisant
          <command>launchctl load</command>&nbsp;:</para>

        <informalexample>
          <screen>
$ sudo launchctl load \
       -w /Library/LaunchDaemons/org.apache.subversion.svnserve.plist
</screen>
        </informalexample>

<!--
        <para>To be clear, this action doesn't actually launch
          <command>svnserve</command> yet.  It simply tells
          <command>launchd</command> how to fire up
          <command>svnserve</command> when incoming networking traffic
          arrives on the <literal>svn</literal> network port; it will
          be terminated it after the traffic has been handled.</para>
-->
        <para>Pour être tout à fait franc, cette commande ne lance pas
          réellement <command>svnserve</command> immédiatement. Elle
          indique simplement à <command>launchd</command> comment lancer
          <command>svnserve</command> lorsqu'un flux entrant arrive sur
          le port <literal>svn</literal>&nbsp; il sera stoppé après que
          le flux a été pris en charge.</para>

        <note>
<!--
          <para>Because we want <command>svnserve</command> to be a
            system-wide daemon process, we need to
            use <command>sudo</command> to manage this job as an
            administrator.  Note also that the
            <literal>UserName</literal>
            and <literal>GroupName</literal> keys in the definition
            file are optional&mdash;if omitted, the job will run as
            the user who loaded the job.</para>
-->
          <para>Comme nous voulons que <command>svnserve</command> soit
            une tâche accessible sur toute la machine, nous devons
            utiliser <command>sudo</command> pour gérer la tâche avec
            les droits d'administrateur. Notez également que les clés
            <literal>UserName</literal> et <literal>GroupName</literal>
            dans le fichier de définition sont optionnelles. Si elles
            sont omises, la tâche sera exécutée avec l'identifiant de
            l'utilisateur ayant lancé la tâche.</para>
        </note>

<!--
        <para>Deactivating the job is just as easy to do&mdash;use
          <command>launchctl unload</command>:</para>
-->
        <para>Désactiver la tâche est tout aussi facile à faire&nbsp;;
          utilisez <command>launchctl unload</command>&nbsp;:</para>

        <informalexample>
          <screen>
$ sudo launchctl unload \
       -w /Library/LaunchDaemons/org.apache.subversion.svnserve.plist
</screen>
        </informalexample>

<!--
        <para><command>launchctl</command> also provides a way for you
          to query the status of jobs.  If the job is loaded, there
          will be line which matches the <literal>Label</literal>
          specified in the job definition file:</para>
-->
        <para><command>launchctl</command> vous propose aussi
          d'interroger l'état des tâches. Si la tâche est chargée, il
          y aura une ligne qui mentionne le <literal>Label</literal>
          spécifié dans le fichier de définition de la
          tâche&nbsp;:</para>

        <informalexample>
          <screen>
$ sudo launchctl list | grep org.apache.subversion.svnserve
-       0       org.apache.subversion.svnserve
$
</screen>
        </informalexample>

      </sect3>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.svnserve.auth">
<!--
      <title>Built-in Authentication and Authorization</title>
-->
      <title>Authentification et contrôle d'accès intégrés</title>

<!--
      <para>
        <indexterm>
          <primary>svnserve</primary>
          <secondary>authentication</secondary>
        </indexterm>
        <indexterm>
          <primary>svnserve</primary>
          <secondary>authorization</secondary>
        </indexterm>When a client connects to an <command>svnserve</command>
        process, the following things happen:</para>
-->
      <para>
        <indexterm>
          <primary>svnserve</primary>
          <secondary>authentification</secondary>
        </indexterm>
        <indexterm>
          <primary>svnserve</primary>
          <secondary>contrôle d'accès</secondary>
        </indexterm>Quand un client se connecte au processus
        <command>svnserve</command>, les choses suivantes se
        passent&nbsp;:</para>

      <itemizedlist>
        <listitem>
<!--
          <para>The client selects a specific repository.</para>
-->
          <para>Le client sélectionne un dépôt particulier.</para>
        </listitem>
        <listitem>
<!--
          <para>The server processes the repository's
            <filename>conf/svnserve.conf</filename> file and begins to
            enforce any authentication and authorization policies it
            describes.</para>
-->
          <para>Le serveur analyse le fichier
          <filename>conf/svnserve.conf</filename> de ce dépôt et
          commence à suivre les politiques d'authentification et de
          contrôle d'accès qui y sont décrites.</para>
        </listitem>
        <listitem>
<!--
          <para>Depending on the defined policies, one of the
            following may occur:</para>
-->
          <para>En fonction des politiques définies, une des choses
            suivantes a lieu&nbsp;:</para>
          <itemizedlist>
            <listitem>
<!--
              <para>The client may be allowed to make requests
                anonymously, without ever receiving an authentication
                challenge.</para>
-->
              <para>Le client est autorisé à lancer des requêtes
                anonymes, sans jamais recevoir le moindre défi
                d'authentification.</para>
            </listitem>
            <listitem>
<!--
              <para>The client may be challenged for authentication at
                any time.</para>
-->
              <para>Le client peut recevoir un défi d'authentification à
                tout instant.</para>
            </listitem>
            <listitem>
<!--
              <para>If operating in tunnel mode, the client will
                declare itself to be already externally authenticated
                (typically by SSH).</para>
-->
              <para>Si l'on est en mode tunnel, le client déclare
                lui-même avoir déjà satisfait à une authentification
                externe (généralement par SSH).</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

<!--
      <para>The <command>svnserve</command> server, by default, knows
        only how to send a CRAM-MD5<footnote><para>See RFC
        2195.</para></footnote> authentication challenge.  In essence,
        the server sends a small amount of data to the client.  The
        client uses the MD5 hash algorithm to create a fingerprint of
        the data and password combined, and then sends the fingerprint
        as a response.  The server performs the same computation with
        the stored password to verify that the result is identical.
        <emphasis>At no point does the actual password travel over the
        network.</emphasis></para>
-->

      <para>Le serveur <command>svnserve</command> ne sait envoyer, par
        défaut, que des défis d'authentification CRAM-MD5<footnote>
          <para>Voir la RFC 2195.</para>
        </footnote>. Plus précisément, le serveur envoie une petite
        quantité de données aux clients. Le client utilise l'algorithme
        de hachage MD5 pour créer une empreinte combinant les données et
        le mot de passe, puis renvoie l'empreinte en guise de réponse.
        Le serveur effectue le même calcul avec le mot de passe
        enregistré pour vérifier que le résultat est identique.
        <emphasis>Le mot de passe ne circule ainsi jamais en clair sur
        le réseau.</emphasis></para>
<!--
      <para>If your <command>svnserve</command> server was built with
        SASL support, it not only knows how to send CRAM-MD5 challenges,
        but also likely knows a whole host of other authentication
        mechanisms.  See <xref
        linkend="svn.serverconfig.svnserve.sasl"/> later in this
        chapter to learn how to configure SASL authentication and
        encryption.</para>
-->
      <para>Si votre serveur <command>svnserve</command> a été compilé
        en incluant le support de SASL, non seulement il sait comment
        envoyer des défis CRAM-MD5, mais il connaît aussi probablement
        un grand nombre d'autres mécanismes d'authentification.
        Consultez <xref linkend="svn.serverconfig.svnserve.sasl"/>
        plus loin dans ce chapitre pour savoir comment configurer
        l'authentification et le chiffrement avec SASL.</para>

<!--
      <para>It's also possible, of course, for the client to be
        externally authenticated via a tunnel agent, such as
        <command>ssh</command>.  In that case, the server simply
        examines the user it's running as, and uses this name as the
        authenticated username.  For more on this, see the later
        section, <xref
        linkend="svn.serverconfig.svnserve.sshauth"/>.</para>
-->
      <para>Le client peut bien sûr aussi être authentifié en externe
        par un gestionnaire de tunnel tel que <command>ssh</command>.
        Dans ce cas, le serveur se contente de prendre l'identifiant par
        lequel il a été lancé et de s'en servir comme utilisateur
        authentifié. Pour plus de détails, reportez-vous plus loin à
        <xref linkend="svn.serverconfig.svnserve.sshauth"/>.</para>

<!--
      <para>As you've already guessed, a repository's
        <filename>svnserve.conf</filename> file is the central
        mechanism for controlling access to the repository.  When used
        in conjunction with other supplemental files described in this
        section, this configuration file offers an administrator a
        complete solution for governing user authentication and
        authorization policies.  Each of the files we'll discuss uses
        the format common to other configuration files (see
        <xref linkend="svn.advanced.confarea"/>): section names are
        marked by square brackets (<literal>[</literal>
        and <literal>]</literal>), comments begin with hashes
        (<literal>#</literal>), and each section contains specific
        variables that can be set (<literal>variable =
        value</literal>).  Let's walk through these files now and
        learn how to use them.</para>
-->
      <para>Vous avez sûrement déjà deviné que le fichier
        <filename>svnserve.conf</filename> est le mécanisme central qui
        contrôle l'accès au dépôt. Lorsqu'il est utilisé en combinaison
        avec d'autres fichiers décrits dans cette section, ce fichier de
        configuration permet à l'administrateur de définir complètement
        les politiques d'authentification des utilisateurs et de contrôle
        d'accès. Tous les fichiers que nous allons présenter utilisent le
        format commun des fichiers de configuration (voir <xref
        linkend="svn.advanced.confarea"/>)&nbsp;:
        les noms de paragraphes sont entourés de crochets
        (<literal>[</literal> et <literal>]</literal>), les lignes de
        commentaires commencent par des dièses (<literal>#</literal>) et
        chaque paragraphe contient des variables spécifiques qui peuvent
        être définies (<literal>variable = valeur</literal>). Examinons
        maintenant ces fichiers et apprenons à les utiliser.</para>


      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.auth.users">
 <!--
        <title>Create a users file and realm</title>
-->
        <title>Création d'un fichier utilisateurs et d'un domaine
          d'authentification</title>

<!--
        <para>For now, the <literal>[general]</literal> section of
          <filename>svnserve.conf</filename> has all the variables you
          need.  Begin by changing the values of those variables:
          choose a name for a file that will contain your usernames
          and passwords and choose an authentication realm:</para>
-->
        <para>Pour ce qui suit, la section <literal>[general]</literal>
          de <filename>svnserve.conf</filename> contient toutes les
          variables dont vous avez besoin. Commencez par modifier les
          valeurs de toutes les variables&nbsp;: choisissez un nom pour
          le fichier qui contiendra vos noms d'utilisateur ainsi que
          vos mots de passe et choisissez un domaine
          d'authentification&nbsp;:</para>

<!--
        <informalexample>
          <programlisting>
[general]
password-db = userfile
realm = example realm
</programlisting>
        </informalexample>
-->
        <informalexample>
          <programlisting>
[general]
password-db = fichier-utilisateurs
realm = exemple de domaine
</programlisting>
        </informalexample>

<!--
        <para>The <literal>realm</literal> is a name that you define.
          It tells clients which sort of <quote>authentication
          namespace</quote> they're connecting to; the Subversion
          client displays it in the authentication prompt and uses it
          as a key (along with the server's hostname and port) for
          caching credentials on disk (see <xref
          linkend="svn.serverconfig.netmodel.credcache"/>).  The
          <literal>password-db</literal> variable points to a separate
          file that contains a list of usernames and passwords, using
          the same familiar format.  For example:</para>
-->
        <para>Le domaine (<literal>realm</literal> dans le fichier de
          configuration) est un nom que vous définissez. Il indique aux
          clients à quelle sorte d'<quote>espace de noms</quote> ils se
          connectent&nbsp;; le client Subversion l'affiche dans l'invite
          d'authentification et l'utilise comme clé (en combinaison avec
          le nom de machine et le port du serveur) pour mettre en cache
          les éléments d'authentification sur le disque (voir <xref
          linkend="svn.serverconfig.netmodel.credcache"/>). La variable
          <literal>password-db</literal> pointe vers un fichier séparé
          qui contient une liste de noms d'utilisateurs et de mots de
          passe, utilisant le même format usuel. Par exemple&nbsp;:</para>

<!--
        <informalexample>
          <programlisting>
[users]
harry = foopassword
sally = barpassword
</programlisting>
        </informalexample>
-->
        <informalexample>
          <programlisting>
[users]
harry = motdepassemachin
sally = motdepassebidule
</programlisting>
        </informalexample>

<!--
        <para>The value of <literal>password-db</literal> can be an
          absolute or relative path to the users file.  For many
          admins, it's easy to keep the file right in the
          <filename>conf/</filename> area of the repository, alongside
          <filename>svnserve.conf</filename>.  On the other hand, it's
          possible you may want to have two or more repositories share
          the same users file; in that case, the file should probably
          live in a more public place.  The repositories sharing the
          users file should also be configured to have the same realm,
          since the list of users essentially defines an
          authentication realm.  Wherever the file lives, be sure to
          set the file's read and write permissions appropriately.  If
          you know which user(s) <command>svnserve</command> will run
          as, restrict read access to the users file as necessary.</para>
-->
         <para> La valeur de <literal>password-db</literal> peut
          correspondre à un chemin absolu ou à un chemin relatif vers le
          fichier des utilisateurs. Pour de nombreux administrateurs,
          conserver le fichier dans la zone <filename>conf/</filename>,
          aux côtés de <filename>svnserve.conf</filename>, est une
          solution simple et facile. D'un autre côté, il se pourrait que
          deux dépôts, voire plus, doivent partager le même
          fichier&nbsp;; dans ce cas, le fichier devrait sans doute être
          situé dans un répertoire plus accessible. Les dépôts
          partageant le même fichier utilisateurs devraient aussi être
          configurés de sorte qu'ils soient dans le même domaine,
          puisque la liste des utilisateurs définit, par essence, un
          domaine d'authentification. Quel que soit l'emplacement du
          fichier, faites attention à positionner les droits en
          lecture/écriture de façon appropriée. Si vous savez sous quel
          nom d'utilisateur <command>svnserve</command> fonctionnera,
          restreignez l'accès au fichier utilisateurs en
          conséquence.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.auth.general">
<!--
        <title>Set access controls</title>
-->
        <title>Mise en place du contrôle d'accès</title>

<!--
        <para>There are two more variables to set in the
          <filename>svnserve.conf</filename> file: they determine what
          unauthenticated (anonymous) and authenticated users are
          allowed to do.  The variables <literal>anon-access</literal>
          and <literal>auth-access</literal> can be set to the value
          <literal>none</literal>, <literal>read</literal>, or
          <literal>write</literal>.  Setting the value to
          <literal>none</literal> prohibits both reading and writing;
          <literal>read</literal> allows read-only access to the
          repository, and <literal>write</literal> allows complete
          read/write access to the repository.  For example:</para>
-->

        <para>Il y a deux variables supplémentaires à définir dans le
          fichier <filename>svnserve.conf</filename>&nbsp;: elles
          déterminent ce que les utilisateurs non-authentifiés
          (anonymes) et les utilisateurs authentifiés ont le droit de
          faire. Les variables <literal>anon-access</literal>
          et <literal>auth-access</literal> peuvent contenir les valeurs
          <literal>none</literal>, <literal>read</literal>, ou
          <literal>write</literal>. Choisir la valeur
          <literal>none</literal> empêche à la fois lecture et
          écriture&nbsp;; <literal>read</literal> autorise l'accès en
          lecture seule au dépôt et <literal>write</literal> autorise
          l'accès complet en lecture/écriture au dépôt.
          Par exemple&nbsp;:</para>

<!--
        <informalexample>
          <programlisting>
[general]
password-db = userfile
realm = example realm

# anonymous users can only read the repository
anon-access = read

# authenticated users can both read and write
auth-access = write
</programlisting>
        </informalexample>
-->

        <informalexample>
          <programlisting>
[general]
password-db = fichier-utilisateurs
realm = exemple de domaine

# les utilisateurs anonymes ne peuvent accéder au dépôt qu'en lecture
anon-access = read

# les utilisateurs authentifiés peuvent à la fois lire et écrire
auth-access = write
</programlisting>
        </informalexample>

<!--
        <para>The example settings are, in fact, the default values of
          the variables, should you forget to define them.  If you
          want to be even more conservative, you can block anonymous
          access completely:</para>
-->

        <para>Les lignes présentes dans le fichier contiennent en fait
          les valeurs par défaut des variables, au cas où vous
          oublieriez de les définir. Si vous voulez être encore plus
          prudent, vous pouvez complètement interdire les accès
          anonymes&nbsp;:</para>

<!--
        <informalexample>
          <programlisting>
[general]
password-db = userfile
realm = example realm

# anonymous users aren't allowed
anon-access = none

# authenticated users can both read and write
auth-access = write
</programlisting>
        </informalexample>
-->
        <informalexample>
          <programlisting>
[general]
password-db = fichier-utilisateurs
realm = exemple de domaine

# les utilisateurs anonymes ne sont pas autorisés
anon-access = none

# les utilisateurs authentifiés peuvent à la fois lire et écrire
auth-access = write
</programlisting>
        </informalexample>

<!--
        <para>The server process understands not only
          these <quote>blanket</quote> access controls to the
          repository, but also finer-grained access restrictions
          placed on specific files and directories within the
          repository.  To make use of this feature, you need to define
          a file containing more detailed rules, and then set
          the <literal>authz-db</literal> variable to point to
          it:</para>
-->

        <para>Le processus serveur sait interpréter non seulement ce
          contrôle d'accès générique, mais aussi des restrictions
          d'accès plus fines associées à des fichiers et répertoires
          spécifiques du dépôt. Pour utiliser cette fonctionnalité, vous
          devez définir un fichier contenant des règles plus détaillées,
          puis faire pointer la variable <literal>authz-db</literal>
          vers ce fichier&nbsp;:</para>

<!--
        <informalexample>
          <programlisting>
[general]
password-db = userfile
realm = example realm

# Specific access rules for specific locations
authz-db = authzfile
</programlisting>
        </informalexample>
-->
        <informalexample>
          <programlisting>
[general]
password-db = fichier-utilisateurs
realm = exemple de domaine

# Règles d'accès propres à certains emplacements
authz-db = fichier-authz
</programlisting>
        </informalexample>

<!--
        <para>We discuss the syntax of the <filename>authzfile</filename> file
          in detail later in this chapter, in
          <xref linkend="svn.serverconfig.pathbasedauthz"/>.  Note
          that the <literal>authz-db</literal> variable isn't mutually
          exclusive with the <literal>anon-access</literal>
          and <literal>auth-access</literal> variables;  if all the
          variables are defined at once, <emphasis>all</emphasis>
          of the rules must be satisfied before access is allowed.</para>

-->

        <para> Nous étudions la syntaxe du fichier authz plus loin dans
          ce chapitre, dans <xref
          linkend="svn.serverconfig.pathbasedauthz"/>. Notez que la
          variable <literal>authz-db</literal> n'est pas mutuellement
          exclusive avec les variables <literal>anon-access</literal>
          et <literal>auth-access</literal>&nbsp;; si toutes les
          variables sont définies en même temps,
          <emphasis>toutes</emphasis> les règles doivent être
          satisfaites pour que l'accès soit autorisé.</para>
      </sect3>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.svnserve.sasl">
<!--
      <title>Using svnserve with SASL</title>
-->
      <title>Utilisation de svnserve avec SASL</title>

<!--
      <para>For many teams, the built-in CRAM-MD5 authentication is
        all they need from <command>svnserve</command>.  However, if
        your server (and your Subversion clients) were built with the
        Cyrus Simple Authentication and Security Layer (SASL) library,
        you have a number of authentication and encryption
        options available to you.</para>
-->
      <para>L'authentification par CRAM-MD5 suffit aux besoins
        de bon nombre d'équipes. Cependant, si votre serveur (et vos
        clients Subversion) ont été compilés avec la bibliothèque
        <quote>Cyrus Simple Authentication and Security Layer</quote>
        (SASL), vous avez à votre disposition un certain nombre
        d'options d'authentification et de chiffrement.</para>

      <sidebar>
<!--
        <title>What Is SASL?</title>
-->

        <title>Qu'est-ce que SASL&nbsp;?</title>
<!--
        <para>The Cyrus Simple Authentication and Security Layer is
          open source software written by Carnegie Mellon University.
          It adds generic authentication and encryption capabilities
          to any network protocol, and as of Subversion 1.5 and later,
          both the <command>svnserve</command> server
          and <command>svn</command> client know how to make use of
          this library.  It may or may not be available to you: if
          you're building Subversion yourself, you'll need to have at
          least version 2.1 of SASL installed on your system, and
          you'll need to make sure that it's detected during
          Subversion's build process.  The Subversion command-line
          client will report the availability of Cyrus SASL when you
          run <userinput>svn - -version</userinput>; if you're using
          some other Subversion client, you might need to check with
          the package maintainer as to whether SASL support was
          compiled in.</para>
-->
        <para>Cyrus Simple Authentication and Security Layer (ce qui
          signifie <quote>Couche d'authentification et de sécurité
          simple</quote>) est un logiciel libre qui a été écrit par
          l'université Carnegie Mellon. Il ajoute des possibilités
          d'authentification et de chiffrement à n'importe quel
          protocole réseau et, à partir de la version 1.5 de Subversion,
          le serveur <command>svnserve</command> ainsi que le client
          <command>svn</command> sont tous les deux capables de se
          servir de cette bibliothèque. Elle peut ne pas être à votre
          disposition&nbsp;: si vous compilez Subversion vous-même, il
          vous faut au minimum la version 2.1 de SASL d'installée sur
          votre système et vous devez vous assurer qu'elle est bien
          prise en compte durant le processus de compilation de
          Subversion. Le client texte interactif vous indiquera si
          Cyrus SASL est disponible lorsque vous tapez <userinput>svn
          --version</userinput>&nbsp; si vous utilisez un paquet binaire
          précompilé de Subversion, vous devez vérifier auprès de celui
          qui maintient ce paquet si SASL a été inclus à la
          compilation.</para>

<!--
        <para>SASL comes with a number of pluggable modules that
          represent different authentication systems: Kerberos
          (GSSAPI), NTLM, One-Time-Passwords (OTP), DIGEST-MD5, LDAP,
          Secure-Remote-Password (SRP), and others.  Certain
          mechanisms may or may not be available to you; be sure to
          check which modules are provided.</para>
-->
        <para>SASL est fourni avec de nombreux modules optionnels qui
          implémentent différents systèmes d'authentification&nbsp;:
          Kerberos (GSSAPI), NTLM, One-Time-Passwords (OTP), DIGEST-MD5,
          LDAP, Secure-Remote-Password (SRP) et d'autres encore.
          Certains mécanismes seront disponibles, d'autres pas&nbsp;;
          pensez à vérifier quels modules sont inclus.</para>

<!--
        <para>You can download Cyrus SASL (both code and
          documentation) from
          <ulink url="http://asg.web.cmu.edu/sasl/sasl-library.html"
          />.</para>
-->

        <para>Vous pouvez télécharger Cyrus SASL (à la fois le code
          source et la documentation) à l'adresse
          <ulink url="http://asg.web.cmu.edu/sasl/sasl-library.html"/>.
          </para>
      </sidebar>

<!--
      <para>Normally, when a subversion client connects to
        <command>svnserve</command>, the server sends a greeting that
        advertises a list of the capabilities it supports, and the
        client responds with a similar list of capabilities.  If the
        server is configured to require authentication, it then sends
        a challenge that lists the authentication mechanisms
        available; the client responds by choosing one of the
        mechanisms, and then authentication is carried out in some
        number of round-trip messages.  Even when SASL capabilities
        aren't present, the client and server inherently know how to
        use the CRAM-MD5 and ANONYMOUS mechanisms (see
        <xref linkend="svn.serverconfig.svnserve.auth"/>).  If server
        and client were linked against SASL, a number of other
        authentication mechanisms may also be available.  However,
        you'll need to explicitly configure SASL on the server side to
        advertise them.</para>
-->
      <para>Normalement, quand un client Subversion se connecte à
        <command>svnserve</command>, le serveur envoie un message de
        bienvenue qui liste les fonctionnalités qu'il supporte et le
        client répond avec une liste similaire. Si le serveur est
        configuré pour exiger une authentification, il envoie ensuite un
        défi listant les mécanismes d'authentification disponibles&nbsp;;
        le client répond en choisissant un des mécanismes et
        l'authentification se déroule ensuite par quelques échanges de
        messages. Même quand SASL n'est pas présent dans la liste, le
        client et le serveur sont capables d'utiliser les mécanismes
        CRAM-MD5 et ANONYMOUS (voir <xref
        linkend="svn.serverconfig.svnserve.auth"/>). Si le serveur et le
        client ont été compilés pour inclure SASL, un certain nombre
        d'autres mécanismes d'authentification sont éventuellement
        disponibles. Néanmoins, vous devez configurer explicitement
        SASL sur le serveur pour qu'ils soient proposés.</para>

      <sect3 id="svn.serverconfig.svnserve.sasl.authn">
<!--
        <title>Authenticating with SASL</title>
-->
        <title>Authentification par SASL</title>

<!--
        <para>To activate specific SASL mechanisms on the server,
          you'll need to do two things.  First, create
          a <literal>[sasl]</literal> section in your
          repository's <filename>svnserve.conf</filename> file with an
          initial key-value pair:</para>
-->
        <para>Pour activer les mécanismes spécifiques à SASL sur le
          serveur, il faut faire deux actions. D'abord, créez un
          paragraphe <literal>[sasl]</literal> dans le fichier
          <filename>svnserve.conf</filename> de votre dépôt avec le
          couple clé/valeur initial&nbsp;:</para>

        <informalexample>
          <programlisting>
[sasl]
use-sasl = true
</programlisting>
        </informalexample>

<!--
        <para>Second, create a main SASL configuration file
          called <filename>svn.conf</filename> in a place where the
          SASL library can find it&mdash;typically in the directory
          where SASL plug-ins are located.  You'll have to locate the
          plug-in directory on your particular system, such
          as <filename>/usr/lib/sasl2/</filename>
          or <filename>/etc/sasl2/</filename>.  (Note that this
          is <emphasis>not</emphasis>
          the <filename>svnserve.conf</filename> file that lives
          within a repository!)</para>
-->
        <para>Ensuite, créez le fichier principal de configuration de
          SASL, appelé <filename>svn.conf</filename>, à un endroit où la
          bibliothèque SASL saura le trouver (généralement dans un
          répertoire où sont situés les greffons SASL). Vous devez
          localiser le répertoire des greffons de votre système, tel que
          <filename>/usr/lib/sasl2/</filename> ou
          <filename>/etc/sasl2/</filename> (notez qu'<emphasis>il ne
          s'agit pas</emphasis> là du fichier
          <filename>svnserve.conf</filename> qui réside dans votre
          dépôt&nbsp;!).</para>

<!--
        <para>On a Windows server, you'll also have to edit the system
          registry (using a tool such as <command>regedit</command>)
          to tell SASL where to find things.  Create a registry key
          named <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\Carnegie
          Mellon\Project Cyrus\SASL Library]</literal>, and place two
          keys inside it: a key called <literal>SearchPath</literal>
          (whose value is a path to the directory containing the SASL
          <filename>sasl*.dll</filename> plug-in libraries), and a key
          called
          <literal>ConfFile</literal> (whose value is a path to the
          parent directory containing
          the <filename>svn.conf</filename> file you created).</para>
-->
        <para>Sur un serveur Windows vous devez aussi éditer la base de
          registre (à l'aide d'un outil tel que
          <command>regedit</command>) pour indiquer à SASL les
          emplacements où chercher. Créez une clé nommée
          <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\Carnegie
          Mellon\Project Cyrus\SASL Library]</literal> et placez-y deux
          clés&nbsp;: l'une appelée <literal>SearchPath</literal>
          (dont la valeur est le chemin du répertoire contenant les
          bibliothèques de greffons SASL
          <filename>sasl*.dll</filename>) et l'autre appelée
          <literal>ConfFile</literal> (dont la valeur est le chemin du
          répertoire parent contenant le fichier
          <filename>svn.conf</filename> que vous avez créé).</para>

<!--
        <para>Because SASL provides so many different kinds of
          authentication mechanisms, it would be foolish (and far
          beyond the scope of this book) to try to describe every
          possible server-side configuration.  Instead, we recommend
          that you read the documentation supplied in the
          <filename>doc/</filename> subdirectory of the SASL source
          code.  It goes into great detail about every mechanism and
          how to configure the server appropriately for each.  For the
          purposes of this discussion, we'll just demonstrate a simple
          example of configuring the DIGEST-MD5 mechanism.  For
          example, if your <filename>svn.conf</filename> file contains the
          following:</para>
-->
        <para>Parce que SASL fournit de très nombreux mécanismes
          d'authentification, il serait insensé (et bien au-delà du
          cadre de ce livre) d'essayer de décrire toutes les
          configurations serveurs possibles. Nous vous recommandons
          plutôt de lire la documentation fournie dans le
          sous-répertoire <filename>doc/</filename> du code source de
          SASL. Elle décrit en détail chaque mécanisme, ainsi que la
          manière de configurer le serveur correctement pour chacun
          d'entre eux. Dans ce paragraphe, nous nous contentons de
          donner un exemple simple de configuration du mécanisme
          DIGEST-MD5. Par exemple, si votre fichier
          <filename>svn.conf</filename> contient ce qui
          suit&nbsp;:</para>

        <informalexample>
          <programlisting>
pwcheck_method: auxprop
auxprop_plugin: sasldb<!--
sasldb_path: /etc/my_sasldb-->
sasldb_path: /etc/ma_bdd_sasl
mech_list: DIGEST-MD5
</programlisting>
        </informalexample>

<!--
        <para>you've told SASL to advertise the DIGEST-MD5
          mechanism to clients and to check user passwords against a
          private password database located
          at <filename>/etc/my_sasldb</filename>.  A system
          administrator can then use
          the <command>saslpasswd2</command> program to add or modify
          usernames and passwords in the database:</para>
-->
        <para>vous demandez à SASL de proposer le mécanisme DIGEST-MD5
          aux clients et de comparer les mots de passe des utilisateurs
          à une base de mots de passe privée située à l'emplacement
          <filename>/etc/ma_bdd_sasl</filename>. Un administrateur
          système pourra ensuite utiliser le programme
          <command>saslpasswd2</command> pour ajouter ou modifier les
          noms d'utilisateurs et les mots de passe contenus dans cette
          base de données&nbsp;:</para>

        <informalexample>
          <screen><!--
$ saslpasswd2 -c -f /etc/my_sasldb -u realm username-->
$ saslpasswd2 -c -f /etc/ma_bdd_sasl -u domaine utilisateur
</screen>
        </informalexample>

<!--
        <para>A few words of warning: first, make sure the
          <quote>realm</quote> argument
          to <command>saslpasswd2</command> matches the same realm
          you've defined in your
          repository's <filename>svnserve.conf</filename> file; if
          they don't match, authentication will fail.  Also, due to a
          shortcoming in SASL, the common realm must be a string with
          no space characters.  Finally, if you decide to go with the
          standard SASL password database, make sure
          the <command>svnserve</command> program has read access to
          the file (and possibly write access as well, if you're using
          a mechanism such as OTP).</para>
-->
        <para>Quelques consignes de prudence&nbsp;: tout d'abord,
          l'argument <quote>domaine</quote> qui est passé à
          <command>saslpasswd2</command> doit correspondre au même
          domaine que celui que vous avez défini dans le fichier
          <filename>svnserve.conf</filename>&nbsp;; s'ils ne
          correspondent pas, l'authentification échouera. En outre, à
          cause d'une limitation de SASL, ce domaine commun doit être
          une chaîne sans espace. Enfin, si vous décidez d'utiliser la
          base de données standard de mots de passe SASL, assurez-vous
          que le programme <command>svnserve</command> a accès en
          lecture à ce fichier (et éventuellement aussi en écriture, si
          vous utilisez un mécanisme tel que OTP).</para>

<!--
        <para>This is just one simple way of configuring SASL.  Many
          other authentication mechanisms are available, and passwords
          can be stored in other places such as in LDAP or a SQL
          database.  Consult the full SASL documentation for
          details.</para>
-->
        <para>Ceci est une manière simple de configurer SASL. De
          nombreux autres mécanismes d'authentification sont disponibles
          et les mots de passe peuvent être conservés dans des
          conteneurs différents, par exemple des annuaires LDAP ou des
          bases de données SQL. Reportez-vous à la documentation
          complète de SASL pour plus de détails.</para>

<!--
        <para>Remember that if you configure your server to only allow
          certain SASL authentication mechanisms, this forces all
          connecting clients to have SASL support as well.  Any
          Subversion client built without SASL support (which includes
          all pre-1.5 clients) will be unable to authenticate.  On the
          one hand, this sort of restriction may be exactly what you
          want (<quote>My clients must all use Kerberos!</quote>).
          However, if you still want non-SASL clients to be able to
          authenticate, be sure to advertise the CRAM-MD5 mechanism as
          an option.  All clients are able to use CRAM-MD5, whether
          they have SASL capabilities or not.</para>
-->
        <para>Souvenez-vous que si vous configurez votre serveur pour
          qu'il n'autorise que certains mécanismes d'authentification
          SASL, tous les clients qui se connectent ont l'obligation
          de supporter SASL. Tout client Subversion compilé sans SASL
          (ce qui inclut tous les clients antérieurs à la version 1.5)
          est incapable de se connecter. D'un autre côté, ce type de
          restriction est peut-être exactement ce que vous recherchez
          (<quote>Mes clients doivent tous utiliser
          Kerberos&nbsp;!</quote>). Néanmoins, si vous voulez permettre
          à des clients non-SASL de se connecter, pensez bien à inclure
          le mécanisme CRAM-MD5 dans les choix possibles. Tous les
          clients savent utiliser CRAM-MD5, qu'ils aient des
          fonctionnalités SASL ou pas.</para>

      </sect3>

      <sect3 id="svn.serverconfig.svnserve.sasl.encryption">
<!--
        <title>SASL encryption</title>
-->
        <title>Chiffrement SASL</title>

<!--
        <para>SASL is also able to perform data encryption if a
          particular mechanism supports it.  The built-in CRAM-MD5
          mechanism doesn't support encryption, but DIGEST-MD5 does,
          and mechanisms such as SRP actually require use of the
          OpenSSL library.  To enable or disable different levels of
          encryption, you can set two values in your repository's
          <filename>svnserve.conf</filename> file:</para>
-->
        <para>SASL est également capable d'effectuer le chiffrement des
          données si un mécanisme particulier le supporte. Le mécanisme
          intégré CRAM-MD5 ne supporte pas le chiffrement, mais
          DIGEST-MD5 le supporte et d'autres mécanismes tels que SRP
          requièrent l'utilisation de la bibliothèque OpenSSL. Pour
          activer ou désactiver différents niveaux de chiffrement, vous
          pouvez définir deux variables dans le fichier
          <filename>svnserve.conf</filename> de votre
          dépôt&nbsp;:</para>

        <informalexample>
          <programlisting>
[sasl]
use-sasl = true
min-encryption = 128
max-encryption = 256
</programlisting>
        </informalexample>

<!--
        <para>The <literal>min-encryption</literal> and
          <literal>max-encryption</literal> variables control the
          level of encryption demanded by the server.  To disable
          encryption completely, set both values to 0.  To enable
          simple checksumming of data (i.e., prevent tampering and
          guarantee data integrity without encryption), set both
          values to 1.  If you wish to allow&mdash;but not
          require&mdash;encryption, set the minimum value to 0, and
          the maximum value to some bit length.  To require encryption
          unconditionally, set both values to numbers greater than 1.
          In our previous example, we require clients to do at least
          128-bit encryption, but no more than 256-bit
          encryption.</para>
-->
        <para>Les variables <literal>min-encryption</literal> et
          <literal>max-encryption</literal> contrôlent le niveau de
          chiffrement exigé par le serveur. Pour désactiver complètement
          le chiffrement, mettez les deux valeurs à 0. Pour activer une
          simple somme de contrôle sur les données (par exemple pour
          empêcher toute manipulation douteuse et garantir l'intégrité
          des données sans chiffrement), mettez les deux valeurs à 1.
          Si vous voulez autoriser le chiffrement, sans que ce soit
          obligatoire, mettez 0 pour la valeur minimale et un nombre de
          bits donné pour la valeur maximale. Pour exiger un chiffrement
          inconditionnel, mettez les deux valeurs à un nombre plus grand
          que 1. Dans l'exemple précédent, nous obligeons les clients à
          utiliser au moins un chiffrement 128 bits et au plus un
          chiffrement 256 bits.</para>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.svnserve.sshauth">
<!--
      <title>Tunneling over SSH</title>
-->
      <title>Encapsulation de svnserve dans un tunnel SSH</title>

<!--
      <para><command>svnserve</command>'s built-in authentication (and
        SASL support) can be very handy, because it avoids the need to
        create real system accounts.  On the other hand, some
        administrators already have well-established SSH
        authentication frameworks in place.  In these situations, all
        of the project's users already have system accounts and the
        ability to <quote>SSH into</quote> the server machine.</para>
-->
      <para>L'authentification intégrée (ainsi que SASL) peuvent être
        très pratiques, car ils évitent d'avoir à créer de véritables
        comptes systèmes. D'un autre côté, certains administrateurs ont
        déjà des systèmes d'authentification bien établis en place. Dans
        ce cas, tous les utilisateurs du projet possèdent déjà des
        comptes systèmes et peuvent se connecter au serveur par
        SSH.</para>

<!--
      <para>It's easy to use SSH in conjunction with
        <command>svnserve</command>.  The client simply uses the
        <literal>svn+ssh://</literal> URL scheme to connect:</para>
-->
      <para>Utiliser SSH en conjonction avec <command>svnserve</command>
        est facile. Le client utilise juste une URL
        <literal>svn+ssh://</literal> pour se connecter&nbsp;:</para>

      <informalexample>
        <screen>
$ whoami
harry

<!--
$ svn list svn+ssh://host.example.com/repos/project
harryssh@host.example.com's password:  *****

foo
bar
baz-->
$ svn list svn+ssh://hote.exemple.com/depot/projet
harryssh@hote.exemple.com's password:  *****

truc
machin
bidule
&hellip;
</screen>
      </informalexample>

<!--
      <para>In this example, the Subversion client is invoking a local
        <command>ssh</command> process, connecting to
        <literal>host.example.com</literal>, authenticating as the
        user <literal>harryssh</literal> (according to SSH user
        configuration), then spawning a private
        <command>svnserve</command> process on the remote machine
        running as the user <literal>harryssh</literal>.  The
        <command>svnserve</command> command is being invoked in tunnel
        mode (<option>-t</option>), and its network protocol is being
        <quote>tunneled</quote> over the encrypted connection by
        <command>ssh</command>, the tunnel agent.
        If the client performs a commit, the authenticated username
        <literal>harryssh</literal> will be used as the author
        of the new revision.</para>
-->
      <para>Dans cet exemple, le client Subversion lance un processus
        local <command>ssh</command>, se connecte à
        <literal>hote.exemple.com</literal>, s'authentifie en tant que
        <literal>harryssh</literal> (en accord avec la configuration SSH
        des utilisateurs) puis un processus <command>svnserve</command>
        privé est généré automatiquement sur la machine distante,
        processus dont le propriétaire est l'utilisateur
        <literal>harryssh</literal>. La commande
        <command>svnserve</command> est lancée en mode tunnel
        (<option>-t</option>) et son protocole réseau est encapsulé dans
        la connexion chiffrée par <command>ssh</command>, le
        gestionnaire de tunnel. Si le client effectue une propagation,
        l'auteur de la nouvelle révision sera l'utilisateur authentifié
        (<literal>harryssh</literal>).</para>

<!--
      <para>The important thing to understand here is that the
        Subversion client is <emphasis>not</emphasis> connecting to a
        running <command>svnserve</command> daemon.  This method of
        access doesn't require a daemon, nor does it notice one if
        present.  It relies wholly on the ability of
        <command>ssh</command> to spawn a temporary
        <command>svnserve</command> process, which then terminates
        when the network connection is closed.</para>
-->
      <para>Ce qu'il est important de comprendre ici est que le client
        Subversion <emphasis>ne se connecte pas</emphasis> à un serveur
        <command>svnserve</command> fonctionnant en permanence. Cette
        méthode d'accès ne requiert pas la présence d'un démon, ni ne
        vérifie s'il y en a un qui tourne. Elle se base entièrement sur
        la capacité de <command>ssh</command> à générer un processus
        <command>svnserve</command> temporaire, qui ensuite se termine
        une fois la connexion SSH close.</para>

<!--
      <para>When using <literal>svn+ssh://</literal> URLs to access a
        repository, remember that it's the <command>ssh</command>
        program prompting for authentication, and
        <emphasis>not</emphasis> the <command>svn</command> client
        program.  That means there's no automatic password-caching
        going on (see <xref linkend="svn.serverconfig.netmodel.credcache"/>).
        The Subversion client often makes multiple connections to the
        repository, though users don't normally notice this due to the
        password caching feature.  When using
        <literal>svn+ssh://</literal> URLs, however, users may be
        annoyed by <command>ssh</command> repeatedly asking for a
        password for every outbound connection.  The solution is to
        use a separate SSH password-caching tool such as
        <command>ssh-agent</command> on a Unix-like system, or
        <command>pageant</command> on Windows.</para>
-->
      <para>Quand vous utilisez des URL <literal>svn+ssh://</literal>
        pour accéder à un dépôt, souvenez-vous que c'est le programme
        <command>ssh</command> qui envoie l'invite d'authentification,
        <emphasis>pas le client</emphasis> <command>svn</command>. Cela
        signifie qu'il n'y a pas de mise en cache automatique de mots de
        passe (voir <xref
        linkend="svn.serverconfig.netmodel.credcache"/>). Le
        fonctionnement du client Subversion fait qu'il accède souvent au
        dépôt par des connexions multiples, bien que les utilisateurs ne
        s'en rendent habituellement pas compte grâce à la fonctionnalité
        de mise en cache du mot de passe. Lorsque vous utilisez des URL
        <literal>svn+ssh://</literal>, les utilisateurs risquent de
        trouver ça pénible que <command>ssh</command> demande le mot de
        passe de façon répétitive pour toute connexion vers l'extérieur.
        La solution est d'utiliser un outil séparé de mise en cache du
        mot de passe, tel que <command>ssh-agent</command> sur Unix ou
        <command>pageant</command> sur Windows.</para>

<!--
      <para>When running over a tunnel, authorization is primarily
        controlled by operating system permissions to the repository's
        database files; it's very much the same as if Harry were
        accessing the repository directly via a
        <literal>file://</literal> URL.  If multiple system users are
        going to be accessing the repository directly, you may want to
        place them into a common group, and you'll need to be careful
        about umasks (be sure to read <xref
        linkend="svn.serverconfig.multimethod"/> later in this
        chapter).  But even in the case of tunneling, you can still use the
        <filename>svnserve.conf</filename> file to block access, by
        simply setting <literal>auth-access = read</literal>
        or <literal>auth-access = none</literal>.<footnote><para>Note
        that using any sort of <command>svnserve</command>-enforced
        access control at all only makes sense if the users cannot
        bypass it and access the repository directory directly using
        other tools (such as <command>cd</command> and
        <command>vi</command>); implementing
        such restrictions is described in
        <xref linkend="svn.serverconfig.svnserve.sshtricks.fixedcmd"
        />.</para></footnote></para>
-->
      <para>Quand le trafic passe par un tunnel, les accès sont
        contrôlés principalement par les droits sur les fichiers de la
        base de données liés au système d'exploitation&nbsp;; c'est
        quasiment pareil que si Harry accédait au dépôt directement via
        une URL <literal>file://</literal>. Si plusieurs utilisateurs
        systèmes accèdent au dépôt directement, il est de bon ton de
        les placer dans un même groupe et vous devez faire attention aux
        umasks (prenez soin de lire <xref
        linkend="svn.serverconfig.multimethod"/> plus loin dans ce
        chapitre). Mais même dans le cas de l'encapsulation, vous pouvez
        toujours utiliser le fichier <filename>svnserve.conf</filename>
        pour bloquer l'accès, en spécifiant juste <literal>auth-access =
        read</literal> ou <literal>auth-access =
        none</literal><footnote>
          <para>Notez qu'utiliser le moindre contrôle d'accès avec
            <command>svnserve</command> n'a de sens que si les
            utilisateurs ne peuvent pas le contourner en accédant
            directement au répertoire du dépôt en utilisant d'autres
            outils (tels que <command>cd</command> ou
            <command>vi</command>)&nbsp;; comment mettre en place de
            telles restrictions est décrit dans
            <xref linkend="svn.serverconfig.svnserve.sshtricks.fixedcmd"
            />.</para>
        </footnote>.
      </para>

<!--
      <para>You'd think that the story of SSH tunneling would end
        here, but it doesn't.  Subversion allows you to create custom
        tunnel behaviors in your runtime <filename>config</filename>
        file (see <xref linkend="svn.advanced.confarea"/>).  For
        example, suppose you want to use RSH instead of
        SSH.<footnote><para>We don't actually recommend this, since
        RSH is notably less secure than SSH.</para></footnote>  In
        the <literal>[tunnels]</literal> section of your
        <filename>config</filename> file, simply define it like
        this:</para>
-->
      <para>Vous vous attendez à ce que cette histoire d'encapsulation
        SSH se termine ici, mais ce n'est pas le cas. Subversion vous
        permet de créer des comportements d'encapsulation personnalisés
        dans votre fichier de configuration (voir <xref
        linkend="svn.advanced.confarea"/>). Par exemple, supposons que
        vous vouliez utiliser RSH au lieu de SSH<footnote>
          <para>Nous ne le recommandons vraiment pas, car RSH est
            significativement moins sécurisé que SSH.</para>
        </footnote>.
        Dans le paragraphe <literal>[tunnels]</literal> de votre fichier
        <filename>config</filename>, définissez-le comme
        ceci&nbsp;:</para>

      <informalexample>
        <programlisting>
[tunnels]
rsh = rsh --
</programlisting>
      </informalexample>

<!--
      <para>And now, you can use this new tunnel definition by using a
        URL scheme that matches the name of your new variable:
        <literal>svn+rsh://host/path</literal>.  When using the new
        URL scheme, the Subversion client will actually be running the
        command <userinput>rsh - - host svnserve -t</userinput> behind the
        scenes.  If you include a username in the URL (e.g.,
        <literal>svn+rsh://username@host/path</literal>), the client
        will also include that in its command (<userinput>rsh - -
        username@host svnserve -t</userinput>).</para>
-->
      <para>À présent vous pouvez utiliser cette nouvelle définition
        d'encapsulation par le biais d'un schéma d'URL qui correspond au
        nom de votre nouvelle variable&nbsp;:
        <literal>svn+rsh://hote/chemin</literal>. Lorsqu'il utilise le
        nouveau type d'URL, le client Subversion lance en fait en
        arrière-plan la commande <userinput>rsh -- hote
        svnserve -t</userinput>. Si vous incluez un nom d'utilisateur
        dans l'URL (par exemple
        <literal>svn+rsh://nomdutilisateur@hote/chemin</literal>), le
        client va l'inclure dans sa commande (<userinput>rsh --
        nomdutilisateur@hote svnserve -t</userinput>).</para>

      <warning>
<!--
        <para>Notice that when defining an RSH-based tunnel, we've
          added the <literal>- -</literal> end-of-options argument to
          the tunnel command line.  This is to prevent a malformed
          hostname from being treated as another option to the tunnel
          command.  You should do the same for other tunnel programs
          (for example, SSH).</para>
-->
        <para>Notez que quand nous avons défini un tunnel sur RSH, nous
          avons ajouté l'argument <literal>--</literal> pour signifier
          explicitement la fin des options. Cette pratique permet
          d'éviter qu'un nom d'hôte mal écrit ne soit traité comme une
          autre option du tunnel. Nous vous encourageons à faire la
          même chose pour les autres tunnels (par exemple SSH).</para>
      </warning>

<!--
      <para>But you can define new tunneling schemes to be much more
        clever than that:</para>
-->
      <para>Mais vous pouvez définir des schémas d'encapsulation bien
        plus évolués&nbsp;:</para>

      <informalexample>
        <programlisting>
[tunnels]
joessh = $JOESSH /opt/alternate/ssh -p 29934 --
</programlisting>
      </informalexample>

<!--
      <para>This example demonstrates a couple of things.  First, it
        shows how to make the Subversion client launch a very specific
        tunneling binary (the one located at
        <filename>/opt/alternate/ssh</filename>) with specific
        options.  In this case, accessing an
        <literal>svn+joessh://</literal> URL would invoke the
        particular SSH binary with <option>-p 29934</option> as
        arguments&mdash;useful if you want the tunnel program to
        connect to a nonstandard port.</para>
-->
      <para>Cet exemple illustre plusieurs choses. D'abord, il indique
        comment faire pour que le client Subversion lance un exécutable
        d'encapsulation particulier (celui situé à l'emplacement
        <filename>/opt/alternate/ssh</filename>) avec des options
        particulières. Dans ce cas, se connecter à une URL
        <literal>svn+joessh://</literal> lance un exécutable SSH
        particulier avec les arguments <option>-p 29934</option> (utile
        si vous voulez que le programme d'encapsulation se connecte à un
        port non standard).</para>

<!--
      <para>Second, it shows how to define a custom environment
        variable that can override the name of the tunneling program.
        Setting the <literal>SVN_SSH</literal> environment variable is
        a convenient way to override the default SSH tunnel agent.
        But if you need to have several different overrides for
        different servers, each perhaps contacting a different port or
        passing a different set of options to SSH, you can use the
        mechanism demonstrated in this example.  Now if we were to set
        the <literal>JOESSH</literal> environment variable, its value
        would override the entire value of the tunnel
        variable&mdash;<command>$JOESSH</command> would be executed
        instead of <userinput>/opt/alternate/ssh -p
        29934</userinput>.</para>
-->
      <para>Ensuite, il indique comment définir une variable
        d'environnement personnalisée capable de remplacer le nom du
        programme d'encapsulation. Configurer la variable d'environnement
        <literal>SVN_SSH</literal> est un moyen simple de modifier le
        programme d'encapsulation par défaut. Mais s'il vous faut
        différents programmes d'encapsulation pour différents serveurs,
        chacun se connectant par exemple à un port différent ou passant
        des options différentes à SSH, vous pouvez utiliser le mécanisme
        illustré dans cet exemple. Concrètement, si nous donnons une
        valeur à la variable d'environnement <literal>JOESSH</literal>,
        cette valeur remplacera la totalité de la valeur de la variable
        d'encapsulation &mdash; <command>$JOESSH</command> serait
        exécuté au lieu de <userinput>/opt/alternate/ssh
        -p 29934</userinput>.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.svnserve.sshtricks">
<!--
      <title>SSH Configuration Tricks</title>
-->
      <title>Astuces de configuration de SSH</title>

<!--
      <para>It's possible to control not only the way in which the
        client invokes <command>ssh</command>, but also to control
        the behavior of <command>sshd</command> on your server
        machine.  In this section, we'll show how to control the
        exact <command>svnserve</command> command executed
        by <command>sshd</command>, as well as how to have multiple
        users share a single system account.</para>
-->
      <para>Il est possible de contrôler non seulement la manière dont
        le client lance <command>ssh</command>, mais aussi le
        comportement de <command>sshd</command> sur votre machine. Dans
        ce paragraphe, nous indiquons comment contrôler la commande
        <command>svnserve</command> précise qui est exécutée par
        <command>sshd</command>, ainsi que comment faire pour que
        plusieurs utilisateurs partagent un même compte système.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.sshtricks.setup">
<!--
        <title>Initial setup</title>
-->
        <title>Mise en œuvre initiale</title>

<!--
        <para>To begin, locate the home directory of the account
          you'll be using to launch <command>svnserve</command>.  Make
          sure the account has an SSH public/private keypair
          installed, and that the user can log in via public-key
          authentication.  Password authentication will not work,
          since all of the following SSH tricks revolve around using
          the SSH <filename>authorized_keys</filename> file.</para>
-->
        <para>Pour commencer, localisez le répertoire
          <quote>home</quote> du compte utilisateur que vous utilisez
          pour lancer <command>svnserve</command>. Assurez-vous que ce
          compte possède un biclé de clés publique/privée et que
          l'utilisateur peut se connecter en s'authentifiant par la
          méthode à clé publique. L'authentification par mot de passe ne
          fonctionnera pas, puisque toutes les astuces SSH qui suivent
          consistent à utiliser le fichier
          <filename>authorized_keys</filename>.</para>

<!--
        <para>If it doesn't already exist, create the
          <filename>authorized_keys</filename> file (on Unix,
          typically <filename>~/.ssh/authorized_keys</filename>).
          Each line in this file describes a public key that is
          allowed to connect.  The lines are typically of the
          form:</para>
-->
        <para>S'il n'existe pas déjà, créez le fichier
          <filename>authorized_keys</filename> (sur Unix, c'est
          généralement <filename>~/.ssh/authorized_keys</filename>).
          Chaque ligne de ce fichier décrit une clé publique autorisée à
          se connecter. Ces ligne sont généralement de la
          forme&nbsp;:</para>

        <informalexample>
          <programlisting><!--
  ssh-dsa AAAABtce9euch&hellip; user@example.com-->
  ssh-dsa AAAABtce9euch&hellip; utilisateur@exemple.com
</programlisting>
        </informalexample>

<!--
        <para>The first field describes the type of key, the second
          field is the base64-encoded key itself, and the third field
          is a comment.  However, it's a lesser known fact that the
          entire line can be preceded by a <literal>command</literal>
          field:</para>
-->
        <para>Le premier champ décrit le type de clé, le second champ
          est la clé elle-même, encodée en base 64, et le troisième
          champ est un commentaire. Cependant, c'est un fait moins connu
          que la ligne toute entière peut être précédée par un champ
          <literal>command</literal>&nbsp;:</para>

        <informalexample>
          <programlisting> <!--
  command="program" ssh-dsa AAAABtce9euch&hellip; user@example.com-->
  command="programme" ssh-dsa AAAABtce9euch… utilisateur@exemple.com
</programlisting>
        </informalexample>

<!--
        <para>When the <literal>command</literal> field is set, the
          SSH daemon will run the named program instead of the
          typical tunnel-mode <command>svnserve</command> invocation that the
          Subversion client asks for.  This opens the door to a number
          of server-side tricks.  In the following examples, we
          abbreviate the lines of the file as:</para>
-->
        <para>Quand le champ <literal>command</literal> est présent, le
          serveur SSH va lancer le programme indiqué en lieu et place de
          l'habituel <command>svnserve</command> en mode tunnel que le
          client Subversion a demandé. En découlent un certain nombre
          d'astuces côté serveur. Dans les exemples suivants, nous
          abrégeons les lignes du fichier par&nbsp;:</para>

        <informalexample>
          <programlisting><!--
  command="program" TYPE KEY COMMENT-->
  command="programme" TYPE CLÉ COMMENTAIRE
</programlisting>
        </informalexample>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.sshtricks.fixedcmd">
<!--
        <title>Controlling the invoked command</title>
-->
        <title>Contrôle de la commande à exécuter</title>

<!--
        <para>Because we can specify the executed server-side command,
          it's easy to name a specific <command>svnserve</command>
          binary to run and to pass it extra arguments:</para>
-->
        <para>Comme nous pouvons spécifier la commande exécutée côté
          serveur, il devient facile de désigner un exécutable
          <command>svnserve</command> spécifique et de lui passer des
          arguments supplémentaires&nbsp;:</para>

        <informalexample>
          <programlisting><!--
  command="/path/to/svnserve -t -r /virtual/root" TYPE KEY COMMENT-->
  command="/chemin/vers/svnserve -t -r /racine/virtuelle" TYPE CLÉ COMMENTAIRE
</programlisting>
        </informalexample>

<!--
        <para>In this example, <filename>/path/to/svnserve</filename>
          might be a custom wrapper script
          around <command>svnserve</command> which sets the umask (see
          <xref linkend="svn.serverconfig.multimethod"/>).  It also
          shows how to anchor <command>svnserve</command> in a virtual
          root directory, just as one often does when
          running <command>svnserve</command> as a daemon process.
          This might be done either to restrict access to parts of the
          system, or simply to relieve the user of having to type an
          absolute path in the <literal>svn+ssh://</literal>
          URL.</para>
-->
        <para>Dans cet exemple, <filename>/chemin/vers/svnserve</filename>
          peut être un script personnalisé construit autour de
          <command>svnserve</command> qui spécifie le umask à utiliser
          (voir <xref linkend="svn.serverconfig.multimethod"/>). Il
          indique aussi comment <quote>ancrer</quote>
          <command>svnserve</command> dans un répertoire racine virtuel,
          ce qui est aussi très souvent utilisé quand
          <command>svnserve</command> fonctionne en tant que démon. Le
          but est soit de restreindre l'accès à certaines parties du
          système, soit simplement d'éviter que l'utilisateur ait à
          taper un chemin absolu dans l'URL
          <literal>svn+ssh://</literal>.</para>

<!--
        <para>It's also possible to have multiple users share a single
          account.  Instead of creating a separate system account for
          each user, generate a public/private key pair for each
          person.  Then place each public key into
          the <filename>authorized_keys</filename> file, one per
          line, and use the <option>- -tunnel-user</option>
          option:</para>
-->
        <para>Il est également possible d'avoir plusieurs utilisateurs
          partageant un compte utilisateur unique. Au lieu de créer un
          compte système distinct pour chaque utilisateur, générez
          plutôt un biclé de clés publique/privée pour chaque personne.
          Placez ensuite chaque clé publique dans le fichier
          <filename>authorized_users</filename>, une par ligne, et
          utilisez l'option <option>--tunnel-user</option>&nbsp;:</para>

        <informalexample>
          <programlisting><!--
  command="svnserve -t - -tunnel-user=harry" TYPE1 KEY1 harry@example.com
  command="svnserve -t - -tunnel-user=sally" TYPE2 KEY2 sally@example.com-->
  command="svnserve -t --tunnel-user=harry" TYPE1 CLÉ1 harry@exemple.com
  command="svnserve -t --tunnel-user=sally" TYPE2 CLÉ2 sally@exemple.com
</programlisting>
        </informalexample>

<!--
        <para>This example allows both Harry and Sally to connect to
          the same account via public key authentication.  Each of
          them has a custom command that will be executed;
          the <option>- -tunnel-user</option> option
          tells <command>svnserve</command> to assume that the named
          argument is the authenticated user.  Without
          <option>- -tunnel-user</option>, it would appear as though
          all commits were coming from the one shared system
          account.</para>
-->
        <para>Cet exemple permet à la fois à Harry et à Sally de se
          connecter au même compte utilisateur avec l'authentification
          <foreignphrase>via</foreignphrase> leur clé publique. Une
          commande propre à chacun sera exécutée&nbsp;; l'option
          <option>--tunnel-user</option> signale à
          <command>svnserve</command> que l'argument fourni doit être
          considéré comme le nom de l'utilisateur authentifié. Sans
          <option>--tunnel-user</option>, toutes les propagations
          sembleraient venir du même compte utilisateur partagé.</para>

<!--
        <para>A final word of caution: giving a user access to the
          server via public-key in a shared account might still allow
          other forms of SSH access, even if you've set
          the <literal>command</literal> value
          in <filename>authorized_keys</filename>.  For example, the
          user may still get shell access through SSH or be able to
          perform X11 or general port forwarding through your server.
          To give the user as little permission as possible, you may
          want to specify a number of restrictive options immediately
          after the <literal>command</literal>:</para>
-->
        <para>Finalement, un dernier avertissement&nbsp;: autoriser
          l'accès d'un utilisateur au serveur
          <foreignphrase>via</foreignphrase> une clé publique dans un
          compte partagé n'empêche pas forcément d'autres formes
          d'accès SSH, même si vous avez spécifié une valeur pour le
          champ <literal>command</literal> dans le fichier
          <filename>authorized_keys</filename>. Par exemple,
          l'utilisateur aura toujours accès au shell via SSH, il sera
          capable rediriger les flux X11 ou tout autre port de votre
          serveur. Pour accorder le moins de droits possibles à
          l'utilisateur, vous pouvez spécifier des options de
          restriction immédiatement après la commande du champ
          <literal>command</literal>&nbsp;:</para>

        <informalexample>
          <programlisting>
  command="svnserve -t --tunnel-user=harry",no-port-forwarding,no-agent-forw<!--
arding,no-X11-forwarding,no-pty TYPE1 KEY1 harry@example.com-->
arding,no-X11-forwarding,no-pty TYPE1 CLÉ1 harry@exemple.com
</programlisting>
        </informalexample>

<!--
        <para>Note that this all must be on one line&mdash;truly on
          one line&mdash;since SSH <filename>authorized_keys</filename>
          files do not even allow the conventional backslash character
          (<literal>\</literal>) for line continuation.  The only
          reason we've shown it with a line break is to fit it on
          the physical page of a book.</para>
-->
        <para>Notez bien que tout ceci doit tenir sur une seule ligne,
          vraiment sur une seule ligne, car les fichiers SSH
          <filename>authorized_keys</filename> n'autorisent même pas le
          caractère habituel de continuation de ligne
          (<literal>\</literal>). L'unique raison pour laquelle nous
          avons rajouté une coupure est pour que cela tienne dans le
          format physique d'un livre.</para>

      </sect3>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.svnserve.ref">
<!--
      <title>svnserve Configuration Reference</title>
-->
      <title>Référence pour la configuration de svnserve</title>

<!--
      <para>In the previous sections, we've mentioned numerous
        configuration options that administrators can use in their
        <filename>svnserve.conf</filename> files to configure the
        behavior of Subversion as accessed via Subversion's
        <command>svnserve</command> server option.  In this section,
        we'll quickly summarize <emphasis>all</emphasis> the
        configuration options supported by this server.</para>
-->
      <para>Dans les sections précédentes, nous avons mentionné
        plusieurs options de configuration à placer dans le fichier
        <filename>svnserve.conf</filename> pour configurer Subversion
        lorsque l'accès se fait <foreignphrase>via</foreignphrase>
        <command>svnserve</command>. Dans cette section, nous faisons
        un rapide résumé de <emphasis>toutes</emphasis> les options
        de configuration reconnues par ce serveur.</para>

<!--
      <para>The <filename>svnserve.conf</filename> configuration file
        uses a typical INI-style format, with name/value pairs of
        options grouped into named sections.  (This is conveniently
        the same format used by Subversion's runtime configuration
        area on the client side of the network.)  We'll describe
        herein each of those named sections and the options available
        for use within them.</para>
-->

      <para>Le fichier de configuration
        <filename>svnserve.conf</filename> utilise un format classique
        de type .INI, avec des couples nom/valeur des options groupées
        dans des sections (notez que c'est aussi le type de format
        utilisé par la zone de configuration des exécutables du client
        Subversion). Nous décrivons ici chaque section et les options
        possible dans chacune d'elles.</para>

<!--
      <para>By default, <command>svnserve</command> will consult
        per-repository configuration files located
        at <filename>conf/svnserve.conf</filename> within the physical
        directory structure of the repository.  To instead use a
        single configuration file whose values apply to all
        repositories served via an instance
        of <command>svnserve</command>, use
        the <option>- -config-file</option> option when starting your
        server.</para>
-->
      <para>Par défaut, <command>svnserve</command> lit les fichiers de
        configuration spécifique à chaque dépôt situé à
        <filename>conf/svnserve.conf</filename> dans l'arborescence physique
        du dépôt. Pour utiliser un seul fichier de configuration qui
        s'applique à l'ensemble des dépôts hébergés par une instance de
        <command>svnserve</command>, utilisez l'option
        <option>--config-file</option> au lancement du serveur.</para>

      <note>
<!--
        <para>In the following sections, we will refer to
          the <command>svnserve</command> configuration file by its
          canonical name, <filename>svnserve.conf</filename>.  The
          filename of actual configuration file used by
          your <command>svnserve</command> instance might be something
          else, though.  We trust this won't be too confusing.</para>
-->
        <para>Dans les sections suivante, nous faisons référence au fichier
          de configuration de <command>svnserve</command> par son nom
          canonique, <filename>svnserve.conf</filename>. Le nom du fichier
          utilisé effectivement par l'instance de <command>svnserve</command>
          peut être cependant autre chose. Nous sommes sûr que cela ne nuit
          pas à la compréhension du sujet.</para>
      </note>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.ref.general">
<!--
        <title>General configuration</title>
-->
        <title>Configuration générale</title>

<!--
        <para>The <literal>[general]</literal> section contains the
          most commonly used and broadly
          focused <command>svnserve</command> configuration
          options.</para>
-->
        <para>La section intitulée <literal>[general]</literal> contient les
          options de configuration les plus utilisées et qui concernent le
          comportement global de <command>svnserve</command>.</para>

        <variablelist>

          <varlistentry>
            <term><literal>anon-access</literal></term>
            <listitem>

<!--
              <para>Controls the access level granted to
                unauthenticated (anonymous) users.  Valid values
                are <literal>write</literal>, <literal>read</literal>,
                and <literal>none</literal>, with <literal>read</literal>
                being the default value.</para>
-->
              <para>Définit le niveau d'accès pour les utilisateurs non
                authentifiés (anonymous). Les valeurs possibles sont
                <literal>write</literal>, <literal>read</literal> et
                <literal>none</literal>&nbsp;; <literal>read</literal>
                est la valeur par défaut.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>auth-access</literal></term>
            <listitem>

<!--
              <para>Controls the access level granted to authenticaed
                users.  Valid values are <literal>write</literal>,
                <literal>read</literal>, and <literal>none</literal>,
                with <literal>write</literal> being the default
                value.</para>
-->
              <para>Définit le niveau d'accès pour les utilisateurs
                authentifiés. Les valeurs possibles sont
                <literal>write</literal>, <literal>read</literal> et
                <literal>none</literal>&nbsp;; <literal>write</literal>
                est la valeur par défaut.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>authz-db</literal></term>
            <listitem>

<!--
              <para>Specifies the location of the repository access
                file as described in
                <xref linkend="svn.serverconfig.pathbasedauthz.getting-started"
                />.  If a regular local path is used, then unless that
                path begins with a forward-slash character
                (<literal>/</literal>), it is interpreted as a path
                relative to the directory containing
                the <filename>svnserve.conf</filename> configuration
                file.  If no path is specified, path-based access
                control will be disabled.</para>
-->
              <para>Spécifie l'emplacement du fichier contenant les droits
                d'accès, tels que décrits dans
                <xref linkend="svn.serverconfig.pathbasedauthz.getting-started"
                />.  Si vous utilisez un chemin normal, alors celui-ci est
                considéré comme relatif au répertoire contenant le fichier de
                configuration <filename>svnserve.conf</filename> sauf si ce
                chemin commence par une barre oblique (<literal>/</literal>).
                Si aucun chemin n'est spécifié, le contrôle d'accès basé sur
                les chemins n'est pas activé.</para>

<!--
              <para>As a special consideration, you may also specify
                the location of an access file which is versioned
                inside a Subversion repository.  Use a local URL (one
                which begins with <literal>file://</literal>) to refer
                to an absolute Subversion-versioned access file.
                Alternatively, use a repository relative URL (one
                which begins with <literal>^/</literal>) to cause
                <command>svnserve</command> to consult for each
                repository the access file stored at the specified
                relative URL within that repository.</para>
-->
              <para>En particulier, vous pouvez spécifier l'emplacement
                d'un fichier, suivi en versions dans un dépôt Subversion,
                qui contient les règles de droits d'accès. Utilisez une
                URL locale (i.e. qui commence par
                <literal>file://</literal>) pour faire référence à un
                fichier de droits d'accès dont la portée est
                <quote>absolue</quote>. Ou bien, utilisez une URL relative
                (i.e. qui commence par <literal>^/</literal>) pour indiquer
                à <command>svnserve</command> de consulter pour chaque
                dépôt le fichier stocké à l'emplacement spécifié dans ce
                dépôt précis.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>force-username-case</literal></term>
            <listitem>

<!--
              <para>Specifies the case normalization applied to
                usernames before comparing them against the rules
                found in the access file (specified by
                the <literal>authz-db</literal> option).  Valid values
                are <literal>upper</literal> (to uppercase the
                usernames), <literal>lower</literal> (to lowercase the
                usernames), and <literal>none</literal> (to perform no
                normalization at all).  By
                default, <command>svnserve</command> will not perform
                any case normalization on usernames.</para>
-->
              <para>Spécifie la casse appliquée aux identifiants avant
                d'effectuer la comparaison avec les règles du fichier
                de contrôle d'accès (specifié par l'option
                <literal>authz-db</literal>). Les valeurs possibles sont
                <literal>upper</literal> (pour passer les identifiants
                en majuscules)), <literal>lower</literal> (pour passer
                les identifiants en minuscules) et
                <literal>none</literal> (pour ne rien faire). Par
                défaut, <command>svnserve</command> ne fait
                rien.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>groups-db</literal></term>
            <listitem>

<!--
              <para>Specifies the path of the groups file.  If a
                regular local path is used, then unless that path
                begins with a forward-slash character
                (<literal>/</literal>), it is interpreted as a path
                relative to the directory containing
                the <filename>svnserve.conf</filename> configuration
                file.</para>
-->
              <para>Spécifie le chemin vers le fichier de description
                des groupes.Si vous utilisez un chemin normal, alors
                celui-ci est considéré comme relatif au répertoire
                contenant le fichier de configuration
                <filename>svnserve.conf</filename> sauf si ce
                chemin commence par une barre oblique
                (<literal>/</literal>).</para>

<!--
              <para>You may also specify the location of a groups file
                which is versioned inside a Subversion repository.
                Use a local URL (one which begins
                with <literal>file://</literal>) to refer to an
                absolute Subversion-versioned file.  Alternatively,
                use a repository relative URL (one which begins
                with <literal>^/</literal>) to cause
                <command>svnserve</command> to consult for each
                repository the group file stored at the specified
                relative URL within that repository.</para>
-->
              <para>Vous pouvez aussi spécifier l'emplacement d'un
                fichier de description des groupes qui est suivi en
                versions dans un dépôt Subversion. Utilisez une
                URL locale (i.e. qui commence par
                <literal>file://</literal>) pour faire référence à un
                fichier dont la portée est <quote>absolue</quote>. Ou
                bien, utilisez une URL relative (i.e. qui commence par
                <literal>^/</literal>) pour indiquer à
                <command>svnserve</command> de consulter pour chaque
                dépôt le fichier de description des groupes stocké à
                l'emplacement spécifié dans ce dépôt précis.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>hooks-env</literal></term>
            <listitem>

<!--
              <para>Specifies the path to the hook script environment
                configuration file.  This option overrides the
                per-repository default location for this file, and can
                be used to configure the hook script environment for
                multiple repositories in a single file if an absolute
                path is specified.  Unless you specify an absolute
                path, the file's location is interpreted as relative
                to the directory containing
                the <filename>svnserve.conf</filename> configuration
                file.</para>
-->
              <para>Spécifie le chemin du fichier de configuration de
                l'environnement des procédures automatiques. Cette
                option surcharge l'emplacement par défaut défini par
                dépôt et peut être utilisée pour configurer fichier
                unique de définition de l'environnement des procédures
                automatiques valable pour de mutiples dépôts, si un
                chemin absolu est utilisé. Sinon, l'emplacement du
                fichier est considéré comme relatif au répertoire
                contenant le fichier de configuration
                the <filename>svnserve.conf</filename>.</para>

<!--
              <para>See
                <xref linkend="svn.reposadmin.hooks.configuration" />
                for detailed information regarding the hook script
                environment configuration file.</para>
-->
              <para>Reportez-vous à
                <xref linkend="svn.reposadmin.hooks.configuration" />
                pour des informations détaillées relatives au fichier
                de configuration de l'environnement des procédures
                automatiques.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>password-db</literal></term>
            <listitem>

<!--
              <para>Specifies the path of the password database file.
                Unless the path specified begins with a forward-slash
                character (<literal>/</literal>), it is interpreted as
                a path relative to the directory containing the
                <filename>svnserve.conf</filename> configuration file.
                Note that if the SASL feature is used, this option
                will be ignored.</para>
-->
              <para>Spécifie le chemin du fichier contenant la base de
                données des mots de passe. Le chemin est considéré
                comme relatif au répertoire contenant le fichier de
                configuration <filename>svnserve.conf</filename> sauf
                si ce chemin commence par une barre oblique
                (<literal>/</literal>). Notez que si vous utilisez
                SASL, cette option est ignorée.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>realm</literal></term>
            <listitem>

<!--
              <para>Specifies the authentication realm of the
                repository.  This is primarily used by the client to
                associate cached authentication credentials with a
                specific repository or set of repositories.  As such,
                it is best that the specified realm be unique across
                your repositories unless those repositories share the
                same password database.  By default, the repository's
                UUID is used as its authentication realm.</para>
-->
              <para>Spécifie le domaine d'authentification du dépôt.
                Ce domaine est utilisé par le client pour associer
                les éléments d'authentification dont il dispose en
                cache à un dépôt ou un ensemble de dépôts. Ainsi, il
                est préférable de spécifier un domaine unique à chaque
                dépôt qui ne partage pas de base de données
                d'authentification avec d'autres dépôts. Par défaut,
                l'UUID du dépôt est utilisé comme domaine
                d'authentification.</para>

            </listitem>
          </varlistentry>
        </variablelist>
      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.svnserve.ref.sasl">
<!--
        <title>Cyrus SASL configuration</title>
-->
        <title>Configuration de Cyrus SASL</title>

<!--
        <para>The <literal>[sasl]</literal> section contains
          configuration which is specific to the optional Cyrus Simple
          Authentication and Security Layer (SASL) integration feature
          of <command>svnserve</command>.  See
          <xref linkend="svn.serverconfig.svnserve.sasl"/> for a more
          thorough description of this feature and the benefits it
          provides.</para>
-->
        <para>La section <literal>[sasl]</literal> contient la
          configuration spécifique au mécanisme <quote>Cyrus Simple
          Authentication and Security Layer (SASL)</quote> de
          <command>svnserve</command>. Lisez
          <xref linkend="svn.serverconfig.svnserve.sasl"/> pour une
          description détaillée de cette fonctionnalité et des
          avantages qu'elle procure.</para>

        <variablelist>

          <varlistentry>
            <term><literal>max-encryption</literal></term>
            <listitem>

<!--
              <para>Specifies&mdash;as an integer bit-width&mdash;the
                maximum desired strength of the security layer's
                encryption algorithm.  The special
                value <literal>0</literal> means "no encryption", and
                the special value <literal>1</literal> means
                "integrity checking only".  The default value for this
                option is <literal>256</literal> (256-bit
                encryption).</para>
-->
              <para>Spécifie (en nombre de bits) la solidité maximum de
                la couche de chiffrement. La valeur <literal>0</literal>
                signifie <quote>pas de sécurité</quote> et la valeur
                <literal>1</literal> signifie <quote>vérification
                d'intégrité seulement</quote>. La valeur par défaut
                est <literal>256</literal> (chiffrement 256
                bits).</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>min-encryption</literal></term>
            <listitem>

<!--
              <para>Specifies&mdash;as an integer bit-width&mdash;the
                minimum desired strength of the security layer's
                encryption algorithm.  The special
                value <literal>0</literal> means "no encryption", and
                the special value <literal>1</literal> means
                "integrity checking only".  The default value for this
                option is <literal>0</literal> (no encryption).</para>
-->
              <para>Spécifie (en nombre de bits) la solidité minimum
                de la couche de chiffrement. La valeur
                <literal>0</literal> signifie <quote>pas de
                sécurité</quote> et la valeur
                <literal>1</literal> signifie <quote>vérification
                d'intégrité seulement</quote>. La valeur par défaut
                est <literal>0</literal> (pas de sécurité).</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>use-sasl</literal></term>
            <listitem>

<!--
              <para>Specifies (as a <literal>true</literal>
                or <literal>false</literal> value) whether to enable
                the Cyrus SASL feature.  Note that this feature is
                only available if <command>svnserve</command> was
                built with support for the feature.  This feature is
                disabled by default.</para>
-->
              <para>Spécifie (avec <literal>true</literal>
                ou <literal>false</literal> value) si Cyrus SASL doit
                être mis en œuvre. Notez que cette fonctionnalité
                n'est disponible que si <command>svnserve</command>
                a été compilé en conséquence. Cette fonctionnalité
                est désactivée par défaut.</para>

            </listitem>
          </varlistentry>

        </variablelist>
      </sect3>
    </sect2>
  </sect1>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.serverconfig.httpd">

<!--
    <title>httpd, the Apache HTTP Server</title>
-->
    <title>httpd, le serveur HTTP Apache</title>

<!--
    <para>The Apache HTTP Server is a <quote>heavy-duty</quote>
      network server that Subversion can leverage.  Via a custom
      module, <command>httpd</command> makes Subversion repositories
      available to clients via the WebDAV/DeltaV<footnote><para>See
      <ulink url="http://www.webdav.org/"/>.</para></footnote>
      protocol, which is an extension to HTTP 1.1.  This protocol
      takes the ubiquitous HTTP protocol that is the core of the World
      Wide Web, and adds writing&mdash;specifically, versioned
      writing&mdash;capabilities.  The result is a standardized,
      robust system that is conveniently packaged as part of the
      Apache 2.0 software, supported by numerous operating systems and
      third-party products, and doesn't require network administrators
      to open up yet another custom port.<footnote><para>They really
      hate doing that.</para></footnote> While an Apache-Subversion
      server has more features than <command>svnserve</command>, it's
      also a bit more difficult to set up.  With flexibility often
      comes more complexity.</para>
-->
    <para>Le serveur HTTP Apache est un serveur réseau à tout faire que
      Subversion sait exploiter. <foreignphrase>Via</foreignphrase>Via
      un module adapté, <command>httpd</command> rend les dépôts
      Subversion accessibles aux clients par le protocole
      WebDAV/DeltaV<footnote><para>voir
      <ulink url="http://www.webdav.org/"/></para></footnote>, qui est
      une extension de HTTP 1.1. Ce protocole se base sur HTTP, le
      protocole omniprésent à la base du World Wide Web, lui ajoute des
      fonctionnalités d'écriture et, en particulier, d'écriture avec
      gestion de versions. Le résultat est un système robuste et
      standardisé qui est inclus dans le logiciel Apache&nbsp;2.0,
      supporté par de nombreux systèmes d'exploitation et outils tiers,
      et qui ne demande pas aux administrateurs réseaux d'ouvrir un port
      réseau supplémentaire<footnote><para>C'est une chose qu'ils
      détestent faire.</para></footnote>. Bien qu'un serveur
      Apache-Subversion ait plus de fonctionnalités que
      <command>svnserve</command>, il est aussi un peu plus difficile à
      mettre en place. La flexibilité a bien souvent pour contrepartie
      la complexité.</para>

<!--
    <para>Much of the following discussion includes references to
      Apache configuration directives.  While some examples are given
      of the use of these directives, describing them in full is
      outside the scope of this chapter.  The Apache team maintains
      excellent documentation, publicly available on their web site at
      <ulink url="http://httpd.apache.org"/>.  For example, a general
      reference for the configuration directives is located at
      <ulink url="http://httpd.apache.org/docs/current/mod/directives.html"
      />.</para>
-->
    <para>Une grande partie de ce qui va suivre fait référence à des
      directives de configuration d'Apache. Bien que l'utilisation de
      ces directives soit illustrée par quelques exemples, les décrire
      complètement va bien au-delà du sujet de ce chapitre. L'équipe
      Apache tient à jour une documentation excellente, disponible
      publiquement sur leur site web à l'adresse
      <ulink url="http://httpd.apache.org"/>. Par exemple, le guide de
      référence complet des directives de configuration est situé à
      l'adresse <ulink url="
      http://httpd.apache.org/docs/current/mod/directives.html"/>.</para>

<!--
    <para>Also, as you make changes to your Apache setup, it is likely
      that somewhere along the way a mistake will be made.  If you are
      not already familiar with Apache's logging subsystem, you should
      become aware of it.  In your <filename>httpd.conf</filename>
      file are directives that specify the on-disk locations of the
      access and error logs generated by Apache (the
      <literal>CustomLog</literal> and <literal>ErrorLog</literal>
      directives, respectively).
      Subversion's <command>mod_dav_svn</command> uses Apache's error
      logging interface as well.  You can always browse the contents
      of those files for information that might reveal the source of a
      problem that is not clearly noticeable otherwise.</para>
-->
    <para>En outre, au fur et à mesure des changements que vous
      apporterez à votre configuration d'Apache, il est probable que
      vous commettrez des erreurs. Si vous n'êtes pas déjà familier avec
      le sous-système de journalisation d'Apache, vous devrez apprendre
      à le connaître. Dans votre fichier <filename>httpd.conf</filename>,
      des directives spécifient l'emplacement sur le disque des journaux
      d'accès et d'erreurs générés par Apache (les directives
      <literal>CustomLog</literal> et <literal>ErrorLog</literal>
      respectivement). Le module <command>mod_dav_svn</command> de
      Subversion utilise également l'interface de journalisation des
      erreurs d'Apache. Pensez à naviguer dans ces fichiers lorsque vous
      recherchez des informations susceptibles de vous aider à trouver
      l'origine d'un problème.</para>


    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.httpd.prereqs">
<!--
      <title>Prerequisites</title>
-->
      <title>Prérequis</title>

<!--
      <para>To network your repository over HTTP, you basically need
        four components, available in two packages.  You'll need
        Apache <command>httpd</command> 2.0 or newer, the
        <command>mod_dav</command> DAV module that comes with it,
        Subversion, and the <command>mod_dav_svn</command>
        filesystem provider module distributed with Subversion.
        Once you have all of those components, the process of
        networking your repository is as simple as:</para>

-->
      <para>Pour mettre à disposition votre dépôt sur le réseau par
        HTTP, il vous faut quatre composants, disponibles dans deux
        paquets. Il vous faut
        Apache&nbsp;<command>httpd</command>&nbsp;2.0 ou plus récent, le
        module DAV <command>mod_dav</command> fourni avec, Subversion et
        le module <command>mod_dav_svn</command> implémentant le système
        de fichiers, qui est fourni avec Subversion. Une fois que vous
        avez tous ces composants, la procédure de mise en réseau de
        votre dépôt est aussi simple que&nbsp;:</para>

      <itemizedlist>
        <listitem>
<!--
          <para>Getting httpd up and running with
            the <command>mod_dav</command> module</para>
-->
          <para>faire fonctionner httpd avec le module
            <command>mod_dav</command>&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Installing the <command>mod_dav_svn</command> backend
            to <command>mod_dav</command>, which uses Subversion's
            libraries to access the repository</para>
-->
          <para>installer le module <command>mod_dav_svn</command>
            derrière <command>mod_dav</command>
            (<command>mod_dav_svn</command> utilise les bibliothèques
            Subversion pour accéder au dépôt)&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Configuring your <filename>httpd.conf</filename>
            file to export (or expose) the repository</para>
-->
          <para>configurer le fichier <filename>httpd.conf</filename>
            pour exporter (ou <quote>exposer</quote>) le dépôt.</para>
        </listitem>
      </itemizedlist>

<!--
      <para>You can accomplish the first two items either by
        compiling <command>httpd</command> and Subversion from
        source code or by installing prebuilt binary packages of
        them on your system.  For the most up-to-date information on
        how to compile Subversion for use with the Apache HTTP Server,
        as well as how to compile and configure Apache itself for
        this purpose, see the <filename>INSTALL</filename> file in
        the top level of the Subversion source code tree.</para>
-->
      <para>Vous pouvez accomplir les deux premières tâches citées
        <foreignphrase>supra</foreignphrase>
        soit en compilant <command>httpd</command> et Subversion à
        partir du code source, soit en installant les paquets binaires
        précompilés correspondants sur votre système. Les informations
        les plus récentes sur la façon de compiler Subversion dans le
        cadre d'une utilisation en conjonction avec le serveur
        HTTP&nbsp;Apache, sur la compilation et sur la configuration
        d'Apache lui-même dans cet objectif, sont consultables dans le
        fichier <filename>INSTALL</filename> situé à la racine de
        l'arborescence du code source de Subversion.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.httpd.basic">
<!--
      <title>Basic Apache Configuration</title>
-->
      <title>Configuration Apache de base</title>

<!--
      <para>Once you have all the necessary components installed on
        your system, all that remains is the configuration of Apache
        via its <filename>httpd.conf</filename> file.  Instruct Apache
        to load the <command>mod_dav_svn</command> module using the
        <literal>LoadModule</literal> directive.  This directive must
        precede any other Subversion-related configuration items.  If
        your Apache was installed using the default layout, your
        <command>mod_dav_svn</command> module should have been
        installed in the <filename>modules</filename> subdirectory of
        the Apache install location (often
        <filename>/usr/local/apache2</filename>).  The
        <literal>LoadModule</literal> directive has a simple syntax,
        mapping a named module to the location of a shared library on
        disk:</para>
-->
      <para>Une fois que les composants requis sont installés sur votre
        système, il ne reste plus qu'à configurer Apache au moyen de son
        fichier <filename>httpd.conf</filename>. Indiquez à Apache de
        charger le module <command>mod_dav_svn</command> grâce à la
        directive <literal>LoadModule</literal>. Cette directive doit
        précéder tout autre élément de configuration lié à Subversion.
        Si votre serveur Apache a été installé avec la configuration par
        défaut, votre module <command>mod_dav_svn</command> devrait
        avoir été installé dans le sous-répertoire
        <filename>modules</filename> du répertoire d'installation
        d'Apache (souvent <filename>/usr/local/apache2</filename>). La
        directive <literal>LoadModule</literal> a une syntaxe très
        simple, faisant correspondre un nom de module à l'emplacement
        sur le disque d'une bibliothèque partagée&nbsp;:</para>

      <informalexample>
        <programlisting>
LoadModule dav_svn_module     modules/mod_dav_svn.so
</programlisting>
      </informalexample>

<!--
      <para>Apache interprets the <literal>LoadModule</literal>
        configuration item's library path as relative to its own
        server root.  If configured as previously shown, Apache will
        look for the Subversion DAV module shared library in its
        own <filename>modules/</filename> subdirectory.  Depending on
        how Subversion was installed on your system, you might need to
        specify a different path for this library altogether, perhaps
        even an absolute path such as in the following example:</para>
-->
      <para>Apache interprète le chemin donné dans la directive
        <literal>LoadModule</literal> comme étant relatif à sa propre
        racine. Si vous l'avez configuré comme indiqué
        <foreignphrase>supra</foreignphrase>,
        Apache cherchera le module Subversion DAV dans son propre
        sous-dossier <filename>modules/</filename>. En fonction de la
        façon dont Subversion a été installé sur votre machine, vous
        aurez peut-être besoin de spécifier un chemin différent pour
        cette bibliothèque, voire un chemin absolu comme dans l'exemple
        suivant&nbsp;:</para>

      <informalexample>
        <programlisting>
LoadModule dav_svn_module     C:/Subversion/lib/mod_dav_svn.so
</programlisting>
      </informalexample>

<!--
      <para>Note that if <command>mod_dav</command> was compiled as a
        shared object (instead of statically linked directly to the
        <command>httpd</command> binary), you'll need a similar
        <literal>LoadModule</literal> statement for it, too.  Be sure
        that it comes before the <command>mod_dav_svn</command> line:</para>
-->
      <para>Notez que si <command>mod_dav</command> a aussi été compilé
        sous forme de bibliothèque partagée (et non par une édition de
        liens statiques qui le place alors directement dans l'exécutable
        <command>httpd</command>), il vous faudra une directive
        <literal>LoadModule</literal> pour celui-ci. Assurez-vous
        qu'elle est placée avant la ligne
        <command>mod_dav_svn</command>&nbsp;:</para>

      <informalexample>
        <programlisting>
LoadModule dav_module         modules/mod_dav.so
LoadModule dav_svn_module     modules/mod_dav_svn.so
</programlisting>
      </informalexample>

<!--

      <para>At a later location in your configuration file, you now
        need to tell Apache where you keep your Subversion repository
        (or repositories).  The <literal>Location</literal> directive
        has an XML-like notation, starting with an opening tag and
        ending with a closing tag, with various other configuration
        directives in the middle.  The purpose of the
        <literal>Location</literal> directive is to instruct Apache to
        do something special when handling requests that are directed
        at a given URL or one of its children.  In the case of
        Subversion, you want Apache to simply hand off support for
        URLs that point at versioned resources to the DAV layer.  You
        can instruct Apache to delegate the handling of all URLs whose
        path portions (the part of the URL that follows the server's
        name and the optional port number) begin with
        <filename>/repos/</filename> to a DAV provider whose
        repository is located at
        <filename>/var/svn/repository</filename> using the
        following <filename>httpd.conf</filename> syntax:</para>
-->

      <para>Plus loin dans votre fichier de configuration, vous
        devez indiquer à Apache l'endroit où réside votre dépôt (ou vos
        dépôts) Subversion. La directive <literal>Location</literal>
        possède une syntaxe de type XML, qui commence par une balise de
        début, se termine par une balise de fin et contient diverses autres
        directives de configuration au milieu. Le sens de la directive
        <literal>Location</literal> est de faire faire à Apache quelque
        chose de spécial quand il traite les requêtes adressées à une
        URL donnée ou à une de ses filles. Dans le cas de Subversion, il
        faut qu'Apache fasse traiter par la couche DAV les URL pointant
        vers les ressources suivies en versions. Vous pouvez indiquer à
        Apache de déléguer le traitement de toutes les URL dont la
        partie chemin d'accès (la partie de l'URL qui suit le nom du
        serveur et le numéro de port optionnel) commence par
        <filename>/depot/</filename> à un gestionnaire de DAV dont le
        dépôt est situé à l'adresse
        <filename>/var/svn/mon-depot</filename> en utilisant la syntaxe
        <filename>httpd.conf</filename> suivante&nbsp;:</para>

      <informalexample>
        <programlisting>
&lt;Location /repos&gt;
  DAV svn<!--
  SVNPath /var/svn/repository-->
  SVNPath /var/svn/mon-depot
&lt;/Location&gt;
</programlisting>
      </informalexample>

<!--
      <para>If you plan to support multiple Subversion repositories
        that will reside in the same parent directory on your local
        disk, you can use an alternative
        directive&mdash;<literal>SVNParentPath</literal>&mdash;to
        indicate that common parent directory.  For example, if you
        know you will be creating multiple Subversion repositories in
        a directory <filename>/var/svn</filename> that would be
        accessed via URLs such as
        <uri>http://my.server.com/svn/repos1</uri>,
        <uri>http://my.server.com/svn/repos2</uri>, and so on, you
        could use the <filename>httpd.conf</filename> configuration
        syntax in the following example:</para>
-->
      <para>Si vous avez l'intention de gérer plusieurs dépôts
        Subversion résidant dans le même répertoire parent sur votre
        disque local, vous pouvez utiliser une directive alternative,
        <literal>SVNParentPath</literal>, pour faire état de ce
        répertoire parent commun. Par exemple, si vous savez que vous
        allez créer plusieurs dépôts Subversion dans le répertoire
        <filename>/var/svn</filename>, auxquels on accédera par des URL
        telles que <uri>http://mon.serveur.com/svn/depot1</uri>,
        <uri>http://mon.serveur.com/svn/depot2</uri>,&nbsp;etc., vous
        pouvez utiliser la syntaxe de configuration de
        <filename>httpd.conf</filename> de l'exemple
        suivant&nbsp;:</para>

<!--
      <informalexample>
        <programlisting>
&lt;Location /svn&gt;
  DAV svn

  # Automatically map any "/svn/foo" URL to repository /var/svn/foo
  SVNParentPath /var/svn
&lt;/Location&gt;
</programlisting>
      </informalexample>
-->
      <informalexample>
        <programlisting>
&lt;Location /svn&gt;
  DAV svn

  # à toute URL "/svn/truc" correspond un dépôt /var/svn/truc
  SVNParentPath /var/svn
&lt;/Location&gt;
</programlisting>
      </informalexample>

<!--
      <para>Using this syntax, Apache will delegate the
        handling of all URLs whose path portions begin with
        <filename>/svn/</filename> to the Subversion DAV provider,
        which will then assume that any items in the directory
        specified by the <literal>SVNParentPath</literal> directive
        are actually Subversion repositories.  This is a particularly
        convenient syntax in that, unlike the use of the
        <literal>SVNPath</literal> directive, you don't have to
        restart Apache to add or remove hosted repositories.</para>
-->
      <para>Par cette syntaxe, Apache va déléguer le traitement de
        toutes les URL dont le chemin d'accès commence par
        <filename>/svn/</filename> au gestionnaire DAV de Subversion,
        qui ensuite supposera que tous les éléments du répertoire
        spécifié dans la directive <literal>SVNParentPath</literal> sont
        en fait des dépôts Subversion. C'est une syntaxe
        particulièrement pratique dans le sens où, à la différence de
        celles utilisant la directive <literal>SVNPath</literal>, vous
        n'avez pas besoin de redémarrer Apache pour mettre à
        disposition ou enlever de nouveaux dépôts sur le réseau.</para>

<!--
      <para>Be sure that when you define your new
        <literal>Location</literal>, it doesn't overlap with other
        exported locations.  For example, if your main
        <literal>DocumentRoot</literal> is exported to
        <filename>/www</filename>, do not export a Subversion
        repository in <literal>&lt;Location /www/repos&gt;</literal>.
        If a request comes in for the URI
        <filename>/www/repos/foo.c</filename>, Apache won't know
        whether to look for a file <filename>repos/foo.c</filename> in
        the <literal>DocumentRoot</literal>, or whether to delegate
        <command>mod_dav_svn</command> to return
        <filename>foo.c</filename> from the Subversion repository.
        The result is often an error from the server of the form
        <literal>301 Moved Permanently</literal>.</para>
-->
      <para>Vérifiez bien que, quand vous définissez votre nouvelle
        directive <literal>Location</literal>, elle n'interfère pas avec
        d'autres emplacements exportés. Par exemple, si votre
        <literal>DocumentRoot</literal> (c'est-à-dire le répertoire
        racine des fichiers qu'Apache expose sur le web) principal est
        exporté vers <filename>/www</filename>, n'exportez pas de dépôt
        Subversion vers <literal>&lt;Location /www/depot&gt;</literal>.
        Si une requête arrivait pour l'URI
        <filename>/www/depot/machin.c</filename>, Apache ne saurait pas
        s'il doit chercher un fichier <filename>depot/machin.c</filename>
        dans son <literal>DocumentRoot</literal> ou s'il doit déléguer à
        <command>mod_dav_svn</command> la tâche de renvoyer
        <filename>machin.c</filename> qui se trouve dans le dépôt
        Subversion. Ceci aboutit souvent à une erreur du serveur de la
        forme <literal>301 Moved Permanently</literal>.</para>

      <sidebar>
<!--
        <title>Server Names and the COPY Request</title>
-->
        <title>Noms de serveur et requêtes COPY</title>

<!--
        <para>Subversion makes use of the <literal>COPY</literal>
          request type to perform server-side copies of files and
          directories.  As part of the sanity checking done by the
          Apache modules, the source of the copy is expected to be
          located on the same machine as the destination of the copy.
          To satisfy this requirement, you might need to
          tell <command>mod_dav</command> the name you use as the
          hostname of your server.  Generally, you can use
          the <literal>ServerName</literal> directive in
          <filename>httpd.conf</filename> to accomplish this.</para>
-->
        <para>Subversion se sert du type de requête
          <literal>COPY</literal> pour effectuer des copies de fichiers
          et de répertoires côté serveur. Les modules Apache vérifient
          que la source de la copie est bien située sur la même machine
          que la destination. Pour satisfaire cette exigence, vous aurez
          peut-être besoin de déclarer à <command>mod_dav</command> le
          nom d'hôte de votre serveur. En général, la directive
          <literal>ServerName</literal> du fichier
          <filename>httpd.conf</filename> peut être utilisée à cette
          fin.</para>

        <informalexample>
          <programlisting>
ServerName <!-- svn.example.com -->svn.exemple.com
</programlisting>
        </informalexample>

<!--
        <para>If you are using Apache's virtual hosting support via
          the <literal>NameVirtualHost</literal> directive, you may
          need to use the <literal>ServerAlias</literal> directive to
          specify additional names by which your server is known.
          Again, refer to the Apache documentation for full
          details.</para>
-->
        <para>Si vous faites usage du support des hôtes virtuels
          d'Apache <foreignphrase>via</foreignphrase> la directive
          <literal>NameVirtualHost</literal>, la directive
          <literal>ServerAlias</literal> vous permettra de spécifier des
          noms additionnels désignant votre serveur. Encore une fois,
          reportez-vous à la documentation Apache pour plus de
          détails.</para>
      </sidebar>

<!--
      <para>At this stage, you should strongly consider the question
        of permissions.  If you've been running Apache for some time
        now as your regular web server, you probably already have a
        collection of content&mdash;web pages, scripts, and such.
        These items have already been configured with a set of
        permissions that allows them to work with Apache, or more
        appropriately, that allows Apache to work with those files.
        Apache, when used as a Subversion server, will also need the
        correct permissions to read and write to your Subversion
        repository.</para>
-->
      <para>À présent, il nous faut examiner sérieusement la question
        des droits d'accès. Si vous utilisez Apache depuis un certain
        temps en tant que serveur web principal, vous hébergez
        certainement pas mal de contenu&nbsp;: des pages web, des
        scripts,&nbsp;etc. Ces éléments ont déjà été configurés avec un
        ensemble de droits qui leur permet de fonctionner avec Apache,
        ou plus exactement qui permet à Apache de travailler avec ces
        fichiers. Apache, quand on l'utilise en tant que serveur
        Subversion, a aussi besoin de droits d'accès corrects pour lire
        et écrire dans votre dépôt.</para>

<!--
      <para>You will need to determine a permission system setup that
        satisfies Subversion's requirements without messing up any
        previously existing web page or script installations.  This
        might mean changing the permissions on your Subversion
        repository to match those in use by other things that Apache
        serves for you, or it could mean using the
        <literal>User</literal> and <literal>Group</literal>
        directives in <filename>httpd.conf</filename> to specify that
        Apache should run as the user and group that owns your
        Subversion repository.  There is no single correct way to set
        up your permissions, and each administrator will have
        different reasons for doing things a certain way.  Just be
        aware that permission-related problems are perhaps the most
        common oversight when configuring a Subversion repository for
        use with Apache.</para>
-->
      <para>Vous devez mettre en place les droits d'accès qui satisfont
        les besoins de Subversion sans mettre à mal l'installation des
        pages web et scripts pré-existants. Ceci implique peut-être de
        modifier les droits d'accès de votre dépôt Subversion pour
        qu'ils correspondent à ceux utilisés par les autres éléments
        qu'Apache gère, ou bien utiliser les directives
        <literal>User</literal> et <literal>Group</literal>
        du fichier <filename>httpd.conf</filename> pour spécifier
        qu'Apache doit fonctionner avec l'identifiant et le groupe qui
        est propriétaire de votre dépôt Subversion. Il n'y a pas une
        façon unique de mettre en place les droits d'accès et chaque
        administrateur a ses propres raisons pour faire les choses d'une
        manière ou d'une autre. Soyez juste conscient que les problèmes
        liés aux droits d'accès sont peut-être le point le plus négligé
        lors de la configuration d'un dépôt avec Apache.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.httpd.authn">
<!--
      <title>Authentication Options</title>
-->
      <title>Options d'authentification</title>

<!--
      <para>At this point, if you configured
        <filename>httpd.conf</filename> to contain something such as the
        following:</para>
-->
      <para>À ce stade, si vous avez configuré
        <filename>httpd.conf</filename> avec quelque chose du
        style&nbsp;:</para>

      <informalexample>
        <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
&lt;/Location&gt;
</programlisting>
      </informalexample>

<!--
      <para>your repository is <quote>anonymously</quote>
        accessible to the world.  Until you configure some
        authentication and authorization policies, the Subversion
        repositories that you make available via the
        <literal>Location</literal> directive will be generally
        accessible to everyone.  In other words:</para>
-->
      <para>votre dépôt est à présent accessible
        <quote>anonymement</quote> par tout le monde. Jusqu'à ce que
        configuriez des politiques d'authentification et de contrôle
        d'accès, les dépôts Subversion que vous rendez disponibles
        <foreignphrase>via</foreignphrase> la directive
        <literal>Location</literal> sont généralement accessibles à
        tous. En d'autres termes&nbsp;:</para>

<!--
      <itemizedlist>
        <listitem>
          <para>Anyone can use a Subversion client to check out a
            working copy of a repository URL (or any of its
            subdirectories).</para>
        </listitem>
        <listitem>
          <para>Anyone can interactively browse the repository's
            latest revision simply by pointing a web browser to
            the repository URL.</para>
        </listitem>
        <listitem>
          <para>Anyone can commit to the repository.</para>
        </listitem>
      </itemizedlist>
-->
      <itemizedlist>
        <listitem>
          <para>N'importe qui peut utiliser un client Subversion pour
            extraire une copie de travail d'une URL du dépôt (ou de
            n'importe lequel de ses sous-répertoires).</para>
        </listitem>
        <listitem>
          <para>N'importe qui peut naviguer interactivement dans la
            dernière révision du dépôt rien qu'en allant avec un
            navigateur web à l'URL du dépôt.</para>
        </listitem>
        <listitem>
          <para>N'importe qui peut effectuer des propagations vers le
            dépôt.</para>
        </listitem>
      </itemizedlist>

<!--
      <para>Of course, you might have already set up
        a pre-commit hook script to prevent
        commits (see <xref linkend="svn.reposadmin.hooks"/>).
        But as you read on, you'll see that it's also possible to use
        Apache's built-in methods to restrict access in specific
        ways.</para>
-->
      <para>Bien sûr, vous avez peut-être déjà mis en place une
        procédure automatique <literal>pre-commit</literal> pour
        empêcher les propagations (voir <xref
        linkend="svn.reposadmin.hooks"/>). Mais en progressant
        dans la lecture de ce chapitre, vous verrez qu'il est également
        possible d'utiliser les méthodes intégrées dans Apache pour
        restreindre les accès de façon spécifique.</para>

      <tip>
<!--
        <para>Requiring authentication defends against invalid users
          directly accessing the repository, but does not guard the
          privacy of valid users' network activity.  See
          <xref linkend="svn.serverconfig.httpd.ssl"/> for how to
          configure your server to support SSL encryption, which can
          provide that extra layer of protection.</para>
-->
        <para>Demander une authentification vous protège contre les
          utilisateurs illégitimes qui accèdent au dépôt mais ne
          garantit la confidentialité des utilisateurs légitimes sur le
          réseau. Reportez-vous à
          <xref linkend="svn.serverconfig.httpd.ssl"/> pour savoir
          comment configurer votre serveur pour activer l'encapsulation
          SSL, ce qui apportera une couche supplémentaire de
          protection.</para>
      </tip>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.authn.basic">
<!--
        <title>Basic authentication</title>
-->
        <title>Mise en place de l'authentification HTTP basique</title>

<!--
        <para>The easiest way to authenticate a client is via the HTTP
          Basic authentication mechanism, which simply uses a username
          and password to verify a user's identity.  Apache provides
          the <command>htpasswd</command> utility<footnote><para>See
          <ulink url="http://httpd.apache.org/docs/current/programs/htpasswd.html"
          />.</para></footnote> for managing files containing
          usernames and passwords.</para>
-->
        <para>La manière la plus facile d'authentifier un client est le
          mécanisme d'authentification <quote>Basic</quote> de HTTP, qui
          utilise juste un nom d'utilisateur et un mot de passe pour
          vérifier que l'utilisateur est bien celui qu'il prétend être.
          Apache fournit l'utilitaire
          <command>htpasswd</command><footnote><para>Voir <ulink
          url="http://httpd.apache.org/docs/current/programs/htpasswd.html"
          /></para></footnote>
          pour gérer la liste des noms d'utilisateurs et mots de passe
          acceptés.</para>

        <warning>
<!--
          <para>Basic authentication is <emphasis>extremely</emphasis>
            insecure, because it sends passwords over the network
            in very nearly plain text.  See
            <xref linkend="svn.serverconfig.httpd.authn.digest"/> for
            details on using the much safer Digest mechanism.</para>
-->
          <para>L'authentification basique est
            <emphasis>extrêmement</emphasis> peu sûre car elle envoie
            le mots de passe sur le réseau, pratiquement en clair. Lisez
            <xref linkend="svn.serverconfig.httpd.authn.digest"/> pour
            obtenir des détails sur l'utilisation du mécanisme par
            condensat (<literal>digest</literal> en anglais) qui est
            beaucoup plus sûr.</para>
        </warning>

<!--
        <para>First, create a password file and grant access to
          users Harry and Sally:</para>
-->
        <para>Commençons par créer un fichier de mots de passe et
          donnons un accès à Sally et à Harry&nbsp;:</para>

<!--
        <informalexample>
          <screen>
$ ### First time: use -c to create the file
$ ### Use -m to use MD5 encryption of the password, which is more secure
$ htpasswd -c -m /etc/svn-auth.htpasswd harry
New password: *****
Re-type new password: *****
Adding password for user harry
$ htpasswd -m /etc/svn-auth.htpasswd sally
New password: *******
Re-type new password: *******
Adding password for user sally
$
</screen>
        </informalexample>

-->
        <informalexample>
          <screen>
$ ### Première fois : utilisez -c pour créer le fichier
$ ### Ajoutez -m pour MD5 afin de chiffrer le mot de passe et ainsi le rendre plus sûr
$ htpasswd -cm /etc/auth-svn.htpasswd harry
New password: *****
Re-type new password: *****
Adding password for user harry
$ htpasswd -m /etc/auth-svn.htpasswd sally
New password: *******
Re-type new password: *******
Adding password for user sally
$
</screen>
        </informalexample>

<!--
        <para>Next, ensure that Apache has access to the modules which
          provide the Basic authentication and related
          functionality:  <command>mod_auth_basic</command>,
          <command>mod_authn_file</command>, and
          <command>mod_authz_user</command>.  In many cases, these
          modules are compiled into <command>httpd</command> itself,
          but if not, you might need to explicitly load one or more of
          them using the <literal>LoadModule</literal> directive:</para>
-->
        <para>Ensuite, vous devez vérifier que Apache dispose des droits
          d'accès aux modules qui offrent l'authentification basique et
          les fonctionnalités afférentes&nbsp;:
          <command>mod_auth_basic</command>,
          <command>mod_authn_file</command> et
          <command>mod_authz_user</command>. Généralement, ces modules
          sont compilés dans <command>httpd</command> lui-même, mais si
          ce n'estpas le cas, vous devrez charger ceux qui ne le sont
          pas explicitement en utilisant la directive
          <literal>LoadModule</literal>&nbsp;:</para>

        <informalexample>
          <programlisting>
LoadModule auth_basic_module   modules/mod_auth_basic.so
LoadModule authn_file_module   modules/mod_authn_file.so
LoadModule authz_user_module   moduels/mod_authz_user.so
</programlisting>
        </informalexample>

<!--
        <para>After ensuring the Apache has access to the required
          functionality, you'll need to add some more directives
          inside the <literal>&lt;Location&gt;</literal> block to tell
          Apache what type of authentication you wish to use, and just
          how to do so:</para>
-->
        <para>Après vous être assuré que Apache a accès auxdites
          fonctionnalités, vous devrez ajouter quelques directives dans
          le bloc <literal>&lt;Location&gt;</literal> pour indiquer à
          Apache quel type d'authentification vous souhaitez utiliser et
          comment le faire&nbsp;:</para>

        <informalexample>
          <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Basic <!--
  AuthName "Subversion repository"
  AuthType Basic
  AuthBasicProvider file
  AuthUserFile /etc/svn-auth.htpasswd -->
  AuthName "Depot Subversion"
  AuthType Basic
  AuthBasicProvider file
  AuthUserFile /etc/auth-svn.htpasswd

&lt;/Location&gt;
</programlisting>
        </informalexample>

<!--
        <para>These directives work as follows:</para>
-->
        <para>Ces directives fonctionnent ainsi&nbsp;:</para>

        <itemizedlist>
          <listitem>
<!--
            <para><literal>AuthName</literal> is an arbitrary name
              that you choose for the authentication domain.  Most
              browsers display this name in the dialog box when
              prompting for username and password.</para>
-->
            <para><literal>AuthName</literal> est une chaîne de
              caractères arbitraire que vous choisissez pour définir le
              domaine d'authentification. La plupart des navigateurs
              affichent cette chaîne dans la boîte de dialogue au moment
              de demander le nom d'utilisateur et le mot de
              passe.</para>
          </listitem>
          <listitem>
<!--
            <para><literal>AuthType</literal> specifies the type of
              authentication to use.</para>
-->
            <para><literal>AuthType</literal> spécifie le type
              d'authentification à utiliser.</para>
          </listitem>
          <listitem>
<!--
            <para><literal>AuthBasicProvider</literal> specifies the
              Basic authentication provider to use for the location.
              In our example, we wish to consult a local password
              file.</para>
-->
            <para><literal>AuthBasicProvider</literal> spécifie le
              fournisseur de l'authentification basique pour cet
              emplacement. Dans notre exemple, nous consultons un
              fichier local de mots de passe.</para>
          </listitem>
          <listitem>
<!--
            <para><literal>AuthUserFile</literal> specifies the
              location of the password file to use.</para>
-->
            <para><literal>AuthUserFile</literal> spécifie l'emplacement
              du fichier de mots de passe à utiliser.</para>
          </listitem>
        </itemizedlist>

<!--
        <para>However, this <literal>&lt;Location&gt;</literal> block
          doesn't yet do anything useful.  It merely tells Apache that
          <emphasis>if</emphasis> authorization were required, it
          should challenge the Subversion client for a username and
          password.  (When authorization is required, Apache requires
          authentication as well.)  What's missing here, however, are
          directives that tell Apache <emphasis>which sorts</emphasis>
          of client requests require authorization; currently, none do.
          The simplest thing is to specify that <emphasis>all</emphasis>
          requests require authorization by adding
          <literal>Require valid-user</literal> to the block:</para>
-->
        <para>Ce bloc <literal>&lt;Location&gt;</literal> n'est pas
          encore complet et il ne sert pas à grand chose pour l'instant.
          Il indique juste à Apache que, <emphasis>si</emphasis> un
          contrôle d'accès est requis, Apache doit demander un nom
          d'utilisateur et un mot de passe au client Subversion. En
          effet, dès qu'un contrôle d'accès est requis, Apache exige
          également l'authentification. Ce qui manque ici, cependant, ce
          sont les directives qui indiquent à Apache <emphasis>quelles
          sortes de requêtes client</emphasis> requièrent un contrôle
          d'accès&nbsp;; pour l'instant, aucune requête n'en requiert.
          La chose la plus simple à faire alors est de spécifier que
          <emphasis>toutes</emphasis> les requêtes demandent un
          contrôle d'accès en ajoutant
          <literal>Require valid-user</literal> au bloc&nbsp;:</para>

        <informalexample>
          <programlisting>
&lt;Location /svn&gt;<!--
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Basic
  AuthName "Subversion repository"
  AuthType Basic
  AuthBasicProvider file
  AuthUserFile /etc/svn-auth.htpasswd

  # Authorization: Authenticated users only
  Require valid-user-->
  DAV svn
  SVNParentPath /var/svn

  # Authentification: basique
  AuthName "Depot Subversion"
  AuthType Basic
  AuthBasicProvider file
  AuthUserFile /etc/auth-svn.htpasswd

  # contrôle d'accès : utilisateurs authentifiés seulement
  Require valid-user
&lt;/Location&gt;
</programlisting>
        </informalexample>

<!--
        <para>Refer to <xref linkend="svn.serverconfig.httpd.authz"/>
          for more detail on the <literal>Require</literal> directive
          and other ways to set authorization policies.</para>
-->
        <para>Prenez bien soin de lire <xref
          linkend="svn.serverconfig.httpd.authz"/> pour plus de
          détails sur la directive <literal>Require</literal> et sur les
          autres manières de mettre en œuvre des politiques de contrôle
          d'accès.</para>

        <note>
<!--
          <para>The default value of the
            <literal>AuthBasicProvider</literal> option is
            <literal>file</literal>, so we won't bother including
            it in future examples.  Just know that if in a broader
            context you've set this value to something else, you'll
            need to explicitly reset it to <literal>file</literal>
            within your Subversion <literal>&lt;Location&gt;</literal>
            block in order to get that behavior.</para>
-->
          <para>La valeur par défaut pour l'option
            <literal>AuthBasicProvider</literal> est
            <literal>file</literal>, c'est pourquoi nous ne nous
            embêterons pas à la répéter dans les exemples futurs. Sachez
            seulement que si vous avez défini sa valeur à autre chose
            dans un contexte plus large, vous aurez à la redéfinir
            explicitement à <literal>file</literal> dans le bloc
            <literal>&lt;Location&gt;</literal> de Subversion pour
            obtenir le bon comportement.</para>
        </note>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.authn.digest">
<!--
        <title>Digest authentication</title>

-->
        <title>Authentification par condensat
          (<foreignphrase>Digest</foreignphrase>)</title>
<!--
        <para>Digest authentication is an improvement on Basic
          authentication which allows the server to verify a client's
          identity without sending the password over the network
          unprotected.  Both client and server create a non-reversible
          MD5 hash of the username, password, requested URI, and a
          <firstterm>nonce</firstterm> (number used once) provided by
          the server and changed each time authentication is required.
          The client sends its hash to the server, and the server then
          verifies that the hashes match.</para>
-->
        <para>La méthode d'authentification <literal>Digest</literal>,
          améliore la méthode basique dans le sens où elle permet au
          serveur de vérifier l'identité du client sans envoyer
          le mot de passe en clair sur le réseau. Chacun de leur côté,
          le client et le serveur calculent un condensat
          (<foreignphrase>hash</foreignphrase> ou
          <foreignphrase>digest</foreignphrase> en anglais) à partir de
          l'identifiant, du mot de passe, de l'URI demandée et d'un
          <firstterm>nonce</firstterm> (nombre utilisé une seule fois)
          fourni par le serveur et changé à chaque demande
          d'authentification. Le client envoie son condensat au serveur
          et celui-ci vérifie si le condensat correspond à ses
          attentes.</para>

<!--
        <para>Configuring Apache to use Digest authentication is
          straightforward.  You'll need to ensure that
          the <command>mod_auth_digest</command> module is available
          (instead of <command>mod_auth_basic</command>), and then
          make a few small variations on our prior example:</para>
-->
        <para>Configurer Apache pour la méthode d'authentification
          <literal>Digest</literal> est facile. En premier lieu,
          assurez-vous que le module <command>mod_auth_digest</command>
          est disponible (à la place de
          <command>mod_auth_basic</command>) et effectuez les petites
          variations suivantes par rapport à notre exemple
          précédent&nbsp;:</para>

        <informalexample>
          <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn<!--

  # Authentication: Digest
  AuthName "Subversion repository"
  AuthType Digest
  AuthDigestProvider file
  AuthUserFile /etc/svn-auth.htdigest

  # Authorization: Authenticated users only -->

  # Authentification: condensat
  AuthName "Depot Subversion"
  AuthType Digest
  AuthDigestProvider file
  AuthUserFile /etc/auth-svn.htdigest

  # contrôle d'accès : utilisateurs authentifiés seulement
  Require valid-user
&lt;/Location&gt;
</programlisting>
        </informalexample>

<!--
        <para>Notice that <literal>AuthType</literal> is now set to
          <literal>Digest</literal>, and we specify a different path
          for <literal>AuthUserFile</literal>.  Digest authentication
          uses a different file format than Basic authentication,
          created and managed using Apache's <command>htdigest</command>
          utility<footnote><para>See
          <ulink url="http://httpd.apache.org/docs/current/programs/htdigest.html"
          />.</para></footnote> rather than <command>htpasswd</command>.
          Digest authentication also has the additional concept of a
          <quote>realm</quote>, which must match the value of the
          <literal>AuthName</literal> directive.</para>
-->
        <para>Notez que <literal>AuthType</literal> vaut maintenant
          <literal>Digest</literal> et que nous avons spécifié un
          chemin différent pour <literal>AuthUserFile</literal>.
          L'authentification par condensat utilise un format de fichier
          différent de l'authentification basique, créé et géré par
          l'utilitaire <command>htdigest</command>
          <footnote><para>voir <ulink
          url="http://httpd.apache.org/docs/current/programs/htdigest.html"
          />.</para></footnote> d'Apache, et non
          <command>htpasswd</command>. L'authentification par condensat
          utilise aussi le concept de
          <foreignphrase>realm</foreignphrase> (<quote>domaine
          d'authentification</quote> en français), dont la valeur est
          indiquée dans la directive <literal>AuthName</literal>.</para>

        <note>
<!--
          <para>For Digest authentication, the authentication provider
            is selected using the <literal>AuthDigestProvider</literal>
            as shown in the previous example.  As was the case with
            the <literal>AuthBasicProvider</literal> directive,
            <literal>file</literal> is the default value of the
            <literal>AuthDigestProvider</literal> option, so this
            line is not strictly required unless you need to override
            a different value thereof inherited from a broader
            configuration context.</para>
-->
          <para>Pour l'authentification par condensat, le fournisseur
            d'authentification est choisi en utilisant la directive
            <literal>AuthDigestProvider</literal> comme indiqué dans
            l'exemple précédent. De même que pour la directive
            <literal>AuthBasicProvider</literal>,
            la valeur par défaut est <literal>file</literal> pour
            <literal>AuthDigestProvider</literal>. Cette ligne n'est
            donc pas strictement requise à moins que vous n'ayez à
            redéfinir une valeur différente de celle héritée par un
            contexte plus large de la configuration.</para>
        </note>

<!--
        <para>The password file can be created as follows:</para>
-->
        <para>Le fichier des mots de passe peut être créé
          ainsi&nbsp;:</para>

<!--
        <informalexample>
          <screen>
$ ### First time: use -c to create the file
$ htdigest -c /etc/svn-auth.htdigest "Subversion repository" harry
Adding password for harry in realm Subversion repository.
New password: *****
Re-type new password: *****
$ htdigest /etc/svn-auth.htdigest "Subversion repository" sally
Adding user sally in realm Subversion repository
New password: *******
Re-type new password: *******
$
</screen>
        </informalexample>
-->
        <informalexample>
          <screen>
$ ### Première fois : utilisez -c pour créer le fichier
$ htdigest -c /etc/auth-svn.htdigest "Depot Subversion" harry
Adding password for harry in realm Depot Subversion.
New password: *****
Re-type new password: *****
$ htdigest /etc/auth-svn.htdigest "Depot Subversion" sally
Adding user sally in realm Depot Subversion.
New password: *******
Re-type new password: *******
$
</screen>
        </informalexample>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.httpd.authz">
<!--
      <title>Authorization Options</title>
-->
      <title>Contrôle d'accès</title>

<!--
      <para>At this point, you've configured authentication, but not
        authorization.  Apache is able to challenge clients and
        confirm identities, but it has not been told how to allow or
        restrict access to the clients bearing those identities.  This
        section describes two strategies for controlling access to
        your repositories.</para>
-->
      <para>À ce point, vous avez configuré l'authentification mais pas
        le contrôle d'accès. Apache est capable de vérifier les
        identités que proclament les clients mais on ne lui a pas encore
        indiqué quand autoriser ou interdire l'accès aux clients qui
        proclament ces identités. Cette section décrit deux stratégies
        pour contrôler les accès à vos dépôts.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.authz.blanket">
<!--
        <title>Blanket access control</title>
-->
        <title>Contrôle d'accès général</title>

<!--
        <para>The simplest form of access control is to authorize
          certain users for either read-only access to a repository or
          read/write access to a repository.</para>
-->
        <para>La méthode la plus simple de contrôle d'accès est
          d'autoriser certains utilisateurs pour un accès en lecture
          seule à un dépôt ou en lecture/écriture à un dépôt.</para>

<!--
        <para>You can restrict access on all repository operations by
          adding <literal>Require valid-user</literal> directly inside
          the <literal>&lt;Location&gt;</literal> block.  The example
          from <xref linkend="svn.serverconfig.httpd.authn.digest"/>
          allows only clients that successfully authenticate to do
          anything with the Subversion repository:</para>
-->
        <para>Vous pouvez restreindre les accès sur toutes les
          opérations d'un dépôt en ajoutant la directive
          <literal>Require valid-user</literal> directement dans le bloc
          <literal>&lt;Location&gt;</literal>. L'exemple fourni dans
          <xref linkend="svn.serverconfig.httpd.authn.digest"/>
          autorise seulement les clients qui ont passé avec succès
          l'authentification et leur permet de tout faire avec le dépôt
          Subversion&nbsp;:</para>

<!--
        <informalexample>
          <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Digest
  AuthName "Subversion repository"
  AuthType Digest
  AuthUserFile /etc/svn-auth.htdigest

  # Authorization: Authenticated users only
  Require valid-user
&lt;/Location&gt;
</programlisting>
        </informalexample>
-->
        <informalexample>
          <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentification : condensat
  AuthName "Depot Subversion"
  AuthType Digest
  AuthUserFile /etc/auth-svn.htdigest

  # contrôle d'accès : utilisateurs authentifiés seulement
  Require valid-user
&lt;/Location&gt;
</programlisting>
        </informalexample>

<!--
        <para>Sometimes you don't need to run such a tight ship.  For
          example, the server hosting Subversion's own source code at
          <ulink url="https://svn.apache.org/repos/asf/subversion/"/> allows
          anyone in the world to perform read-only repository tasks (such as
          checking out working copies and browsing the repository),
          but restricts write operations to authenticated users.  The
          <literal>Limit</literal> and <literal>LimitExcept</literal>
          directives allow for this type of selective restriction.
          Like the <literal>Location</literal> directive, these blocks
          have starting and ending tags, and you would nest them
          inside your <literal>&lt;Location&gt;</literal>
          block.</para>
-->
        <para>Mais vous n'êtes pas obligé d'être aussi sévère. Par
          exemple, le serveur hébergeant le code source de Subversion à
          <ulink url="http://svn.apache.org/repos/asf/subversion"/>
          permet à n'importe qui d'effectuer des accès en lecture seule
          (tels que des extractions de copies de travail ou parcourir
          le dépôt), mais il restreint les opérations d'écriture aux
          utilisateurs authentifiés. Les directives
          <literal>Limit</literal> et <literal>LimitExcept</literal>
          permettent ce type de comportement. À l'instar de
          <literal>Location</literal>, ces blocs possèdent une étiquette
          de début et une de fin, et vous pouvez les insérer dans des
          blocs <literal>&lt;Location&gt;</literal>.</para>

<!--
        <para>The parameters present on the <literal>Limit</literal>
          and <literal>LimitExcept</literal> directives are HTTP
          request types that are affected by that block.  For example,
          to allow anonymous read-only operations, you would use the
          <literal>LimitExcept</literal> directive (passing the
          <literal>GET</literal>, <literal>PROPFIND</literal>,
          <literal>OPTIONS</literal>, and <literal>REPORT</literal>
          request type parameters) and place the previously mentioned
          <literal>Require valid-user</literal> directive inside the
          <literal>&lt;LimitExcept&gt;</literal> block instead of just
          inside the <literal>&lt;Location&gt;</literal> block.</para>
-->
        <para>Les paramètres inclus dans les directives
          <literal>Limit</literal> et <literal>LimitExcept</literal>
          sont les types de requêtes concernés par ces blocs. Ainsi, par
          exemple pour autoriser l'accès en lecture seule aux
          utilisateurs anonymes, vous utiliserez la directive
          <literal>LimitExcept</literal> (en lui donnant
          <literal>GET</literal>, <literal>PROPFIND</literal>,
          <literal>OPTIONS</literal> et <literal>REPORT</literal> comme
          types de requête autorisés) et vous placerez la directive
          <literal>Require valid-user</literal> citée précédemment
          dans le bloc <literal>&lt;LimitExcept&gt;</literal> au lieu de
          juste la placer dans le bloc
          <literal>&lt;Location&gt;</literal>.</para>

<!--
        <informalexample>
          <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Digest
  AuthName "Subversion repository"
  AuthType Digest
  AuthUserFile /etc/svn-auth.htdigest

  # Authorization: Authenticated users only for non-read-only
  #                (write) operations; allow anonymous reads
  &lt;LimitExcept GET PROPFIND OPTIONS REPORT&gt;
    Require valid-user
  &lt;/LimitExcept&gt;
&lt;/Location&gt;
</programlisting>
        </informalexample>
-->
        <informalexample>
          <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentification : condensat
  AuthName "Depot Subversion"
  AuthType Digest
  AuthUserFile /etc/auth-svn.htdigest

  # contrôle d'accès : utilisateurs authentifiés : écriture
  #                    anonymes : lecture seule
  &lt;LimitExcept GET PROPFIND OPTIONS REPORT&gt;
    Require valid-user
  &lt;/LimitExcept&gt;
&lt;/Location&gt;
</programlisting>
        </informalexample>

<!--
        <para>These are only a few simple examples.  For more in-depth
          information about Apache access control and the
          <literal>Require</literal> directive, take a look at the
          <literal>Security</literal> section of the Apache
          documentation's tutorials collection at <ulink
          url="http://httpd.apache.org/docs-2.0/misc/tutorials.html"/>.</para>
-->
        <para>Ce ne sont là que quelques exemples simples. Pour des
          informations plus poussées sur le contrôle d'accès d'Apache et
          la directive <literal>Require</literal>, jetez un œil à la
          section <literal>Security</literal> du recueil des didacticiels
          de la documentation Apache à l'adresse <ulink
          url="http://httpd.apache.org/docs-2.0/misc/tutorials.html"
          />.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.authz.perdir">
<!--
        <title>Per-directory access control</title>
-->
        <title>Contrôle d'accès par répertoire</title>

<!--
        <para>It's possible to set up finer-grained permissions using
          <command>mod_authz_svn</command>.  This Apache module grabs
          the various opaque URLs passing from client to server, asks
          <command>mod_dav_svn</command> to decode them, and then
          possibly vetoes requests based on access policies defined in
          a configuration file.</para>
-->
        <para>Il est également possible de mettre en place des droits
          d'accès avec une granularité plus fine en utilisant le module
          <command>mod_authz_svn</command>. Ce module Apache
          se saisit des diverses URL opaques qui transitent entre le
          client et le serveur, demande à <command>mod_dav_svn</command>
          de les décoder et ensuite met éventuellement son veto à
          certaines requêtes en se basant sur les politiques d'accès
          définies dans un fichier de configuration.</para>

<!--
        <para>If you've built Subversion from source code,
          <command>mod_authz_svn</command> is automatically built
          and installed alongside <command>mod_dav_svn</command>.
          Many binary distributions install it automatically as well.
          To verify that it's installed correctly, make sure it comes
          right after <command>mod_dav_svn</command>'s
          <literal>LoadModule</literal> directive in
          <filename>httpd.conf</filename>:</para>
-->
        <para>Si vous avez compilé Subversion à partir du code source,
          <command>mod_authz_svn</command> est automatiquement inclus et
           installé aux côtés de <command>mod_dav_svn</command>. De
           nombreux exécutables distribués l'installent automatiquement
           aussi. Pour vérifier s'il est installé correctement,
           assurez-vous qu'il vient juste après la directive
           <literal>LoadModule</literal> de
           <command>mod_dav_svn</command> dans le fichier
           <filename>httpd.conf</filename>&nbsp;:</para>

        <informalexample>
          <programlisting>
LoadModule dav_module         modules/mod_dav.so
LoadModule dav_svn_module     modules/mod_dav_svn.so
LoadModule authz_svn_module   modules/mod_authz_svn.so
</programlisting>
        </informalexample>

<!--
        <para>To activate this module, you need to configure your
          <literal>&lt;Location&gt;</literal> block to use the
          <literal>AuthzSVNAccessFile</literal> directive which specifies
          a single file containing the permissions policy for paths within
          your repositories.  Beginning with Subversion 1.7, you can
          also use <literal>AuthzSVNReposRelativeAccessFile</literal>
          directive to specify a per repository access file.
          (In a moment, we'll discuss the format of that file.)</para>
-->
        <para>Pour activer ce module, vous devez configurer votre bloc
          <literal>&lt;Location&gt;</literal> pour qu'il utilise la directive
          <literal>AuthzSVNAccessFile</literal>&nbsp;; elle spécifie
          quel fichier contient les politiques de contrôle d'accès aux
          chemins de vos dépôts. À partir de Subversion 1.7, vous pouvez
          aussi utiliser la directive
          <literal>AuthzSVNReposRelativeAccessFile</literal> pour spécifier
          un fichier de contrôle d'accès spécifique par dépôt (nous allons
          étudier le format de ce fichier un peu plus tard).</para>

<!--
        <para>Apache is flexible, so you have the option to configure
          your block in one of three general patterns.  To begin,
          choose one of these basic configuration patterns.  (The
          following examples are very simple; look at Apache's own
          documentation for much more detail on Apache authentication
          and authorization options.)</para>
-->
        <para>Apache est flexible, vous avez donc la possibilité de
          configurer votre bloc selon une méthode à choisir parmi trois.
          Pour commencer, choisissez une des méthodes de configuration
          de base (les exemples suivants sont très simples&nbsp;;
          reportez-vous à la documentation Apache qui contient beaucoup
          plus de détails sur les options d'authentification et de
          contrôle d'accès d'Apache).</para>

<!--
        <para>The most open approach is to allow access to everyone.
          This means Apache never sends authentication challenges, and
          all users are treated as <quote>anonymous</quote>.  (See
          <xref linkend="svn.serverconfig.httpd.authz.perdir.ex-1"
          />.)</para>
-->
        <para>L'approche la plus simple consiste à donner l'accès à tout
          le monde. Dans ce scénario, Apache n'envoie jamais de défi
          d'authentification, tous les utilisateurs sont donc traités en
          tant qu'<quote>anonymes</quote> (voir l'<xref
          linkend="svn.serverconfig.httpd.authz.perdir.ex-1"/>).</para>

        <example id="svn.serverconfig.httpd.authz.perdir.ex-1">
<!--
          <title>A sample configuration for anonymous access</title>
-->
          <title>Exemple-type de configuration&nbsp;: accès
            anonyme</title>
<!--
          <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: None

  # Authorization: Path-based access control
  AuthzSVNAccessFile /path/to/access/file
&lt;/Location&gt;
</programlisting>
-->
          <programlisting>
&lt;Location /depot&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentification : aucune

  # Contrôle d'accès : par répertoire
  AuthzSVNAccessFile /chemin/vers/fichier/acces
&lt;/Location&gt;
</programlisting>
        </example>

<!--
        <para>On the opposite end of the paranoia scale, you can
          configure Apache to authenticate all clients.
          This block unconditionally requires authentication via the
          <literal>Require valid-user</literal> directive, and defines
          a means to authenticate valid users.  (See
          <xref linkend="svn.serverconfig.httpd.authz.perdir.ex-2"/>.)</para>
-->
        <para>À l'opposé sur l'échelle de la paranoïa, vous pouvez
          configurer votre bloc de telle sorte qu'il exige que tout le
          monde s'authentifie. Ici, tous les clients doivent fournir un
          mot de passe pour prouver leur identité. Votre bloc exige
          l'authentification inconditionnelle
          <foreignphrase>via</foreignphrase> la directive
          <literal>Require valid-user</literal> et définit le moyen de
          s'authentifier (voir l'<xref
          linkend="svn.serverconfig.httpd.authz.perdir.ex-2"/>).</para>

        <example id="svn.serverconfig.httpd.authz.perdir.ex-2">
<!--
          <title>A sample configuration for authenticated access</title>
-->
          <title>Exemple-type de configuration&nbsp;: accès
            authentifié</title>
<!--
          <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Digest
  AuthName "Subversion repository"
  AuthType Digest
  AuthUserFile /etc/svn-auth.htdigest

  # Authorization: Path-based access control; authenticated users only
  AuthzSVNAccessFile /path/to/access/file
  Require valid-user
&lt;/Location&gt;
</programlisting>
-->
          <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentification : condensat
  AuthType Digest
  AuthName "Depot Subversion"
  AuthUserFile /etc/auth-svn.htdigest

  # Contrôle d'accès : par répertoire,
  #              seuls les utilisateurs authentifiés ont accès au dépôt
  AuthzSVNAccessFile /chemin/vers/fichier/acces
  Require valid-user
&lt;/Location&gt;
</programlisting>
        </example>

<!--
        <para>A third very popular pattern is to allow a combination
          of authenticated and anonymous access.  For example, many
          administrators want to allow anonymous users to read certain
          repository directories, but restrict access to more
          sensitive areas to authenticated users.  In this setup, all
          users start out accessing the repository anonymously.  If
          your access control policy demands a real username at any
          point, Apache will demand authentication from the client.
          To do this, use both the <literal>Satisfy Any</literal>
          and <literal>Require valid-user</literal> directives.  (See
          <xref linkend="svn.serverconfig.httpd.authz.perdir.ex-3"
          />.)</para>
-->
        <para>Une troisième méthode très pratiquée consiste à
          autoriser à la fois des accès anonymes et des accès
          authentifiés. Par exemple, de nombreux administrateurs
          désirent autoriser les utilisateurs anonymes à lire certains
          répertoires dans les dépôts mais ne veulent voir que des
          utilisateurs authentifiés accéder en lecture (ou en écriture)
          dans des zones plus sensibles. Dans cette configuration, tous
          les utilisateurs commencent par accéder au dépôt de façon
          anonyme. Si votre politique de contrôle d'accès exige un
          véritable nom d'utilisateur à un moment ou à un autre, Apache
          demandera au client de s'authentifier. Pour ce faire, vous
          devez utiliser à la fois la directive <literal>Satisfy
          Any</literal> et la directive <literal>Require
          valid-user</literal> (voir l'<xref
          linkend="svn.serverconfig.httpd.authz.perdir.ex-3"/>).</para>

        <example id="svn.serverconfig.httpd.authz.perdir.ex-3">
<!--
          <title>A sample configuration for mixed
            authenticated/anonymous access</title>
-->
          <title>Exemple-type de configuration&nbsp;: accès mixte
            authentifié/anonyme</title>
<!--
          <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Digest
  AuthName "Subversion repository"
  AuthType Digest
  AuthUserFile /etc/svn-auth.htdigest

  # Authorization: Path-based access control; try anonymous access
  #                first, but authenticate if necessary
  AuthzSVNAccessFile /path/to/access/file
  Satisfy Any
  Require valid-user
&lt;/Location&gt;
</programlisting>
-->
          <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentification : Digest
  AuthName "Depot Subversion"
  AuthType Digest
  AuthUserFile /etc/auth-svn.htdigest

  # Contrôle d'accès : par répertoire
  #                    d'abord essayer l'accès anonyme
  #                    s'authentifier si nécessaire
  AuthzSVNAccessFile /chemin/vers/fichier/accès
  Satisfy Any
  Require valid-user
&lt;/Location&gt;
</programlisting>
        </example>

<!--
        <para>The next step is to create the authorization file
          containing access rules for particular paths within the
          repository.  We describe how later in this chapter, in
          <xref linkend="svn.serverconfig.pathbasedauthz"/>.</para>
-->
        <para>L'étape suivante consiste à créer un fichier contenant les
          règles d'accès particulières pour chaque chemin de votre
          dépôt. Nous en parlons en détails plus loin dans ce chapitre,
          à <xref linkend="svn.serverconfig.pathbasedauthz"/>.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.authz.pathauthzoff">
<!--
        <title>Disabling path-based checks</title>
-->
        <title>Désactivation du contrôle sur les chemins</title>

<!--
        <para>The <command>mod_dav_svn</command> module goes through a
          lot of work to make sure that data you've marked
          <quote>unreadable</quote> doesn't get accidentally leaked.
          This means it needs to closely monitor all of the paths
          and file-contents returned by commands such as <command>svn
          checkout</command> and <command>svn update</command>.
          If these commands encounter a path that isn't
          readable according to some authorization policy, the
          path is typically omitted altogether.  In the case of
          history or rename tracing&mdash;for example, running a command such
          as <userinput>svn cat -r OLD foo.c</userinput> on a file that
          was renamed long ago&mdash;the rename tracking will simply
          halt if one of the object's former names is determined to be
          read-restricted.</para>
-->
        <para>Le module <command>mod_dav_svn</command> se donne beaucoup
          de peine pour assurer que les données que vous avez désignées
          comme <quote>interdites</quote> ne soient pas divulguées
          accidentellement. Cela veut dire qu'il doit surveiller
          étroitement tous les chemins d'accès et tous les contenus des
          fichiers renvoyés par des commandes telles que <command>svn
          checkout</command> et <command>svn update</command>.
          Si ces commandes tombent sur un chemin qui n'est pas lisible à
          cause d'une politique de contrôle d'accès, le chemin est
          généralement totalement omis. Dans le cas d'une recherche
          d'historique ou de renommage, par exemple une commande
          telle que <userinput>svn cat -r ANCIENNE_REVISION
          truc.c</userinput> sur un fichier qui a été renommé il y a
          longtemps, le suivi des renommages va simplement s'arrêter si
          un des anciens noms de l'objet se révèle être en accès
          restreint en lecture.</para>

<!--
        <para>All of this path checking can sometimes be quite
          expensive, especially in the case of <command>svn
          log</command>.  When retrieving a list of revisions, the
          server looks at every changed path in each revision and
          checks it for readability.  If an unreadable path is
          discovered, it's omitted from the list of the revision's
          changed paths (normally seen with
          the <option>- -verbose</option> (<option>-v</option>) option),
          and the whole log message is suppressed.  Needless to say,
          this can be time-consuming on revisions that affect a large
          number of files.  This is the cost of security: even if you
          haven't configured a module such as
          <command>mod_authz_svn</command> at all, the
          <command>mod_dav_svn</command> module is still asking Apache
          <command>httpd</command> to run authorization checks on
          every path.  The <command>mod_dav_svn</command> module has
          no idea what authorization modules have been installed, so
          all it can do is ask Apache to invoke whatever might be
          present.</para>
-->
        <para>Ces contrôles sur les chemins peuvent parfois être assez
          coûteux, tout particulièrement dans le cas de <command>svn
          log</command>. Quand il demande une liste de révisions, le
          serveur examine chaque chemin modifié dans chaque révision et
          vérifie qu'il a le droit d'être lu. Si un chemin interdit est
          découvert, il est omis de la liste des chemins modifiés par
          la révision (obtenue habituellement par l'option
          <option>--verbose</option>) et le commentaire de propagation est
          entièrement supprimé. Il va sans dire que ceci peut prendre un
          certain temps pour les révisions qui ont touché à un grand
          nombre de fichiers. C'est le coût de la sécurité&nbsp;: même
          si vous n'avez pas du tout configuré de module tel que
          <command>mod_authz_svn</command>, le module
          <command>mod_dav_svn</command> va quand même demander à
          <command>httpd</command>&nbsp;Apache de vérifier les droits
          d'accès pour chaque chemin. Le module
          <command>mod_dav_svn</command> n'est pas au courant de la
          liste des modules de contrôle d'accès qui ont été installés,
          donc tout ce qu'il peut faire est de demander à Apache de
          lancer les modules correspondants, quels qu'ils soient.</para>

<!--
        <para>On the other hand, there's also an escape hatch of
          sorts, which allows you to trade security features for
          speed.  If you're not enforcing any sort of per-directory
          authorization (i.e., not using
          <command>mod_authz_svn</command> or similar module),
          you can disable all of this path checking.  In your
          <filename>httpd.conf</filename> file, use the
          <literal>SVNPathAuthz</literal> directive as shown in
          <xref linkend="svn.serverconfig.httpd.authz.pathauthzoff.ex-1"/>.</para>
-->
        <para>D'un autre côté, il existe une sorte d'échappatoire qui
          vous permet d'échanger la sécurité contre de la vitesse. Si
          vous ne mettez pas en œuvre de contrôle d'accès sur les
          chemins (c'est-à-dire, si vous n'utilisez ni
          <command>mod_authz_svn</command> ni un module similaire), vous
          pouvez désactiver tous ces contrôles sur les chemins. Dans
          votre fichier <filename>httpd.conf</filename>, utilisez la
          directive <literal>SVNPathAuthz</literal> comme illustré dans
          l'<xref linkend="svn.serverconfig.httpd.authz.pathauthzoff.ex-1"/>.</para>

        <example id="svn.serverconfig.httpd.authz.pathauthzoff.ex-1">
<!--
          <title>Disabling path checks altogether</title>
-->
          <title>Désactiver complètement les contrôles sur les
            chemins</title>
          <programlisting><!--
&lt;Location /repos&gt;-->
&lt;Location /depot&gt;
  DAV svn
  SVNParentPath /var/svn

  SVNPathAuthz off
&lt;/Location&gt;
</programlisting>
        </example>

<!--
        <para>The <literal>SVNPathAuthz</literal> directive
          is <quote>on</quote> by default.  When
          set to <quote>off,</quote> all path-based authorization
          checking is disabled;
          <command>mod_dav_svn</command> stops invoking authorization
          checks on every path it discovers.</para>
-->
        <para>La directive <literal>SVNPathAuthz</literal> est activée
          (<quote>on</quote>) par défaut. Quand on la désactive
          (<quote>off</quote>), tous les contrôles d'accès basés sur les
          chemins sont désactivés&nbsp;; <command>mod_dav_svn</command>
          arrête de demander un contrôle d'accès chaque chemin qu'il
          traite.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.authz.inrepo-authz">
<!--
        <title>Versioned in repository access files</title>
-->
        <title>Fichier de contrôle d'accès suivi en versions dans le
          dépôt</title>

<!--
        <para>Beginning with Subversion 1.8, access files can be
          stored inside a Subversion repository.  It is possible to
          store the access file in the same repository to which the
          access rules are being applied, or you can store it in an
          entirely different repository.  This approach enables
          versioning features of Subversion for the path-based
          authorization configuration.</para>
-->
        <para>À partir de Subversion 1.8, le fichier de contrôle d'accès
          peut être stocké dans un dépôt Subversion. Il est possible de
          stocker ce ficher dans le dépôt même pour lequel sont gérés
          les droits d'accès, ou dans un autre dépôt. Cette approche
          permet d'avoir les fonctionnalités de gestion de versions pour
          la configuration du contrôle d'accès aux chemins.</para>

<!--
        <para>Both <literal>AuthzSVNAccessFile</literal> and
          <literal>AuthzSVNReposRelativeAccessFile</literal> configuration
          directives allow to specify in-repository access file's location.
          The directives accept absolute <literal>file://</literal> URLs
          and repository relative URLs (one which begins with
          <literal>^/</literal>).</para>
-->
        <para>Les deux directives de configuration
          <literal>AuthzSVNAccessFile</literal> et
          <literal>AuthzSVNReposRelativeAccessFile</literal> permettent
          de spécifier l'emplacement du fichier de contrôle d'accès à
          l'intérieur d'un dépôt. Ces directives reconnaissent les
          URL absolues de type <literal>file://</literal> et les URL
          relatives aux dépôts (celles qui commencent par
          <literal>^/</literal>).</para>

<!--
        <para>For example, it is possible to specify an absolute URL to
          in-repository access file as shown in
          <xref linkend="svn.serverconfig.httpd.authz.inrepo-authz.ex-1"/>.</para>
-->
        <para>Par exemple, il est possible de spécifier une URL absolue pour
          un fichier de contrôle d'accès comme le montre
          <xref linkend="svn.serverconfig.httpd.authz.inrepo-authz.ex-1"/>.</para>

        <example id="svn.serverconfig.httpd.authz.inrepo-authz.ex-1">
<!--
          <title>Using single versioned in repo access file</title>
          <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn
  AuthzSVNAccessFile file:///var/svn/authzrepo/authz
&lt;/Location&gt;
</programlisting>
-->
          <title>Utilisation d'un fichier de contrôle d'accès unique
            suivi en versions à  l'intérieur d'un dépôt</title>
          <programlisting>
&lt;Location /dépôt&gt;
  DAV svn
  SVNParentPath /var/svn
  AuthzSVNAccessFile file:///var/svn/dépôt-authz/authz
&lt;/Location&gt;
</programlisting>
        </example>

<!--
        <para>You can also specify a relative URL to an in repository access
          file as demonstrated in
          <xref linkend="svn.serverconfig.httpd.authz.inrepo-authz.ex-2"/>.</para>
-->
        <para>Vous pouvez aussi spécifier une URL relative pointant vers un
          fichier à l'intérieur du dépôt lui-même, comme montré dans
          <xref linkend="svn.serverconfig.httpd.authz.inrepo-authz.ex-2"/>.</para>

        <example id="svn.serverconfig.httpd.authz.inrepo-authz.ex-2">
<!--
          <title>Using per repository in repo access files</title>
          <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn
  AuthzSVNReposRelativeAccessFile ^/authz
&lt;/Location&gt;
</programlisting>
        </example>
-->
          <title>Utilisation d'un fichier de contrôle d'accès spécifique
           pour chaque dépôt</title>
          <programlisting>
&lt;Location /dépôt&gt;
  DAV svn
  SVNParentPath /var/svn
  AuthzSVNReposRelativeAccessFile ^/authz
&lt;/Location&gt;
</programlisting>
        </example>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.httpd.ssl">
<!--
      <title>Protecting network traffic with SSL</title>
-->
      <title>Encapsulation du trafic réseau avec SSL</title>

<!--
      <para>Connecting to a repository via <literal>http://</literal>
        means that all Subversion activity is sent across the network
        in the clear.  This means that actions such as checkouts,
        commits, and updates could potentially be intercepted by an
        unauthorized party <quote>sniffing</quote> network traffic.
        Encrypting traffic using SSL is a good way to protect
        potentially sensitive information over the network.</para>
-->
      <para>Lorsque vous vous connectez à un dépôt
        <foreignphrase>via</foreignphrase> <literal>http://</literal>,
        tout le trafic généré par Subversion est envoyé en clair sur le
        réseau. Cela veut dire que les extractions, les propagations et
        les mises à jour peuvent être interceptées par une entité non
        autorisée qui <quote>écoute</quote> le trafic réseau. Chiffrer
        le trafic en utilisant SSL vous permet de protéger l'envoi
        d'informations sensibles sur le réseau.</para>

<!--
      <para>If a Subversion client is compiled to use OpenSSL,
        it gains the ability to speak to an Apache server via
        <literal>https://</literal> URLs, so all traffic is encrypted
        with a per-connection session key.  The WebDAV library used by
        the Subversion client is not only able to verify server
        certificates, but can also supply client certificates when
        challenged by the server.</para>
-->
      <para>Si un client Subversion est compilé pour l'utilisation de
        SSL, il peut alors se connecter au serveur Apache en utilisant
        des URL de type <literal>https://</literal>, ce qui chiffrera
        tout le trafic avec une clé de session propre à chaque
        connexion. La bibliothèque WebDAV utilisée par le client
        Subversion n'est pas seulement capable de vérifier le certificat
        présenté par le serveur mais peut aussi utiliser des
        certificats clients au cas où le serveur le demande.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.ssl.server">
<!--
        <title>Subversion server SSL certificate configuration</title>
-->
        <title>Configuration du certificat serveur SSL de
          Subversion</title>

<!--
        <para>It's beyond the scope of this book to describe how to
          generate client and server SSL certificates and how to
          configure Apache to use them.  Many other references,
          including Apache's own documentation (<ulink
          url="http://httpd.apache.org/docs/current/ssl/"/>),
          describe the process.</para>
-->
        <para>La création de certificats SSL clients et serveurs ainsi
          que la configuration d'Apache pour les utiliser sort du cadre
          de ce livre. Il existe beaucoup de références, y compris la
          propre documentation d'Apache (<ulink
          url="http://httpd.apache.org/docs/current/ssl/"/>),
          qui décrivent comment faire.</para>

        <tip>
<!--
          <para>SSL certificates from well-known entities generally
            cost money, but at a bare minimum, you can configure
            Apache to use a self-signed certificate generated with a
            tool such as OpenSSL (<ulink url="http://openssl.org"
            />).<footnote><para>While self-signed certificates are
            still vulnerable to a <quote>man-in-the-middle</quote>
            attack (before a client sees the certificate for the first
            time), such an attack is much more difficult for a casual
            observer to pull off, compared to sniffing unprotected
            passwords.</para></footnote></para>
-->
          <para>Les certificats SSL produits par des sociétés bien
            connues sont généralement payants mais vous pouvez, au
            minimum, configurer Apache pour utiliser un certificat
            auto-signé qui a été généré avec, par exemple, OpenSSL
            (<ulink url="http://openssl.org"
            />).<footnote><para>Bien que les certificats auto-signés
            sont vulnérables à une attaque dite
            <quote>Man-in-the-Middle</quote> (homme du milieu en anglais)
            au moment où le client voit le certificat pour la première
            fois, une telle attaque reste beaucoup plus complexe à
            mettre en œuvre lors d'une écoute occasionnelle que le
            simple fait de récupérer des mots de passe qui passent en
            clair.</para></footnote></para>
        </tip>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.ssl.client">
<!--
        <title>Subversion client SSL certificate management</title>
-->
        <title>Gestion des certificats clients SSL Subversion</title>

<!--
        <para>When connecting to Apache via <literal>https://</literal>,
          a Subversion client can receive two different types of
          responses:</para>
-->
        <para>Quand il se connecte à une serveur Apache en
          <literal>https://</literal>, un client Subversion peut
          recevoir deux types de réponse&nbsp;:</para>

        <itemizedlist>
          <listitem>
<!--
            <para>A server certificate</para>
-->
            <para>un certificat serveur&nbsp;;</para>
          </listitem>
          <listitem>
<!--
            <para>A challenge for a client certificate</para>
-->
            <para>un défi pour un certificat client.</para>
          </listitem>
        </itemizedlist>

        <sect4 id="svn.serverconfig.httpd.ssl.client.servercert">
<!--
          <title>Server certificate</title>
-->
          <title>Certificat serveur</title>

<!--
          <para>When the client receives a server certificate, it needs
            to verify that the server is who it claims to be. OpenSSL
            does this by examining the signer of the server certificate,
            or <firstterm>certificate authority</firstterm> (CA).  If
            OpenSSL is unable to automatically trust the CA, or if some
            other problem occurs (such as an expired certificate or
            hostname mismatch), the Subversion command-line client will
            ask you whether you want to trust the server certificate
            anyway:</para>
-->
          <para>Quand le client reçoit un certificat serveur, il doit
            vérifier que le serveur est bien celui qu'il prétend être.
            OpenSSL réalise cette tâche en examinant le signataire du
            certificat serveur, appelé <firstterm>autorité de
            certification</firstterm> (AC en français, CA pour
            <foreignphrase>certificat authority</foreignphrase> en
            anglais). Si OpenSSL ne fait pas confiance à cette AC, ou
            si un autre problème apparaît (tel qu'un certificat ayant
            expiré ou alors le nom de la machine qui ne correspond pas
            à ce qui est indiqué dans le certificat), le client texte
            interactif Subversion vous demande si vous voulez quand
            même faire confiance à ce certificat serveur&nbsp;:</para>

<!--
          <informalexample>
            <screen>
$ svn list https://host.example.com/repos/project

Error validating server certificate for 'https://host.example.com:443':
 - The certificate is not issued by a trusted authority.  Use the
   fingerprint to validate the certificate manually!
Certificate information:
 - Hostname: host.example.com
 - Valid: from Jan 30 19:23:56 2004 GMT until Jan 30 19:23:56 2006 GMT
 - Issuer: CA, example.com, Sometown, California, US
 - Fingerprint: 7d:e1:a9:34:33:39:ba:6a:e9:a5:c4:22:98:7b:76:5c:92:a0:9c:7b

(R)eject, accept (t)emporarily or accept (p)ermanently?
</screen>
          </informalexample>
-->
          <informalexample>
            <screen>
$ svn list https://hote.exemple.com/depot/projet

Error validating server certificate for 'https://hote.exemple.com:443':
 - The certificate is not issued by a trusted authority.  Use the
   fingerprint to validate the certificate manually!
Certificate information:
 - Hostname: hote.exemple.com
 - Valid: from Jan 30 19:23:56 2004 GMT until Jan 30 19:23:56 2006 GMT
 - Issuer: CA, exemple.com, Sometown, California, US
 - Fingerprint: 7d:e1:a9:34:33:39:ba:6a:e9:a5:c4:22:98:7b:76:5c:92:a0:9c:7b

(R)eject, accept (t)emporarily or accept (p)ermanently?
</screen>
          </informalexample>

<!--
          <para>This dialogue is essentially the same question you may
            have seen coming from your web browser (which is just
            another HTTP client like Subversion).  If you choose the
            <literal>(p)</literal>ermanent option, Subversion will
            cache the server certificate in your private runtime
            <filename>auth/</filename> area, just as your username and
            password are cached (see <xref
            linkend="svn.serverconfig.netmodel.credcache"/>), and will
            automatically trust the certificate in the future.</para>
-->
          <para>Vous pourriez voir cette même question dans votre
            navigateur (car c'est aussi un client HTTP tout comme
            Subversion). Si vous choisissez l'option
            <literal>(p)</literal>permanent, Subversion placera le
            certificat serveur en cache dans votre zone privée de
            configuration (dossier <filename>auth/</filename>) ainsi que
            votre nom d'utilisateur et votre mot de passe (voir
            <xref linkend="svn.serverconfig.netmodel.creds"/>). Il fera
            alors automatiquement confiance au certificat dans le
            futur.</para>

<!--
          <para>Your runtime <filename>servers</filename> file also gives
            you the ability to make your Subversion client automatically
            trust specific CAs, either globally or on a per-host basis.
            Simply set the <literal>ssl-authority-files</literal>
            variable to a semicolon-separated list of PEM-encoded CA
            certificates:</para>
-->
          <para>Votre fichier <filename>servers</filename> de la zone de
            configuration vous permet aussi de spécifier des AC de
            confiance, que ce soit globalement ou hôte par hôte.
            Affectez simplement une liste (dont les éléments sont
            séparés par des points-virgules) de chemins vers des
            certificats d'AC encodés au format PEM à la variable
            <literal>ssl-authority-files</literal>&nbsp;:</para>

          <informalexample>
            <programlisting>
[global]<!--
ssl-authority-files = /path/to/CAcert1.pem;/path/to/CAcert2.pem -->
ssl-authority-files = /chemin/vers/certificat-AC1.pem;/chemin/vers/certificat-AC2.pem
</programlisting>
          </informalexample>

<!--
          <para>Many OpenSSL installations also have a predefined set
            of <quote>default</quote> CAs that are nearly universally
            trusted.  To make the Subversion client automatically trust
            these standard authorities, set the
            <literal>ssl-trust-default-ca</literal> variable to
            <literal>true</literal>.</para>
-->
          <para>Beaucoup d'installations d'OpenSSL sont fournies avec
            une liste d'autorités <quote>universellement de
            confiance</quote>. Pour que le client Subversion fasse
            confiance à ces autorités, affectez la valeur
            <literal>true</literal> à la variable
            <literal>ssl-trust-default-ca</literal> .</para>

        </sect4>

        <sect4 id="svn.serverconfig.httpd.ssl.client.clientcert">
<!--
          <title>Client certificate challenge</title>

-->
          <title>Défi pour le certificat client</title>
<!--
          <para>If the client receives a challenge for a certificate,
            the server is asking the client to prove its identity.
            The client must send back a certificate signed by a CA
            that the server trusts, along with a <firstterm>challenge
            response</firstterm> which proves that the client owns the
            private key associated with the certificate.  The private
            key and certificate are usually stored in an encrypted
            format on disk, protected by a passphrase.  When Subversion
            receives this challenge, it will ask you for the path to the
            encrypted file and the passphrase that protects it:</para>
-->
          <para>Quand le client reçoit un défi d'authentification, cela
            veut dire que le serveur demande au client de prouver son
            identité. Le client doit renvoyer un certificat signé par
            une AC qui a la confiance du serveur ainsi qu'une
            <firstterm>réponse de défi</firstterm>
            (<foreignphrase>Challenge Response</foreignphrase> en
            anglais) qui prouve que le client possède la clé privée
            associée au certificat. La clé privée et le certificat sont
            généralement stockés à l'intérieur d'un conteneur chiffré
            sur le disque et sont protégés par une phrase de passe.
            Quand Subversion reçoit le défi, il vous demande le chemin
            vers le conteneur et la phrase de passe qui protège son
            accès&nbsp;:</para>

<!--
          <informalexample>
            <screen>
$ svn list https://host.example.com/repos/project

Authentication realm: https://host.example.com:443
Client certificate filename: /path/to/my/cert.p12
Passphrase for '/path/to/my/cert.p12':  ********
</screen>
          </informalexample>
-->
          <informalexample>
            <screen>
$ svn list https://hote.exemple.com/depot/projet

Authentication realm: https://hote.exemple.com:443
Client certificate filename: /chemin/vers/mon/conteneur.p12
Passphrase for '/chemin/vers/mon/conteneur.p12':  ********
</screen>
          </informalexample>

<!--
          <para>Notice that the client credentials are stored in a
            <literal>.p12</literal> file.  To use a client certificate
            with Subversion, it must be in PKCS#12 format, which is a
            portable standard.  Most web browsers are able to import
            and export certificates in that format.  Another option
            is to use the OpenSSL command-line tools to convert
            existing certificates into PKCS#12.</para>
-->
          <para>Notez que les éléments d'authentification du client sont
            stockés dans un conteneur dont l'extension est
            <literal>.p12</literal>. Pour utiliser un certificat client
            avec Subversion, il doit être au format PKCS#12, ce qui est
            un standard. La plupart des navigateurs Web savent importer
            et exporter des certificats dans ce format. Une autre
            possibilité est d'utiliser les utilitaires en ligne de
            commande d'OpenSSL pour convertir des certificats existants
            au format PKCS#12.</para>

<!--
          <para>The runtime <filename>servers</filename> file also
            allows you to automate this challenge on a per-host basis.
            If you set the <literal>ssl-client-cert-file</literal>
            and <literal>ssl-client-cert-password</literal> variables,
            Subversion can automatically respond to a client
            certificate challenge without prompting you:</para>
-->
          <para>Le fichier <filename>servers</filename> de la zone de
            configuration vous permet d'automatiser la phase de défi
            pour les hôtes que vous spécifiez. Si vous définissez les
            variables <literal>ssl-client-cert-file</literal> et
            <literal>ssl-client-cert-password</literal>, Subversion
            répond automatiquement aux défis demandés par les serveurs
            sans vous solliciter&nbsp;:</para>

          <informalexample>
            <programlisting>
[groups]<!--
examplehost = host.example.com

[examplehost]
ssl-client-cert-file = /path/to/my/cert.p12
ssl-client-cert-password = somepassword -->

serveur_exemple = hote.exemple.com

[serveur_exemple]
ssl-client-cert-file = /chemin/vers/mon/conteneur.p12
ssl-client-cert-password = maphrasedepasseestlongue

</programlisting>
          </informalexample>

<!--
          <para>More security-conscious folk might want to exclude
            <literal>ssl-client-cert-password</literal> to avoid
            storing the passphrase in the clear on disk.</para>
-->
          <para>Les plus exigeants en matière de sécurité interdiront
            l'affectation des phrases de passe dans la
            variable <literal>ssl-client-cert-password</literal> car
            celles-ci sont alors stockées en clair sur le disque.</para>

        </sect4>
      </sect3>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.httpd.perf">
<!--
      <title>Tuning for Performance</title>
-->
      <title>Amélioration des performances</title>

<!--
      <para>The Apache HTTP Server is built for performance, but you
        can improve upon its default configuration to get even better
        results out of your Subversion service offering.  In this
        section, we'll recommend some specific configuration changes
        to consider.  Understand, however, that some of
        the <filename>httpd.conf</filename> configuration options
        we'll be discussing herein affect the general behavior of your
        server, not merely the Subversion service.  As such, you need
        to consider the full breadth of your HTTP service offering to
        discern how modifications to these settings for Subversion's
        sake may affect your other services.</para>
-->
      <para>Le serveur HTTP Apache a été conçu pour être performant
        mais vous pouvez modifier la configuration par défaut pour
        gagner encore en performances pour votre service Subversion.
        Dans cette section, nous allons vous proposer quelques
        modifications de configuration de
        <filename>httpd.conf</filename>. Comprenez cependant que
        certaines des modifications proposées affectent le comportement
        général du serveur, et pas seulement le service Subversion.
        Ainsi, vous devez prendre en compte l'ensemble de ces services
        pour décider s'il est opportun d'effectuer ou non les
        modifications proposées.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.perf.keepalive">
        <title>KeepAlive</title>

<!--
        <para>By default, the Apache HTTP Server is configured to
          enable the re-use of a single server connection for multiple
          requests.  That's very beneficial for Subversion, because
          unlike many HTTP-based applications, Subversion can very
          quickly generate hundreds or thousands of requests against
          the server for a single operation, and the cost of opening a
          new connection to the server is non-trivial.  Subversion
          wants to squeeze as many requests as possible out of a
          single connection before that connection is terminated by
          the server.  The <literal>KeepAlive</literal> directive is the
          boolean flag which enables or disables this connection
          re-use facility, and as we indicated previously, by default
          its value is <literal>On</literal>.</para>
-->
        <para>Par défaut, le serveur HTTP Apache est configuré pour
          autoriser la réutilisation d'une même connexion serveur par
          plusieurs requêtes client. C'est particulièrement avantageux
          pour Subversion car, au contraire de beaucoup d'applications
          sur HTTP, Subversion peut générer très rapidement des
          centaines voire des milliers de requêtes vers un serveur pour
          une seule opération et le coût d'ouvrir une nouvelle connexion
          vers un serveur n'est pas négligeable. Subversion veut faire
          rentrer le maximum de requêtes dans une seule connexion avant
          que celle-ci ne soit fermée par le serveur. La directive
          <literal>KeepAlive</literal> est un booléen qui active ou
          désactive cette réutilisation de connexion et, comme indiqué
          précédemment, sa valeur par défaut est
          <literal>On</literal>.</para>

<!--
        <para>But there's another directive which limits the number of
          requests a client is allowed to submit on a single
          connection:  the <literal>MaxKeepAliveRequests</literal>
          directive.  The default value for that option
          is <literal>100</literal>.  This was probably sufficient for
          older versions of Subversion, but Subversion 1.8 employs a
          different HTTP communications library (called Serf) which
          prefers to pipeline several smaller requests for specific bits
          of information rather than asking the server to transmit
          huge chunks of data in a single response.  We recommend that
          you increase the value of the
          <literal>MaxKeepAliveRequests</literal> option
          to at least <literal>1000</literal>.</para>
-->
        <para>Mais il existe une autre directive qui limite le nombre
          de requêtes qu'un client peut soumettre sur une seule
          connexion&nbsp;: la directive
          <literal>MaxKeepAliveRequests</literal>. La valeur par défaut
          pour cette option est <literal>100</literal>. C'était
          probablement suffisant pour les vieilles versions de
          Subversion, mais Subversion 1.8 utilise une bibliothèque de
          communication différente (appelée Serf) qui préfère lancer
          plusieurs petites requêtes pour récupérer des informations
          bien précises plutôt que de demander au serveur de transmettre
          d'énormes quantités de données en une seule réponse. Nous vous
          recommandons d'augmenter la valeur affectée à l'option
          <literal>MaxKeepAliveRequests</literal> à au moins
          <literal>1000</literal>.</para>

        <informalexample>
<!--
          <programlisting>
#
# KeepAlive: Whether or not to allow persistent connections (more than
# one request per connection). Set to "Off" to deactivate.
#
KeepAlive On

#
# MaxKeepAliveRequests: The maximum number of requests to allow
# during a persistent connection. Set to 0 to allow an unlimited amount.
# We recommend you leave this number high, for maximum performance.
#
MaxKeepAliveRequests 1000
</programlisting>
-->
          <programlisting>
#
# KeepAlive: autoriser ou pas les connexions persistantes (plus d'une
# requête par connexion). Mettre la valeur "Off" pour la désactiver.
#
KeepAlive On

#
# MaxKeepAliveRequests: nombre maximum de requêtes autorisées pour une
# connexion persistante. Mettre à 0 pour autoriser un nombre illimité.
# Nous recommandons de laisser ce nombre élevé pour améliorer les
# performances.
#
MaxKeepAliveRequests 1000
</programlisting>
        </informalexample>
      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.perf.bulk-updates">
<!--
        <title>Bulk updates</title>
-->
        <title>Mises à jour groupées</title>

<!--
        <para>The biggest difference between the way that Subversion
          1.8 clients and pre-1.8 clients behave is in how update-style
          operations (<command>svn checkout</command>, <command>svn
          update</command>, <command>svn switch</command>, etc.) are
          handled.  Older clients which used the Neon HTTP library for
          communications preferred to ask the server for the entire
          payload of information required from the server in a single
          request.  Admins will have noticed that in their server
          logs, there would be some initial handshaking operations,
          and then a <literal>REPORT</literal> request with a massive
          response.  That response was the entire checkout/update
          dataset!</para>
-->
        <para>La plus grosse différence entre le client Subversion 1.8
          et ses prédécesseurs concerne la manière dont il effectue les
          opérations de mises à jour  (<command>svn checkout</command>,
          <command>svn update</command>, <command>svn switch</command>,
          etc.). Les vieux clients, qui utilisaient la bibliothèque HTTP
          Neon pour les communications, préféraient demander au serveur
          l'ensemble des informations dans une seule requête. Les
          administrateurs pouvaient alors voir, dans les journaux de
          connexions du serveur, la négociation initiale de la
          transaction puis une requête <literal>REPORT</literal> dont la
          réponse était énorme. Cette réponse contenait l'extraction ou
          la mise à jour dans son ensemble&nbsp;!</para>

<!--
        <para>Subversion clients which use the Serf HTTP
          library&mdash;which includes all clients built atop the
          Subversion 1.8&mdash;still send the <literal>REPORT</literal>
          request, but with slightly different flags set inside that
          request.  These flags ask the server not to send all the
          data for the operation, but to instead send only a checklist
          of other more specific things that the client needs to
          subsequently fetch from the server in order to complete that
          operation.  In the server's <filename>access_log</filename>,
          that <literal>REPORT</literal> is followed by many smaller
          requests (<literal>GET</literal>s and, in older versions of
          Subversion, <literal>PROPFIND</literal>s).</para>
-->
        <para>Les clients Subversion qui utilisent la bibliothèque HTTP
          Serf (ce qui inclut tous les clients basés sur Subversion 1.8)
          envoient toujours la requête <literal>REPORT</literal> mais
          avec des paramètres légèrement différents. Ces paramètres ne
          demandent pas au serveur d'envoyer toutes les données
          relatives à l'opération mais d'envoyer seulement une liste de
          vérifications des choses spécifiques que le client devra
          récupérer auprès du serveur pour accomplir l'opération. Dans
          le journal <filename>access_log</filename> du serveur, la
          ligne <literal>REPORT</literal> est suivie par beaucoup de
          petites requêtes (<literal>GET</literal> et, pour les vieilles
          versions de Subversion, <literal>PROPFIND</literal>).</para>

<!--
        <para>There are pros and cons to each approach.  As we've
          mentioned, the so-called bulk updates generate considerably
          less information in the server logs, but a given Apache HTTP
          Server child process is completely consumed for the duration
          of what could be a lengthy operation.  Non-bulk updates
          offer opportunities for setting up content caches (which
          themselves can improve performance), but generate server log
          traffic which is whole orders of magnitude larger than the
          bulk update approach.  So, for one reason or another,
          administrators may desire to exert a little more control
          over which approach the clients use.  Subversion 1.6
          introduced the <literal>SVNAllowBulkUpdates</literal>
          <command>mod_dav_svn</command> directive&mdash;a simple
          boolean flag&mdash;to allow admins to specify whether the
          server was allowed to honor bulk update requests.  In
          Subversion 1.8, this directive has expanded to include
          a <literal>Prefer</literal> value in addition to the
          <literal>On</literal> and <literal>Off</literal> values it
          already supported. When <literal>SVNAllowBulkUpdates</literal>
          is set to <literal>Prefer</literal>, supporting clients (1.8
          or newer) will try to use the bulk update approach unless
          otherwise configured.</para>
-->
        <para>Chacune des deux approches a ses avantages et ses
          inconvénients. Comme nous l'avons déjà mentionné, les mises à
          jour groupées (<foreignphrase>bulk updates</foreignphrase> en
          anglais) produisent beaucoup moins de lignes dans les journaux
          du serveur mais un processus fils du serveur Apache HTTP est
          entièrement dédié à cette opération, qui peut se révéler
          particulièrement longue, jusqu'à sa fin. Les mises à jour
          par petites touches permettent de mettre en place des caches
          (ce qui contribuera à améliorer les performances) mais vont
          générer dans les journaux un nombre de lignes sans commune
          mesure avec l'approche par mises à jour groupées. En
          conséquence, les administrateurs auront leur mot à dire sur la
          méthode utilisée par les clients pour se mettre à jour.
          Subversion 1.6 a ainsi introduit la directive
          <literal>SVNAllowBulkUpdates</literal> de
          <command>mod_dav_svn</command>&nbsp;: un simple booléen pour
          laisser aux administrateurs le choix de spécifier si le
          serveur accepte les requêtes de mises à jour groupées. Avec
          Subversion 1.8, cette directive s'est complétée avec la
          possibilité d'indiquer <literal>Prefer</literal> en plus de
          <literal>On</literal> et <literal>Off</literal>. Quand
          <literal>SVNAllowBulkUpdates</literal> vaut
          <literal>Prefer</literal>, les clients qui reconnaissent cette
          option (c'est-à-dire les versions 1.8 ou plus récentes)
          tenteront des mises à jour groupées à moins d'avoir été
          configurés autrement.</para>

      </sect3>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.httpd.extra">
<!--
      <title>Extra Goodies</title>
-->
      <title>Fonctionnalités bonus</title>

<!--
      <para>We've covered most of the authentication and authorization
        options for Apache and <command>mod_dav_svn</command>.  But
        there are a few other nice features that Apache
        provides.</para>
-->
      <para>Nous avons couvert la plupart des options d'authentification
        et de contrôle d'accès pour Apache et
        <command>mod_dav_svn</command>. Mais il existe encore quelques
        autres directives d'Apache qui méritent d'être abordées.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.extra.browsing">
<!--
        <title>Repository browsing</title>
-->
        <title>Navigation dans les dépôts</title>

<!--
        <para>One of the most useful benefits of an Apache/WebDAV
          configuration for your Subversion repository is that your
          versioned files and directories are immediately available
          for viewing via a regular web browser.  Since Subversion
          uses URLs to identify versioned resources, those URLs used
          for HTTP-based repository access can be typed directly into
          a web browser.  Your browser will issue an
          HTTP <literal>GET</literal> request for that URL; based on
          whether that URL represents a versioned directory or
          file, <command>mod_dav_svn</command> will respond with a
          directory listing or with file contents.</para>
-->
        <para>Un des avantages les plus frappants d'avoir une
          configuration Apache/WebDAV pour votre dépôt Subversion est
          que les révisions les plus récentes de vos fichiers et
          répertoires suivis en versions sont immédiatement consultables
          à l'aide d'un navigateur web classique. Puisque Subversion
          utilise des URL pour identifier les ressources suivies en
          versions, ces URL utilisées pour accéder aux dépôts
          <foreignphrase>via</foreignphrase> HTTP peuvent être tapées
          directement dans un navigateur web. Votre navigateur enverra
          une requête <literal>HTTP GET</literal> pour cette URL&nbsp;;
          selon que cette URL représente ou non un fichier ou un
          répertoire suivi en versions, <command>mod_dav_svn</command>
          renverra soit la liste des éléments du répertoire, soit le
          contenu du fichier.</para>

        <sect4 id="svn.serverconfig.httpd.extra.browsing.syntax">
<!--
          <title>URL syntax</title>

-->
          <title>Syntaxe des URL</title>
<!--
          <para>If the URLs do not contain any information about which
            version of the resource you wish to
            see, <command>mod_dav_svn</command> will answer with the
            youngest version.  This functionality has the wonderful
            side effect that you can pass around Subversion URLs to
            your peers as references to documents, and those URLs will
            always point at the latest manifestation of that document.
            Of course, you can even use the URLs as hyperlinks from
            other web sites, too.</para>
-->
          <para>Comme les URL ne contiennent pas d'informations
            relatives à la version de la ressource qui vous intéresse,
            <command>mod_dav_svn</command> renverra toujours la version
            la plus récente. Cette fonctionnalité a un merveilleux effet
            secondaire&nbsp;: vous pouvez partager avec vos pairs des
            URL&nbsp;Subversion en guise de références à des documents
            et ces URL pointeront toujours vers la dernière version des
            documents. Bien sûr, vous pouvez aussi utiliser ces URL en
            tant que liens hypertextes dans d'autres sites web.</para>

<!--
          <para>As of Subversion 1.6, <command>mod_dav_svn</command>
            supports a public URI syntax for examining older revisions
            of both files and directories.  The syntax uses the query
            string portion of the URL to specify either or both of a
            peg revision and operative revision, which Subversion will
            then use to determine which version of the file or
            directory to display to your web browser.  Add the query
            string name/value pair
            <literal>p=<replaceable>PEGREV</replaceable></literal>,
            where <replaceable>PEGREV</replaceable> is a revision
            number, to specify the peg revision you wish to apply to the
            request.  Use
            <literal>r=<replaceable>REV</replaceable></literal>,
            where <replaceable>REV</replaceable> is a revision number, to
            specify an operative revision.</para>
-->
          <para>Depuis Subversion 1.6, <command>mod_dav_svn</command>
            reconnait une syntaxe d'URI particulière pour examiner les
            vieilles révisions des fichiers et des répertoires. Cette
            syntaxe utilise la partie <quote>requête</quote> de l'URL
            pour spécifier une révision pivot ou une révision
            opérationnelle. Subversion utilisera ces arguments pour
            déterminer la version du fichier ou du répertoire que vous
            voulez afficher dans votre navigateur. Ajoutez la paire
            <literal>p=<replaceable>REV_PIVOT</replaceable></literal>,
            où <replaceable>REV_PIVOT</replaceable> est un numéro
            de révision, pour spécifier la révision pivot que vous
            souhaitez appliquer à la requête. Utilisez
            <literal>r=<replaceable>REV</replaceable></literal>, où
            <replaceable>REV</replaceable> est un numéro de révision,
            pour spécifier une révision opérationnelle.</para>

<!--
          <para>For example, if you wish to see the latest version of a
            <filename>README.txt</filename> file located in your
            project's <filename>/trunk</filename>, point your web
            browser to that file's repository URL, which might look
            something like the following:</para>
-->
          <para>Par exemple, si vous voulez voir la dernière version du
            fichier <filename>LISEZMOI.txt</filename> situé dans
            <filename>/trunk</filename> de votre projet, faites pointer
            votre navigateur vers l'URL de ce fichier, qui devrait
            ressembler à quelque chose comme ceci&nbsp;:</para>

          <informalexample>
            <programlisting><!--
http://host.example.com/repos/project/trunk/README.txt-->
http://hote.exemple.com/depot/projet/trunk/LISEZMOI.txt
</programlisting>
          </informalexample>

<!--
          <para>If you now wish to see some older version of that
            file, add an operative revision to the URL's query
            string:</para>
-->
          <para>Si vous voulez voir une version plus ancienne de ce
          fichier, ajouter une révision opérationnelle à l'URL:</para>

          <informalexample>
            <programlisting><!--
http://host.example.com/repos/project/trunk/README.txt?r=1234 -->
http://hote.exemple.com/depot/projet/trunk/LISEZMOI.txt?r=1234
</programlisting>
          </informalexample>

<!--
          <para>What if the thing you're trying to view no longer exists
            in the youngest revision of the repository?  That's where a
            peg revision is handy:</para>
-->
          <para>Que se passe-t-il si ce que vous voulez voir n'existe
            plus dans la révision la plus récente du dépôt&nbsp;? C'est
            maintenant qu'une révision pivot est utile&nbsp;:</para>

          <informalexample>
            <programlisting><!--
http://host.example.com/repos/project/trunk/deleted-thing.txt?p=321-->
http://hote.exemple.com/depot/projet/trunk/LISEZMOI.txt?p=321
</programlisting>
          </informalexample>

<!--
          <para>And of course, you can combine peg revision and
            operative revision specifiers to fine-tune the exact item
            you wish to view:</para>
-->
          <para>Et bien sûr, vous pouvez combiner une révision pivot et
            une révision opérationnelle pour dénicher l'élément précis
            que vous souhaitez voir&nbsp;:</para>

          <informalexample>
            <programlisting><!--
http://host.example.com/repos/project/trunk/renamed-thing.txt?p=123&amp;r=21-->
http://hote.exemple.com/depot/projet/trunk/LISEZMOI.txt?p=123&amp;r=21
</programlisting>
          </informalexample>

<!--
          <para>The previous URL would display revision 21 of the
            object which, in revision 123, was located
            at <filename>/trunk/renamed-thing.txt</filename> in the
            repository.  See <xref linkend="svn.advanced.pegrevs" /> for a
            detailed explanation of these <quote>peg revision</quote>
            and <quote>operative revision</quote> concepts.  They can
            be a bit tricky to wrap your head around.</para>
-->
          <para>L'URL ci-dessus affichera la révision 21 de l'objet qui,
            dans la révision 123, se trouvait à
            <filename>/trunk/chose-renommée.txt</filename> dans le
            dépôt. Reportez-vous à <xref linkend="svn.advanced.pegrevs"
            /> pour une explication détaillée des concepts de
            <quote>révision pivot</quote> et <quote>révision
            opérationnelle</quote>,  ils peuvent être relativement
            difficiles à appréhender.</para>

<!--
          <para>Beginning with Subversion 1.8, <command>mod_dav_svn</command>
            has the ability to substitute keywords.  When
            <command>mod_dav_svn</command>
            finds the query argument <literal>kw=1</literal> added to
            the URL of a file, it will expand keywords when delivering
            the file's content.  Omitting the <literal>kw</literal>
            parameter or using any value besides <literal>1</literal>
            for that parameter will cause Subversion to use its
            default behavior, which is to deliver the file's content
            without any keywords expanded.</para>
-->
          <para>À partir de Subversion 1.8,
            <command>mod_dav_svn</command> a acquis la capacité de
            substituer des mots-clés. Quand
            <command>mod_dav_svn</command> trouve dans l'URL de la
            requête un argument <literal>kw=1</literal>, il substitue
            les mots-clés au moment de renvoyer la réponse. Ne pas
            spécifier de paramètre <literal>kw</literal> ou lui affecter
            une valeur autre que <literal>1</literal> entraine le
            comportement par défaut, c'est-à-dire renvoyer le
            contenu du fichier sans avoir substitué les
            mots-clés.</para>

<!--
          <para>Because keyword substitution is typically performed by the
            Subversion client as part of its working copy administration
            and management, this is a handy way to get the server to deliver
            a keyword-expanded form of your versioned file without the use
            of a working copy.</para>
-->
          <para>Puisque la substitution des mots-clés est typiquement
            une opération réalisée par le client Subversion, dans le
            cadre de l'administration et la gestion des copies de
            travail, ce moyen de substituer les mots-clés par le serveur
            trouve toute son utilité  dans le cas où vous n'utilisez pas
            de copie de travail.</para>

<!--
          <para>For example, if you wish to see the latest version of a
            <filename>README.txt</filename> file located in your
            project's <filename>/trunk</filename> with keywords
            expanded, add the query argument <literal>kw=1</literal> to the
            URL:</para>
-->
          <para>Par exemple, si vous souhaitez voir la dernière version
            du fichier <filename>LISEZMOI.txt</filename> situé dans
            <filename>/trunk</filename> avec les mots-clés substitués,
            ajoutez l'argument <literal>kw=1</literal> dans l'URL de
            votre requête&nbsp;:</para>

          <informalexample>
            <programlisting><!--
http://host.example.com/repos/project/trunk/README.txt?kw=1-->
http://hote.exemple.com/depot/projet/trunk/LISEZMOI.txt?kw=1
</programlisting>
          </informalexample>

<!--
          <para>As with client-side keyword expansion, only those keywords
            which are explicitly designated for expansion via the
            <literal>svn:keywords</literal> property set on the file itself
            will be expanded.  See
            <xref linkend="svn.advanced.props.special.keywords" /> for a
            detailed description of the keyword substitution feature.</para>
-->
          <para>À l'instar de l'opération côté client, seuls les
            mots-clés qui sont explicitement désignés
            <foreignphrase>via</foreignphrase> la propriété
            <literal>svn:keywords</literal> du fichier concerné seront
            substitués. Lisez <xref
            linkend="svn.advanced.props.special.keywords" /> pour une
            description détaillée de la substitution de
            mots-clés.</para>

<!--
          <para>As a reminder, <command>mod_dav_svn</command> offers only a
            limited repository browsing experience.  You can see directory
            listings and file contents, but no revision properties
            (such as commit log messages) or file/directory
            properties.  For folks who require more extensive browsing
            of repositories and their history, there are several
            third-party software packages which offer this.  Some
            examples include ViewVC (<ulink url="http://viewvc.org" />),
            Trac (<ulink url="http://trac.edgewall.org" />) and WebSVN
            (<ulink url="http://websvnphp.github.io" />).  These third-party
            tools don't affect <command>mod_dav_svn</command>'s
            built-in <quote>browseability</quote>, and generally offer
            a much wider set of features, including the display of the
            aforementioned property sets, display of content
            differences between file revisions, and so on.</para>
-->
          <para>Pour mémoire, <command>mod_dav_svn</command> n'offre
            qu'une capacité réduite de navigation dans le dépot. Vous
            pouvez visualiser la liste des fichiers d'un répertoire et
            le contenu des fichiers mais pas les propriétés de révision
            (telles que les commentaires de propagation) ou les propriétés
            des fichiers et répertoires. Pour ceux qui ont besoin de
            naviguer plus finement dans les dépôts et leurs historiques,
            un certain nombre de logiciels tiers répondent présent. Par
            exemple, nous pouvons citer ViewVC (<ulink
            url="http://viewvc.org"/>), Trac (<ulink
            url="http://trac.edgewall.org"/>) et WebSVN (<ulink
            url="http://websvnphp.github.io" />). Ces outils tiers ne touchent
            pas à la <quote>navigabilité</quote> native offerte par
            <command>mod_dav_svn</command> et proposent généralement
            tout un tas de fonctionnalités supplémentaires, y compris
            l'affichage des propriétés comme mentionné, l'affichage des
            différences entre plusieurs révisions, etc.</para>

        </sect4>

        <sect4 id="svn.serverconfig.httpd.extra.browsing.mimetype">
<!--
          <title>Proper MIME type</title>
-->
          <title>Types MIME appropriés</title>

<!--
          <para>When browsing a Subversion repository, the web browser
            gets a clue about how to render a file's contents by
            looking at the <literal>Content-Type:</literal> header
            returned in Apache's response to the
            HTTP <literal>GET</literal> request.  The value of this
            header is some sort of MIME type.  By default, Apache will
            tell the web browsers that all repository files are of
            the <quote>default</quote> MIME type,
            typically <literal>text/plain</literal>.  This can be
            frustrating, however, if a user wishes repository files to
            render as something more meaningful&mdash;for example,
            it might be nice to have a <filename>foo.html</filename> file
            in the repository actually render as HTML when
            browsing.</para>
-->
          <para>Quand il consulte un dépôt Subversion, le navigateur web
            obtient un indice pour savoir comment rendre le contenu d'un
            fichier en examinant l'entête
            <literal>Content-Type:</literal> qui fait partie de la
            réponse envoyée par Apache à la requête HTTP
            <literal>GET</literal>. La valeur de cet entête est en
            quelque sorte un type MIME. Par défaut, Apache va indiquer
            aux navigateurs web que tous les fichiers du dépôt sont du
            type MIME par défaut, en général
            <literal>text/plain</literal>. Cela peut s'avérer assez
            frustrant, si un utilisateur désire visualiser les fichiers
            du dépôt de manière plus appropriée &mdash; par exemple, un
            fichier <filename>truc.html</filename> du dépôt sera bien
            plus lisible s'il est rendu dans le navigateur en tant que
            fichier HTML.</para>

<!--
          <para>To make this happen, you need only to make sure that
            your files have the proper <literal>svn:mime-type</literal>
            set.  We discuss this in more detail in
            <xref linkend="svn.advanced.props.special.mime-type"/>,
            and you can even configure your client to automatically
            attach proper <literal>svn:mime-type</literal> properties
            to files entering the repository for the first time; see
            <xref linkend="svn.advanced.props.auto"/>.</para>
-->
          <para>Pour rendre ceci possible, il suffit de vous assurer que
            vos fichiers portent bien la propriété
            <literal>svn:mime-type</literal>. Plus de détails sur ce
            sujet sont disponibles dans <xref
            linkend="svn.advanced.props.special.mime-type"/> et vous
            pouvez même configurer votre dépôt pour qu'il associe
            automatiquement la valeur de
            <literal>svn:mime-type</literal> appropriée aux fichiers qui
            arrivent dans le dépôt pour la première fois&nbsp;;
            reportez-vous à <xref
            linkend="svn.advanced.props.auto"/>.</para>

<!--
          <para>Continuing our example, if one were to set
            the <literal>svn:mime-type</literal> property
            to <literal>text/html</literal> on
            file <filename>foo.html</filename>, Apache would properly
            tell your web browser to render the file as HTML.  One
            could also attach proper <literal>image/*</literal>
            MIME-type properties to image files and ultimately get an
            entire web site to be viewable directly from a repository!
            There's generally no problem with this, as long as the web
            site doesn't contain any dynamically generated
            content.</para>

-->
          <para>Donc, dans notre exemple, si quelqu'un attribuait la
            valeur <literal>text/html</literal> à la propriété
            <literal>svn:mime-type</literal> du fichier
            <filename>truc.html</filename>, Apache indiquerait avec
            raison à votre navigateur web de rendre le fichier comme
            une page HTML. On pourrait aussi associer des propriétés
            ayant des valeurs <literal>image/*</literal> appropriées aux
            fichiers d'images et, en fin de compte, faire qu'un site web
            entier soit consultable directement à travers un
            dépôt&nbsp;! Ceci ne pose en général pas de problème, du
            moment que le site web ne possède pas de contenu généré
            dynamiquement.</para>
        </sect4>

        <sect4 id="svn.serverconfig.httpd.extra.browsing.xslt">
<!--
          <title>Customizing the look</title>
-->
          <title>Personnalisation de l'aspect</title>

<!--
          <para>You generally will get more use out of URLs to
            versioned files&mdash;after all, that's where the
            interesting content tends to lie.  But you might have
            occasion to browse a Subversion directory listing, where
            you'll quickly note that the generated HTML used to
            display that listing is very basic, and certainly not
            intended to be aesthetically pleasing (or even
            interesting).  To enable customization of these directory
            displays, Subversion provides an XML index feature.  A
            single <literal>SVNIndexXSLT</literal> directive in your
            repository's <literal>Location</literal> block of
            <filename>httpd.conf</filename> will
            instruct <command>mod_dav_svn</command> to generate XML
            output when displaying a directory listing, and to
            reference the XSLT stylesheet of your choice:</para>
-->
          <para>En général, vous utiliserez principalement des URL de
            fichiers suivis en versions&nbsp;; après tout c'est là que
            le contenu intéressant réside. Mais vous aurez peut-être
            l'occasion de naviguer dans le contenu d'un répertoire
            Subversion et vous remarquerez rapidement que le code HTML
            généré pour afficher la liste des éléments du répertoire
            est très rudimentaire, et certainement pas conçu pour être
            agréable d'un point de vue esthétique (ni même intéressant).
            Afin d'activer la personnalisation de l'affichage de ces
            répertoires, Subversion fournit une fonctionnalité d'index
            XML. La présence d'une directive
            <literal>SVNIndexXSLT</literal> dans le bloc
            <literal>Location</literal> du fichier
            <filename>httpd.conf</filename> de votre dépôt conduira
            <command>mod_dav_svn</command> à générer un résultat en XML
            quand il affiche la liste des éléments d'un répertoire et à
            faire référence à la feuille de style XSLT de votre
            choix&nbsp;:</para>

          <informalexample>
            <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
  SVNIndexXSLT "/svnindex.xsl"
  &hellip;
&lt;/Location&gt;
</programlisting>
          </informalexample>

<!--
          <para>Using the <literal>SVNIndexXSLT</literal> directive
            and a creative XSLT stylesheet, you can make your
            directory listings match the color schemes and imagery
            used in other parts of your web site.  Or, if you'd
            prefer, you can use the sample stylesheets provided in the
            Subversion source distribution's
            <filename>tools/xslt/</filename> directory.
            Keep in mind that the path provided to the
            <literal>SVNIndexXSLT</literal> directive is actually a
            URL path&mdash;browsers need to be able to read your
            stylesheets to make use of them!</para>
-->
          <para>À l'aide de la directive <literal>SVNIndexXSLT</literal>
           et d'une feuille de style XSLT faisant preuve de créativité,
           vous pouvez adapter les listes de contenus de répertoires aux
           couleurs et illustrations utilisées dans d'autres
           parties de votre site web. Ou, si vous préférez, vous pouvez
           utiliser les exemples de feuilles de style fournis dans le
           répertoire <filename>tools/xslt/</filename> du code source de
           Subversion. Gardez à l'esprit que le chemin d'accès fourni à la
           directive <literal>SVNIndexXSLT</literal> est en fait une
           URL &mdash; les navigateurs doivent être capables de lire vos
           feuilles de style pour les utiliser&nbsp;!</para>

        </sect4>

        <sect4 id="svn.serverconfig.httpd.extra.browsing.reposlisting">
<!--
          <title>Listing repositories</title>
-->
          <title>Affichage de la liste des dépôts</title>

<!--
          <para>If you're serving a collection of repositories from a
            single URL via the <literal>SVNParentPath</literal>
            directive, then it's also possible to have Apache display
            all available repositories to a web browser.  Just
            activate the <literal>SVNListParentPath</literal>
            directive:</para>
-->
          <para>Si vous desservez un ensemble de dépôts à partir d'une
            URL unique <foreignphrase>via</foreignphrase> la directive
            <literal>SVNParentPath</literal>, il est possible de faire
            afficher par Apache tous les dépôts disponibles dans un
            navigateur web. Il suffit d'activer la directive
            <literal>SVNListParentPath</literal>&nbsp;:</para>

          <informalexample>
            <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
  SVNListParentPath on
  &hellip;
&lt;/Location&gt;
</programlisting>
          </informalexample>

<!--
          <para>If a user now points her web browser to the
            URL <literal>http://host.example.com/svn/</literal>,
            she'll see a list of all Subversion repositories sitting
            in <filename>/var/svn</filename>.  Obviously, this can be
            a security problem, so this feature is turned off by
            default.</para>
-->
          <para>Si un utilisateur pointe son navigateur web à l'URL
            <literal>http://hote.exemple.com/svn/</literal>, il verra
            une liste de tous les dépôts Subversion situés dans
            <filename>/var/svn</filename>. Évidemment, ceci peut poser
            des problèmes de sécurité&nbsp;; cette fonctionnalité est
            donc désactivée par défaut.</para>

        </sect4>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.extra.logging">
<!--
        <title>Apache logging</title>
-->
        <title>Journalisation Apache</title>

<!--
        <para>Because Apache is an HTTP server at heart, it contains
          fantastically flexible logging features.  It's beyond the
          scope of this book to discuss all of the ways logging can be
          configured, but we should point out that even the most
          generic <filename>httpd.conf</filename> file will cause
          Apache to produce two logs:
          <filename>error_log</filename>
          and <filename>access_log</filename>.  These logs may appear
          in different places, but are typically created in the
          logging area of your Apache installation.  (On Unix, they
          often live
          in <filename>/usr/local/apache2/logs/</filename>.)</para>
-->
        <para>Comme Apache est avant tout un serveur HTTP, il contient
          des fonctionnalités de journalisation d'une flexibilité
          fantastique. Détailler toutes les façons dont la
          journalisation peut être configurée sort du cadre de ce livre,
          mais nous voulons quand même vous faire remarquer que même le
          fichier <filename>httpd.conf</filename> le plus générique
          conduit Apache à créer deux fichiers de journalisation&nbsp;:
          <filename>error_log</filename>
          et <filename>access_log</filename>. Ces journaux peuvent
          apparaître à différents endroits, mais sont en général créés
          dans la zone de journalisation de votre installation Apache
          (sur Unix, ils résident souvent dans
          <filename>/usr/local/apache2/logs/</filename>).</para>

<!--
        <para>The <filename>error_log</filename> describes any internal
          errors that Apache runs into as it works.
          The <filename>access_log</filename> file records every
          incoming HTTP request received by Apache.  This makes it
          easy to see, for example, which IP addresses Subversion
          clients are coming from, how often particular clients use
          the server, which users are authenticating properly, and
          which requests succeed or fail.</para>
-->
        <para>Le fichier <filename>error_log</filename> décrit toutes
          les erreurs internes qu'Apache rencontre au cours de son
          fonctionnement. Le fichier <filename>access_log</filename>
          enregistre toutes les requêtes HTTP reçues par Apache. Ceci
          permet de voir facilement, par exemple, à partir de quelles
          adresses IP les clients Subversion se connectent, à quelle
          fréquence un client donné utilise le serveur, quels
          utilisateurs se sont authentifiés correctement et quelles
          requêtes ont échoué ou réussi.</para>

<!--
        <para>Unfortunately, because HTTP is a stateless protocol,
          even the simplest Subversion client operation generates
          multiple network requests.  It's very difficult to look at
          the <filename>access_log</filename> and deduce what the
          client was doing&mdash;most operations look like a series
          of cryptic <literal>PROPPATCH</literal>, <literal>GET</literal>,
          <literal>PUT</literal>, and <literal>REPORT</literal>
          requests.  To make things worse, many client operations send
          nearly identical series of requests, so it's even harder to
          tell them apart.</para>
-->
        <para>Malheureusement, parce qu'HTTP est un protocole sans
          notion d'état, même la plus simple opération du client
          Subversion génère plusieurs requêtes réseau. Il est donc très
          difficile d'examiner le fichier
          <filename>access_log</filename> et d'en déduire ce que le
          client faisait &mdash; la plupart des opérations se présentent
          sous la forme de séries de requêtes
          <literal>PROPPATCH</literal>, <literal>GET</literal>,
          <literal>PUT</literal> et <literal>REPORT</literal>
          énigmatiques. Pour couronner le tout, de nombreuses opérations
          du client envoient des séries de requêtes quasi-identiques, il
          est donc encore plus difficile de les distinguer.</para>

<!--
        <para><command>mod_dav_svn</command>, however, can come to
          your aid.  By activating an <quote>operational
          logging</quote> feature, you can
          ask <command>mod_dav_svn</command> to create a separate log
          file describing what sort of high-level operations your
          clients are performing.</para>
-->
        <para>Cependant, <command>mod_dav_svn</command> peut venir à
          votre rescousse. En activant la fonctionnalité de
          <quote>journalisation opérationnelle</quote>, vous pouvez
          demander à <command>mod_dav_svn</command> de créer un fichier
          séparé décrivant quelles sortes d'opérations de haut niveau
          vos clients effectuent.</para>

<!--
        <para>To do this, you need to make use of
          Apache's <literal>CustomLog</literal> directive (which is
          explained in more detail in Apache's own documentation).
          Be sure to invoke this
          directive <emphasis>outside</emphasis> your
          Subversion <literal>Location</literal> block:</para>
-->
        <para>Pour ce faire, vous devez utiliser la directive
          <literal>CustomLog</literal> d'Apache (qui est expliquée en
          détail dans la documentation Apache). Prenez soin de placer
          cette directive <emphasis>en dehors</emphasis> de votre bloc
          <literal>Location</literal> de Subversion&nbsp;:</para>

        <informalexample>
          <programlisting>
&lt;Location /svn&gt;
  DAV svn
  &hellip;
&lt;/Location&gt;<!--

CustomLog logs/svn_logfile "%t %u %{SVN-ACTION}e" env=SVN-ACTION -->

CustomLog logs/journal-svn "%t %u %{SVN-ACTION}e" env=SVN-ACTION
</programlisting>
        </informalexample>

<!--
        <para>In this example, we're asking Apache to create a special
          logfile, <filename>svn_logfile</filename>, in the standard
          Apache <filename>logs</filename> directory.
          The <literal>%t</literal> and <literal>%u</literal>
          variables are replaced by the time and username of the
          request, respectively.  The really important parts are the
          two instances of <literal>SVN-ACTION</literal>.
          When Apache sees that variable, it substitutes the value of
          the <literal>SVN-ACTION</literal> environment variable,
          which is automatically set by <command>mod_dav_svn</command>
          whenever it detects a high-level client action.</para>
-->
        <para>Dans cet exemple, nous demandons à Apache de créer un
          fichier journal spécial, <filename>journal-svn</filename>,
          dans le répertoire habituel de journaux d'Apache
          (<filename>logs</filename>). Les variables
          <literal>%t</literal> et <literal>%u</literal> sont remplacées
          par l'horodatage et le nom d'utilisateur de la requête,
          respectivement. Les points importants sont les deux instances
          de <literal>SVN-ACTION</literal>. Quand Apache trouve cette
          variable, il lui substitue la valeur de la variable
          d'environnement <literal>SVN-ACTION</literal>, modifiée
          automatiquement par <command>mod_dav_svn</command>
          quand il détecte une action haut-niveau du client.</para>

<!--
        <para>So, instead of having to interpret a
          traditional <filename>access_log</filename> like
          this:</para>
-->
        <para>Ainsi, au lieu d'avoir à interpréter un fichier
          <filename>access_log</filename> traditionnel qui ressemble
          à&nbsp;:</para>

        <informalexample>
          <programlisting>
[26/Jan/2007:22:25:29 -0600] "PROPFIND /svn/calc/!svn/vcc/default HTTP/1.1" 207 398
[26/Jan/2007:22:25:29 -0600] "PROPFIND /svn/calc/!svn/bln/59 HTTP/1.1" 207 449
[26/Jan/2007:22:25:29 -0600] "PROPFIND /svn/calc HTTP/1.1" 207 647
[26/Jan/2007:22:25:29 -0600] "REPORT /svn/calc/!svn/vcc/default HTTP/1.1" 200 607
[26/Jan/2007:22:25:31 -0600] "OPTIONS /svn/calc HTTP/1.1" 200 188
[26/Jan/2007:22:25:31 -0600] "MKACTIVITY /svn/calc/!svn/act/e6035ef7-5df0-4ac0-b811-4be7c823f998 HTTP/1.1" 201 227
&hellip;
</programlisting>
        </informalexample>

<!--
        <para>you can peruse a much more
          intelligible <filename>svn_logfile</filename> like
          this:</para>
-->
        <para>vous pouvez vous contenter de parcourir le fichier
          <filename>journal-svn</filename> qui est bien plus
          intelligible&nbsp;:</para>

        <informalexample>
          <programlisting>
[26/Jan/2007:22:24:20 -0600] - get-dir /tags r1729 props
[26/Jan/2007:22:24:27 -0600] - update /trunk r1729 depth=infinity
[26/Jan/2007:22:25:29 -0600] - status /trunk/foo r1729 depth=infinity
[26/Jan/2007:22:25:31 -0600] sally commit r1730
</programlisting>
        </informalexample>

<!--
        <para>In addition to the <literal>SVN-ACTION</literal>
          environment variable, <command>mod_dav_svn</command> also
          populates the <literal>SVN-REPOS</literal>
          and <literal>SVN-REPOS-NAME</literal> variables, which carry
          the filesystem path to the repository and the basename
          thereof, respectively.  You might wish to include references
          to one or both of these variables in
          your <literal>CustomLog</literal> format string, too,
          especially if you are combining usage information from
          multiple repositories into a single log file.  For an
          exhaustive list of all actions logged, see
          <xref linkend="svn.serverconfig.operational-logging"/>.</para>
-->
        <para>En complément de la variable d'environnement
          <literal>SVN-ACTION</literal>, <command>mod_dav_svn</command>
          définit aussi les variables <literal>SVN-REPOS</literal> et
          (resp.) <literal>SVN-REPOS-NAME</literal>, qui contiennent le
          chemin dans le système de fichiers vers le dépôt et (resp.) le
          nom simple. Vous voudrez peut-être inclure des références à
          ces variables dans la chaîne de caractères qui définit le
          format dans <literal>CustomLog</literal>, surtout si vous
          combinez dans ce fichier les journaux en provenance de
          plusieurs dépôts. Pour obtenir une liste exhaustive de toutes
          les actions journalisées, reportez-vous à <xref
          linkend="svn.serverconfig.operational-logging"/>.</para>

<!--
        <para>Obviously, the more information that Apache logs about
          your Subversion activities, the more disk space on your
          server those logs consume.  It is non uncommon for
          high-traffic Subversion servers to generate many gigabytes
          of log information daily.  Obviously, logs are only valuable
          if they can be meaningfully processed, and huge log files
          can quickly become unwieldy.  There are various standard
          approaches to Apache HTTP Server log management which are
          outside the scope of this book.  Administrators are
          encouraged to use the log rotation and archival approach
          which works best for them.</para>
-->
        <para>Évidemment, plus Apache journalise d'informations
           relatives aux activités de Subversion, plus le journal prend
           de place sur le disque. Il n'est pas rare qu'un serveur
           Subversion à gros trafic génère plusieurs gigaoctets de
           journaux par jour. Tout aussi évidemment, les journaux ne
           sont utiles que si vous pouvez en extraire de l'information
           pertinente et les journaux gigantesques peuvent rapidement
           devenir difficiles à exploiter. Il existe diverses solutions
           pour gérer les journaux d'Apache qui sortent du cadre de ce
           livre. Nous préconisons aux administrateurs d'utiliser la
           rotation des journaux et l'archivage qui leur convient le
           mieux.</para>

 <!--
        <para>But what if Subversion is simply generating too much log
          information to be useful?  For example, in
          <xref linkend="svn.serverconfig.httpd.perf.bulk-updates" />,
          we mentioned that certain approaches that Subversion clients
          may take to checkouts and other update-style operations can
          cause rapid growth of your server logs as requests for
          individual pieces of the update data set are individually
          logged (whereas in previous version of Subversion, they
          might not have been).  In this case, you might consider
          using some Apache configuration magic to selectively silence
          some of that log activity.</para>
-->
        <para>Mais que faire si Subversion génère simplement trop de
          journaux pour pouvoir les exploiter&nbsp;? Par exemple, dans
          <xref linkend="svn.serverconfig.httpd.perf.bulk-updates" />,
          nous avons indiqué que certaines approches que les clients
          Subversion utilisent pour leurs extractions ou d'autres
          opérations de mise à jour peuvent faire grandir rapidement la
          taille des journaux parce que chaque requête, pour chaque
          information élémentaire de la mise à jour, est journalisée
          (alors que ce n'était pas le cas pour les versions précédentes
          de Subversion). Dans ce cas, vous devriez envisager une
          configuration très particulière d'Apache pour ne pas
          journaliser, de manière sélective, l'ensemble des
          activités.</para>

<!--
        <para>Apache HTTP Server's
          <command>mod_setenvif</command> module offers
          a <literal>SetEnvIf</literal> directive which is handy for
          conditionally setting environment variables.  And as it
          turns out, the <literal>CustomLog</literal> directive can be
          told to conditionally log requests based on the state of
          environment variables.  The following is a sample
          configuration which instructs the server
          to <emphasis>not</emphasis> log <literal>GET</literal>
          and <literal>PROPFIND</literal> requests aimed at private
          Subversion URLs.</para>
-->
        <para>Le module <command>mod_setenvif</command> du serveur HTTP
          Apache propose une directive <literal>SetEnvIf</literal> qui
          est utile pour définir de manière conditionnelle des variables
          d'environnement. Ainsi, la directive
          <literal>CustomLog</literal> peut être configurée pour ne
          journaliser que certaines requêtes en fonction de la valeur de
          variables d'environnement. Vous trouverez un exemple de
          configuration qui demande au serveur de <emphasis>ne
          pas journaliser</emphasis> les requêtes <literal>GET</literal>
          et <literal>PROPFIND</literal> visant des URL Subversion
          privées.</para>

        <informalexample>
<!--
          <programlisting>
# Matches everything, just to initialize the "in_repos" variable.
SetEnvIf Request_URI "^" in_repos=0

# Set "in_repos" if this is a request for a private Subversion URL.
SetEnvIf Request_URI "/!svn/" in_repos=1

# Set "do_not_log" for non-public request types we don't care to log.
SetEnvIf Request_Method "GET" do_not_log
SetEnvIf Request_Method "PROPFIND" do_not_log

# Unset "do_not_log" for URLs that aren't private Subversion URLs.
SetEnvIf in_repos 0 !do_not_log

# Log requests, but only if "do_not_log" isn't set.
CustomLog logs/access_log env=!do_not_log
</programlisting>
-->
          <programlisting>
# Correspondance pour tout, juste pour initialiser la variable 'dans_depot'.
SetEnvIf Request_URI "^" dans_depot=0

# Activer "dans_depot" si la requête pointe vers une URL Subversion privée.
SetEnvIf Request_URI "/!svn/" dans_depot=1

# Désactiver "ne_pas_journaliser" pour les types de requêtes que
# nous ne voulons pas journaliser
SetEnvIf Request_Method "GET" ne_pas_journaliser
SetEnvIf Request_Method "PROPFIND" ne_pas_journaliser

# Désactiver "ne_pas_journaliser" pour les URL Subversion qui ne sont pas privées.
SetEnvIf dans_depot 0 !ne_pas_journaliser

# Journaliser la requête, seulement si "ne_pas_journaliser" n'est pas activée
CustomLog logs/access_log env=!ne_pas_journaliser
</programlisting>
        </informalexample>

<!--
        <para>Using this configuration, <command>httpd</command> would
          still log <literal>GET</literal> requests aimed at public
          Subversion URLs.  These are the sorts of requests generated
          by a web browser as someone navigates the repository
          directly.  But <literal>GET</literal>
          and <literal>PROPFIND</literal> requests aimed at so-called
	  <quote>private</quote> Subversion URLs&mdash;which are the very sorts of
          requests used to fetch each and every individual file during
          a checkout operation&mdash;won't get logged.</para>
-->
        <para>En utilisant cette configuration,<command>httpd</command>
          journalisera toujours les requêtes <literal>GET</literal> qui
          pointent vers des URL Subversion publiques. Ce sont les types
          de requêtes émises par les navigateurs Web lorsqu'un
          utilisateur navigue dans le dépôt directement. Mais les
          requêtes <literal>GET</literal> et <literal>PROPFIND</literal>
          qui pointent vers des URL Subversion dites
          <quote>privées</quote> (ce sont les types de requêtes
          utilisées pour passer en revue individuellement chacun des
          fichiers lors d'une opération d'extraction) ne seront pas
          journalisées.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.extra.writethruproxy">
<!--
        <title>Write-through proxying</title>
-->
        <title>Mandataire en écriture</title>

<!--
        <para>
          <indexterm>
            <primary>WebDAV</primary>
            <secondary>proxies</secondary>
            <see>httpd, write-through proxies</see>
          </indexterm>
          <indexterm>
            <primary>httpd</primary>
            <secondary>write-through proxies</secondary>
            <tertiary>master</tertiary>
          </indexterm>
          <indexterm>
            <primary>httpd</primary>
            <secondary>write-through proxies</secondary>
            <tertiary>slave</tertiary>
          </indexterm>One of the nice advantages of using Apache as a
          Subversion server is that it can be set up for simple
          replication.  For example, suppose that your team is
          distributed across four offices around the globe.  The
          Subversion repository can exist only in one of those
          offices, which means the other three offices will not enjoy
          accessing it&mdash;they're likely to experience
          significantly slower traffic and response times when
          updating and committing code.  A powerful solution is to set
          up a system consisting of one <firstterm>master</firstterm>
          Apache server and several <firstterm>slave</firstterm>
          Apache servers.  If you place a slave server in each office,
          users can check out a working copy from whichever slave
          is closest to them.  All read requests go to their local
          slave.  Write requests get automatically routed to the
          single master server.  When the commit completes, the master
          then automatically <quote>pushes</quote> the new revision to
          each slave server using the <command>svnsync</command>
          replication tool.</para>
-->
        <para>
          <indexterm>
            <primary>WebDAV</primary>
            <secondary>mandataire</secondary>
            <see>httpd, mandataire en écriture</see>
          </indexterm>
          <indexterm>
            <primary>httpd</primary>
            <secondary>mandataire en écriture</secondary>
            <tertiary>maître</tertiary>
          </indexterm>
          <indexterm>
            <primary>httpd</primary>
            <secondary>mandataire en écriture</secondary>
            <tertiary>esclave</tertiary>
          </indexterm>Un des avantages notables d'Apache comme serveur
          Subversion est qu'il peut être configuré pour effectuer de la
          réplication. Par exemple, imaginez que votre équipe soit
          répartie sur quatre sites dans différents coins du globe. Le
          dépôt Subversion ne peut exister que sur un de ces sites, ce
          qui signifie que les trois autres sites n'auront pas un accès
          très satisfaisant &mdash; ils devront sans doute faire avec
          un trafic plus lent et des temps de réponse plus longs lors
          des mises à jour et des propagations. Une solution très
          puissante est de mettre en place un système constitué d'un
          serveur Apache&nbsp;<firstterm>maître</firstterm> et de
          plusieurs serveurs
          Apache&nbsp;<firstterm>esclaves</firstterm>. Si vous
          placez un serveur esclave sur chacun des sites, les
          utilisateurs peuvent extraire une copie de travail de
          l'esclave qui est le plus proche d'eux. Toutes les requêtes
          de lecture vont au serveur esclave local. Les requêtes
          d'écriture sont automatiquement routées vers l'unique
          serveur maître. Lorsque la propagation se termine, le maître
          <quote>pousse</quote> la nouvelle révision vers chaque serveur
          esclave en utilisant l'outil de réplication
          <command>svnsync</command>.</para>

<!--
        <para>This configuration creates a huge perceptual speed
          increase for your users, because Subversion client traffic
          is typically 80&ndash;90% read requests.  And if those
          requests are coming from a <emphasis>local</emphasis>
          server, it's a huge win.</para>
-->
        <para>Cette configuration permet une immense amélioration de la
          vitesse perçue par les utilisateurs, car le trafic d'un client
          Subversion est généralement constitué à
          80&nbsp;-&nbsp;90&nbsp;% de requêtes de lecture. Et ces
          requêtes étant traitées par un serveur
          <emphasis>local</emphasis>, le gain est énorme.</para>

<!--
        <para>In this section, we'll walk you through a standard setup
          of this single-master/multiple-slave system.  However, keep
          in mind that your servers must be running at least Apache
          2.2.0 (with <command>mod_proxy</command> loaded) and
          Subversion 1.5 (<command>mod_dav_svn</command>).</para>
-->
        <para>Dans cette section, nous vous accompagnons dans la mise en
          place standard de ce système comportant un maître unique et
          plusieurs esclaves. Cependant, gardez à l'esprit que vos
          serveurs doivent faire tourner au moins Apache&nbsp;2.2.0
          (avec le module <command>mod_proxy</command> chargé) et
          Subversion&nbsp;1.5 (<command>mod_dav_svn</command>).</para>

        <note>
<!--
          <para>Ours is just one example of how you might setup a
            Subversion write-through proxy configuration.  There are
            other approaches.  For example, rather than having the
            master server push changes out to every slave server, the
            slaves could periodically pull those changes from the
            master.  Or perhaps the master could push changes to a
            single slave, which then pushes the same change to the
            next slave, and so on down the line.  Administrators are
            encouraged to use this section for basic understanding
            of what happens in a Subversion WebDAV proxy deployment
            scenario, and then implement the specific approach that
            works best for their organization.</para>
-->
          <para>Ceci est juste un exemple de la façon dont vous pouvez
            configurer un serveur mandataire Subversion. Il existe
            d'autres approches. Par exemple, plutôt que d'avoir un
            serveur maître qui pousse les modifications vers chaque
            serveur esclave, les esclaves pourraient aller chercher
            ces modifications périodiquement sur le serveur maître. Ou
            bien le serveur pourrait pousser les modifications vers un
            seul serveur esclave, charge à ce serveur esclave de les
            pousser vers un autre serveur esclave et ainsi de suite pour
            atteindre tous les serveurs esclaves. Nous conseillons aux
            administrateurs d'utiliser cette section comme point de
            départ pour comprendre les bases d'un déploiement d'un
            serveur mandataire WebDAV Subversion, puis d'implémenter
            l'approche qui convient le mieux à leur organisation.</para>
        </note>

        <sect4 id="svn.serverconfig.httpd.extra.writethruproxy.configure">
<!--
          <title>Configure the servers</title>
-->
          <title>Configuration des serveurs</title>

<!--
          <para>First, configure your master server's
            <filename>httpd.conf</filename> file in the usual way.
            Make the repository available at a certain URI location,
            and configure authentication and authorization however
            you'd like.  After that's done, configure each of your
            <quote>slave</quote> servers in the exact same way, but
            add the special <literal>SVNMasterURI</literal> directive
            to the block:</para>
-->
          <para>Pour commencer, configurez le fichier
            <filename>httpd.conf</filename> de votre serveur maître de
            la façon habituelle. Mettez le dépôt à disposition à un
            certain emplacement URI et configurez l'authentification
            ainsi que le contrôle d'accès comme vous le souhaitez. Une
            fois que c'est fait, configurez chacun de vos serveurs
            <quote>esclaves</quote> exactement de la même manière, mais
            ajoutez la directive <literal>SVNMasterURI</literal> au
            bloc&nbsp;:</para>

          <informalexample>
<!--
            <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNPath /var/svn/repos
  SVNMasterURI http://master.example.com/svn
  &hellip;
&lt;/Location&gt;
</programlisting>
-->
          <programlisting>
&lt;Location /svn&gt;
  DAV svn
  SVNPath /var/svn/depot
  SVNMasterURI http://maitre.exemple.com/svn
  &hellip;
&lt;/Location&gt;
</programlisting>

          </informalexample>

<!--
          <para>This new directive tells a slave server to redirect
            all write requests to the master.  (This is done
            automatically via Apache's <command>mod_proxy</command>
            module.)  Ordinary read requests, however, are still
            serviced by the slaves.  Be sure that your master and
            slave servers all have matching authentication and
            authorization configurations;  if they fall out of sync,
            it can lead to big headaches.</para>
-->
          <para>Cette nouvelle directive indique à un serveur esclave de
            rediriger toutes les requêtes d'écriture vers le maître (ce
            qui est accompli automatiquement par le module
            <command>mod_proxy</command> d'Apache). Les requêtes
            ordinaires de lecture, cependant, sont toujours traitées par
            les esclaves. Assurez-vous que vos serveurs maître et
            esclaves ont tous des configurations identiques
            d'authentification et de contrôle d'accès&nbsp;; En cas de
            problème de synchronisation, cela peut vous amener à vous
            arracher les cheveux.</para>

<!--
          <para>Next, we need to deal with the problem of infinite
            recursion.  With the current configuration, imagine what
            will happen when a Subversion client performs a commit to
            the master server.  After the commit completes, the server
            uses <command>svnsync</command> to replicate the new
            revision to each slave.  But because
            <command>svnsync</command> appears to be just another
            Subversion client performing a commit, the slave will
            immediately attempt to proxy the incoming write request
            back to the master!  Hilarity ensues.</para>
-->
          <para>Ensuite nous devons nous occuper du problème de la
            récursion infinie. Avec la configuration actuelle, imaginez
            ce qui se va se passer quand un client Subversion va
            effectuer une propagation vers le serveur maître. Une fois
            la propagation terminée, le serveur utilise
            <command>svnsync</command> pour répliquer la nouvelle
            révision vers chaque esclave. Mais comme
            <command>svnsync</command> ne se présente que comme un
            simple client en train d'effectuer une propagation,
            l'esclave va immédiatement tenter d'envoyer vers le maître
            la requête d'écriture qui vient d'arriver&nbsp;! Et là,
            patatras&nbsp;!</para>

<!--
          <para>The solution to this problem is to have the master
            push revisions to a different
            <literal>&lt;Location&gt;</literal> on the slaves.  This
            location is configured to <emphasis>not</emphasis> proxy
            write requests at all, but to accept normal commits from
            (and only from) the master's IP address:</para>
-->
          <para>La solution consiste à s'arranger pour que le maître
            pousse les révisions vers un emplacement
            <literal>&lt;Location&gt;</literal> distinct au sein des
            dépôts esclaves. Cet emplacement est configuré
            <emphasis>non pas pour servir de mandataire</emphasis> pour
            les requêtes d'écriture mais pour accepter les propagations
            normales en provenance de l'adresse IP du maître (et
            seulement de lui)&nbsp;:</para>

          <informalexample>
<!--
            <programlisting>
&lt;Location /svn-proxy-sync&gt;
  DAV svn
  SVNPath /var/svn/repos
  Order deny,allow
  Deny from all
  # Only let the server's IP address access this Location:
  Allow from 10.20.30.40
  &hellip;
&lt;/Location&gt;
</programlisting>
-->
		    <programlisting>
&lt;Location /svn-proxy-sync&gt;
  DAV svn
  SVNPath /var/svn/depot
  Order deny,allow
  Deny from all
  # Ne laisse que le serveur ayant l'adresse indiquée accéder à cet emplacement :
  Allow from 10.20.30.40
  &hellip;
&lt;/Location&gt;
</programlisting>
          </informalexample>

        </sect4>

        <sect4 id="svn.serverconfig.httpd.extra.writethruproxy.replicate">
<!--
          <title>Set up replication</title>
-->
          <title>Mise en place de la réplication</title>

<!--
          <para>Now that you've configured
            your <literal>Location</literal> blocks on master and
            slaves, you need to configure the master to replicate to
            the slaves.  Our walkthough uses <command>svnsync</command>,
            which is covered in more detail in
            <xref linkend="svn.reposadmin.maint.replication.svnsync"
            />.</para>
-->
          <para>Une fois que vous avez configuré les blocs
            <literal>Location</literal> du maître et des esclaves, vous
            devez configurer le maître pour que la réplication vers les
            esclaves fonctionne. Ceci se fait de la manière habituelle,
            en utilisant <command>svnsync</command>. Si vous n'êtes pas
            familier avec cet outil, reportez-vous à <xref
            linkend="svn.reposadmin.maint.replication.svnsync"/> pour
            plus de détails.</para>

<!--
          <para>First, make sure that each slave repository has a
            pre-revprop-change hook script which
            allows remote revision property changes.  (This is
            standard procedure for being on the receiving end of
            <command>svnsync</command>.) Then log into the master
            server and configure each of the slave repository URIs to
            receive data from the master repository on the local
            disk:</para>
-->
          <para>Tout d'abord, assurez-vous que chaque dépôt esclave
            possède une procédure automatique
            <literal>pre-revprop-change</literal> qui autorise les
            modifications de propriétés de révisions à distance (cette
            étape fait partie de la procédure standard pour un serveur
            qui reçoit les révisions de <command>svnsync</command>).
            Ensuite, connectez-vous au serveur maître et configurez
            l'URI de chaque dépôt esclave pour qu'il reçoive les données
            en provenance du dépôt maître sur le disque
            local&nbsp;:</para>

          <informalexample>
<!--
            <screen>
$ svnsync init http://slave1.example.com/svn-proxy-sync \
               file:///var/svn/repos
Copied properties for revision 0.
$ svnsync init http://slave2.example.com/svn-proxy-sync \
               file:///var/svn/repos
Copied properties for revision 0.
$ svnsync init http://slave3.example.com/svn-proxy-sync \
               file:///var/svn/repos
Copied properties for revision 0.

# Perform the initial replication

$ svnsync sync http://slave1.example.com/svn-proxy-sync \
               file:///var/svn/repos
Transmitting file data ....
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .......
Committed revision 2.
Copied properties for revision 2.
&hellip;

$ svnsync sync http://slave2.example.com/svn-proxy-sync \
               file:///var/svn/repos
Transmitting file data ....
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .......
Committed revision 2.
Copied properties for revision 2.
&hellip;

$ svnsync sync http://slave3.example.com/svn-proxy-sync \
               file:///var/svn/repos
Transmitting file data ....
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .......
Committed revision 2.
Copied properties for revision 2.
&hellip;
</screen>
-->
          <screen>
$ svnsync init http://esclave1.exemple.com/svn-proxy-sync \
               file://var/svn/depot
Propriétés copiées pour la révision 0.
$ svnsync init http://esclave2.exemple.com/svn-proxy-sync \
               file://var/svn/depot
Propriétés copiées pour la révision 0.
$ svnsync init http://esclave3.exemple.com/svn-proxy-sync \
               file://var/svn/depot
Propriétés copiées pour la révision 0.

# Effectue la réplication initiale

$ svnsync sync http://esclave1.exemple.com/svn-proxy-sync \
               file://var/svn/depot
Transmission des données ........................................
Révision 1 propagée.
Propriétés copiées pour la révision 1.
Transmission des données ..
Révision 2 propagée.
Propriétés copiées pour la révision 2.
&hellip;

$ svnsync sync http://esclave2.exemple.com/svn-proxy-sync \
               file://var/svn/depot
Transmission des données ........................................
Révision 1 propagée.
Propriétés copiées pour la révision 1.
Transmission des données ..
Révision 2 propagée.
Propriétés copiées pour la révision 2.
&hellip;

$ svnsync sync http://esclave3.exemple.com/svn-proxy-sync \
               file://var/svn/depot
Transmission des données ........................................
Révision 1 propagée.
Propriétés copiées pour la révision 1.
Transmission des données ..
Révision 2 propagée.
Propriétés copiées pour la révision 2.
&hellip;
</screen>

          </informalexample>

<!--
          <para>After this is done, we configure the master server's
            post-commit hook script to invoke
            <command>svnsync</command> on each slave server:</para>
-->
          <para>Une fois ceci fait, nous configurons la procédure
            automatique post-propagation
            (<literal>post-commit</literal>) du serveur maître pour
            qu'elle lance <command>svnsync</command> sur chaque serveur
            esclave&nbsp;:</para>

          <informalexample>
<!--
            <programlisting>
#!/bin/sh
# Post-commit script to replicate newly committed revision to slaves

svnsync sync http://slave1.example.com/svn-proxy-sync \
             file:///var/svn/repos &gt; /dev/null 2&gt;&amp;1 &amp;
svnsync sync http://slave2.example.com/svn-proxy-sync \
             file:///var/svn/repos &gt; /dev/null 2&gt;&amp;1 &amp;
svnsync sync http://slave3.example.com/svn-proxy-sync \
             file:///var/svn/repos &gt; /dev/null 2&gt;&amp;1 &amp;
</programlisting>
-->
          <programlisting>
#!/bin/sh
# Procédure post-propagation pour répliquer les révisions
# nouvellement propagées vers les esclaves

svnsync sync http://esclave1.exemple.com/svn-proxy-sync \
             file:///var/svn/depot &gt; /dev/null 2&gt;&amp;1 &amp;
svnsync sync http://esclave2.exemple.com/svn-proxy-sync \
             file:///var/svn/depot &gt; /dev/null 2&gt;&amp;1 &amp;
svnsync sync http://esclave3.exemple.com/svn-proxy-sync \
             file:///var/svn/depot &gt; /dev/null 2&gt;&amp;1 &amp;
</programlisting>
          </informalexample>

<!--
          <para>The extra bits on the end of each line aren't
            necessary, but they're a sneaky way to allow the sync
            commands to run in the background so that the Subversion
            client isn't left waiting forever for the commit to
            finish.  In addition to this
            post-commit hook, you'll need a
            post-revprop-change hook as well so
            that when a user, say, modifies a log message, the slave
            servers get that change also:</para>
-->
          <para>Les symboles en plus à la fin de chaque ligne ne sont
            pas nécessaires, mais constituent un moyen astucieux
            d'autoriser <command>svnsync</command> à lancer des
            commandes qui fonctionneront à l'arrière-plan, de telle
            sorte que le client Subversion ne se retrouvera pas à
            attendre indéfiniment que la propagation se termine. En
            plus de cette procédure post-propagation
            (<literal>post-commit</literal>), vous aurez également
            besoin d'une procédure automatique
            <literal>post-revprop-change</literal> pour que, disons,
            quand un utilisateur modifie un commentaire de propagation, les
            serveurs esclaves reçoivent aussi cette
            modification&nbsp;:</para>

          <informalexample>
<!--
            <programlisting>
#!/bin/sh
# Post-revprop-change script to replicate revprop-changes to slaves

REV=${2}
svnsync copy-revprops http://slave1.example.com/svn-proxy-sync \
                      file:///var/svn/repos \
                      -r ${REV} &gt; /dev/null 2&gt;&amp;1 &amp;
svnsync copy-revprops http://slave2.example.com/svn-proxy-sync \
                      file:///var/svn/repos \
                      -r ${REV} &gt; /dev/null 2&gt;&amp;1 &amp;
svnsync copy-revprops http://slave3.example.com/svn-proxy-sync \
                      file:///var/svn/repos \
                      -r ${REV} &gt; /dev/null 2&gt;&amp;1 &amp;
</programlisting>
-->
          <programlisting>
#!/bin/sh
# Procédure post-revprop-change pour répliquer les modifications
# des propriétés de révisions vers les esclaves

REV=${2}
svnsync copy-revprops http://esclave1.exemple.com/svn-proxy-sync \
                      file:///var/svn/depot \
                      -r ${REV} &gt; /dev/null 2&gt;&amp;1 &amp;
svnsync copy-revprops http://esclave2.exemple.com/svn-proxy-sync \
                      file:///var/svn/depot \
                      -r ${REV} &gt; /dev/null 2&gt;&amp;1 &amp;
svnsync copy-revprops http://esclave3.exemple.com/svn-proxy-sync \
                      file:///var/svn/depot \
                      -r ${REV} &gt; /dev/null 2&gt;&amp;1 &amp;
</programlisting>
          </informalexample>

<!--
          <para>The only thing we've left out here is what to do about
            user-level locks (of the <command>svn lock</command>
            variety).  Locks are enforced by the master server during
            commit operations; but all the information about locks is
            distributed during read operations such as <command>svn
            update</command> and <command>svn status</command> by the
            slave server.  As such, a fully functioning proxy setup
            needs to perfectly replicate lock information from the
            master server to the slave servers.  Unfortunately, most
            of the mechanisms that one might employ to accomplish this
            replication fall short in one way or
            another<footnote><para><ulink
            url="http://subversion.tigris.org/issues/show_bug.cgi?id=3457"
            /> tracks these problems.</para></footnote>.  Many teams
            don't use Subversion's locking features at all, so this
            may be a nonissue for you.  Sadly, for those teams which
            do use locks, we have no recommendations on how to
            gracefully work around this shortcoming.</para>
-->
          <para>La seule chose que nous n'avons pas abordé concerne
            les verrous (ceux de la commande <command>svn
            lock</command>). Comme ces verrous sont gérés strictement
            par le serveur maître au moment des propagations&nbsp;; mais
            toutes les informations relatives aux verrous sont
            distribuées au moment des opérations de lectures telles que
            <command>svn update</command>et <command>svn
            status</command> par le serveur esclave. Ainsi, la
            configuration complète maître/esclaves se doit de répliquer
            les informations de verrouillage du maître vers les
            esclaves. Malheureusement, la plupart des mécanismes qui
            sont utilisés pour effectuer cette réplication sont
            confrontés à un problème à un moment ou à un autre<footnote>
				<para><ulink
            url="http://subversion.tigris.org/issues/show_bug.cgi?id=3457"
            /> suit ces problèmes.</para>
			</footnote>. De nombreuses équipes n'utilisent pas du tout
			les fonctionnalités de verrouillage de Subversion, il s'agit
            donc peut-être pour vous d'un faux problème. Pour ceux qui
            utilisent les verrous, nous n'avons malheureusement pas de
            solution simple et universelle pour combler cette
            lacune.</para>

        </sect4>

        <sect4 id="svn.serverconfig.httpd.extra.writethruproxy.caveats">
<!--
          <title>Caveats</title>

-->
          <title>Pièges à éviter</title>
<!--
          <para>Your master/slave replication system should now be
            ready to use.  A couple of words of warning are in order,
            however.  Remember that this replication isn't entirely
            robust in the face of computer or network crashes.  For
            example, if one of the automated
            <command>svnsync</command> commands fails to complete for
            some reason, the slaves will begin to fall behind.  For
            example, your remote users will see that they've committed
            revision 100, but then when they run <command>svn
            update</command>, their local server will tell them that
            revision 100 doesn't yet exist!  Of course, the problem
            will be automatically fixed the next time another commit
            happens and the subsequent <command>svnsync</command> is
            successful&mdash;the sync will replicate all waiting
            revisions.  But still, you may want to set up some sort of
            out-of-band monitoring to notice synchronization failures
            and force <command>svnsync</command> to run when things go
            wrong.</para>
-->

          <para>Votre système de réplication maître/esclave doit à
            présent être prêt à l'emploi. Cependant, quelques consignes
            de prudence sont de mise. Souvenez-vous que la réplication
            n'est pas totalement robuste en ce qui concerne les
            plantages machine ou réseau. Par exemple, si l'une des
            commandes <command>svnsync</command> automatisées demeure
            inachevée, pour quelque raison que ce soit, les esclaves
            vont commencer à être décalés. Par exemple, vos utilisateurs
            distants verront qu'ils ont propagé la révision&nbsp;100,
            mais quand ils exécuteront <command>svn update</command>,
            leur serveur local leur indiquera que la révision&nbsp;100
            n'existe pas encore&nbsp;! Bien sûr, le problème se réglera
            automatiquement dès qu'une autre propagation aura lieu et
            que la commande <command>svnsync</command> qui s'ensuit aura
            fonctionné &mdash; cette synchronisation répliquera toutes
            les révisions en attente. Néanmoins, vous pouvez décider de
            mettre en place une surveillance des décalages, vérifiant le
            bon fonctionnement de la synchronisation et qui, en cas de
            problème, déclenche une nouvelle exécution de
            <command>svnsync</command>.</para>

<!--
          <para>Another limitation of the write-through proxy
            deployment model involves version mismatches&mdash;of the
            version of Subversion which is installed, that
            is&mdash;between the master and slave servers.  Each new
            release of Subversion may (and often does) add new
            features to the network protocol used between the clients
            and servers.  Since feature negotiation happens against
            the slave, it is the slave's protocol version and feature
            set which is used.  But write operations are passed
            through to the master server quite literally.  Therefore,
            there is a risk that the slave server will answer a
            feature negotiation request from the client in way that is
            true for the slave, but untrue for the master if the
            master is running an older version of Subversion.  This
            could result in the client trying to use a new feature
            that the master doesn't understand, and failing.</para>
-->
          <para>Une autre limitation de modèle de déploiement avec
            mandataires concerne ceux qui ont des versions différentes
            de Subversion installées sur les différents maîtres et
            esclaves. Chaque nouvelle version de Subversion peut (et
            c'est souvent le cas) ajouter des nouvelles fonctionnalités
            au protocole réseau utilisé entre le serveur et les clients.
            Comme la négociation des fonctionnalités possibles
            intervient à la connexion au serveur esclave, ce sont les
            capacités annoncées par le serveur esclaves qui sont
            utilisées. Mais les opérations d'écriture sont transmises au
            serveur maître pratiquement littéralement. En conséquence,
            Le risque est que le serveur esclave négocie
            avec le client l'utilisation de fonctionnalités qui sont
            possibles avec l'esclave mais que le serveur maître ne
            comprenne pas parce qu'il fait tourner une version plus
            ancienne de Subversion, ce qui fait échouer la
            transaction.</para>

<!--
          <para>Subversion 1.8 helps to mitigate this problem via the
            introduction of a new Apache configuration
            directive, <literal>SVNMasterVersion</literal>.  By
            configuring each of your slave servers
            with <literal>SVNMasterVersion</literal> set to the
            release version of the Subversion instance which is
            running on your master server, the slave servers can more
            accurately negotiate feature support with the
            client.</para>
-->
          <para>Subversion 1.8 prévient ce type de problème en
            introduisant une nouvelle directive de configuration
            Apache, <literal>SVNMasterVersion</literal>. En configurant
            chacun de vos serveurs esclaves avec
            <literal>SVNMasterVersion</literal> définie à la version
            de l'instance du serveur Subversion qui tourne sur votre
            maître, les serveurs esclaves peuvent négocier de manière
            adéquate le support des fonctionnalités avec le
            client.</para>

<!--
          <para>Unfortunately, Subversion 1.7 doesn't offer
            the <literal>SVNMasterVersion</literal> configuration
            directive and is known to have some specific problems
            along these lines.  If you are deploying a Subversion 1.7
            slave server in front of a pre-1.7 master, you'll want to
            configure your slave server's
            Subversion <literal>&lt;Location&gt;</literal> block with
            the <literal>SVNAdvertiseV2Protocol Off</literal>
            directive.</para>
-->
          <para>Malheureusement, Subversion 1.7 ne reconnait pas
            la directive de configuration
            <literal>SVNMasterVersion</literal> et est réputé pour
            avoir des problèmes avec ces lignes.Si vous déployez un
            serveur esclave en Subversion 1.7 devant un maître en
            version antérieure à la 1.7, vous configurerez le bloc
            <literal>&lt;Location&gt;</literal> de votre serveur
            esclave avec la directive suivante&nbsp;:
            <literal>SVNAdvertiseV2Protocol Off</literal>.</para>

          <tip>
<!--
            <para>For the best results possible, try to run the same
              version of Subversion on your master and slave
              servers.</para>
-->
            <para>Pour obtenir le meilleur fonctionnement possible,
              essayez de faire tourner la même version de Subversion sur
              le maître et sur les esclaves.</para>
          </tip>

          <sidebar>
<!--
            <title>Can We Set Up Replication with svnserve?</title>
-->
            <title>Pouvons-nous mettre en place la réplication avec
              svnserve&nbsp;?</title>

<!--
            <para>If you're using <command>svnserve</command> instead
              of Apache as your server, you can certainly configure
              your repository's hook scripts to invoke
              <command>svnsync</command> as we've shown here, thereby
              causing automatic replication from master to slaves.
              Unfortunately, at the time of this writing there is no way to
              make slave <command>svnserve</command> servers
              automatically proxy write requests back to the master
              server.  This means your users would only be able to
              check out read-only working copies from the slave
              servers.  You'd have to configure your slave servers to
              disallow write access completely.  This might be useful
              for creating read-only <quote>mirrors</quote> of popular
              open source projects, but it's not a transparent
              proxying system.</para>
          </sidebar>

-->
            <para>Si vous utilisez <command>svnserve</command> au lieu
              d'Apache comme serveur, vous pouvez tout à fait configurer
              les procédures automatiques de votre dépôt pour qu'elles
              lancent <command>svnsync</command> comme nous l'avons
              expliqué ici, lançant ainsi la réplication automatique du
              maître vers les esclaves. Malheureusement, à l'heure où
              nous écrivons ces lignes, il n'y a pas moyen de s'assurer
              que des serveurs esclaves <command>svnserve</command>
              envoient automatiquement les requêtes d'écriture vers le
              serveur maître. Cela veut dire que vos utilisateurs ne
              pourraient extraire que des copies de travail en lecture
              seule des serveurs esclaves. Il vous faudrait donc
              configurer vos serveurs esclaves pour qu'ils refusent
              complètement tout accès en écriture. Cela peut être utile
              pour créer des <quote>miroirs</quote> en lecture seule de
              projets open source populaires, mais il ne s'agit alors
              plus d'un système de mandataire d'écriture
              transparent.</para>

          </sidebar>

        </sect4>
      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.extra.other">
<!--
        <title>Other Apache features</title>
-->
        <title>Autres fonctionnalités d'Apache</title>

<!--
        <para>Several of the features already provided by Apache in
          its role as a robust web server can be leveraged for
          increased functionality or security in Subversion as well.
          The Subversion client is able to use SSL (the Secure Sockets
          Layer, discussed earlier).  If your Subversion client is
          built to support SSL, it can access your Apache server
          using <literal>https://</literal> and enjoy a high-quality
          encrypted network session.</para>

-->
        <para>Il y a également plusieurs fonctionnalités fournies par
          Apache, en tant que serveur web robuste, dont on peut tirer
          profit pour améliorer les fonctionnalités ou la sécurité de
          Subversion. Le client Subversion est capable d'utiliser SSL
          (Secure Socket Layer, le protocole de sécurisation des
          échanges sur internet, présenté auparavant). Si votre client
          Subversion a été compilé en incluant le support de SSL, il
          peut accéder à votre serveur Apache en utilisant des URL
          <literal>https://</literal> et bénéficier d'une session réseau
          avec un chiffrement de grande qualité.</para>

<!--
        <para>Equally useful are other features of the Apache and
          Subversion relationship, such as the ability to specify a
          custom port (instead of the default HTTP port 80) or a
          virtual domain name by which the Subversion repository
          should be accessed, or the ability to access the repository
          through an HTTP proxy.</para>

-->
        <para>D'autres fonctionnalités de la relation Apache/Subversion
          sont également tout aussi utiles, comme la possibilité de spécifier
          un port personnalisé (au lieu du port HTTP par défaut, 80) ou un
          nom de domaine virtuel par lequel accéder au dépôt Subversion ou
          encore la possibilité d'accéder au dépôt
          <foreignphrase>via</foreignphrase> un serveur mandataire
          HTTP.</para>

<!--
        <para>Finally, because <command>mod_dav_svn</command> is
          speaking a subset of the WebDAV/DeltaV protocol, it's
          possible to access the repository via third-party DAV
          clients.  Most modern operating systems (Win32, OS X, and
          Linux) have the built-in ability to mount a DAV server as a
          standard network <quote>shared folder.</quote> This is a
          complicated topic, but also wondrous when implemented.  For
          details, read <xref linkend="svn.webdav"/>.</para>

-->
        <para>Enfin, comme <command>mod_dav_svn</command> se sert d'un
          sous-ensemble du protocole WebDAV/DeltaV pour communiquer, il
          est possible d'accéder au dépôt depuis des clients DAV tiers.
          La possibilité de monter un serveur DAV en tant que
          <quote>dossier partagé</quote> réseau standard est intégrée
          dans la plupart des systèmes d'exploitation modernes (Win32,
          OS X et Linux). C'est un sujet compliqué, mais merveilleux
          une fois mis en place. Pour plus de détails, consultez l'<xref
          linkend="svn.webdav"/>.</para>

<!--
        <para>Note that there are a number of other small tweaks one
          can make to <command>mod_dav_svn</command> that perhaps do
          not merit extensive coverage.  For those interested,
          however, we provide a complete list of
          all <filename>httpd.conf</filename> directives
          to which <command>mod_dav_svn</command> responds in
          <xref linkend="svn.serverconfig.httpd.ref.mod_dav_svn"
          />.</para>
-->
        <para>Notez qu'il y a un certain nombre d'autres petits
          <quote>bricolages</quote> que l'on peut faire autour de
          <command>mod_dav_svn</command> qui sont trop obscurs pour être
          mentionnés dans ce chapitre. Pour voir la liste complète de
          toutes les directives <filename>httpd.conf</filename>
          auxquelles <command>mod_dav_svn</command> obéit, reportez-vous
          à <xref linkend="svn.serverconfig.httpd.ref.mod_dav_svn"
          />.</para>

      </sect3>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.httpd.ref">
<!--
      <title>Subversion Apache HTTP Server Configuration Reference</title>
-->
      <title>Référence pour la configuration d'un serveur Subversion
        HTTP Apache</title>

<!--
      <para>In the previous sections, we've mentioned numerous
        directives that administrators can use in their
        <filename>httpd.conf</filename> files to enable and configure
        their Subversion server offering, introducing each directive
        as we also introduce the functionality it toggles.  In this
        section, we'll quickly summarize <emphasis>all</emphasis> the
        configuration directives supported by both of the Apache HTTP
        Server modules which are provided as part of the standard
        Subversion distribution.</para>
-->
      <para>Dans les sections <foreignphrase>supra</foreignphrase>, nous
        avons mentionné de nombreuses directives que les administrateurs
        peuvent utiliser dans leurs fichiers
        <filename>httpd.conf</filename> pour activer des options et
        configurer leur <quote>offre de service</quote>. Chaque
        directive a fait l'objet d'une introduction et d'une brève
        présentation de la fonctionnalité qu'elle pilote. Dans cette
        section, nous allons rapidement résumer
        <emphasis>toutes</emphasis> les directives proposées par à la
        fois le serveur HTTP Apache et les modules Subversion qui sont
        livrés avec la distribution standard Subversion.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.ref.mod_dav_svn">
<!--
        <title>mod_dav_svn configuration directives</title>
-->
        <title>Directives de configuration de mod_dav_svn</title>

<!--
        <para>The following configuration directives are recognized
          and supported by Subversion's Apache HTTP Server module,
          <command>mod_dav_svn</command>.</para>
-->
        <para>Les directive de configuration
          <foreignphrase>infra</foreignphrase> sont reconnues et
          interprétées par le module Subversion du serveur HTTP Apache
          <command>mod_dav_svn</command>.</para>

        <variablelist>

          <varlistentry>
            <term><literal>DAV svn</literal></term>
            <listitem>

<!--
              <para>Must be included in any
                <literal>Directory</literal> or <literal>Location</literal>
                block for a Subversion repository.  It
                tells <command>httpd</command> to use the Subversion
                backend for <command>mod_dav</command> to handle all
                requests.</para>
-->
              <para>Doit être incluse dans tout bloc
                <literal>Directory</literal> ou
                <literal>Location</literal> d'un dépôt Subversion. Elle
                indique à <command>httpd</command> d'utiliser le module
                <command>mod_dav</command> pour répondre à toutes les
                requêtes.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNActivitiesDB <!--
              <replaceable>directory-path</replaceable></literal></term> -->
              <replaceable>chemin-vers-répertoire</replaceable></literal></term>
            <listitem>

<!--
              <para>Specifies the location in the filesystem where the
                activities database should be stored.  By default,
                <command>mod_dav_svn</command> creates and uses a
                directory in the repository
                called <filename>dav/activities.d</filename>.  The
                path specified with this option must be an absolute
                path.</para>
-->
              <para>Spécifie l'emplacement dans le système de fichiers
                de la base de données qui stocke les rapports
                d'activités. Par défaut, <command>mod_dav_svn</command>
                crée et utilise un répertoire dans le dépôt appelé
                <filename>dav/activities.d</filename>. Le chemin
                spécifié par cette option doit être un chemin
                absolu.</para>

<!--
              <para>If specified for
                an <literal>SVNParentPath</literal>
                area, <command>mod_dav_svn</command> appends the
                basename of the repository to the path specified here.
                For example:</para>
-->

              <para>Si elle est incluse dans un bloc
                <literal>SVNParentPath</literal>,
                <command>mod_dav_svn</command> ajoute le nom du
                répertoire au chemin spécifié ici. Par
                exemple&nbsp;:</para>

              <informalexample>
<!--
          <screen>
&lt;Location /svn&gt;
  DAV svn

  # any "/svn/foo" URL will map to a repository in
  # /net/svn.nfs/repositories/foo
  SVNParentPath         "/net/svn.nfs/repositories"

  # any "/svn/foo" URL will map to an activities db in
  #  /var/db/svn/activities/foo
  SVNActivitiesDB       "/var/db/svn/activities"
&lt;/Location&gt;
</screen>
-->
          <screen>
&lt;Location /svn&gt;
  DAV svn

  # toute URL "/svn/foo" correspond à un dépôt dans
  # /net/svn.nfs/depots/truc
  SVNParentPath         "/net/svn.nfs/depots"

  # toute URL "/svn/foo" correspond à un fichier d'activités dans
  #  /var/db/svn/activites/truc
  SVNActivitiesDB       "/var/db/svn/activites"
&lt;/Location&gt;
</screen>
        </informalexample>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNAdvertiseV2Protocol On|Off</literal></term>
            <listitem>

<!--
              <para>New to Subversion 1.7, this toggles
                whether <command>mod_dav_svn</command> advertises its
                support for the new version of its HTTP protocol also
                introduced in that version.  Most admins will not wish
                to use this directive (which is <literal>On</literal>
                by default), choosing instead to enjoy the performance
                benefits that the new protocol offers.  However, when
                configuring a server as a write-through proxy to
                another server which does not support the new
                protocol, set this directive's value
                to <literal>Off</literal>.</para>
-->
              <para>Nouveau dans Subversion 1.7. Cette directive indique
                si <command>mod_dav_svn</command> annonce la
                compatibilité pour la nouvelle version du protocole HTTP
                qui a été introduite dans cette version. La plupart des
                administrateurs n'utilisent pas cette directive (dont
                la valeur par défaut est <literal>On</literal>) car elle
                préfère bénéficier des performances accrues offertes par
                le nouveau protocole. Cependant, si vous configurez un
                serveur en tant que mandataire en écriture devant un
                serveur qui n'est pas compatible avec le nouveau
                protocole, affectez la valeur <literal>Off</literal> à
                cette directive.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNAllowBulkUpdates On|Off|Prefer</literal></term>
            <listitem>

<!--
              <para>Toggles support for all-inclusive responses to
                update-style requests.  Subversion clients use
                <literal>REPORT</literal> requests to get information
                about directory tree checkouts and updates from
                <command>mod_dav_svn</command>.  They can ask the
                server to send that information in one of two ways:
                with the entirety of the tree's information in one
                massive (bulk) response, or with a
                <firstterm>skelta</firstterm> (a skeletal
                representation of a tree delta) which contains just
                enough information for the client to know what
                <emphasis>additional</emphasis> data to fetch from the
                server using subsequent requests.  When this directive
                is included with a value of <literal>Off</literal>,
                <command>mod_dav_svn</command> will only ever respond
                to these <literal>REPORT</literal> requests with
                skelta responses, regardless of the type of responses
                requested by the client.</para>
-->
              <para>Autorise la compatibilité avec les réponses
                <quote>tout compris</quote> pour les requêtes de mises
                à jour de type <literal>REPORT</literal>. Les clients
                Subversion utilisent des requêtes
                <literal>REPORT</literal> vers
                <command>mod_dav_svn</command> pour obtenir des
                informations lors des extractions et des mises à jour.
                Ils peuvent demander au serveur d'envoyer les
                informations soit sous la forme d'une seule réponse
                (groupée ou <foreignphrase>bulk</foreignphrase> en anglais)
                englobant les informations de toute l'arborescence, soit
                sous la forme de <firstterm>skeltas</firstterm> qui ne
                contiennent que l'information juste suffisante pour que
                le client sache quelles données
                <emphasis>supplémentaires</emphasis> il doit demander au
                serveur dans les requêtes suivantes. Quand cette directive
                est incluse avec la valeur <literal>Off</literal>,
                <command>mod_dav_svn</command> ne répond que par des
                skeltas aux requêtes de type <literal>REPORT</literal>,
                quel que soit le type de réponse demandé par le
                client.</para>

<!--
              <para>The default value of this directive is
                <literal>On</literal>, which permits the server to
                reply to update requests using the style of response
                (bulk or skelta) requested by the client.  Beginning
                in Subversion 1.8, this directive also accepts a value
                of <literal>Prefer</literal>, which is similar
                to <literal>On</literal> but additionally causes the
                server to announce to clients that it
                <emphasis>prefers</emphasis> to handle bulk update
                requests.</para>
-->

             <para>La valeur par défaut pour cette directive est
                <literal>On</literal>, ce qui permet au serveur de
                répondre aux requêtes de mises-à-jour en utilisant
                le type de réponse (groupée ou skelta) demandé par le
                client. À partir de Subversion 1.8, cette directive
                reconnaît également la valeur <literal>Prefer</literal>.
                Son comportement est similaire à <literal>On</literal>
                sauf que le serveur annonce au client qu'il
                <emphasis>préfère</emphasis> traiter les requêtes
                groupées.</para>

<!--
              <para>Most folks won't need to use this directive at
                all.  It primarily exists for administrators who
                wish&mdash;for security or auditing reasons&mdash;to
                force Subversion clients to fetch individually all the
                files and directories needed for updates and
                checkouts, thus leaving an audit trail of
                <literal>GET</literal> and <literal>PROPFIND</literal>
                requests in Apache's logs.</para>
-->
              <para>Beaucoup d'entre vous n'utiliseront pas du tout
                cette directive. Elle existe principalement pour les
                administrateurs qui souhaitent (pour des raisons de
                sécurité ou d'audit) forcer les clients Subversion à
                réclamer individuellement chaque fichier et répertoire
                dont il a besoin pour la mise à jour ou l'extraction,
                laissant toute une série de traces de requêtes
                <literal>GET</literal> et <literal>PROPFIND</literal>
                dans les journaux d'Apache.</para>

            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>SVNAutoversioning On|Off</literal></term>
            <listitem>

<!--
              <para>When its value is
                <literal>On</literal>, allows write requests from
                WebDAV clients to result in automatic commits.  A
                generic log message is auto-generated and attached to
                each revision.  If you enable autoversioning, you'll
                likely want to set <literal>ModMimeUsePathInfo
                On</literal> so that <command>mod_mime</command> can
                set <literal>svn:mime-type</literal> to the correct
                MIME type automatically (as best as
                <command>mod_mime</command> is able to, of course).
                For more information, see <xref
                linkend="svn.webdav"/>.  The default value of this
                directive is <literal>Off</literal>.</para>
-->
              <para>Quand la valeur est <literal>On</literal>, autorise
                les requêtes en écriture depuis des clients WebDAV à
                créer automatiquement des propagations. Un commentaire de
                propagation générique est créé et joint à la révision.
                Si vous autorisez l'auto-versionnement, vous définirez
                certainement aussi <literal>ModMimeUsePathInfo
                On</literal> afin que <command>mod_mime</command> puisse
                affecter automatiquement le bon type MIME à la propriété
                <literal>svn:mime-type</literal> (dans la mesure où
                <command>mod_mime</command> en est capable, bien sûr).
                Pour plus d'informations, lisez <xref
                linkend="svn.webdav"/>.  La valeur par défaut est
                <literal>Off</literal>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNCacheFullTexts On|Off</literal></term>
            <listitem>

<!--
              <para>When set to <literal>On</literal>, this tells
                Subversion to cache content fulltexts if sufficient
                in-memory cache is available, which could offer a
                significant performance benefit to the server.  (See
                also the <literal>SVNInMemoryCacheSize</literal>
                directive.)  The default value of this directive
                is <literal>Off</literal>.</para>
-->
              <para>Lorsque la valeur est <literal>On</literal>, cela
                demande à Subversion de mettre en cache, s'il y a
                suffisamment de place, le contenu textuel. Une
                amélioration significative des performances du serveur
                est prévisible (voir aussi la directive
                <literal>SVNInMemoryCacheSize</literal>). La valeur par
                défaut est <literal>Off</literal>.</para>

            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>SVNCacheTextDeltas On|Off</literal></term>
            <listitem>

<!--
              <para>When set to <literal>On</literal>, this tells
                Subversion to cache content deltas if sufficient
                in-memory cache is available, which could offer a
                significant performance benefit to the server.  (See
                also the <literal>SVNInMemoryCacheSize</literal>
                directive.)  The default value of this directive
                is <literal>Off</literal>.</para>
-->
              <para>Quand la valeur est <literal>On</literal>, cela
                demande à Subversion de mettre en cache, s'il y a
                suffisamment de place, le contenu des deltas. Une
                amélioration significative des performances du serveur
                est prévisible (voir aussi la directive
                <literal>SVNInMemoryCacheSize</literal>). La valeur par
                défaut est <literal>Off</literal>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNCompressionLevel <!--
              <replaceable>level</replaceable></literal></term> -->
              <replaceable>niveau</replaceable></literal></term>
            <listitem>

<!--
              <para>Specifies the compression level used when sending
                file content over the network.  A value
                of <literal>0</literal> disables compression
                altogether, and <literal>9</literal> is the maximum
                value.  <literal>5</literal> is the default
                value.</para>
-->
              <para>Spécifie le niveau de compression utilisé lors de
                l'envoi des fichiers sur le réseau. Une valeur de
                <literal>0</literal> interdit la compression et
                <literal>9</literal> constitue la valeur maximale.
                <literal>5</literal> est la valeur par défaut.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNHooksEnv<!--
              <replaceable>file-path</replaceable></literal></term>-->
              <replaceable>chemin-vers-fichier</replaceable></literal></term>
            <listitem>

<!--
              <para>Specifies the location of the Subversion
                repository hook script environment configuration file.
                This file is used to describe the initial environment
                in which repository hook scripts are executed.  For
                more on this feature, see
                <xref linkend="svn.reposadmin.hooks.configuration"
                />.</para>
-->
              <para>Spécifie l'emplacement du fichier de configuration
                de l'environnement des procédures automatiques. Ce
                fichier est utilisé pour décrire l'environnement initial
                dans lequel sont exécutés les procédures automatiques.
                Pour davantage d'informations sur cette fonctionnalité,
                lisez <xref linkend="svn.reposadmin.hooks.configuration"
                />.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNIndexXSLT
              <replaceable>directory-path</replaceable></literal></term>
            <listitem>

<!--
              <para>Specifies the URI of an XSL transformation for
                directory indexes.  This directive is optional.</para>
-->
              <para>Spécifie l'URI d'une transformation XSL pour
                l'index d'un répertoire. Cette directive est
                optionnelle.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNInMemoryCacheSize <!--
              <replaceable>size</replaceable></literal></term> -->
              <replaceable>taille</replaceable></literal></term>
            <listitem>

<!--
              <para>Specifies the maximum size (in kbytes) per process
                of Subversion's in-memory object cache.  The default
                value is <literal>16384</literal>; use a value
                of <literal>0</literal> to deactivate this cache
                altogether.</para>
-->
              <para>Spécifie la taille maximum (en kilooctets) de la
                mémoire cache par processus Subversion. La valeur par
                défaut est <literal>16384</literal>&nbsp;; utilisez la
                valeur <literal>0</literal> pour ne pas avoir de
                cache.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNListParentPath On|Off</literal></term>
            <listitem>

<!--
              <para>When set to <literal>On</literal>, allows
                a <literal>GET</literal>
                of <literal>SVNParentPath</literal>, which results in
                a listing of all repositories under that path.  The
                default setting is
                <literal>Off</literal>.</para>
-->
              <para>Si vous affectez la valeur <literal>On</literal>,
                une requête <literal>GET</literal> sur
                <literal>SVNParentPath</literal> listera tous les
                dépôts sous ce chemin. La valeur par défaut est
                <literal>Off</literal>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNMasterURI
              <replaceable>url</replaceable></literal></term>
            <listitem>

<!--
              <para>Specifies a URI to the master Subversion
                repository (used for a write-through proxy).</para>
-->
              <para>Spécifie l'URI du dépôt du serveur maître Subversion
                (utilisée dans le cas d'un serveur mandataire en
                écriture).</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNMasterVersion
              <replaceable>X.Y</replaceable></literal></term>
            <listitem>
<!--

              <para>Specifies the release version number of the
                Subversion instance which is serving the master
                repository (used for a write-through proxy).</para>
-->
              <para>Spécifie le numéro de version de l'instance
                Subversion qui héberge le dépôt maître
                (utilisé pour un mandataire en écriture).</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNParentPath
              <replaceable>directory-path</replaceable></literal></term>
            <listitem>

<!--
              <para>Specifies the location in the filesystem of a
                parent directory whose child directories are
                Subversion repositories.  In a configuration block for
                a Subversion repository, either this directive or
                <literal>SVNPath</literal> must be present, but not
                both.</para>
-->
              <para>Spécifie l'emplacement dans le système de fichiers
                d'un répertoire parent dont les dossiers enfants sont
                des dépôts Subversion. Dans un bloc de configuration
                pour un dépôt Subversion, ou bien cette directive est
                présente, ou bien c'est la variable
                <literal>SVNPath</literal>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNPath <!--
              <replaceable>directory-path</replaceable></literal></term> -->
              <replaceable>chemin-vers-repertoire</replaceable></literal></term>
            <listitem>

<!--
              <para>Specifies the location in the
                filesystem for a Subversion repository's files.  In a
                configuration block for a Subversion repository,
                either this directive or
                <literal>SVNParentPath</literal> must be present, but
                not both.</para>
-->
              <para>Spécifie l'emplacement dans le système de fichiers
                des fichiers stockant le dépôt Subversion.
                Dans un bloc de configuration pour un dépôt Subversion,
                ou bien cette directive est présente, ou bien c'est la
                variable <literal>SVNParentPath</literal>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNPathAuthz On|Off|short_circuit</literal></term>
            <listitem>

<!--
              <para>Controls path-based authorization by enabling
                subrequests (<literal>On</literal>), disabling
                subrequests (<literal>Off</literal>; see <xref
                linkend="svn.serverconfig.httpd.authz.pathauthzoff"/>),
                or querying <command>mod_authz_svn</command> directly
                (<literal>short_circuit</literal>).  The default
                value of this directive is <literal>On</literal>.</para>
-->
              <para>Configure le contrôle d'accès sur les chemins en
                autorisant (<literal>On</literal>) les sous-requêtes,
                en les désactivant (<literal>Off</literal>&nbsp;;
                reportez-vous à <xref
                linkend="svn.serverconfig.httpd.authz.pathauthzoff"/>)
                ou en demandant directement à
                <command>mod_authz_svn</command>
                (<literal>short_circuit</literal>). La valeur par
                défaut est <literal>On</literal>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNReposName <!--
              <replaceable>name</replaceable></literal></term> -->
              <replaceable>nom</replaceable></literal></term>
            <listitem>

<!--
              <para>Specifies the name of a Subversion repository for
                use in <literal>HTTP GET</literal> responses.  This
                value will be prepended to the title of all directory
                listings (which are served when you navigate to a
                Subversion repository with a web browser).  This
                directive is optional.</para>
-->
              <para>Spécifie le nom du dépôt Subversion à utiliser dans
                les réponses à des requêtes <literal>HTTP GET</literal>.
                Cette valeur sera ajoutée au début du titre dans tous
                les affichages de répertoires (qui sont transmis lorsque
                vous naviguez dans un dépôt Subversion avec un
                navigateur Web). Cette directive est optionnelle.</para>

               <note>
<!--
                 <para>Subversion will not use the repository name as
                   configured via this directive when trying to match
                   rules in access control files.  The repository names
                   used in that file's syntax are always derived from
                   the repository URL.  See
                   <xref linkend="svn.serverconfig.pathbasedauthz.getting-started"
                   /> for details.</para>
-->
                 <para>Subversion n'utilise pas le nom du dépôt tel que
                   configuré par cette directive lorsqu'il établit les
                   correspondances dans les règles de contrôle d'accès.
                   Les noms de dépôts utilisés dans ce fichier sont
                   toujours pris à partir de l'URL du dépôt. Lisez
                   <xref linkend="svn.serverconfig.pathbasedauthz.getting-started"
                   /> pour obtenir des détails.</para>
               </note>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNSpecialURI <!--
              <replaceable>component</replaceable></literal></term> -->
              <replaceable>composant</replaceable></literal></term>
            <listitem>

<!--
              <para>Specifies the URI component (namespace) for
                special Subversion resources.  The default is
                <literal>!svn</literal>, and most
                administrators will never use this directive.  Set
                this only if there is a pressing need to have a file
                named <filename>!svn</filename> in your repository.
                If you change this on a server already in use, it will
                break all of the outstanding working copies, and your
                users will hunt you down with pitchforks and flaming
                torches.</para>

-->
              <para>Spécifie l'URI d'un composant (espace de noms) pour
                les ressources spéciales Subversion. La valeur par
                défaut est <literal>!svn</literal> et la majorité des
                administrateurs n'utilisera jamais cette directive.
                Définissez la uniquement si vous avez absolument besoin
                d'avoir un fichier dont le nom est
                <filename>!svn</filename> dans votre dépôt. Si vous
                changez cette valeur sur un serveur déjà en service,
                cela cassera toutes les copies de travail déjà
                extraites et vos utilisateurs vous pourchasseront avec
                des piques et des fers portés au rouge.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>SVNUseUTF8 On|Off</literal></term>
            <listitem>

<!--
              <para>When set to <literal>On</literal>,
                <command>mod_dav_svn</command> will communicate with
                hook scripts using repository root paths encoded in
                UTF-8, and will expect those scripts to likewise
                generate output (such as error messages) encoded in
                UTF-8.  The default value of this option
                is <literal>Off</literal>, which means
                that <command>mod_dav_svn</command> assumes a 7-bit
                ASCII encoding for its hook script interactions.  This
                option is available as of Subversion 1.8.</para>
-->
              <para>Quand la valeur est <literal>On</literal>,
                <command>mod_dav_svn</command> communique avec les
                procédures automatiques en utilisant les chemins racines
                du dépôt encodés en UTF-8 et il s'attend à ce que les
                procédures automatiques génèrent des sorties (tels que
                les messages d'erreurs) aussi en UTF-8. La valeur par
                défaut est <literal>Off</literal>, ce qui signifie que
                <command>mod_dav_svn</command> suppose que les
                procédures automatiques interagissent en ASCII 7 bits.
                Cette option est disponible pour Subversion 1.8 et
                ultérieurs.</para>

              <note>
<!--
                <para>Administrators should ensure that the character
                  set and encoding expectations of hook scripts match
                  all the ways they might be invoked.  For example, if
                  one repository is served by both <command>httpd</command>
                  and <command>svnserve</command>, <command>svnserve</command>
                  should also be configured to use UTF-8 (by setting
                  an appropriate locale in its environment) if this
                  option is enabled for <command>mod_dav_svn</command>.
                  Also, local filesystem paths containing non-ASCII
                  characters which will be accessed by those scripts
                  (such as repository root paths) must be properly
                  encoded in the filesystem to match the scripts'
                  expectations.</para>
-->
                <para>Les administrateurs doivent s'assurer que
                  l'encodage attendu par les procédures automatiques
                  est bien conforme à celui utilisé pour toutes les
                  façons dont elles peuvent être appelées. Par exemple,
                  si un dépôt est accessible à la fois par
                  <command>httpd</command> et par
                  <command>svnserve</command>,
                  <command>svnserve</command> doit être configuré aussi
                  pour utiliser UTF-8 (en définissant correctement les
                  <quote>locales</quote> dans l'environnement) si cette
                  option est définie pour
                  <command>mod_dav_svn</command>. Aussi, les chemins
                  dans le système de fichiers local qui contiennent
                  des caractères non ASCII et qui sont référencés par
                  ces procédures (tels que les chemins racines des
                  dépôts) doivent être proprement encodés dans le
                  système de fichiers pour correspondre aux attendus des
                  procédures automatiques.</para>
              </note>

            </listitem>
          </varlistentry>

        </variablelist>
      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.serverconfig.httpd.ref.mod_authz_svn">
<!--
        <title>mod_authz_svn configuration directives</title>
-->
        <title>Directives de configuration de mod_authz_svn</title>

<!--
        <para>The following configuration directives are provided
          by <command>mod_authz_svn</command>, Subversion's path-based
          authorization Apache HTTP Server module.  For an in-depth
          description of using path-based authorization in Subversion,
          see <xref linkend="svn.serverconfig.pathbasedauthz"/>.</para>
-->
        <para>Les directives de configurations suivantes concernent
          <command>mod_authz_svn</command>, le module Subversion pour
          le contrôle d'accès basé sur les chemins du serveur HTTP
          Apache. Pour une description approfondie du contrôle d'accès
          basé sur les chemins dans Subversion, reportez-vous à
          <xref linkend="svn.serverconfig.pathbasedauthz"/>.</para>

        <variablelist>

          <varlistentry>
            <term><literal>AuthzForceUsernameCase Upper|Lower</literal></term>
            <listitem>

<!--
              <para>Set to <literal>Upper</literal>
                or <literal>Lower</literal> to perform case conversion
                of the specified sort on the authenticated username
                before checking it for authorization.  While usernames
                are compared in a case-sensitive fashion against those
                referenced in the authorization rules file, this
                directive can at least normalize variably-cased
                usernames into something consistent.</para>
-->
              <para>Définissez la valeur à <literal>Upper</literal>
                (resp. <literal>Lower</literal>) pour convertir
                l'identifiant en majuscules (resp. minuscules) avant de
                le soumettre au contrôle d'accès. Comme les identifiants
                sont comparés avec le fichier de contrôle d'accès en
                étant sensibles à la casse, cette directive permet au
                moins de normaliser des identifiants dont la casse varie
                vers un ensemble cohérent.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>AuthzSVNAccessFile <!--
              <replaceable>file-path</replaceable></literal></term> -->
              <replaceable>chemin-vers-fichier</replaceable></literal></term>
            <listitem>

<!--
              <para>Consult <replaceable>file-path</replaceable> for
                access rules describing the permissions for paths in
                Subversion repository.  In a configuration
                block for a Subversion repository or a colletion of repositories,
                either this directive or
                <literal>AuthzSVNReposRelativeAccessFile</literal> can be
                present, but not both.</para>
-->
              <para>Consulte le fichier
                <replaceable>chemin-vers-fichier</replaceable> pour le
                contrôle d'accès des chemins dans le dépôt Subversion. Dans
                un bloc de configuration d'un dépôt Subversion ou d'un
                ensemble de dépôts, soit cette directive, soit
                <literal>AuthzSVNReposRelativeAccessFile</literal> peuvent
                être présentes, mais pas les deux.</para>

<!--
              <para>Beginning with Subversion 1.8,
                <literal>AuthzSVNAccessFile</literal> accepts a URL to a file
                stored inside a Subversion repository&mdash;either the
                same repository to which the access rules are
                being applied, or an entirely different repository.</para>
-->
              <para>À partir de Subversion 1.8,
                <literal>AuthzSVNAccessFile</literal> accepte une URL qui
                pointe vers un fichier stocké dans un dépôt Subversion. Il
                est possible de stocker le fichier dans le même dépôt que
                celui où les règles de contrôle d'accès s'appliquent, ou dans
                un autre dépôt.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>AuthzSVNAnonymous On|Off</literal></term>
            <listitem>

<!--
              <para>Set to <literal>Off</literal> to disable two
                special-case behaviours of this module: interaction
                with the <literal>Satisfy Any</literal> directive and
                enforcement of the authorization policy even when no
                <literal>Require</literal> directives are present.
                The default value of this directive is
                <literal>On</literal>.</para>
-->
              <para>Définissez à <literal>Off</literal> pour désactiver
                deux comportements particuliers de ce module&nbsp;:
                l'interaction avec la directive <literal>Satisfy
                Any</literal> et le forçage de la politique de contrôle
                d'accès même si aucune directive
                <literal>Require</literal> n'est présente. La valeur par
                défaut pour cette directive est
                <literal>On</literal>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>AuthzSVNAuthoritative On|Off</literal></term>
            <listitem>

<!--
              <para>Set to <literal>Off</literal> to allow access
                control to be passed along to lower modules.  The
                default value of this directive is
                <literal>On</literal>.</para>
-->
              <para>Définissez à <literal>Off</literal> pour déléguer
                le contrôle d'accès à des modules plus bas. La valeur
                par défaut pour cette directive est
                <literal>On</literal>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>AuthzSVNNoAuthWhenAnonymousAllowed On|Off</literal></term>
            <listitem>

<!--
              <para>Set to <literal>On</literal> to suppress
                authentication and authorization for requests which
                anonymous users are allowed to perform.  The default
                value of this directive is
                <literal>On</literal>.</para>
-->
              <para>Définissez à <literal>On</literal> pour supprimer
                l'authentification et le contrôle d'accès pour les
                requêtes pour lesquelles les utiilisateurs anonymes sont
                autorisés. La valeur par défaut pour cette directive est
                <literal>On</literal>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>AuthzSVNReposRelativeAccessFile <!--
              <replaceable>file-path</replaceable></literal></term> -->
              <replaceable>chemin-vers-fichier</replaceable></literal></term>
            <listitem>

<!--
              <para>Consult <replaceable>file-path</replaceable> for
                access rules describing the permissions for paths in
                Subversion repository.  Unlike
                <literal>AuthzSVNAccessFile</literal>, the path specified
                for <literal>AuthzSVNReposRelativeAccessFile</literal> is
                relative to the <filename>conf/</filename> directory in
                the repository on
                filesystem.  In other words, the <replaceable>file-path</replaceable>
                specifies a per repository file that must be accessible by
                the relative path for all repositories in a configuration block.
                In a configuration block for a Subversion repository or a collection
                of repositories either this directive or
                <literal>AuthzSVNAccessFile</literal> can be present, but not both.
                This option is available as of Subversion 1.7.</para>
-->
              <para>Consulter <replaceable>chemin-vers-fichier</replaceable>
                pour les règles de contrôle d'accès relatives aux chemins
                dans le dépôt Subversion. Au contraire de
                <literal>AuthzSVNAccessFile</literal>, le chemin spécifié
                dans <literal>AuthzSVNReposRelativeAccessFile</literal>
                est relatif au répertoire <filename>conf/</filename> dans le 
                dépôt sur le système de fichiers.  En d'autres termes,
                <replaceable>chemin-vers-fichier</replaceable> spécifie un
                fichier par dépôt qui doit être accessible par ce chemin
                relatif dans tous les dépôts. Dans un bloc du fichier de
                configuration, soit cette directive, soit
                <literal>AuthzSVNAccessFile</literal> doit être présente,
                mais pas les deux. Cette options est disponible à partir
                de Subversion 1.7.</para>
<!--
              <para>Beginning with Subversion 1.8,
                <literal>AuthzSVNReposRelativeAccessFile</literal> accepts a
                URL to a file
                stored inside a Subversion repository&mdash;either the
                same repository to which the access rules are
                being applied, or an entirely different repository.</para>
-->
              <para>À partir de Subversion 1.8,
                <literal>AuthzSVNReposRelativeAccessFile</literal> accepte une 
                URL pointant vers un fichier situé à l'intérieur d'un dépôt 
                Subversion. Il est possible que ce fichier soit à l'intérieur 
                du même dépôt que celui dont on définit les règles de contrôle
                d'accès, ou à l'intérieur d'un autre dépôt.</para>

            </listitem>
          </varlistentry>

        </variablelist>
      </sect3>

    </sect2>
  </sect1>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.serverconfig.pathbasedauthz">

<!--
    <title>Path-Based Authorization</title>
-->
    <title>Contrôle d'accès basé sur les chemins</title>

<!--
    <para>Both Apache and <command>svnserve</command> are capable of
      granting (or denying) permissions to users.  Typically this is
      done over the entire repository: a user can read the repository
      (or not), and she can write to the repository (or not).</para>
-->
    <para>Apache et <command>svnserve</command> sont tous deux capables
      d'accorder ou de refuser l'accès aux utilisateurs. Généralement
      c'est géré globalement au niveau du dépôt&nbsp;: un utilisateur
      peut accéder (ou pas) au dépôt en lecture et il peut accéder
      (ou pas) au dépôt en écriture.</para>

<!--
    <para>It's also possible, however, to define finer-grained access
      rules.  One set of users may have permission to write to a
      certain directory in the repository, but not others; another
      directory might not even be readable by all but a few special
      people.  It's even possible to restrict access on a per file
      basis.</para>
-->
    <para>Il est pourtant aussi possible de définir des règles d'accès
      possédant une granularité plus fine. Un ensemble d'utilisateurs
      peut alors obtenir le droit d'écrire dans certains répertoires du
      dépôt mais pas dans d'autres&nbsp;; parallèlement, un autre
      répertoire peut très bien ne pas être accessible en lecture pour
      la majorité des utilisateurs. Il est même possible de restreindre
      l'accès fichier par fichier.</para>

<!--
    <para>Both Subversion servers use a common file format to describe
      these path-based access rules.  In this section, we will
      explain that file format, as well how to configure your
      Subversion server to use it for managing path-based
      authorization.</para>
-->
    <para>Les deux types de serveurs utilisent un format de fichier
      commun pour décrire les règles d'accès basées sur les chemins.
      Dans cette section, nous allons expliquer ce format de fichier et
      comment configurer le serveur Subversion afin qu'il l'utilise pour
      gérer un contrôle d'accès basé sur les chemins.</para>

    <sidebar>
<!--
      <title>Do You Really Need Path-Based Access Control?</title>
-->
      <title>Avez-vous vraiment besoin d'un contrôle d'accès basé sur
        les chemins&nbsp;?</title>

<!--
      <para>A lot of administrators setting up Subversion for the
        first time tend to jump into path-based access control without
        giving it a lot of thought.  The administrator usually knows
        which teams of people are working on which projects, so it's
        easy to jump in and grant certain teams access to certain
        directories and not others.  It seems like a natural thing,
        and it appeases the administrator's desire to maintain tight
        control of the repository.</para>

-->
      <para>De nombreux administrateurs qui mettent en place Subversion
        pour la première fois ont tendance à se lancer dans le contrôle
        d'accès basé sur les chemins sans trop y réfléchir.
        L'administrateur sait en général quelles équipes travaillent sur
        quel projet, il est dès lors facile de démarrer en accordant
        l'accès pour certains répertoires à certaines équipes et pas à
        d'autres. Ceci peut sembler assez naturel, et assouvir le désir
        de l'administrateur de contrôler le dépôt de très près.</para>

<!--
      <para>Note, though, that there are often invisible (and
        visible!) costs associated with this feature.  In the visible
        category, the server needs to do a lot more work to ensure
        that the user has the right to read or write each specific
        path; in certain situations, there's very noticeable
        performance loss.  In the invisible category, consider the
        culture you're creating.  Most of the time, while certain
        users <emphasis>shouldn't</emphasis> be committing changes to
        certain parts of the repository, that social contract doesn't
        need to be technologically enforced.  Teams can sometimes
        spontaneously collaborate with each other; someone may want to
        help someone else out by committing to an area she doesn't
        normally work on.  By preventing this sort of thing at the
        server level, you're setting up barriers to unexpected
        collaboration.  You're also creating a bunch of rules that
        need to be maintained as projects develop, new users are
        added, and so on.  It's a bunch of extra work to
        maintain.</para>

-->
      <para>Notez cependant qu'il y a souvent des coûts invisibles (et
        visibles&nbsp;!) associés à cette fonctionnalité. Dans la
        catégorie visible, le serveur doit faire beaucoup de travail
        pour s'assurer que l'utilisateur a le droit de lire ou d'écrire
        sur chaque chemin spécifié&nbsp;; dans certaines situations, il
        y a une chute très significative des performances. Dans la
        catégorie invisible, réfléchissez à la culture que vous créez.
        La plupart du temps, même si certains utilisateurs ne devraient
        pas propager de modifications dans certaines parties du dépôt,
        ce contrat social n'a pas besoin de solution technologique pour
        être respecté. Les équipes peuvent parfois collaborer
        spontanément entre elles&nbsp;; quelqu'un peut vouloir aider
        quelqu'un d'autre en effectuant une propagation dans une zone
        qui n'est pas celle où il travaille habituellement. En
        interdisant ce genre de choses au niveau du serveur, vous mettez
        en place une barrière à la collaboration. Vous créez aussi tout
        un tas de règles qui doivent être gérées au fur et à mesure que
        les projets se développent, que de nouveaux utilisateurs sont
        ajoutés,&nbsp;etc. C'est une quantité de travail supplémentaire
        à fournir.</para>

<!--
        <para>Remember that this is a version control system!  Even if
        somebody accidentally commits a change to something she
        shouldn't, it's easy to undo the change.  And if a user
        commits to the wrong place with deliberate malice, it's a
        social problem anyway, and that the problem needs to be dealt
        with outside Subversion.</para>

-->
       <para>Souvenez-vous que c'est un système de gestion de
          versions&nbsp;! Même si quelqu'un propageait accidentellement
          une modification là où il n'aurait pas du, revenir en arrière
          reste très facile. Et si un utilisateur propage au mauvais
          endroit de façon intentionnelle, c'est un problème social qui
          doit être réglé, de toute manière, en dehors de
          Subversion.</para>

<!--
      <para>So, before you begin restricting users' access rights, ask
        yourself whether there's a real, honest need for this, or
        whether it's just something that <quote>sounds good</quote> to
        an administrator.  Decide whether it's worth sacrificing some
        server speed, and remember that there's very little risk
        involved; it's bad to become dependent on technology as a
        crutch for social problems.<footnote><para>A common theme in
        this book!</para></footnote></para>

-->
      <para>Bref, avant que vous ne commenciez à restreindre les droits
        d'accès des utilisateurs, demandez-vous si cela correspond à un
        véritable besoin ou si c'est juste quelque chose qui
        <quote>plaît</quote> à l'administrateur. Demandez-vous si ça
        vaut la peine de sacrifier de la vitesse côté serveur et
        souvenez-vous que les risques associés sont très minimes&nbsp;;
        ce n'est pas une bonne idée d'attendre de la technologie qu'elle
        résolve les problèmes sociaux<footnote>
          <para>Un thème récurrent dans ce livre&nbsp;!</para>
        </footnote>.
      </para>

<!--
      <para>As an example to ponder, consider that the Subversion
        project itself has always had a notion of who is allowed to
        commit where, but it's always been enforced socially.  This is
        a good model of community trust, especially for open source
        projects.  Of course, sometimes there <emphasis>are</emphasis>
        truly legitimate needs for path-based access control; within
        corporations, for example, certain types of data really can be
        sensitive, and access needs to be genuinely restricted to
        small groups of people.</para>

-->
      <para>En guise d'exemple à méditer, prenez le cas du projet
        Subversion lui-même, au sein duquel il a toujours été clairement
        défini quel utilisateur avait le droit d'effectuer des
        propagations à quel endroit, règles qui ont toujours été
        appliquées socialement. C'est un bon modèle de confiance dans
        la communauté, en particulier pour les projets open source.
        Bien sûr, il peut parfois y avoir de véritables besoins
        légitimant un contrôle d'accès basé sur les chemins&nbsp;; dans
        les grandes entreprises, par exemple, certaines données
        sont vraiment sensibles et l'accès à ces données
        doit  être restreint à un petit groupe de personnes.</para>

    </sidebar>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.pathbasedauthz.getting-started">

<!--
      <title>Getting Started with Path-Based Access Control</title>
-->
      <title>Introduction au contrôle d'accès basé sur les
        chemins</title>

<!--
      <para>Subversion offers path-based access control in Apache via
        the <command>mod_authz_svn</command> module, which must be
        loaded using the <literal>LoadModule</literal> directive
        in <filename>httpd.conf</filename> in the same fashion
        that <command>mod_dav_svn</command> itself is loaded.  To
        enable the use of this module for your repositories, you'll
        add the <literal>AuthzSVNAccessFile</literal> or
        <literal>AuthzSVNReposRelativeAccessFile</literal> directives (again
        within the <filename>httpd.conf</filename> file) pointing to
        your own access rules file.  (For a full explanation, see
        <xref linkend="svn.serverconfig.httpd.authz.perdir"/>.)</para>
-->
      <para>Subversion permet le contrôle d'accès basé sur les chemins
        avec Apache <foreignphrase>via</foreignphrase> son module
        <command>mod_authz_svn</command>, qui doit être chargé en
        utilisant la directive <literal>LoadModule</literal> dans
        <filename>httpd.conf</filename> de la même manière que pour le
        chargement du module <command>mod_dav_svn</command>. Pour
        activer l'utilisation du module pour vos dépôts, vous devez
        ajouter les directives <literal>AuthzSVNAccessFile</literal> ou
        <literal>AuthzSVNReposRelativeAccessFile</literal>
        (toujours dans le fichier <filename>httpd.conf</filename>) en les
        faisant pointer vers votre propre fichier contenant les règles
        de contrôle d'accès (pour une explication détaillée, consultez
        <xref linkend="svn.serverconfig.httpd.authz.perdir"/>).</para>

<!--
      <para>To configure path-based authorization
        in <command>svnserve</command>, simply point
        the <literal>authz-db</literal> configuration variable (within
        your <filename>svnserve.conf</filename> file) to your access
        rules file.</para>
-->
      <para>Pour configurer le contrôle d'accès basé sur les chemins
        avec <command>svnserve</command>,faites simplement pointer la
        variable de configuration <literal>authz-db</literal>
        (qui se trouve dans le fichier
        <filename>svnserve.conf</filename>) vers votre fichier contenant
        les règles de contrôle d'accès.</para>

<!--
      <para>Once your server knows where to look for your access
        rules, it's time to define those rules.</para>
-->
      <para>Une fois que votre serveur sait où chercher les règles de
        contrôle d'accès, il est temps de définir ces règles.</para>

<!--
      <para>The syntax of the Subversion access file is the same
        familiar one used by <filename>svnserve.conf</filename> and
        the runtime configuration files.  Lines that start with a hash
        (<literal>#</literal>) are ignored.  In its simplest form,
        each section names a versioned path and, optionally, the
        repository in which that path is found.  In other words,
        except for a few reserved sections, section names are of one
        of two forms: either <literal>[repos-name:path]</literal>
        or <literal>[path]</literal> when
        <literal>AuthzSVNAccessFile</literal> is used.  If you configured
        per repository access files via <literal>AuthzSVNReposRelativeAccessFile</literal>
        directive, you should always use <literal>[path]</literal> form
        only.  Authenticated usernames are the
        option names within each section, and an option's value
        describes that user's level of access to the repository path:
        either <literal>r</literal> (read-only) or <literal>rw</literal>
        (read/write).  If the user is not mentioned at all, no access is
        allowed.</para>
-->
      <para>La syntaxe du fichier est la même syntaxe que celle utilisée
        dans <filename>svnserve.conf</filename> et dans les fichiers de
        configuration. Les lignes commençant par un dièse
        (<literal>#</literal>) sont ignorées. Dans la forme la plus
        simple, chaque section désigne un dépôt et un chemin à
        l'intérieur de celui-ci. En d'autres termes, sauf pour quelques
        sections particulières, les noms de sections se présentent sous
        deux formes&nbsp;: soit <literal>nom-depot:chemin</literal>,
        soit <literal>[chemin]</literal> quand
        <literal>AuthzSVNAccessFile</literal> est utilisé. Si vous avez
        configuré un contrôle d'accès aux fichiers du dépôt
        <foreignphrase>via</foreignphrase> la directive
        <literal>AuthzSVNReposRelativeAccessFile</literal>, vous devriez
        toujours utiliser seulement la forme <literal>[path]</literal>.
        Les noms d'utilisateurs authentifiés sont les noms des options à
        l'intérieur de chaque section&nbsp;; la valeur de chaque option
        décrit le niveau d'accès de cet utilisateur au chemin du dépôt&nbsp;:
        soit <literal>r</literal> (lecture seule), soit <literal>rw</literal>
        (lecture/écriture). Si l'utilisateur ne figure pas dans la
        section, l'accès n'est pas autorisé.</para>

      <note>
<!--
        <para>Paths used in access file sections must be specified
          using Subversion's <quote>internal style</quote>, which
          mostly just means that they are encoded in UTF-8 and use
          forward slash (<literal>/</literal>) characters as directory
          separators (even on Windows systems).  Note also that these
          paths do not employ any character escaping mechanism (such
          as URI-encoding)&mdash;spaces in path names should be
          represented exactly as such in access file section names
          (<literal>[repos-name:path&nbsp;with&nbsp;spaces]</literal>,
          e.g.)</para>
-->
        <para>Les chemins utilisés dans les sections du fichier de
          contrôle d'accès doivent être spécifiés en utilisant le
          <quote>style interne</quote> de Subversion, ce qui veut
          simplement dire qu'ils doivent être encodés en UTF-8 et
          utiliser comme séparateur de répertoires la barre oblique
          (<literal>/</literal>), même sur les systèmes Windows. Notez
          également que ces chemins ne doivent pas comporter de
          caractère <quote>échappé</quote> (tel qu'on les trouve par
          exemple dans l'encodage URI)&nbsp;&mdash;&nbsp;les espaces
          dans les noms de fichiers doivent être représentés telles
          quelles dans les noms de sections
          <literal>[nom-depot:chemin&nbsp;avec&nbsp;espaces]</literal>),
        </para>
      </note>

<!--
      <para>Here's a simple example demonstrating a piece of the
        access configuration which grants read access Sally, and
        read/write access to Harry, for the
        path <filename>/branches/calc/bug-142</filename> (and all its
        children) in the repository <literal>calc</literal>:</para>
-->
      <para>Voici un exemple simple pour montrer à quoi ressemble
        un fichier de configuration du contrôle d'accès où Sally possède
        des droits en lecture seule et Harry des droits en
        lecture/écriture pour le chemin
        <filename>/branches/calc/bug-142</filename> (et tous ses
        enfants) dans le dépôt <literal>calc</literal>&nbsp;:</para>

      <informalexample>
        <programlisting>
[calc:/branches/calc/bug-142]
harry = rw
sally = r
</programlisting>
      </informalexample>

<!--
      <warning>
        <para>Prior to version 1.7, Subversion treated repository names
          and paths in a case-insensitive fashion for the purposes of
          access control, converting them to lower case internally
          before comparing them against the contents of your access
          file.  It now does these comparisons case-sensitively.  If you
          upgraded to Subversion 1.7 from an older version, you should
          review your access files for case correctness.</para>
      </warning>
-->
      <warning>
        <para>Avant la version 1.7, Subversion ne distinguait pas la
          casse des caractères pour les noms de dépôts et de chemins
          dans le cadre du contrôle d'accès, il convertissait le tout en
          minuscules avant d'effectuer la confrontation avec le contenu
          du fichier de contrôle d'accès. Dorénavant, il est sensible à
          la casse. Si vous mettez à jour un serveur vers la version
          1.7 à partir d'une version antérieure, passez en revue votre
          fichier de contrôle d'accès pour vérifier que la casse est
          correcte.</para>
      </warning>

<!--
      <para>The name of a repository as evaluated by the authorization
        subsystem is derived directly from the repository's path.
        Exactly how this happens differs between the two server
        options. <command>mod_dav_svn</command> uses only the basename
        of the repository's root URL<footnote><para>Any human-readable
        name for a repository configured via
        the <literal>SVNReposName</literal> <filename>httpd.conf</filename>
        directive will be ignored by the authorization subsystem.
        Your access control file sections must refer to repositories
        by their server-sensitive paths as previously
        described.</para></footnote>,
        while <command>svnserve</command> uses the entire relative
        path from the serving root (as determined by
        its <option>- -root</option> (<option>-r</option>) command-line
        option) to the repository.</para>
-->
      <para>Le nom du dépôt tel qu'il est évalué par le sous-système de
        contrôle d'accès dérive directement du chemin du dépôt. La
        manière exacte dont se déroule cette évaluation diffère en
        fonction de la valeur de deux options.
        <command>mod_dav_svn</command> utilise seulement le nom du
        dépôt figurant dans l'URL de la racine du
        dépôt<footnote><para>N'importe quel nom de dépôt,
        lisible par un humain et configuré par la directive
        <literal>SVNReposName</literal> de
        <filename>httpd.conf</filename> est ignoré par le sous-système
        de contrôle d'accès. Vos sections du fichier de contrôle d'accès
        doivent faire référence aux dépôts par le chemin interne au
        serveur comme cela a été décrit précédemment.</para></footnote>,
        alors que <command>svnserve</command> utilise l'ensemble du
        chemin relatif à partir de la racine du serveur (indiquée dans
        l'option <option>--root</option> (<option>-r</option>) de la
        ligne de commande) vers le dépôt.</para>

      <warning>
<!--
        <para>The differences in the ways that a repository's name is
          determined by each of <command>mod_dav_svn</command>
          and <command>svnserve</command> can cause problems when
          trying to serve a repository via both servers
          simultaneously.  Naturally, an administrator would prefer to
          point both servers' configurations toward a common access
          file.  However, for this to work, you must ensure that the
          repository name portion of the file's section names are
          compatible with each server's idea of what the repository
          name should be&mdash;for example, by
          configuring <command>svnserve</command>'s root to be the
          same as <command>mod_dav_svn</command>'s configured
          <literal>SVNParentPath</literal>, or by using a different
          access file per repository so that section names needn't
          reference the repository at all.</para>
-->
        <para><command>mod_dav_svn</command> et
          <command>svnserve</command> évaluant le nom de dépôt de deux
          manières différentes, cela peut conduire à des problèmes
          lorsque les deux serveurs fonctionnent simultanément sur la
          machine. Naturellement, un administrateur préférerait faire
          pointer les deux configurations des serveurs sur le même
          fichier de contrôle d'accès. Cependant, afin que cela
          fonctionne, vous devez vous assurer que la partie du nom de
          dépôt qui figure dans le nom de section est compatible avec
          l'idée que se fait le serveur du nom de dépôt. Par exemple,
          en configurant la racine de <command>svnserve</command> pour
          qu'elle soit la même que la valeur de la directive
          <literal>SVNParentPath</literal> de
          <command>mod_dav_svn</command>, ou alors en utilisant un
          fichier de contrôle d'accès différent par dépôt afin que les
          noms de sections n'aient pas du tout besoin de faire référence
          au dépôt.</para>
      </warning>

<!--
      <para>If you're using the <literal>SVNParentPath</literal>
        directive, it's important to specify the repository names in
        your sections.  If you omit them, a section such as
        <literal>[/some/dir]</literal> will match the path
        <filename>/some/dir</filename> in <emphasis>every</emphasis>
        repository.  If you're using the <literal>SVNPath</literal>
        directive, however, it's fine to provide only paths in your
        sections&mdash;after all, there's only one repository.</para>

-->
      <para>Si vous utilisez la directive
        <literal>SVNParentPath</literal>, il est important de spécifier
        les noms de dépôts dans vos sections. Si vous l'oubliez, à une
        section comme <literal>[/un/repertoire]</literal> correspondra
        le chemin <filename>/un/repertoire</filename> dans
        <emphasis>chaque</emphasis> dépôt. Cependant, si vous utilisez
        la directive <literal>SVNPath</literal>, il suffit d'indiquer
        les chemins dans vos sections (après tout, il n'y a qu'un seul
        dépôt).</para>

<!--
      <para>Permissions are inherited from a path's parent directory.
        That means we can specify a subdirectory with a different
        access policy for Sally.  Let's continue our previous
        example, and grant Sally write access to a child of the branch
        that she's otherwise permitted only to read:</para>
-->
      <para>Les droits sont hérités d'un répertoire parent dans le
        système de fichiers. Cela veut dire que vous pouvez spécifier
        un sous-répertoire avec des droits différents pour Sally. Si
        nous continuons avec l'exemple précédent, nous pouvons autoriser
        Sally à écrire vers un répertoire fils de la branche où elle
        ne possède que des droits de lecture&nbsp;:</para>

      <informalexample>
<!--
        <programlisting>
[calc:/branches/calc/bug-142]
harry = rw
sally = r

# give sally write access only to the 'testing' subdir
[calc:/branches/calc/bug-142/testing]
sally = rw
</programlisting>
-->
        <programlisting>
[calc:/branches/calc/bug-142]
harry = rw
sally = r

# Sally peut écrire seulement dans le sous-répertoire "test"
[calc:/branches/calc/bogue-142/test]
sally = rw
</programlisting>
      </informalexample>

<!--
      <para>Now Sally can write to the <filename>testing</filename>
        subdirectory of the branch, but can still only read other parts.
        Harry, meanwhile, continues to have complete read/write access
        to the whole branch.</para>
-->
      <para>Maintenant Sally peut écrire dans le sous-répertoire
      <filename>test</filename> de la branche, mais ne peut toujours que
      lire les autres parties. Harry, en attendant, continue à avoir les
      droits d'accès complets en lecture écriture sur toute la
      branche.</para>

<!--
      <para>It's also possible to explicitly deny permission to someone
        via inheritance rules, by setting the username variable to
        nothing:</para>
-->
      <para>Il est aussi possible d'interdire explicitement l'accès à
        quelqu'un grâce aux règles d'héritage, en attribuant la valeur
        vide à un nom d'utilisateur&nbsp;:</para>

      <informalexample>
<!--
        <programlisting>
[calc:/branches/calc/bug-142]
harry = rw
sally = r

[calc:/branches/calc/bug-142/secret]
harry =
</programlisting>
-->
        <programlisting>
[calc:/branches/calc/bogue-142]
harry = rw
sally = r

[calc:/branches/calc/bogue-142/secret]
harry =
</programlisting>
      </informalexample>

<!--
      <para>In this example, Harry has read/write access to the
        entire <filename>bug-142</filename> tree, but has absolutely no
        access at all to the <filename>secret</filename> subdirectory
        within it.</para>

-->
      <para>Dans cet exemple, Harry a les droits de lecture/écriture sur
      l'arborescence <filename>bogue-142</filename> toute entière, mais
      n'a absolument pas accès au répertoire <filename>secret</filename>
      contenu dans celle-ci.</para>

      <tip>
<!--
        <para>The thing to remember is that the most specific path
          always matches first.  The server tries to match the path
          itself, and then the parent of the path, then the parent of
          that, and so on.  The net effect is that mentioning a specific
          path in the access file will always override any permissions
          inherited from parent directories.</para>
-->
        <para>Ce qu'il faut retenir est que le chemin le plus spécifique
          est choisi en premier. Le serveur tente de trouver une
          correspondance avec le chemin lui-même, puis avec son chemin
          parent, puis avec le parent du parent,&nbsp;etc. Le résultat
          est que tout chemin spécifié dans le fichier des accès prendra
          le pas sur les droits hérités de ses répertoires
          parents.</para>

<!--
        <para>Similarly, sections that specify a repository name have
          precedence over those that don't: if both
          <literal>[calc:/some/path]</literal> and
          <literal>[/some/path]</literal> are present, the former will be used
          and the latter ignored for <literal>calc</literal>.</para>
-->
        <para>De la même manière, les sections qui spécifient un nom de
          dépôt sont prioritaires sur celles qui n'en spécifient
          pas&nbsp;: si  <literal>[calc:/un/chemin]</literal> et
          <literal>[/un/chemin]</literal> sont présents, le premier
          sera utilisé et le dernier ignoré pour
          <literal>calc</literal>.</para>
      </tip>

<!--
      <para>By default, nobody has any access to any repository at all.
        That means that if you're starting with an empty file, you'll
        probably want to give at least read permission to all users at
        the roots of the repositories.  You can do this by using the
        asterisk variable (<literal>*</literal>), which means <quote>all
        users</quote>:</para>

-->
      <para>Par défaut, personne n'a accès au dépôt. Cela signifie que
        si vous démarrez avec un fichier vide, vous voudrez probablement
        au moins donner les droits de lecture sur la racine du dépôt à
        tous les utilisateurs. Vous pouvez accomplir ceci en utilisant
        la variable astérisque (<literal>*</literal>), qui désigne
        <quote>tous les utilisateurs</quote>&nbsp;:</para>

      <informalexample>
        <programlisting>
[/]
* = r
</programlisting>
      </informalexample>

<!--
      <para>This is a common setup; notice that no repository
        name is mentioned in the section name.  This makes all repositories
        world-readable to all users.  Once all users have read access to
        the repositories, you can give explicit
        <literal>rw</literal> permission to certain users on specific
        subdirectories within specific repositories.</para>
-->
      <para>C'est une configuration très répandue&nbsp;; notez qu'aucun
        nom de dépôt n'est mentionné dans le nom de la section. Ceci
        rend tous les dépôts accessibles en lecture à tous les
        utilisateurs. Une fois que tous les utilisateurs ont l'accès en
        lecture aux dépôts, vous pouvez accorder des droits d'écriture
        (<literal>rw</literal>) explicites à certains utilisateurs sur
        des sous-répertoires spécifiques à l'intérieur de dépôts
        spécifiques.</para>

<!--
      <para>Note that while all of the previous examples use
        directories, that's only because defining access rules on
        directories is the most common case.  You may similarly
        restrict access on file paths, too.</para>
-->
      <para>Notez que, bien que tous les exemples
        <foreignphrase>supra</foreignphrase> font référence à des
        répertoires, c'est simplement parce qu'il est plus commun de
        définir des droits d'accès sur des répertoires. Mais vous pouvez
        également restreindre les accès sur des fichiers.</para>

      <informalexample>
        <programlisting> <!--
[calendar:/projects/calendar/manager.ics] -->
[agenda:/projets/agenda/chef.ics]
harry = rw
sally = r
</programlisting>
      </informalexample>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.pathbasedauthz.groups">

<!--
      <title>Access Control Groups</title>
-->
      <title>Contrôle d'accès par groupes</title>

<!--
      <para>The access file also allows you to define whole groups of
        users, much like the Unix <filename>/etc/group</filename>
        file.  To do this, create a <literal>groups</literal> section
        in your access file, and then describe your groups within that
        section: each variable's name defines the name of the group,
        and its value is a comma-delimited list of usernames which
        are part of that group.</para>
-->
      <para>Le fichier des accès vous permet aussi de définir des
        groupes entiers d'utilisateurs, à la façon du fichier Unix
        <filename>/etc/group</filename>. Créez donc une section
        <literal>groups</literal> dans votre fichiers d'accès et
        décrivez vos groupes dans cette section&nbsp;: chaque nom de
        variable définit le nom d'un groupe et la valeur est une liste
        d'identifiants, séparés par des virgules, qui constituent les
        membres de ce groupe.</para>

      <informalexample>
<!--
        <programlisting>
[groups]
calc-developers = harry, sally, joe
paint-developers = frank, sally, jane
everyone = harry, sally, joe, frank, jane
</programlisting>
-->
        <programlisting>
[groups]
developpeurs-calc = harry, sally, joe
developpeurs-paint = frank, sally, jane
tout-le-monde = harry, sally, joe, frank, sally, jane
</programlisting>
      </informalexample>

<!--
      <para>Groups can be granted access control just like users.
        Distinguish them with an <quote>at sign</quote>
        (<literal>@</literal>) prefix:</para>

-->
      <para>Les droits d'accès peuvent être accordés aux groupes de la
        même façon qu'à de simples utilisateurs. Il faut juste les
        mettre en évidence par le préfixe <quote>at</quote>
        (<literal>@</literal>)&nbsp;:</para>

      <informalexample>
<!--
        <programlisting>
[calc:/projects/calc]
@calc-developers = rw

[paint:/projects/paint]
jane = r
@paint-developers = rw
</programlisting>
-->
        <programlisting>
[calc:/projets/calc]
@developpeurs-calc = rw

[paint:/projets/paint]
jane = r
@developpeurs-paint = rw
</programlisting>
      </informalexample>

<!--
      <para>Another important fact is that group permissions are not
        overridden by individual user permissions. Rather, the
        <emphasis>combination</emphasis> of all matching permissions is
        granted.  In the prior example, Jane is a member of the
        <literal>paint-developers</literal> group, which has read/write
        access.  Combined with the <literal>jane = r</literal> rule,
        this still gives Jane read/write access.  Permissions for group
        members can only be extended beyond the permissions the group
        already has. Restricting users who are part of a group to less
        than their group's permissions is impossible.</para>

-->
      <para>Un autre fait notable est que les droits définis pour les
        groupes ne sont pas écrasés par les droits individuels. En fait,
        c'est la <emphasis>combinaison</emphasis> de tous les droits qui
        s'applique. Dans l'exemple précédent, Jane est membre du groupe
       <literal>développeurs-paint</literal>, qui a les droits de
       lecture/écriture. Combiné avec la règle
       <literal>jane = r</literal>, cela donne toujours les droits de
       lecture/écriture à Jane. Les droits pour les membres d'un groupe
       ne peuvent être que étendus au delà des droits du groupe.
       Restreindre les droits d'utilisateurs qui font partie d'un groupe
       n'est pas possible.</para>

<!--
      <para>Groups can also be defined to contain other groups:</para>

-->
      <para>Les groupes peuvent aussi contenir d'autres
        groupes&nbsp;:</para>

      <informalexample>
<!--
        <programlisting>
[groups]
calc-developers = harry, sally, joe
paint-developers = frank, sally, jane
everyone = @calc-developers, @paint-developers
</programlisting>
-->
    <programlisting>
[groups]
developpeurs-calc = harry, sally, joe
developpeurs-paint = frank, sally, jane
tout-le-monde = @developpeurs-calc, @developpeurs-paint
</programlisting>
      </informalexample>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.pathbasedauthz.aliases">

<!--
      <title>Username Aliases</title>
-->
      <title>Alias</title>

<!--
      <para>Some authentication systems expect and carry relatively
        short usernames of the sorts we've been describing
        here&mdash;<literal>harry</literal>,
        <literal>sally</literal>, <literal>joe</literal>, and so on.  But
        other authentication systems&mdash;such as those which use LDAP
        stores or SSL client certificates&mdash;may carry much more
        complex usernames.  For example, Harry's username in an
        LDAP-protected system might be <literal>CN=Harold
        Hacker,OU=Engineers,DC=red-bean,DC=com</literal>.  With
        usernames like that, the access file can become quite bloated
        with long or obscure usernames that are easy to
        mistype.</para>
-->
      <para>Certains systèmes d'authentification attendent et utilisent
        des noms d'utilisateurs relativement courts tels que ceux que
        nous avons décrits ici &mdash; <literal>harry</literal>,
        <literal>sally</literal>, <literal>joe</literal>,&nbsp;etc. Mais
        d'autres systèmes d'authentification, comme ceux qui
        utilisent des bases LDAP ou des certificats clients SSL, peuvent
        utiliser des noms d'utilisateurs beaucoup plus complexes. Par
        exemple, le nom d'utilisateur d'Harry dans un système protégé
        par LDAP pourrait très bien être&nbsp;: <literal>CN=Harold
        Hacker,OU=Engineers,DC=red-bean,DC=com</literal>. Avec des noms
        d'utilisateurs de ce type, le fichier des accès devient
        rapidement illisible, avec des noms d'utilisateurs longs ou
        obscurs qui peuvent facilement être mal orthographiés.</para>

<!--
      <para>Fortunately, Subversion 1.5 introduced username aliases to
        the access file syntax.  Username aliases allow you to have to
        type the correct complex username only once, in a statement
        which assigns to it a more easily digestable alias.</para>
  -->
      <para>Heureusement, Subversion 1.5 a introduit les alias dans la
        syntaxe du fichier de contrôle d'accès. Vous n'avez ainsi à
        taper le nom d'utilisateur complexe entier qu'une seule fois, au
        sein d'un paragraphe qui lui attribue un alias bien plus
        digeste.</para>

<!--
      <para>Username aliases are defined in the
        special <literal>aliases</literal> section of the access file,
        with each variable name in that section defining an alias, and
        the value of those variables carrying the real Subversion
        username which is being aliased.</para>
-->
      <para>Les alias sont définis dans la section
        <literal>aliases</literal> du fichier de contrôle d'accès.
        Chaque nom de variable déclarée dans cette section définit un
        alias et la valeur de cette variable est l'identifiant réel
        Subversion qui est derrière l'alias.</para>

      <informalexample>
        <programlisting>
[aliases]
harry = CN=Harold Hacker,OU=Engineers,DC=red-bean,DC=com
sally = CN=Sally Swatterbug,OU=Engineers,DC=red-bean,DC=com
joe = CN=Gerald I. Joseph,OU=Engineers,DC=red-bean,DC=com
&hellip;
</programlisting>
      </informalexample>

<!--
      <para>Once you've defined a set of aliases, you can refer to the
        users elsewhere in the access file via their aliases in all the
        same places you could have instead used their actual usernames.
        Simply prepend an ampersand to the alias to distinguish it from
        a regular username:</para>
-->
      <para>Une fois défini votre ensemble d'alias, vous pouvez faire
        référence à ces utilisateurs en d'autres endroits du fichier par
        leurs alias, partout là où vous auriez sinon entré leur
        véritables noms d'utilisateurs. Il faut juste ajouter une
        esperluette (<literal>&amp;</literal>) juste avant l'alias pour
        le distinguer des noms d'utilisateurs classiques&nbsp;:</para>

      <informalexample>
<!--
        <programlisting>
[groups]
calc-developers = &amp;harry, &amp;sally, &amp;joe
paint-developers = &amp;frank, &amp;sally, &amp;jane
everyone = @calc-developers, @paint-developers
</programlisting>
-->
        <programlisting>
[groups]
developpeurs-calc = &amp;harry, &amp;sally, &amp;joe
developpeurs-paint = &amp;frank, &amp;sally, &amp;jane
tout-le-monde = @developpeurs-calc, @developpeurs-paint
</programlisting>
      </informalexample>

<!--
      <para>You might also choose to use aliases if your users'
        usernames change frequently.  Doing so allows you to need to
        update only the aliases table when these username changes occur,
        instead of doing global search-and-replace operations on the
        whole access file.</para>
-->
      <para>Vous pouvez aussi choisir d'utiliser des alias si les noms
        de vos utilisateurs changent souvent. Ainsi vous n'aurez que la
        table des alias à mettre à jour quand des modifications de noms
        d'utilisateurs auront lieu, au lieu d'avoir à effectuer des
        opérations de recherches-et-remplacements-globaux sur la
        totalité du fichier.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.pathbasedauthz.authclass-tokens">

<!--
      <title>Advanced Access Control Features</title>
-->
      <title>Fonctionnalités avancées de contrôle d'accès</title>

<!--
      <para>Beginning with Subversion 1.5, the access file syntax also
        supports some <quote>magic</quote> tokens for helping you to
        make rule assignments based on the user's authentication
        class.  One such token is
        the <literal>$authenticated</literal> token.  Use this token
        where you would otherwise specify a username, alias, or group
        name in your authorization rules to declare the permissions
        granted to any user who has authenticated with any username at
        all.  Similarly employed is the <literal>$anonymous</literal>
        token, except that it matches everyone who has
        <emphasis>not</emphasis> authenticated with a username.</para>
  -->
      <para>À partir de Subversion 1.5, le fichier de contrôle d'accès
        reconnait aussi des mots-clés <quote>magiques</quote> afin de
        vous aider à créer des règles basées sur le statut
        d'authentification de l'utilisateurs. Ainsi le mot-clé
        <literal>$authenticated</literal> est utilisé pour désigner un
        utilisateur (quel qu'il soit) authentifié. Vous pouvez utiliser
        ce mot-clé à la place d'un identifiant, d'un alias ou d'un nom
        de groupe dans vos règles de contrôle d'accès. De la même
        manière, le mot-clé <literal>$anonymous</literal> désigne
        n'importe qui qui <emphasis>n'est pas</emphasis>
        authentifié.</para>

      <informalexample>
        <programlisting><!--
[calendar:/projects/calendar] -->
[agenda:/projets/agenda]
$anonymous = r
$authenticated = rw
</programlisting>
      </informalexample>

  <!--
      <para>Another handy bit of access file syntax magic is the use
        of the tilde (<literal>~</literal>) character as an exclusion
        marker.  In your authorization rules, prefixing a username,
        alias, group name, or authentication class token with a tilde
        character will cause Subversion to apply the rule to users who
        do <emphasis>not</emphasis> match the rule.  Though somewhat
        unnecessarily obfuscated, the following block is equivalent to
        the one in the previous example:</para>
  -->
      <para>Un autre élément magique de la syntaxe des fichiers de
        contrôle d'accès est le caractère tilde (<literal>~</literal>)
        qui est un marqueur d'exclusion. Dans vos règles de contrôle
        d'accès, si vous préfixez un identifiant, un alias, un groupe
        ou un mot-clé d'authentification avec le caractère tilde,
        Subversion applique la règle aux utilisateurs qui
        <emphasis>ne vérifient pas</emphasis> la règle. Bien que
        inutilement complexe, le bloc suivant est équivalent à celui
        du précédent exemple&nbsp;:</para>

      <informalexample>
        <programlisting> <!--
[calendar:/projects/calendar] -->
[agenda:/projets/agenda]
~$authenticated = r
~$anonymous = rw
</programlisting>
      </informalexample>

<!--
      <para>A less obvious example might be as follows:</para>
-->
      <para>Un exemple moins simpliste pourrait ressembler
        à&nbsp;:</para>

      <informalexample>
<!--
        <programlisting>
[groups]
calc-developers = &amp;harry, &amp;sally, &amp;joe
calc-owners = &amp;hewlett, &amp;packard
calc = @calc-developers, @calc-owners

# Any calc participant has read-write access...
[calc:/projects/calc]
@calc = rw

# ...but only allow the owners to make and modify release tags.
[calc:/projects/calc/tags]
~@calc-owners = r
</programlisting>
-->
        <programlisting>
[groups]
developpeurs-calc = &amp;harry, &amp;sally, &amp;joe
proprios-calc = &amp;hewlett, &amp;packard
calc = @developpeurs-calc, @proprios-calc

# tous les participants à calc ont les droits de lecture/écriture ...
[calc:/projets/calc]
@calc = rw

# ...mais seuls les propriétaires peuvent faire et modifier des étiquettes.
[calc:/projets/calc/tags]
~@proprios-calc = r
</programlisting>
      </informalexample>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.pathbasedauthz.gotchas">

<!--
      <title>Some Gotchas with Access Control</title>
-->

      <title>Embûches avec le contrôle d'accès</title>
<!--
      <para>If you're using Apache as your Subversion server and have
        made certain subdirectories of your repository unreadable to
        certain users, you need to be aware of a possible nonoptimal
        behavior with <command>svn checkout</command>.</para>

-->
      <para>Si vous utilisez Apache en tant que serveur Subversion et
        que vous avez rendu certains sous-répertoires de votre dépôt
        inaccessibles en lecture à certains utilisateurs, vous devez
        être au courant d'un comportement potentiellement non-optimal de
        la commande <command>svn checkout</command>.</para>

<!--
      <para>Depending on which HTTP communication library the
        Subversion client is using, it may request that the entire
        payload of a checkout or update be delivered in a single
        (often large) response to the primary checkout/update request.
        When this happens, this single request is the
        <emphasis>only</emphasis> opportunity Apache has to demand
        user authentication.  This has some odd side effects.  For
        example, if a certain subdirectory of the repository is
        readable only by user Sally, and user Harry checks out a
        parent directory, his client will respond to the initial
        authentication challenge as Harry.  As the server generates
        the large response, there's no way it can resend an
        authentication challenge when it reaches the special
        subdirectory; thus the subdirectory is skipped altogether,
        rather than asking the user to reauthenticate as Sally at the
        right moment.</para>
-->
      <para>En fonction de la bibliothèque de communication HTTP que le
        client Subversion utilise, il envoie potentiellement une requête
        au serveur pour recevoir tout le contenu de l'extraction ou de
        la mise à jour dans une réponse unique (dont la taille peut être
        assez importante). Quand le serveur reçoit la requête, c'est la
        <emphasis>seule</emphasis> opportunité dont dispose Apache pour
        demander à l'utilisateur de s'authentifier. Ceci a des effets
        secondaires assez étonnants. Par exemple, si un certain
        sous-répertoire du dépôt n'est accessible en lecture qu'à
        l'utilisateur Sally et que l'utilisateur Harry extrait un
        répertoire parent, le client répondra à la demande
        d'authentification initiale en tant que Harry. Au fur et à
        mesure que le serveur génère la réponse, il n'a aucun moyen de
        renvoyer un défi d'authentification quand il atteint le
        sous-répertoire spécial&nbsp;; ainsi le sous-répertoire tout
        entier est omis, plutôt que de demander à l'utilisateur de se
        ré-authentifier en tant que Sally le moment venu.</para>

<!--
      <para>In a similar way, if the root of the repository is
        anonymously world-readable, the entire checkout will be done
        without authentication&mdash;again, skipping the unreadable
        directory, rather than asking for authentication partway
        through.<footnote><para>For more on this, see the blog
        post <emphasis>Authz and Anon Authn Agony</emphasis> at
        <ulink url="http://blogs.collab.net/subversion/2007/03/authz_and_anon_/"
        />.</para></footnote></para>
-->
      <!-- TODO: Merge content from the blog post into the book. -->

      <para>De même, si la racine du dépôt est accessible en lecture
        anonymement, l'extraction se fera entièrement sans
        authentification, omettant, encore une fois, le répertoire
        non-lisible, plutôt que d'envoyer une demande
        d'authentification au cours de l'opération<footnote><para>Pour
        plus d'informations sur ce comportement, lisez l'article de blog
        <emphasis>Authz and Anon Authn Agony</emphasis> sur
        <ulink url="http://blogs.collab.net/subversion/2007/03/authz_and_anon_/"
        /> (article en anglais).</para></footnote>.</para>

    </sect2>
  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.serverconfig.operational-logging">
<!--
    <title>High-level Logging</title>
-->
    <title>Journalisation du haut-niveau</title>

<!--
    <para>Both the Apache <command>httpd</command>
      and <command>svnserve</command> Subversion servers provide
      support for high-level logging of Subversion operations.
      Configuring each of the server options to provide this level of
      logging is done differently, of course, but the output from each
      is designed to conform to a uniform syntax.</para>
-->
    <para>À la fois Apache <command>httpd</command> et
      Subversion <command>svnserve</command> offrent la possibilité de
      journaliser les opérations Subversion à un haut-niveau. La
      configuration de chacun des serveurs pour obtenir ce niveau de
      journalisation se fait différemment, bien sûr, mais les deux
      produisent des sorties qui respectent une syntaxe uniforme.</para>

<!--
    <para>To enable high-level logging in <command>svnserve</command>,
      you need only use the <option>- -log-file</option> command-line
      option when starting the server, passing as the value to the
      option the file to which <command>svnserve</command> should
      write its log output.</para>
-->
    <para>Pour active la journalisation de haut-niveau de
      <command>svnserve</command>, vous n'avez qu'à utiliser l'option
      <option>--log-file</option> de la ligne de commande quand vous
      démarrer le serveur, en indiquant en paramètre de l'option le
      fichier vers lequel <command>svnserve</command> doit écrire la
      journalisation.</para>

    <informalexample>
<!--
      <screen>
$ svnserve -d -r /path/to/repositories - -log-file /var/log/svn.log
</screen>
-->
      <screen>
$ svnserve -d -r /chemin/vers/depots --log-file /var/log/svn.log
</screen>
    </informalexample>

<!--
    <para>Enabling the same in Apache is a bit more involved, but is
      essentially an extension of Apache's stock log output
      configuration mechanisms&mdash;see
      <xref linkend="svn.serverconfig.httpd.extra.logging"/> for
      details.</para>
-->
    <para>Activer cette journalisation dans Apache est un peu plus
      compliqué, mais cela ne reste qu'une extension de la configuration
      de la journalisation Apache de base (reportez-vous à
      <xref linkend="svn.serverconfig.httpd.extra.logging"/> pour plus
      de détails).</para>

<!--
    <para>The following is a list of Subversion action log messages
      produced by its high-level logging mechanism, followed by one or
      more examples of the log message as it appears in the log
      output.</para>
-->
    <para>Ce qui suit est une liste de messages de journalisation des
      actions Subversion produite par le mécanisme de journalisation
      de haut-niveau, suivi par un ou plusieurs exemples des
      messages de journalisation tels qu'ils apparaissent dans les
      journaux.</para>

    <variablelist>
      <varlistentry>
<!--
        <term>Checkout or export</term>
-->
        <term>Extraction ou export</term>
        <listitem>
          <programlisting>
checkout-or-export /path r62 depth=infinity
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
<!--
        <term>Commit</term>
-->
        <term>Propagation</term>
        <listitem>
          <programlisting>
commit harry r100
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Diffs</term>
        <listitem>
          <programlisting>
diff /path r15:20 depth=infinity ignore-ancestry
diff /path1@15 /path2@20 depth=infinity ignore-ancestry
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
<!--
        <term>Fetch a directory</term>
-->
        <term>Parcours d'un répertoire</term>
        <listitem>
          <programlisting>
get-dir /trunk r17 text
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
<!--
        <term>Fetch a file</term>
-->
        <term>Parcours d'un fichier</term>
        <listitem>
          <programlisting>
get-file /path r20 props
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
<!--
        <term>Fetch a file revision</term>
-->
        <term>Parcours d'une révision d'un fichier</term>
        <listitem>
          <programlisting>
get-file-revs /path r12:15 include-merged-revisions
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
<!--
        <term>Fetch merge information</term>
-->
        <term>Parcours des informations de fusion</term>
        <listitem>
          <programlisting>
get-mergeinfo (/path1 /path2)
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
<!--
        <term>Lock</term>
-->
        <term>Verrouillage</term>
        <listitem>
          <programlisting>
lock /path steal
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
<!--
        <term>Log</term>
-->
        <term>Journalisation</term>
        <listitem>
          <programlisting>
log (/path1,/path2,/path3) r20:90 discover-changed-paths revprops=()
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
<!--
        <term>Replay revisions (svnsync)</term>
-->
        <term>Rejeu d'une révision (svnsync)</term>
        <listitem>
          <programlisting>
replay /path r19
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
<!--
        <term>Revision property change</term>
-->
        <term>Modification des propriétés de révision</term>
        <listitem>
          <programlisting>
change-rev-prop r50 propertyname
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
<!--
        <term>Revision property list</term>
-->
        <term>Liste des propriétés de révision</term>
        <listitem>
          <programlisting>
rev-proplist r34
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Status</term>
        <listitem>
          <programlisting>
status /path r62 depth=infinity
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
<!--
        <term>Switch</term>
-->
        <term>Bascule vers une nouvelle URL (switch)</term>
        <listitem>
          <programlisting>
switch /pathA /pathB@50 depth=infinity
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
<!--
        <term>Unlock</term>
-->
        <term>Déverrouillage</term>
        <listitem>
          <programlisting>
unlock /path break
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
<!--
        <term>Update</term>
-->
        <term>Mise à jour</term>
        <listitem>
          <programlisting>
update /path r17 send-copyfrom-args
</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>

<!--
    <para>As a convenience to administrators who wish to post-process
      their Subversion high-level logging output (perhaps for
      reporting or analysis purposes), Subversion source code
      distributions provide a Python module (located at
      <filename>tools/server-side/svn_server_log_parse.py</filename>)
      which can be used to parse Subversion's log output.</para>
-->
    <para>Afin de faciliter le travail des administrateurs qui
      souhaitent effectuer des traitements sur leurs journaux (pour
      produire des rapports ou les analyser), le code source de
      Subversion est fourni avec un module Python (situé à
      <filename>tools/server-side/svn_server_log_parse.py</filename>)
      qui peut être utilisé pour analyser la journalisation produite
      par Subversion.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.serverconfig.optimization">
<!--
    <title>Server Optimization</title>
-->
    <title>Optimisation du serveur</title>

<!--
    <para>Part of the due diligence when offering a service such as a
      Subversion server involves capacity planning and performance
      tuning.  Subversion doesn't tend to be particularly greedy in
      terms of server resources such as CPU cycles and memory, but any
      service can benefit from optimizations, especially when usage of
      the service skyrockets<footnote><para>In Subversion's case, the
      skyrocketing affect is, of course, due to its cool name.  Well,
      that and its popularity, reliability, ease of
      use&hellip;.</para></footnote>.  In this section, we'll discuss
      some ways you can tweak your Subversion server configuration
      to offer even better performance and scalability.</para>
-->
    <para>Les développeurs de Subversion n'envisagent pas de fournir un
      service tel que le serveur Subversion sans pouvoir configurer
      finement celui-ci. Subversion n'est pas particulièrement gourmand
      en termes de ressources mémoire ou processeur, mais chaque service
      gagne à être optimisé, surtout quand l'utilisation de ce service
      explose<footnote><para>Dans le cas de Subversion, l'explosion est
      due, bien sûr, à son nom très cool. Et aussi à sa popularité, sa
      fiabilité, sa facilité d'utilisation, &hellip;</para></footnote>.
      Dans cette section, nous exposons quelques manières d'ajuster la
      configuration du serveur Subversion pour offrir encore davantage
      de performance et de capacité à monter en charge.</para>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.optimization.caching">
<!--
      <title>Data Caching</title>
-->
      <title>Mise en cache des données</title>

<!--
      <para>Generally speaking, the most expensive part of a
        Subversion server's job is fetching data from the repository.
        Subversion 1.6 attempted to offset this cost by introducing
        some in-memory caching of certain classes of data read from
        the repository.  But Subversion 1.7 takes this a step further,
        not only caching the results of some of the more costly
        operations, but also by providing in each of the available
        servers the means by which fine-tune the size and some
        behaviors of the cache.</para>
-->
      <para>Généralement, le travail le plus coûteux du serveur
        Subversion consiste à récupérer les données dans le dépôt.
        Subversion 1.6 essayait de réduire ce coût en introduisant la
        mise en cache en mémoire de certains types de données qu'il
        lisait dans le dépôt. Subversion 1.7 va un cran plus loin, en
        mettant en cache non seulement le résultat de certaines des
        opérations les plus coûteuses mais aussi en offrant les moyens
        de configurer finement la taille et le comportement du cache
        pour tous les serveurs.</para>

<!--
      <para>For <command>svnserve</command>, you can specify the size
        of the cache using the <option>- -memory-cache-size</option>
        (<option>-M</option>) command-line option.  You can also
        dictate whether <command>svnserve</command> should attempt to
        cache content fulltexts and deltas via the
        boolean <option>- -cache-fulltexts</option>
        and <option>- -cache-txdeltas</option> options,
        respectively.</para>
-->
      <para>Pour <command>svnserve</command>, vous pouvez spécifier la
        taille du cache en utilisant l'option
        <option>--memory-cache-size</option> (<option>-M</option>)
        de la ligne de commande. Vous pouvez aussi imposer à
        <command>svnserve</command> de mettre en cache le texte complet
        (resp. les deltas calculés) <foreignphrase>via</foreignphrase>
        l'option <option>--cache-fulltexts</option> (resp.
        <option>--cache-txdeltas</option>).</para>

      <informalexample>
<!--
        <screen>
$ svnserve -d -r /path/to/repositories \
           - -memory-cache-size 1024 \
           - -cache-txdeltas yes \
           - -cache-fulltexts yes
&hellip;
$
</screen>
-->
        <screen>
$ svnserve -d -r /chemin/vers/depots \
           --memory-cache-size 1024 \
           --cache-txdeltas yes \
           --cache-fulltexts yes
&hellip;
$
</screen>
      </informalexample>

<!--
      <para><command>mod_dav_svn</command> provides the same degree of
        cache configurability via <filename>httpd.conf</filename>
        directives.
        The <literal>SVNInMemoryCacheSize</literal>,
        <literal>SVNCacheFullTexts</literal>,
        and <literal>SVNCacheTextDeltas</literal> directives may be
        used at the server configuration level to control Subversion's
        data cache characteristics:</para>
-->
      <para><command>mod_dav_svn</command> est configurable de la même
        manière à travers les directives de
        <filename>httpd.conf</filename>. Les directives
        <literal>SVNInMemoryCacheSize</literal>,
        <literal>SVNCacheFullTexts</literal> et
        <literal>SVNCacheTextDeltas</literal> peuvent être utilisées
        pour définir les caractéristiques du cache de données.</para>

      <informalexample>
<!--
        <programlisting>
&lt;IfModule dav_svn_module&gt;
  # Enable a 1 Gb Subversion data cache for both fulltext and deltas.
  SVNInMemoryCacheSize 1048576
  SVNCacheTextDeltas On
  SVNCacheFullTexts On
&lt;/IfModule&gt;
</programlisting>
-->
        <programlisting>
&lt;IfModule dav_svn_module&gt;
  # Autorise 1 Go de cache de données pour le texte et les deltas.
  SVNInMemoryCacheSize 1048576
  SVNCacheTextDeltas On
  SVNCacheFullTexts On
&lt;/IfModule&gt;
</programlisting>
      </informalexample>

<!--
      <para>So what settings should you use?  Certainly you need to
        consider what resources are available on your server.  To get
        any benefit out of the cache at all, you'll probably want to
        let the cache be at least large enough to hold all the files
        which are most commonly accessed in your repository (for
        example, your project's <filename>trunk</filename> directory
        tree).</para>
-->
      <para>Alors quels réglages utiliser&nbsp;? Vous devez déjà
        prendre en compte les ressources dont dispose votre serveur.
        Pour obtenir un gain avec le cache, vous devrez probablement
        avoir un cache capable de contenir tous les fichiers dont les
        accès sont réguliers dans votre dépôt (par exemple, la
        sous-arborescence <filename>trunk</filename> de votre
        projet).</para>

      <tip>
<!--
        <para>Setting the memory cache size to <literal>0</literal>
          will disable this enhanced caching mechanism and cause
          Subversion to fall back to using the older cache mechanisms
          introduced in Subversion 1.6.</para>
-->
        <para>Spécifier une taille de cache de
          <literal>0</literal> désactive le mécanisme de cache évolué et
          entraine l'utilisation du mécanisme de cache introduit par la
          version 1.6 de Subversion.</para>
      </tip>

      <note>
<!--
        <para>Currently, only repositories which make use of the FSFS
          backend data store make use of this data caching
          functionality.</para>
-->
        <para>Actuellement, seuls les dépôts utilisant le magasin de
          données FSFS mettent en œuvre le mécanisme de cache.</para>
      </note>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.serverconfig.optimization.compression">
<!--
      <title>Network Compression of Data</title>
-->
      <title>Compression des données sur le réseau</title>

<!--
      <para>Compressing the data transmitted across the wire can
        greatly reduce the size of those network transmissions, but
        comes at the cost of server (and client) CPU cycles.
        Depending on your server's CPU capacity, the typical access
        patterns of the clients who use your servers, and the
        bandwidth of the networks between them, you might wish to fine
        tune just how hard your server will work to compress the data
        it sends across the wire.  To assist with this fine tuning
        process, Subversion 1.7 offers
        the <option>- -compression</option> (<option>-c</option>)
        option to <command>svnserve</command> and
        the <literal>SVNCompressionLevel</literal> directive
        for <command>mod_dav_svn</command>.  Both accept a value which
        is an integer between 0 and 9 (inclusive), where 9 offers the
        best compression of wire data, and 0 disables compression
        altogether.</para>
-->
      <para>Compresser les données qui transitent sur le réseau peut
        réduire significativement la taille des données transmises, au
        détriment d'une consommation CPU sur le serveur et le client.
        En fonction de la capacité du processeur de votre serveur, des
        données que récupèrent vos clients sur vos serveurs et de la
        bande passante disponible sur le réseau, il peut être avantageux
        d'ajuster le taux de compression défini sur votre serveur avant
        d'envoyer les données sur le réseau. Pour vous aider dans cette
        phase de configuration, Subversion 1.7 propose l'option
        <option>--compression</option> (<option>-c</option>) pour
        <command>svnserve</command> et la directive
        <literal>SVNCompressionLevel</literal> pour
        <command>mod_dav_svn</command>. Les deux acceptent une valeur
        entière comprise entre 0 et 9 (inclus), 9 offrant la plus grande
        compression et 0 désactivant toute compression.</para>

<!--
      <para>For example, on a local area network (LAN) with 1-Gigabit
        connections, it might not make sense to have the server
        compress its network transmissions (which also forces the
        clients to decompress them), as the network itself is so fast
        that users won't really benefit from the smaller overall
        network payload.  On the other hand, servers which are
        accessed primarily by clients with low-bandwidth connections
        would be doing those clients a favor by minimizing the overall
        size of its network communications.</para>
-->
      <para>Par exemple, sur un réseau local (LAN) Gigabit, il n'est pas
        pertinent de compresser les données (qui doivent être aussi
        décompressées par les clients) car le réseau est tellement
        rapide que les utilisateurs ne verront pas le gain de diminuer
        la charge réseau. En revanche, les serveurs dont les clients
        sont connectés <foreignphrase>via</foreignphrase> des connexions
        bas débit seront bien inspirés de minimiser les flux réseau
        vers ces clients.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.serverconfig.multimethod">

<!--
    <title>Supporting Multiple Repository Access Methods</title>
-->
    <title>Accès au dépôt par plusieurs méthodes</title>

<!--
    <para>You've seen how a repository can be accessed in many
      different ways.  But is it possible&mdash;or safe&mdash;for your
      repository to be accessed by multiple methods simultaneously?
      The answer is yes, provided you use a bit of foresight.</para>

-->
    <para>Nous venons de voir différentes méthodes d'accès à un dépôt.
      Est-il possible &mdash; et sans danger &mdash; d'accéder
      simultanément à un dépôt par différentes méthodes&nbsp;? La
      réponse est oui, à condition d'être un petit peu prévoyant.</para>

<!--
    <para>At any given time, these processes may require read and
      write access to your repository:</para>

-->
    <para>À un instant donné, les processus suivants peuvent avoir
      besoin de l'accès en lecture ou en écriture au dépôt&nbsp;:</para>

    <itemizedlist>
      <listitem>
<!--
        <para>Regular system users using a Subversion client (as
          themselves) to access the repository directly via
          <literal>file://</literal> URLs</para>
-->
        <para>des utilisateurs classiques du système se connectant à
          l'aide d'un client Subversion à des URL
          <literal>file://</literal> sous leur propre
          identité&nbsp;;</para>
      </listitem>
      <listitem>
<!--
        <para>Regular system users connecting to SSH-spawned private
          <command>svnserve</command> processes (running as
          themselves), which access the repository</para>
-->
        <para>des utilisateurs classiques du système se connectant à des
          processus <command>svnserve</command> privés générés par SSH
          (dont le propriétaire est l'utilisateur lui-même) et accédant
          au dépôt&nbsp;;</para>
      </listitem>
      <listitem>
<!--
        <para>An <command>svnserve</command> process&mdash;either a
          daemon or one launched by
          <command>inetd</command>&mdash;running as a particular fixed
          user</para>
-->
        <para>un processus <command>svnserve</command> &mdash; soit un
          serveur autonome, soit un processus lancé par
          <command>inetd</command> &mdash; dont le propriétaire est un
          utilisateur dédié&nbsp;;</para>
      </listitem>
      <listitem>
<!--
        <para>An Apache <command>httpd</command> process, running as a
          particular fixed user</para>
-->
        <para>un processus <command>httpd</command>&nbsp;Apache, dont le
          propriétaire est un utilisateur dédié.</para>
      </listitem>
    </itemizedlist>

<!--
    <para>The most common problem administrators run into is
      repository ownership and permissions.  Does every process (or
      user) in the preceding list have the rights to read and write the
      repository's underlying data files?  Assuming you have a
      Unix-like operating system, a straightforward approach might be
      to place every potential repository user into a
      new <literal>svn</literal> group, and make the repository wholly
      owned by that group.  But even that's not enough, because a
      process may write to the database files using an unfriendly
      umask&mdash;one that prevents access by other users.</para>

-->
    <para>Les problèmes les plus courants rencontrés par les
      administrateurs sont des problèmes de droits et de propriété pour
      le dépôt. Chaque processus de la liste précédente a-t-il les
      droits de lecture et d'écriture sur les fichiers sous-jacents du
      dépôt&nbsp;? En supposant que vous ayez un système d'exploitation
      de type Unix, une approche naïve de ce problème serait de placer
      chaque utilisateur potentiel du dépôt dans un groupe
      <literal>svn</literal> unique et de faire posséder le dépôt tout
      entier par ce groupe. Mais cela ne suffit même pas, car un
      processus risque de modifier les fichiers de la base de données en
      utilisant un umask inadapté qui va interdire l'accès aux autres
      utilisateurs.</para>

<!--
    <para>So the next step beyond setting up a common group for
      repository users is to force every repository-accessing process
      to use a sane umask.  For users accessing the repository
      directly, you can make the <command>svn</command> program into a
      wrapper script that first runs <userinput>umask 002</userinput> and
      then runs the real <command>svn</command> client program.  You
      can write a similar wrapper script for the
      <command>svnserve</command> program, and add a <userinput>umask
      002</userinput> command to Apache's own startup script,
      <filename>apachectl</filename>.  For example:</para>

-->
    <para>L'étape suivante consiste donc, après avoir mis en place un
      groupe commun pour les utilisateurs du dépôt, à forcer tout
      processus qui accède au dépôt à utiliser un umask correct. Pour
      les utilisateurs qui accèdent directement au dépôt, vous pouvez
      <quote>envelopper</quote> le programme svnserve dans un script
      (<foreignphrase>wrapper</foreignphrase> en anglais) qui commence
      par lancer la commande <userinput>umask 002</userinput>
      et qui, seulement ensuite, appelle
      le véritable programme client <command>svn</command>.
      Vous pouvez également écrire un script similaire pour le programme
      <command>svnserve</command> et ajouter la commande
      <userinput>umask 002</userinput> au script de démarrage d'Apache,
      <filename>apachectl</filename>. Par exemple&nbsp;:</para>

    <informalexample>
      <screen>
$ cat /usr/bin/svn

#!/bin/sh

umask 002
/usr/bin/svn-real "$@"
</screen>
    </informalexample>

<!--
    <para>Another common problem is often encountered on Unix-like
      systems.  If your repository is backed by Berkeley DB, for
      example, it occasionally creates new log files to journal its
      actions.  Even if the Berkeley DB repository is wholly owned by
      the <literal>svn</literal> group, these newly created log files
      won't necessarily be owned by that same group, which then
      creates more permissions problems for your users.  A good
      workaround is to set the group SUID bit on the
      repository's <filename>db</filename> directory.  This causes all
      newly created log files to have the same group owner as the
      parent directory.</para>

-->
    <para>Sur les systèmes de type Unix, on rencontre souvent un autre
      problème classique. Si vous avez un dépôt Berkeley DB, par
      exemple, il crée de temps en temps de nouveaux fichiers pour la
      journalisation. Même si le dépôt Berkeley DB est entièrement
      possédé par le groupe <literal>svn</literal>, ces nouveaux
      journaux ne seront pas nécessairement possédés par le même groupe,
      ce qui crée des problèmes de droits supplémentaires pour vos
      utilisateurs. Une bonne façon de contourner ce problème est
      d'activer le bit SUID du groupe sur le répertoire
      <filename>db</filename> du dépôt, ce qui a pour résultat que tous
      les nouveaux fichiers journaux créés ont le même propriétaire que
      le répertoire parent.</para>

<!--
    <para>Once you've jumped through these hoops, your repository
      should be accessible by all the necessary processes.  It may
      seem a bit messy and complicated, but the problems of having
      multiple users sharing write access to common files are classic
      ones that are not often elegantly solved.</para>

-->
    <para>Une fois ces manipulations effectuées, vos dépôts devraient
      être accessibles par tous les processus nécessaires. Tout ceci
      peut sembler un petit peu confus et compliqué, mais les problèmes
      d'accès en écriture par plusieurs utilisateurs à des fichiers
      partagés sont des problèmes très classiques, qui ne sont pas
      souvent résolus avec élégance.</para>

<!--
    <para>Fortunately, most repository administrators will never
      <emphasis>need</emphasis> to have such a complex configuration.
      Users who wish to access repositories that live on the same
      machine are not limited to using <literal>file://</literal>
      access URLs&mdash;they can typically contact the Apache HTTP
      server or <command>svnserve</command> using
      <literal>localhost</literal> for the server name in their
      <literal>http://</literal> or <literal>svn://</literal> URL.
      And maintaining multiple server processes for your Subversion
      repositories is likely to be more of a headache than necessary.
      We recommend that you choose a single server that best meets your
      needs and stick with it!</para>

-->
    <para>Heureusement, la plupart des administrateurs
      <emphasis>n'auront jamais besoin</emphasis> d'une configuration
      aussi complexe. Les utilisateurs qui désirent accéder aux dépôts
      résidant sur une même machine ne sont pas limités aux URL d'accès
      <literal>file://</literal> &mdash; ils peuvent généralement
      contacter le serveur http&nbsp;Apache ou le
      serveur <command>svnserve</command> en utilisant
      <literal>localhost</literal> comme nom de serveur dans leurs URL
      <literal>http://</literal> ou <literal>svn://</literal>. Et
      assurer la maintenance de plusieurs processus serveurs pour vos
      dépôts Subversion vous créera plus de soucis qu'autre chose. Nous
      vous recommandons de choisir un seul serveur (celui qui correspond
      le mieux à vos besoins) et de vous y tenir&nbsp;!</para>

    <sidebar>
<!--
      <title>The svn+ssh:// Server Checklist</title>
-->
      <title>Serveur <literal>svn+ssh://</literal>&nbsp;: les points à
        vérifierDie Checkliste für svn+ssh://-Server</title>

<!--
      <para>It can be quite tricky to get a bunch of users with
        existing SSH accounts to share a repository without
        permissions problems.  If you're confused about all the things
        that you (as an administrator) need to do on a Unix-like
        system, here's a quick checklist that resummarizes some of the
        topics discussed in this section:</para>

-->
      <para>Partager un dépôt entre des utilisateurs qui ont des comptes
        SSH sans avoir de problème de droits d'accès peut être assez
        épineux. Si l'ensemble des tâches à mener par l'administrateur
        d'un système de type Unix est encore un peu confus pour vous,
        voici la liste des choses à vérifier qui récapitule les points
        abordés dans cette section&nbsp;:</para>

      <itemizedlist>
        <listitem>
<!--
          <para>All of your SSH users need to be able to read and
            write to the repository, so put all the SSH users into a
            single group.</para>
-->
          <para>tous vos utilisateurs SSH doivent être capables de lire
            et d'écrire dans le dépôt, donc mettez tous les utilisateurs
            SSH dans un même groupe&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Make the repository wholly owned by that group.</para>
-->
          <para>
            faites de ce dépôt l'entière propriété de ce groupe&nbsp;;
          </para>
        </listitem>
        <listitem>
<!--
          <para>Set the group permissions to read/write.</para>
-->
          <para>mettez les droits d'accès de ce groupe à
            lecture/écriture&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Your users need to use a sane umask when accessing the
            repository, so make sure <command>svnserve</command>
            (<filename>/usr/bin/svnserve</filename>, or wherever it
            lives in <literal>$PATH</literal>) is actually a wrapper
            script that runs <userinput>umask 002</userinput> and
            executes the real <command>svnserve</command>
            binary.</para>
-->
          <para>vos utilisateurs doivent utiliser un umask correct quand
            ils accèdent au dépôt, donc assurez-vous que
            <command>svnserve</command>
            (<filename>/usr/bin/svnserve</filename> ou le chemin vers
              lequel <literal>$PATH</literal> pointe) est en fait un
              script qui exécute <userinput>umask 002</userinput> avant
              de lancer le véritable exécutable
              <command>svnserve</command>&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Take similar measures when using
            <command>svnlook</command> and
            <command>svnadmin</command>.  Either run them with a sane
            umask or wrap them as just described.</para>
-->
          <para>prenez des mesures similaires quand vous utilisez
            <command>svnlook</command> et
            <command>svnadmin</command>&nbsp;: soit vous les lancez avec
            un umask correct, soit vous les <quote>enveloppez</quote>
            dans un script comme nous venons de l'expliquer.</para>
        </listitem>
      </itemizedlist>

    </sidebar>

  </sect1>
</chapter>

<!--
local variables:
sgml-parent-document: ("book.xml" "chapter")
end:
-->
