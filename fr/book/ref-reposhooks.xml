<!-- -*- sgml -*- -->

<reference id="svn.ref.reposhooks">
<!--
  <title>Subversion Repository Hook Reference</title>
-->
  <title>Guide de référence des procédures automatiques de Subversion</title>

  <partintro>

<!--
    <para>Subversion repositories provide a number of event hooks
      which are essentially opportunities for administrators to extend
      Subversion's functionality at key moments of key operations.
      Repository hooks are implemented as programs executed by
      Subversion itself at those key moments&mdash;before and after a
      commit, before and after a user locks a file, and so on.</para>

-->
    <para>Les dépôts Subversion fournissent des procédures automatiques
      (<foreignphrase>hook</foreignphrase> en anglais) dont l'objet
      principal est de pouvoir étendre facilement les fonctionnalités de
      Subversion à des moments clés des opérations importantes. Les
      procédures automatiques sont implémentées sous la forme de
      programmes exécutés par Subversion lui-même à ces moments clés
      (avant et après une propagation, avant et après le verrouillage
      d'un fichier par un utilisateur, etc.).</para>

<!--
    <para>For each hook it provides, Subversion will attempt to
      execute the program of that hook's name which is found in
      the <filename>hooks/</filename> subdirectory of the repository's
      on-disk directory structure.  For example, on a Unix system, the
      start-commit hook script would be installed at
      <filename><replaceable>REPOS_PATH</replaceable>/hooks/start-commit</filename>,
      where it could be a binary executable program, a shell script, a
      Python program, etc.  On a Windows system, the program would be
      installed in the same location, but would be
      named <filename>START-COMMIT.EXE</filename>
      or <filename>START-COMMIT.BAT</filename> instead of
      simply <filename>start-commit</filename>.</para>
-->
    <para>Pour chaque procédure automatique, Subversion lance le
      programme qui se trouve dans le sous-dossier
      <filename>hooks/</filename> de l'emplacement du dépôt sur le
      système de fichiers et dont le nom correspond à la
      procédure voulue. Par exemple, sur un système de type Unix, le
      programme correspondant à la procédure automatique exécutée avant
      une propagation doit se trouver à
      <filename><replaceable>CHEMIN_DÉPÔT</replaceable>/hooks/start-commit</filename>.
      Ce peut être un exécutable binaire, un script shell, un programme
      Python, etc. Sur un système Windows, le programme doit se trouver
      au même emplacement mais doit se nommer
      <filename>START-COMMIT.EXE</filename> ou
      <filename>START-COMMIT.BAT</filename> au lieu de simplement
      <filename>start-commit</filename>.</para>

<!--
    <para>This reference guide describes the various hooks which
      Subversion offers to administrators, detailing when the hook is
      invoked, its input parameters, and how its behavior affects the
      Subversion workflow.</para>
-->
    <para>Ce guide de référence décrit les différentes procédures
      automatiques proposées par Subversion, détaillant le moment où est
      appelée la procédure, ses paramètres d'entrée et la manière dont
      elle modifie le comportement de Subversion.</para>

  </partintro>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.start-commit">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>procédures automatiques</primary>
      <secondary>start-commit</secondary>
    </indexterm>

    <refnamediv>
      <refname>start-commit</refname>
<!--
      <refpurpose>Notification of the beginning of a commit.</refpurpose>
-->
      <refpurpose>Notification du début d'une propagation.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>start-commit
<!--
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>USER</replaceable>
        <replaceable>CAPABILITIES</replaceable>
        <replaceable>TXN-NAME</replaceable></literal></para>
-->
        <replaceable>CHEMIN_DÉPÔT</replaceable>
        <replaceable>UTILISATEUR</replaceable>
        <replaceable>CAPACITÉS</replaceable>
        <replaceable>NOM_TRANSACTION</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

<!--
      <para>The start-commit hook is run immediately after the
        commit transaction is created and its initial properties
        set.  It is typically used as an early termination
        mechanism, avoiding what could be a lengthy commit process
        which would eventually fail at a later phase anyway due to a
        user's lack of commit privileges or some other commit
        metadata validation failure.</para>
-->
      <para>La procédure automatique <literal>start-commit</literal>
        est activée immédiatement après que la transaction de
        propagation ne soit créée et que ses propriétés ne soient fixées
        aux valeurs initiales. Typiquement, elle est utilisée pour
        décider rapidement s'il convient d'interdire la propagation, en
        évitant d'attendre que le long processus de propagation n'échoue
        à la fin en raison, par exemple, de droits insuffisants alloués
        à l'utilisateur pour propager une révision ou d'invalidation de
        métadonnées relatives à la propagation.</para>

<!--
      <para>If the start-commit hook program returns a nonzero exit
        value, the commit process is stopped, the commit transaction
        is destroyed, and anything printed to
        <filename>stderr</filename> is marshalled back to the
        client.</para>
-->
      <para>Si le code de retour de la procédure automatique
        <literal>start-commit</literal> est non nul, la propagation est
        arrêtée, la transaction de propagation détruite et tout ce qui a
        été écrit vers <filename>stderr</filename> est renvoyé vers le
        client.</para>

<!--
      <para>The start-commit hook is not a suitable place to
        evaluate the substance of a particular commit, as it is
        invoked before any file or directory change information has
        been transmitted.  Use the pre-commit hook script (which is
        described in <xref linkend="svn.ref.reposhooks.pre-commit"
        /> elsewhere in this reference) for that purpose.</para>
-->
      <para>La procédure automatique <literal>start-commit</literal>
        n'a pas vocation à valider le contenu d'une propagation
        puisqu'elle est appelée avant qu'aucune modification de fichier
        ou de répertoire ne soit transmise. Utilisez la procédure
        automatique <literal>pre-commit</literal> (qui est décrite dans
        <xref linkend="svn.ref.reposhooks.pre-commit" /> dans ce guide
        de référence) pour cela.</para>

      <note>
<!--
        <para>Prior to Subversion 1.8, the Subversion invoked the
          start-commit hook <emphasis>before</emphasis> creating the
          commit transaction.  Failure of the script resulted in that
          transaction not being created at all.  This was changed in
          Subversion 1.8, though, to allow implementations of the
          start-commit hook access to the transaction's properties,
          which can include (among other things) the revision log
          associated with the commit.</para>
      </note>
-->
        <para>Avant Subversion 1.8, Subversion appelait la procédure
          automatique <literal>star-commit</literal>
          <emphasis>avant</emphasis> de créer la transaction de
          propagation. Un échec de la procédure entrainait qu'il n'y
          avait aucune transaction créée. Subversion 1.8 a modifié cet
          enchainement, ce qui permet à <literal>start-commit</literal>
          d'avoir accès aux propriétés de la transaction, dont le
          commentaire de propagation (entre autres choses).</para>
      </note>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input Parameter(s)</title>
-->
      <title>Paramètres d'entrée</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Les arguments de la ligne de commande passés à la
        procédure automatique sont, dans l'ordre&nbsp;:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>chemin du dépôt</para>
        </listitem>
        <listitem>
<!--
          <para>Authenticated username attempting the commit</para>
-->
          <para>identifiant (authentifié) de l'utilisateur qui initie
            la propagation&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Colon-separated list of
            capabilities that a client passes to the server,
            including <literal>depth</literal>,
            <literal>mergeinfo</literal>, and
            <literal>log-revprops</literal> (new in Subversion 1.5)</para>
-->
          <para>liste, dont les éléments sont séparés par des virgules,
              de capacités que le client passe au serveur, dont
              <literal>depth</literal>, <literal>mergeinfo</literal> et
              <literal>log-revprops</literal> (à partir de
              Subversion&nbsp;1.5)&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Commit transaction name (new in Subversion 1.8)</para>
-->
          <para>nom de la transaction de propagation (nouveau dans
            Subversion 1.8)</para>
        </listitem>
      </orderedlist>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Utilisations principales</title>

<!--
      <para>Access control (e.g., temporarily lock out commits for
        some reason).</para>
-->
      <para>Contrôle d'accès (par exemple, interdiction temporaire
        d'effectuer des propagations pour telle ou telle raison).</para>

<!--
      <para>A means to allow access only from clients that have
        certain capabilities.</para>
-->
      <para>Un moyen de n'autoriser l'accès qu'à des clients qui
        possèdent certaines capacités.</para>
    </refsect1>

  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.pre-commit">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>procédures automatiques</primary>
      <secondary>pre-commit</secondary>
    </indexterm>

    <refnamediv>
      <refname>pre-commit</refname>
<!--
      <refpurpose>Notification just prior to commit completion.</refpurpose>
-->
      <refpurpose>Notification juste avant la fin de la
        propagation.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>pre-commit
<!--
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>TXN-NAME</replaceable></literal></para>
-->
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>TXN-NAME</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

<!--
      <para>The <literal>pre-commit</literal> hook is run just
        before a commit transaction is promoted to a new revision.
        Typically, this hook is used to protect against commits that
        are disallowed due to content or location (e.g., your
        site might require that all commits to a certain branch
        include a ticket number from the bug tracker, or that the
        incoming log message is nonempty).</para>
-->
      <para>La procédure automatique <literal>pre-commit</literal> est
        activée juste avant que la transaction de propagation ne génère
        une nouvelle révision. Cette procédure automatique est
        typiquement utilisée pour protéger le dépôt vis-à-vis de
        propagations qui ne respectent pas certaines règles relatives au
        contenu ou au chemin (par exemple, votre dépôt peut imposer que
        les propagations sur une certaine branche incluent un numéro de
        ticket de l'outil de gestion de suivi des bogues ou alors que
        l'entrée du journal de propagation ne soit pas vide).</para>

<!--
      <para>If the <literal>pre-commit</literal> hook program
        returns a nonzero exit value, the commit is aborted, the
        commit transaction is removed, and anything printed to
        <filename>stderr</filename> is marshalled back to the client.</para>
-->
      <para>Si le code de retour de la procédure automatique
        <literal>pre-commit</literal> est non nul, la propagation est
        annulée, la transaction de propagation supprimée et tout ce qui
        a été écrit vers <filename>stderr</filename> est renvoyé vers le
        client.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input parameter(s)</title>
-->
      <title>Paramètres d'entrée</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Les arguments de la ligne de commande passés à la procédure
        automatique sont, dans l'ordre&nbsp;:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>chemin du dépôt&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Commit transaction name</para>
-->
          <para>nom de la transaction de propagation.</para>
        </listitem>
      </orderedlist>

<!--
      <para>Additionally, Subversion passes any lock tokens provided
        by the committing client to the hook script via standard
        input.  When present, these are formatted as a single line
        containing the string <literal>LOCK-TOKENS:</literal>,
        followed by additional lines&mdash;one per lock
        token&mdash;which contain the lock token information.  Each
        lock token information line consists of the URI-escaped
        repository filesystem path associated with the lock,
        followed by the pipe (<literal>|</literal>) separator
        character, and finally the lock token string.</para>
-->
      <para>En complément, Subversion passe les jetons de verrouillage
        fournis par le client à la procédure automatique en utilisant
        l'entrée standard. Lorsqu'il y en a, ils sont placés dans
        l'enchaînement composé d'une ligne qui contient
        <literal>LOCK-TOKENS:</literal> suivie par autant de lignes que
        de jetons contenant chacune les informations de chaque
        jeton&nbsp;: l'URI au format échappé du chemin dans le
        système de fichiers du dépôt du chemin verrouillé, suivi par un
        caractère pipe (<literal>|</literal>) indiquant la séparation et
        enfin la chaine de caractère identifiant le verrou.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Utilisations principales</title>
<!--
      <para>Change validation and control</para>
-->
      <para>Validation et contrôle des modifications</para>
    </refsect1>

  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.post-commit">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>procédures automatiques</primary>
      <secondary>post-commit</secondary>
    </indexterm>

    <refnamediv>
      <refname>post-commit</refname>
<!--
      <refpurpose>Notification of a successful commit.</refpurpose>
-->
      <refpurpose>Notification d'une propagation réussie.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>post-commit
<!--
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>REVISION</replaceable>
        <replaceable>TXN-NAME</replaceable></literal></para>
-->
        <replaceable>CHEMIN_DÉPÔT</replaceable>
        <replaceable>RÉVISION</replaceable>
        <replaceable>NOM_TRANSACTION</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

<!--
      <para>The <literal>post-commit</literal> hook is run after the
        transaction is committed and a new revision is created.  Most
        people use this hook to send out descriptive emails about
        the commit or to notify some other tool (such as an issue
        tracker) that a commit has happened.  Some configurations
        also use this hook to trigger backup processes.</para>
-->
      <para>La procédure automatique <literal>post-commit</literal>
        est activée après que la transaction ait été validée et que la
        nouvelle révision soit créée. La plupart des administrateurs
        utilisent cette procédure automatique pour envoyer des e-mails
        décrivant la propagation ou pour notifier à d'autres outils
        (tels que les outils de gestion pour le suivi de bogues) qu'une
        nouvelle propagation a eu lieu. Certains utilisent cette
        procédure automatique pour déclencher une sauvegarde.</para>

<!--
      <para>If the <literal>post-commit</literal> hook returns a
        nonzero exit status, the commit <emphasis>will
        not</emphasis> be aborted since it has already
        completed.  However, anything that the hook printed
        to <filename>stderr</filename> will be marshalled back to the
        client, making it easier to diagnose hook failures.</para>
-->
      <para>Si le code de retour de la procédure automatique
        <literal>post-commit</literal> est non nul, la propagation
        <emphasis>a bien eu lieu</emphasis> puisqu'elle est déjà
        terminée. Cependant, tout ce qui a été écrit vers
        <filename>stderr</filename> est renvoyé vers le client, afin de
        trouver plus facilement la raison de l'échec de la procédure
        automatique.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input parameter(s)</title>
-->
      <title>Paramètres d'entrée</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Les arguments de la ligne de commande passés à la procédure
        automatique sont, dans l'ordre&nbsp;:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>chemin du dépôt&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Revision number created by the commit</para>
-->
          <para>numéro de révision créée par la propagation&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Name of the transaction that has become the revision triggering
            the post-commit hook.</para>
-->
          <para>nom de la transaction qui a donné la révision et qui
            appelle la procédure automatique.</para>
        </listitem>
      </orderedlist>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Utilisations principales</title>
<!--
      <para>Commit notification; tool integration</para>
-->
      <para>Notification de propagation&nbsp;; intégration avec d'autres
        outils.</para>
    </refsect1>

  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.pre-revprop-change">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>procédures automatiques</primary>
      <secondary>pre-revprop-change</secondary>
    </indexterm>

    <refnamediv>
      <refname>pre-revprop-change</refname>
<!--
      <refpurpose>Notification of a revision property change
        attempt.</refpurpose>
-->
      <refpurpose>Notification avant le changement d'une propriété de
        révision.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>pre-revprop-change
<!--
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>REVISION</replaceable>
        <replaceable>USER</replaceable>
        <replaceable>PROPNAME</replaceable>
-->
        <replaceable>CHEMIN_DÉPÔT</replaceable>
        <replaceable>RÉVISION</replaceable>
        <replaceable>UTILISATEUR</replaceable>
        <replaceable>NOM_PROPRIÉTÉ</replaceable>
        <replaceable>ACTION</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

<!--
      <para>The <literal>pre-revprop-change</literal> hook is run
        immediately prior to the modification of a revision property
        when performed outside the scope of a normal commit.  Unlike
        the other hooks, the default state of this one is to deny
        the proposed action.  The hook must actually exist and
        return a zero exit value before a revision property
        modification can happen.</para>
-->
      <para>La procédure automatique
        <literal>pre-revprop-change</literal> est activée juste avant la
        modification d'une propriété de révision quand elle n'a pas lieu
        dans le cadre d'une propagation normale. Contrairement aux
        autres procédures automatiques, la configuration par défaut de
        cette procédure automatique est d'interdire l'action demandée.
        La procédure automatique doit exister effectivement et le code
        de retour doit être nul pour autoriser la modification d'une
        propriété de révision.</para>

<!--
      <para>If the <literal>pre-revprop-change</literal> hook doesn't
        exist, isn't executable, or returns a nonzero exit value, no
        change to the property will be made, and anything printed
        to <filename>stderr</filename> is marshalled back to the
        client.</para>
-->
      <para>Si la procédure automatique
        <literal>pre-revprop-change</literal> n'existe pas, ne possède
        pas les droits d'exécution ou si le code de retour n'est pas
        nul, la propriété n'est pas modifiée et tout ce qui a été écrit
        vers <filename>stderr</filename> est renvoyé vers le
        client.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input parameter(s)</title>
-->
      <title>Paramètres d'entrée</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Les arguments de la ligne de commande passés à la
          procédure automatique sont, dans l'ordre&nbsp;:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>chemin du dépôt&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Revision whose property is about to be modified</para>
-->
          <para>révision dont une propriété va être
            modifiée&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Authenticated username attempting the property change</para>
-->
          <para>identifiant (authentifié) de l'utilisateur qui demande
            la modification de la propriété&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Name of the property changed</para>
-->
          <para>Nom de la propriété à modifier&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Change description: <literal>A</literal> (added),
            <literal>D</literal> (deleted), or <literal>M</literal>
            (modified)</para>
-->
          <para>Description de la modification&nbsp;:
            <literal>A</literal> (ajout),
            <literal>D</literal> (suppression) ou <literal>M</literal>
            (modification).</para>
        </listitem>
      </orderedlist>

<!--
      <para>Additionally, Subversion passes the intended new value
         of the property to the hook program via standard
         input.</para>
-->
      <para>Par ailleurs, Subversion fournit la nouvelle valeur de la
          propriété à la procédure automatique
          <foreignphrase>via</foreignphrase> l'entrée standard.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Utilisations principales</title>
<!--
      <para>Access control; change validation and control</para>
-->
      <para>Contrôle d'accès&nbsp;; Contrôle et validation des
        modifications.</para>
    </refsect1>

  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.post-revprop-change">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>procédures automatiques</primary>
      <secondary>post-revprop-change</secondary>
    </indexterm>

    <refnamediv>
      <refname>post-revprop-change</refname>
<!--
      <refpurpose>Notification of a successful revision property
        change.</refpurpose>
-->
      <refpurpose>Notification d'une modification de propriété de
        révision réussie.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>post-revprop-change
<!--
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>REVISION</replaceable>
        <replaceable>USER</replaceable>
        <replaceable>PROPNAME</replaceable>
-->
        <replaceable>CHEMIN_DÉPÔT</replaceable>
        <replaceable>RÉVISION</replaceable>
        <replaceable>UTILISATEUR</replaceable>
        <replaceable>NOM_PROPRIÉTÉ</replaceable>
        <replaceable>ACTION</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

<!--
      <para>The <literal>post-revprop-change</literal> hook is run
        immediately after the modification of a revision property
        when performed outside the scope of a normal commit.  As you can
        derive from the description of its counterpart, the
        <literal>pre-revprop-change</literal> hook, this hook will
        not run at all unless
        the <literal>pre-revprop-change</literal> hook is
        implemented.  It is typically used to send email
        notification of the property change.</para>
-->
      <para>La procédure automatique
        <literal>post-revprop-change</literal> est activée immédiatement
        après la modification d'une propriété de révision, quand elle
        n'a pas lieu dans le cadre d'une propagation normale. Comme vous
        pouvez le deviner à la lecture de la description de son
        homologue, la procédure automatique
        <literal>pre-revprop-change</literal>, cette procédure
        automatique ne peut être activée que si
        <literal>pre-revprop-change</literal> est implémentée. Cette
        procédure automatique est principalement utilisée pour envoyer
        des e-mails de notification qu'une propriété a été
        modifiée.</para>

<!--
      <para>If the <literal>post-revprop-change</literal> hook returns a
        nonzero exit status, the change <emphasis>will
        not</emphasis> be aborted since it has already
        completed.  However, anything that the hook printed
        to <filename>stderr</filename> will be marshalled back to the
        client, making it easier to diagnose hook failures.</para>
-->
      <para>Si le code de retour de la procédure automatique
        <literal>post-revprop-change</literal> est non nul, la
        modification <emphasis>a bien eu lieu</emphasis> puisqu'elle est
        déjà terminée. Cependant, tout ce qui a été écrit vers
        <filename>stderr</filename> est renvoyé vers le client, afin de
        trouver plus facilement la raison de l'échec de la procédure
        automatique.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input parameter(s)</title>
-->
      <title>Paramètres d'entrée</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Les arguments de la ligne de commande passés à la procédure
        automatique sont, dans l'ordre&nbsp;:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>chemin du dépôt&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Revision whose property was modified</para>
-->
          <para>révision dont une propriété a été modifiée&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Authenticated username of the person making the change</para>
-->
          <para>identifiant (authentifié) de l'utilisateur qui a
            effectué la modification de la propriété&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Name of the property changed</para>
-->
          <para>nom de la propriété modifiée&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Change description: <literal>A</literal> (added),
            <literal>D</literal> (deleted), or <literal>M</literal>
            (modified)</para>
-->
          <para>Description de la modification&nbsp;:
            <literal>A</literal> (ajout),
            <literal>D</literal> (suppression) ou <literal>M</literal>
            (modification).</para>
        </listitem>
      </orderedlist>

<!--
      <para>Additionally, Subversion passes to the hook program, via
        standard input, the previous value of the property.</para>
-->
      <para>Par ailleurs, Subversion fournit la valeur précédente de la
        propriété à la procédure automatique
        <foreignphrase>via</foreignphrase> l'entrée standard.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Utilisations principales</title>
<!--
      <para>Property change notification</para>
-->
      <para>Notification de la modification d'une propriété.</para>
    </refsect1>

  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.pre-lock">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>procédures automatiques</primary>
      <secondary>pre-lock</secondary>
    </indexterm>

    <refnamediv>
      <refname>pre-lock</refname>
<!--
      <refpurpose>Notification of a path lock attempt.</refpurpose>
-->
      <refpurpose>Notification d'une demande de verrouillage d'un
        chemin.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>pre-lock
<!--
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>PATH</replaceable>
        <replaceable>USER</replaceable>
        <replaceable>COMMENT</replaceable>
        <replaceable>STEAL</replaceable></literal></para>
-->
        <replaceable>CHEMIN_DÉPÔT</replaceable>
        <replaceable>CHEMIN</replaceable>
        <replaceable>UTILISATEUR</replaceable>
        <replaceable>COMMENTAIRE</replaceable>
        <replaceable>DRAPEAU_CASSAGE</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

<!--
      <para>The <literal>pre-lock</literal> hook runs whenever
        someone attempts to lock a path.  It can be used to prevent
        locks altogether or to create a more complex policy
        specifying exactly which users are allowed to lock
        particular paths.  If the hook notices a preexisting lock,
        it can also decide whether a user is allowed
        to <quote>steal</quote> the existing lock.</para>
-->
      <para>La procédure automatique <literal>pre-lock</literal> est
        activée lorsque quelqu'un demande à verrouiller un chemin. Elle
        peut être utilisée pour empêcher tout verrouillage ou pour
        définir une politique plus complexe où tels utilisateurs sont
        autorisés à verrouiller tels chemins. Si la procédure
        automatique détecte un verrou pré-existant, elle peut aussi
        décider si l'utilisateur est autorisé à <quote>voler</quote> ce
        verrou pré-existant.</para>

<!--
      <para>If the <literal>pre-lock</literal> hook program returns
        a nonzero exit value, the lock action is aborted and
        anything printed to <filename>stderr</filename> is
        marshalled back to the client.</para>
-->
      <para>Si le code de retour de la procédure automatique
        <literal>pre-lock</literal> est non nul, le verrouillage est
        annulé et tout ce qui a été écrit vers
        <filename>stderr</filename> est renvoyé vers le client.</para>

<!--
      <para>The hook program may optionally dictate the lock token
        which will be assigned to the lock by printing the desired
        lock token to standard output.  Because of this,
        implementations of this hook should carefully avoid
        unexpected output sent to standard output.</para>
-->
      <para>La procédure automatique peut aussi imposer le jeton de
        verrouillage qui sera utilisé en affichant le jeton sur la
        sortie standard. Pour cette raison, les implémentations de cette
        procédure automatique doivent bien faire attention à ce qu'elles
        écrivent sur la sorie standard.</para>

      <warning>
<!--
        <para>If the <literal>pre-lock</literal> script takes
          advantage of lock token dictation feature, the
          responsibility of generating a <emphasis>unique</emphasis>
          lock token falls to the script itself.  Failure to
          generate unique lock tokens may result in
          undefined&mdash;and very likely,
          undesired&mdash;behavior.</para>
-->
        <para>Si la procédure automatique <literal>pre-lock</literal>
          utilise la possibilité d'imposer le jeton, il est alors de sa
          propre responsabilité de s'assurer que chaque jeton soit bien
          <emphasis>unique</emphasis>. Si ce n'est pas le cas, cela peut
          conduire à des comportements indéfinis et, très probablement,
          indésirables.</para>
      </warning>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input parameter(s)</title>
-->
      <title>Paramètres d'entrée</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Les arguments de la ligne de commande passés à la
        procédure automatique sont, dans l'ordre&nbsp;:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>chemin du dépôt&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Versioned path that is to be locked</para>
-->
          <para>chemin géré en versions qui va être
            verrouillé&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Authenticated username of the person attempting the
            lock</para>
-->
          <para>identifiant (authentifié) de l'utilisateur qui demande
            le verrouillage.</para>
        </listitem>
        <listitem>
<!--
          <para>Comment provided when the lock was created</para>
-->
          <para>Commentaire fourni lorsque le verrou a été
            créé&nbsp;</para>
        </listitem>
        <listitem>
<!--
          <para><literal>1</literal> if the user is attempting to
            steal an existing lock; <literal>0</literal>
            otherwise</para>
-->
          <para><literal>1</literal> si l'utilisateur essaie de casser
            un verrou existant&nbsp;; <literal>0</literal> sinon.</para>
        </listitem>
      </orderedlist>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Utilisations principales</title>
<!--
      <para>Access control</para>
-->
      <para>Contrôle d'accès.</para>
    </refsect1>

  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.post-lock">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>procédures automatiques</primary>
      <secondary>post-lock</secondary>
    </indexterm>

    <refnamediv>
      <refname>post-lock</refname>
<!--
      <refpurpose>Notification of a successful path lock.</refpurpose>
-->
      <refpurpose>Notification d'un verrouillage de chemin
        réussi.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>post-lock
<!--
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>USER</replaceable></literal></para>
-->
        <replaceable>CHEMIN_DÉPÔT</replaceable>
        <replaceable>UTILISATEUR</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

<!--
      <para>The <literal>post-lock</literal> hook runs after one or
        more paths have been locked.  It is typically used to send
        email notification of the lock event.</para>
-->
      <para>La procédure automatique <literal>post-lock</literal> est
        activée après qu'un ou plusieurs chemins aient été verrouillés.
        Elle est utilisée typiquement pour envoyer des e-mails de
        notification signalant ce verrouillage.</para>

<!--
      <para>If the <literal>post-lock</literal> hook returns a
        nonzero exit status, the lock <emphasis>will
        not</emphasis> be aborted since it has already
        completed.  However, anything that the hook printed
        to <filename>stderr</filename> will be marshalled back to the
        client, making it easier to diagnose hook failures.</para>
-->
      <para>Si le code de retour de la procédure automatique
        <literal>post-lock</literal> est non nul, le verrouillage
        <emphasis>a bien lieu</emphasis> puisqu'il est déjà effectif.
        Cependant, tout ce qui a été écrit vers
        <filename>stderr</filename> est renvoyé vers le client, afin de
        trouver plus facilement la raison de l'échec de la procédure
        automatique.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input parameter(s)</title>
-->
      <title>Paramètres d'entrée</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Les arguments de la ligne de commande passés à la
        procédure automatique sont, dans l'ordre&nbsp;:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>chemin du dépôt&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Authenticated username of the person who locked the
            paths</para>
-->
          <para>identifiant (authentifié) de l'utilisateur qui a
              effectué le verrouillage&nbsp;;</para>
        </listitem>
      </orderedlist>

<!--
      <para>Additionally, the list of paths locked is passed to the
        hook program via standard input, one path per line.</para>
-->
      <para>En complément, la liste des chemins verrouillés est fournie
        à la procédure automatique <foreignphrase>via</foreignphrase>
        l'entrée standard, un chemin par ligne.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Utilisations principales</title>
<!--
      <para>Lock notification</para>
-->
      <para>Notification de verrouillage.</para>
    </refsect1>

  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.pre-unlock">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>procédures automatiques</primary>
      <secondary>pre-unlock</secondary>
    </indexterm>

    <refnamediv>
      <refname>pre-unlock</refname>
<!--
      <refpurpose>Notification of a path unlock attempt.</refpurpose>
-->
      <refpurpose>Notification d'une demande de déverrouillage d'un
        chemin.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>pre-unlock
<!--
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>PATH</replaceable>
        <replaceable>USER</replaceable>
        <replaceable>TOKEN</replaceable>
        <replaceable>BREAK-UNLOCK</replaceable></literal></para>
-->
        <replaceable>CHEMIN_DÉPÔT</replaceable>
        <replaceable>CHEMIN</replaceable>
        <replaceable>UTILISATEUR</replaceable>
        <replaceable>JETON</replaceable>
        <replaceable>DRAPEAU_CASSAGE</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

<!--
      <para>The <literal>pre-unlock</literal> hook runs whenever
        someone attempts to remove a lock on a file.  It can be used
        to create policies that specify which users are allowed to
        unlock particular paths.  It's particularly important for
        determining policies about lock breakage.  If user A locks a
        file, is user B allowed to break the lock?  What if the lock
        is more than a week old?  These sorts of things can be
        decided and enforced by the hook.</para>
-->
      <para>La procédure automatique <literal>pre-unlock</literal> est
        activée lorsque quelqu'un demande à supprimer un verrou sur un
        fichier.  Elle peut être utilisée pour définir des politiques
        qui spécifient que tels utilisateurs sont autorisés à
        déverrouiller tels chemins. Ceci est particulièrement important
        dans le cadre de votre politique globale de verrouillage. Si un
        utilisateur A verrouille un fichier, est-ce que l'utilisateur B
        est autorisé à casser ce verrou&nbsp;? Qu'en est-il si le verrou
        est âgé de plus d'une semaine&nbsp;? Ce type de  politique peut
        être implémenté par la procédure automatique.</para>

<!--
      <para>If the <literal>pre-unlock</literal> hook program
        returns a nonzero exit value, the unlock action is aborted
        and anything printed to <filename>stderr</filename> is marshalled back to the
        client.</para>
-->
      <para>Si le code de retour de la procédure automatique
        <literal>pre-unlock</literal> est non nul, le déverrouillage
        n'a pas lieu et tout ce qui a été écrit vers
        <filename>stderr</filename> est renvoyé vers le client.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input parameter(s)</title>
-->
      <title>Paramètres d'entrée</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Les arguments de la ligne de commande passés à la
        procédure automatique sont, dans l'ordre&nbsp;:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>chemin du dépôt&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Versioned path which is to be unlocked</para>
-->
          <para>Chemin géré en versions qui va être
            déverrouillé&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Authenticated username of the person attempting the
            unlock</para>
-->
          <para>identifiant (authentifié) de l'utilisateur qui demande
            le déverrouillage&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Lock token associated with the lock which is to be
            removed</para>
-->
          <para>jeton de verrouillage associé au verrou qui doit être
            supprimé&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para><literal>1</literal> if the user is attempting to
            break the lock; <literal>0</literal> otherwise</para>
-->
          <para><literal>1</literal> si l'utilisateur essai de casser le
            verrou&nbsp;; <literal>0</literal> sinon.</para>
        </listitem>
      </orderedlist>
    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Utilisations principales</title>
<!--
      <para>Access control</para>
-->
      <para>Contrôle d'accès.</para>
    </refsect1>

  </refentry>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <refentry id="svn.ref.reposhooks.post-unlock">

    <indexterm>
<!--
      <primary>hook scripts</primary>
-->
      <primary>procédures automatiques</primary>
      <secondary>post-unlock</secondary>
    </indexterm>

    <refnamediv>
      <refname>post-unlock</refname>
<!--
      <refpurpose>Notification of a successful path unlock.</refpurpose>
-->
      <refpurpose>Notification d'un déverrouillage de chemin
        réussi.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><literal>post-unlock
<!--
        <replaceable>REPOS-PATH</replaceable>
        <replaceable>USER</replaceable></literal></para>
-->
        <replaceable>CHEMIN_DÉPÔT</replaceable>
        <replaceable>UTILISATEUR</replaceable></literal></para>
    </refsynopsisdiv>

    <!-- =============================================================== -->
    <refsect1>
      <title>Description</title>

<!--
      <para>The <literal>post-unlock</literal> hook runs after one
        or more paths have been unlocked.  It is typically used to
        send email notification of the unlock event.</para>
-->
      <para>La procédure automatique <literal>post-unlock</literal> est
        activée après qu'un ou plusieurs chemins aient été d
        éverrouillés. Elle est utilisée typiquement pour envoyer des
        e-mails de notification signalant ce déverrouillage.</para>

<!--
      <para>If the <literal>post-unlock</literal> hook returns a
        nonzero exit status, the unlock <emphasis>will
        not</emphasis> be aborted since it has already
        completed.  However, anything that the hook printed
        to <filename>stderr</filename> will be marshalled back to the
        client, making it easier to diagnose hook failures.</para>
-->
      <para>Si le code de retour de la procédure automatique
        <literal>post-unlock</literal> est non nul, le déverrouillage
        <emphasis>a bien eu lieu</emphasis>. Cependant, tout ce qui a
        été écrit vers <filename>stderr</filename> est renvoyé vers le
        client, afin de  trouver plus facilement la raison de l'échec de
        la procédure automatique.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Input parameter(s)</title>
-->
      <title>Paramètres d'entrée</title>

<!--
      <para>The command-line arguments passed to the hook program,
        in order, are:</para>
-->
      <para>Les arguments de la ligne de commande passés à la
        procédure automatique sont, dans l'ordre&nbsp;:</para>

      <orderedlist>
        <listitem>
<!--
          <para>Repository path</para>
-->
          <para>chemin du dépôt&nbsp;;</para>
        </listitem>
        <listitem>
<!--
          <para>Authenticated username of the person who unlocked the
            paths</para>
-->
          <para>identifiant (authentifié) de l'utilisateur qui a
              effectué le déverrouillage&nbsp;;</para>
        </listitem>
      </orderedlist>

<!--
      <para>Additionally, the list of paths unlocked is passed to the
        hook program via standard input, one path per line.</para>
-->
      <para>En complément, la liste des chemins déverrouillés est
        fournie à la procédure automatique
        <foreignphrase>via</foreignphrase> l'entrée standard, un chemin
        par ligne.</para>

    </refsect1>

    <!-- =============================================================== -->
    <refsect1>
<!--
      <title>Common uses</title>
-->
      <title>Utilisations principales</title>
<!--
      <para>Unlock notification</para>
-->
      <para>Notification de déverrouillage.</para>
    </refsect1>

  </refentry>
</reference>

<!--
local variables:
sgml-parent-document: ("book.xml" "reference")
end:
-->
